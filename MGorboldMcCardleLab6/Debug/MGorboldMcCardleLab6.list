
MGorboldMcCardleLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c7c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001254  08007e2c  08007e2c  00008e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009080  08009080  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  08009080  08009080  0000a080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009088  08009088  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009088  08009088  0000a088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800908c  0800908c  0000a08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08009090  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b078  2**0
                  CONTENTS
 10 .bss          00025cf0  20000078  20000078  0000b078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025d68  20025d68  0000b078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001451e  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003474  00000000  00000000  0001f5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  00022a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc3  00000000  00000000  00023ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027592  00000000  00000000  00024e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e7d  00000000  00000000  0004c415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2de2  00000000  00000000  00066292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149074  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ca8  00000000  00000000  001490b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0014ed60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007e14 	.word	0x08007e14

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007e14 	.word	0x08007e14

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 ff38 	bl	80033f8 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 ff24 	bl	80013d4 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fee1 	bl	8001354 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f001 f83a 	bl	8001610 <LCD_Clear>
    Game_Init();
 800059c:	f000 f90e 	bl	80007bc <Game_Init>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005a0:	f001 faaf 	bl	8001b02 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a4:	4b02      	ldr	r3, [pc, #8]	@ (80005b0 <ApplicationInit+0x30>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000094 	.word	0x20000094

080005b4 <LCD_Touch_Polling_Demo>:
	visualDemo();
}

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_GREEN);
 80005b8:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80005bc:	2000      	movs	r0, #0
 80005be:	f001 f827 	bl	8001610 <LCD_Clear>
	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005c2:	480f      	ldr	r0, [pc, #60]	@ (8000600 <LCD_Touch_Polling_Demo+0x4c>)
 80005c4:	f001 faa8 	bl	8001b18 <returnTouchStateAndLocation>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10e      	bne.n	80005ec <LCD_Touch_Polling_Demo+0x38>
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <LCD_Touch_Polling_Demo+0x4c>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	4619      	mov	r1, r3
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <LCD_Touch_Polling_Demo+0x4c>)
 80005d6:	885b      	ldrh	r3, [r3, #2]
 80005d8:	461a      	mov	r2, r3
 80005da:	480a      	ldr	r0, [pc, #40]	@ (8000604 <LCD_Touch_Polling_Demo+0x50>)
 80005dc:	f006 fd4e 	bl	800707c <iprintf>
			LCD_Clear(0, LCD_COLOR_RED);
 80005e0:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80005e4:	2000      	movs	r0, #0
 80005e6:	f001 f813 	bl	8001610 <LCD_Clear>
 80005ea:	e7ea      	b.n	80005c2 <LCD_Touch_Polling_Demo+0xe>
		} else {
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 80005ec:	4806      	ldr	r0, [pc, #24]	@ (8000608 <LCD_Touch_Polling_Demo+0x54>)
 80005ee:	f006 fdad 	bl	800714c <puts>
			LCD_Clear(0, LCD_COLOR_GREEN);
 80005f2:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80005f6:	2000      	movs	r0, #0
 80005f8:	f001 f80a 	bl	8001610 <LCD_Clear>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005fc:	e7e1      	b.n	80005c2 <LCD_Touch_Polling_Demo+0xe>
 80005fe:	bf00      	nop
 8000600:	20000094 	.word	0x20000094
 8000604:	08007e2c 	.word	0x08007e2c
 8000608:	08007e40 	.word	0x08007e40

0800060c <EXTI0_IRQHandler>:
		}
	}
}
#endif // COMPILE_TOUCH_FUNCTIONS

void EXTI0_IRQHandler(){ // change interrupt type to rising
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	disableInterruptIRQ(EXTI0_IRQn);
 8000610:	2006      	movs	r0, #6
 8000612:	f000 fda4 	bl	800115e <disableInterruptIRQ>
	clearInterruptEXTI(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fdc4 	bl	80011a4 <clearInterruptEXTI>
	// User Button actions
	if(ConnectFour_DropPiece(Game.currentCol)){
 800061c:	4b51      	ldr	r3, [pc, #324]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 800061e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fb82 	bl	8000d2c <ConnectFour_DropPiece>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	f000 8092 	beq.w	8000754 <EXTI0_IRQHandler+0x148>

		ConnectFour_DrawBoard();
 8000630:	f000 f9ee 	bl	8000a10 <ConnectFour_DrawBoard>
		if(ConnectFour_CheckWin()){
 8000634:	f000 fc08 	bl	8000e48 <ConnectFour_CheckWin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d022      	beq.n	8000684 <EXTI0_IRQHandler+0x78>
			Game.winner = Game.currentPlayer;
 800063e:	4b49      	ldr	r3, [pc, #292]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000640:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8000644:	4b47      	ldr	r3, [pc, #284]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000646:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			if(Game.currentPlayer == PLAYER_ONE){
 800064a:	4b46      	ldr	r3, [pc, #280]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 800064c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000650:	2b01      	cmp	r3, #1
 8000652:	d108      	bne.n	8000666 <EXTI0_IRQHandler+0x5a>
				Game.YellowWins++;
 8000654:	4b43      	ldr	r3, [pc, #268]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000656:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800065a:	3301      	adds	r3, #1
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b41      	ldr	r3, [pc, #260]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000660:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8000664:	e007      	b.n	8000676 <EXTI0_IRQHandler+0x6a>
			}
			else{
				Game.RedWins++;
 8000666:	4b3f      	ldr	r3, [pc, #252]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000668:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b3c      	ldr	r3, [pc, #240]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000672:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			}
			Game.state = STATE_GAME_OVER;
 8000676:	4b3b      	ldr	r3, [pc, #236]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000678:	2202      	movs	r2, #2
 800067a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			ConnectFour_GameOver();
 800067e:	f000 fa19 	bl	8000ab4 <ConnectFour_GameOver>
 8000682:	e067      	b.n	8000754 <EXTI0_IRQHandler+0x148>
		}
		else if(ConnectFour_CheckDraw()){
 8000684:	f000 fd2e 	bl	80010e4 <ConnectFour_CheckDraw>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00a      	beq.n	80006a4 <EXTI0_IRQHandler+0x98>
			Game.isDraw = 1;
 800068e:	4b35      	ldr	r3, [pc, #212]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000690:	2201      	movs	r2, #1
 8000692:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
			Game.state = STATE_GAME_OVER;
 8000696:	4b33      	ldr	r3, [pc, #204]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000698:	2202      	movs	r2, #2
 800069a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			ConnectFour_GameOver();
 800069e:	f000 fa09 	bl	8000ab4 <ConnectFour_GameOver>
 80006a2:	e057      	b.n	8000754 <EXTI0_IRQHandler+0x148>
		}
		// change turns
		else{
			if(Game.currentPlayer == PLAYER_ONE){
 80006a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 80006a6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d104      	bne.n	80006b8 <EXTI0_IRQHandler+0xac>
				Game.currentPlayer = PLAYER_TWO;
 80006ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 80006b6:	e047      	b.n	8000748 <EXTI0_IRQHandler+0x13c>
			}
			else if(Game.currentPlayer == PLAYER_TWO){
 80006b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 80006ba:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80006be:	2b02      	cmp	r3, #2
 80006c0:	d104      	bne.n	80006cc <EXTI0_IRQHandler+0xc0>
				Game.currentPlayer = PLAYER_ONE;
 80006c2:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 80006ca:	e03d      	b.n	8000748 <EXTI0_IRQHandler+0x13c>
			}
			else if(Game.currentPlayer == COMPUTER_PLAYER && Game.gameMode == GAMEMODE_ONE_PLAYER){
 80006cc:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 80006ce:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d138      	bne.n	8000748 <EXTI0_IRQHandler+0x13c>
 80006d6:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 80006d8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d133      	bne.n	8000748 <EXTI0_IRQHandler+0x13c>
				HAL_Delay(500);
 80006e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006e4:	f002 ffe0 	bl	80036a8 <HAL_Delay>
				ConnectFour_ComputerMove();
 80006e8:	f000 fb50 	bl	8000d8c <ConnectFour_ComputerMove>
				ConnectFour_DrawBoard();
 80006ec:	f000 f990 	bl	8000a10 <ConnectFour_DrawBoard>

				if(ConnectFour_CheckWin()){
 80006f0:	f000 fbaa 	bl	8000e48 <ConnectFour_CheckWin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d012      	beq.n	8000720 <EXTI0_IRQHandler+0x114>
					Game.winner = COMPUTER_PLAYER;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 80006fc:	2202      	movs	r2, #2
 80006fe:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
					Game.RedWins++;
 8000702:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000704:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000708:	3301      	adds	r3, #1
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 800070e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
					Game.state = STATE_GAME_OVER;
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000714:	2202      	movs	r2, #2
 8000716:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					ConnectFour_GameOver();
 800071a:	f000 f9cb 	bl	8000ab4 <ConnectFour_GameOver>
 800071e:	e013      	b.n	8000748 <EXTI0_IRQHandler+0x13c>
				}
				else if(ConnectFour_CheckDraw()){
 8000720:	f000 fce0 	bl	80010e4 <ConnectFour_CheckDraw>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d00a      	beq.n	8000740 <EXTI0_IRQHandler+0x134>
					Game.isDraw = 1;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 800072c:	2201      	movs	r2, #1
 800072e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
					Game.state = STATE_GAME_OVER;
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000734:	2202      	movs	r2, #2
 8000736:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					ConnectFour_GameOver();
 800073a:	f000 f9bb 	bl	8000ab4 <ConnectFour_GameOver>
 800073e:	e003      	b.n	8000748 <EXTI0_IRQHandler+0x13c>
				}
				else{
					Game.currentPlayer = PLAYER_ONE;
 8000740:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000742:	2201      	movs	r2, #1
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				}
			}
			screen2();
 8000748:	f001 f964 	bl	8001a14 <screen2>
			ConnectFour_DrawPiece();
 800074c:	f000 f932 	bl	80009b4 <ConnectFour_DrawPiece>
			ConnectFour_DrawBoard();
 8000750:	f000 f95e 	bl	8000a10 <ConnectFour_DrawBoard>
			// check if game is over

		}
	}
	clearInterruptIRQ(EXTI0_IRQn);
 8000754:	2006      	movs	r0, #6
 8000756:	f000 fd13 	bl	8001180 <clearInterruptIRQ>
	enableInterruptIRQ(EXTI0_IRQn);
 800075a:	2006      	movs	r0, #6
 800075c:	f000 fcee 	bl	800113c <enableInterruptIRQ>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000009c 	.word	0x2000009c

08000768 <Button_Interrupts_Init>:
	else{
		return FALSE;
	}
}

void Button_Interrupts_Init(){
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOA_BUTTON;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <Button_Interrupts_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a0f      	ldr	r2, [pc, #60]	@ (80007b4 <Button_Interrupts_Init+0x4c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <Button_Interrupts_Init+0x4c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
	GPIOA_BUTTON.Pin = GPIO_PIN_0;
 800078a:	2301      	movs	r3, #1
 800078c:	607b      	str	r3, [r7, #4]
	GPIOA_BUTTON.Mode = GPIO_MODE_IT_RISING;
 800078e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000792:	60bb      	str	r3, [r7, #8]
	GPIOA_BUTTON.Speed = GPIO_SPEED_FREQ_HIGH; // choose speed high
 8000794:	2302      	movs	r3, #2
 8000796:	613b      	str	r3, [r7, #16]
	// GPIOA_BUTTON.OPType = GPIO_OPTYPE_PUSHPULL;
	GPIOA_BUTTON.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
	// GPIOA_BUTTON.Alternate = 0;
	HAL_GPIO_Init(GPIOA, &GPIOA_BUTTON);
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <Button_Interrupts_Init+0x50>)
 80007a2:	f003 f915 	bl	80039d0 <HAL_GPIO_Init>
	enableInterruptIRQ(EXTI0_IRQn);
 80007a6:	2006      	movs	r0, #6
 80007a8:	f000 fcc8 	bl	800113c <enableInterruptIRQ>
}
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000

080007bc <Game_Init>:

ConnectFourGame Game;
RNG_HandleTypeDef hrng;
static STMPE811_TouchData TouchScreen;

void Game_Init(void){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	TouchScreen.orientation = STMPE811_Orientation_Portrait_2;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <Game_Init+0x20>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	719a      	strb	r2, [r3, #6]
	ConnectFour_ResetGame();
 80007c6:	f000 f80d 	bl	80007e4 <ConnectFour_ResetGame>
	Game.state = STATE_MENU;
 80007ca:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <Game_Init+0x24>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	Button_Interrupts_Init();
 80007d2:	f7ff ffc9 	bl	8000768 <Button_Interrupts_Init>
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000e0 	.word	0x200000e0
 80007e0:	2000009c 	.word	0x2000009c

080007e4 <ConnectFour_ResetGame>:

void ConnectFour_ResetGame(void){
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
	for(int rows = 0; rows < BOARD_ROWS; rows++){
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	e015      	b.n	800081c <ConnectFour_ResetGame+0x38>
		for(int cols = 0; cols < BOARD_COLS; cols++){
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	e00c      	b.n	8000810 <ConnectFour_ResetGame+0x2c>
			Game.board[rows][cols] = EMPTY_CELL;
 80007f6:	4916      	ldr	r1, [pc, #88]	@ (8000850 <ConnectFour_ResetGame+0x6c>)
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4613      	mov	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	18ca      	adds	r2, r1, r3
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	4413      	add	r3, r2
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
		for(int cols = 0; cols < BOARD_COLS; cols++){
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	2b06      	cmp	r3, #6
 8000814:	ddef      	ble.n	80007f6 <ConnectFour_ResetGame+0x12>
	for(int rows = 0; rows < BOARD_ROWS; rows++){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3301      	adds	r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b05      	cmp	r3, #5
 8000820:	dde6      	ble.n	80007f0 <ConnectFour_ResetGame+0xc>
		}
	}

	Game.currentPlayer = PLAYER_ONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <ConnectFour_ResetGame+0x6c>)
 8000824:	2201      	movs	r2, #1
 8000826:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	Game.currentCol = 4;
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <ConnectFour_ResetGame+0x6c>)
 800082c:	2204      	movs	r2, #4
 800082e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	Game.winner = 0;
 8000832:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <ConnectFour_ResetGame+0x6c>)
 8000834:	2200      	movs	r2, #0
 8000836:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	Game.isDraw = 0;
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <ConnectFour_ResetGame+0x6c>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	2000009c 	.word	0x2000009c

08000854 <ConnectFour_GameLoop>:

void ConnectFour_GameLoop(void){
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	screen1();
 8000858:	f000 ffac 	bl	80017b4 <screen1>

	while(1){
		if(returnTouchStateAndLocation(&TouchScreen) == STMPE811_State_Pressed){
 800085c:	480a      	ldr	r0, [pc, #40]	@ (8000888 <ConnectFour_GameLoop+0x34>)
 800085e:	f001 f95b 	bl	8001b18 <returnTouchStateAndLocation>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10b      	bne.n	8000880 <ConnectFour_GameLoop+0x2c>
			ConnectFour_ProcessInput(&TouchScreen);
 8000868:	4807      	ldr	r0, [pc, #28]	@ (8000888 <ConnectFour_GameLoop+0x34>)
 800086a:	f000 f811 	bl	8000890 <ConnectFour_ProcessInput>
			printf("\nX: %03d\nY: %03d\n", TouchScreen.x, TouchScreen.y);
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <ConnectFour_GameLoop+0x34>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	4619      	mov	r1, r3
 8000874:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <ConnectFour_GameLoop+0x34>)
 8000876:	885b      	ldrh	r3, [r3, #2]
 8000878:	461a      	mov	r2, r3
 800087a:	4804      	ldr	r0, [pc, #16]	@ (800088c <ConnectFour_GameLoop+0x38>)
 800087c:	f006 fbfe 	bl	800707c <iprintf>
		}
		HAL_Delay(100);
 8000880:	2064      	movs	r0, #100	@ 0x64
 8000882:	f002 ff11 	bl	80036a8 <HAL_Delay>
		if(returnTouchStateAndLocation(&TouchScreen) == STMPE811_State_Pressed){
 8000886:	e7e9      	b.n	800085c <ConnectFour_GameLoop+0x8>
 8000888:	200000e0 	.word	0x200000e0
 800088c:	08007e50 	.word	0x08007e50

08000890 <ConnectFour_ProcessInput>:
	}
}

void ConnectFour_ProcessInput(STMPE811_TouchData *touchData){
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	uint16_t x = TouchScreen.x;
 8000898:	4b44      	ldr	r3, [pc, #272]	@ (80009ac <ConnectFour_ProcessInput+0x11c>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	81fb      	strh	r3, [r7, #14]
	uint16_t y = TouchScreen.y;
 800089e:	4b43      	ldr	r3, [pc, #268]	@ (80009ac <ConnectFour_ProcessInput+0x11c>)
 80008a0:	885b      	ldrh	r3, [r3, #2]
 80008a2:	81bb      	strh	r3, [r7, #12]

	switch(Game.state){
 80008a4:	4b42      	ldr	r3, [pc, #264]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 80008a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d060      	beq.n	8000970 <ConnectFour_ProcessInput+0xe0>
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	dc78      	bgt.n	80009a4 <ConnectFour_ProcessInput+0x114>
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <ConnectFour_ProcessInput+0x2c>
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d032      	beq.n	8000920 <ConnectFour_ProcessInput+0x90>
			screen1();
			Game.state = STATE_MENU;
		}
		break;
	}
}
 80008ba:	e073      	b.n	80009a4 <ConnectFour_ProcessInput+0x114>
		if(x >= 45 && x <= 195 && y >= 140 && y <= 175){
 80008bc:	89fb      	ldrh	r3, [r7, #14]
 80008be:	2b2c      	cmp	r3, #44	@ 0x2c
 80008c0:	d915      	bls.n	80008ee <ConnectFour_ProcessInput+0x5e>
 80008c2:	89fb      	ldrh	r3, [r7, #14]
 80008c4:	2bc3      	cmp	r3, #195	@ 0xc3
 80008c6:	d812      	bhi.n	80008ee <ConnectFour_ProcessInput+0x5e>
 80008c8:	89bb      	ldrh	r3, [r7, #12]
 80008ca:	2b8b      	cmp	r3, #139	@ 0x8b
 80008cc:	d90f      	bls.n	80008ee <ConnectFour_ProcessInput+0x5e>
 80008ce:	89bb      	ldrh	r3, [r7, #12]
 80008d0:	2baf      	cmp	r3, #175	@ 0xaf
 80008d2:	d80c      	bhi.n	80008ee <ConnectFour_ProcessInput+0x5e>
			Game.gameMode = GAMEMODE_ONE_PLAYER;
 80008d4:	4b36      	ldr	r3, [pc, #216]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			Game.state = STATE_GAME;
 80008dc:	4b34      	ldr	r3, [pc, #208]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 80008de:	2201      	movs	r2, #1
 80008e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			screen2();
 80008e4:	f001 f896 	bl	8001a14 <screen2>
			ConnectFour_DrawPiece();
 80008e8:	f000 f864 	bl	80009b4 <ConnectFour_DrawPiece>
		break;
 80008ec:	e057      	b.n	800099e <ConnectFour_ProcessInput+0x10e>
		else if(x >= 45 && x <= 195 && y >= 70 && y <= 105){
 80008ee:	89fb      	ldrh	r3, [r7, #14]
 80008f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80008f2:	d954      	bls.n	800099e <ConnectFour_ProcessInput+0x10e>
 80008f4:	89fb      	ldrh	r3, [r7, #14]
 80008f6:	2bc3      	cmp	r3, #195	@ 0xc3
 80008f8:	d851      	bhi.n	800099e <ConnectFour_ProcessInput+0x10e>
 80008fa:	89bb      	ldrh	r3, [r7, #12]
 80008fc:	2b45      	cmp	r3, #69	@ 0x45
 80008fe:	d94e      	bls.n	800099e <ConnectFour_ProcessInput+0x10e>
 8000900:	89bb      	ldrh	r3, [r7, #12]
 8000902:	2b69      	cmp	r3, #105	@ 0x69
 8000904:	d84b      	bhi.n	800099e <ConnectFour_ProcessInput+0x10e>
			Game.gameMode = GAMEMODE_TWO_PLAYER;
 8000906:	4b2a      	ldr	r3, [pc, #168]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 8000908:	2202      	movs	r2, #2
 800090a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			Game.state = STATE_GAME;
 800090e:	4b28      	ldr	r3, [pc, #160]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 8000910:	2201      	movs	r2, #1
 8000912:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			screen2();
 8000916:	f001 f87d 	bl	8001a14 <screen2>
			ConnectFour_DrawPiece();
 800091a:	f000 f84b 	bl	80009b4 <ConnectFour_DrawPiece>
		break;
 800091e:	e03e      	b.n	800099e <ConnectFour_ProcessInput+0x10e>
		if (x < BOARD_MARGIN_X / 2) {
 8000920:	89fb      	ldrh	r3, [r7, #14]
 8000922:	2b77      	cmp	r3, #119	@ 0x77
 8000924:	d80d      	bhi.n	8000942 <ConnectFour_ProcessInput+0xb2>
			if (Game.currentCol > 0) {
 8000926:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 8000928:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800092c:	2b00      	cmp	r3, #0
 800092e:	d018      	beq.n	8000962 <ConnectFour_ProcessInput+0xd2>
				Game.currentCol--;
 8000930:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 8000932:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000936:	3b01      	subs	r3, #1
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 800093c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8000940:	e00f      	b.n	8000962 <ConnectFour_ProcessInput+0xd2>
		else if (x >= BOARD_MARGIN_X / 2) {
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	2b77      	cmp	r3, #119	@ 0x77
 8000946:	d90c      	bls.n	8000962 <ConnectFour_ProcessInput+0xd2>
			if (Game.currentCol < BOARD_COLS - 1) {
 8000948:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 800094a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800094e:	2b05      	cmp	r3, #5
 8000950:	d807      	bhi.n	8000962 <ConnectFour_ProcessInput+0xd2>
				Game.currentCol++;
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 8000954:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000958:	3301      	adds	r3, #1
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 800095e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		screen2();
 8000962:	f001 f857 	bl	8001a14 <screen2>
		ConnectFour_DrawPiece();
 8000966:	f000 f825 	bl	80009b4 <ConnectFour_DrawPiece>
		ConnectFour_DrawBoard();
 800096a:	f000 f851 	bl	8000a10 <ConnectFour_DrawBoard>
		break;
 800096e:	e019      	b.n	80009a4 <ConnectFour_ProcessInput+0x114>
		ConnectFour_GameOver();
 8000970:	f000 f8a0 	bl	8000ab4 <ConnectFour_GameOver>
		if(x >= 45 && x <= 195 && y >= 210 && y <= 245){
 8000974:	89fb      	ldrh	r3, [r7, #14]
 8000976:	2b2c      	cmp	r3, #44	@ 0x2c
 8000978:	d913      	bls.n	80009a2 <ConnectFour_ProcessInput+0x112>
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	2bc3      	cmp	r3, #195	@ 0xc3
 800097e:	d810      	bhi.n	80009a2 <ConnectFour_ProcessInput+0x112>
 8000980:	89bb      	ldrh	r3, [r7, #12]
 8000982:	2bd1      	cmp	r3, #209	@ 0xd1
 8000984:	d90d      	bls.n	80009a2 <ConnectFour_ProcessInput+0x112>
 8000986:	89bb      	ldrh	r3, [r7, #12]
 8000988:	2bf5      	cmp	r3, #245	@ 0xf5
 800098a:	d80a      	bhi.n	80009a2 <ConnectFour_ProcessInput+0x112>
			ConnectFour_ResetGame();
 800098c:	f7ff ff2a 	bl	80007e4 <ConnectFour_ResetGame>
			screen1();
 8000990:	f000 ff10 	bl	80017b4 <screen1>
			Game.state = STATE_MENU;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		break;
 800099c:	e001      	b.n	80009a2 <ConnectFour_ProcessInput+0x112>
		break;
 800099e:	bf00      	nop
 80009a0:	e000      	b.n	80009a4 <ConnectFour_ProcessInput+0x114>
		break;
 80009a2:	bf00      	nop
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000e0 	.word	0x200000e0
 80009b0:	2000009c 	.word	0x2000009c

080009b4 <ConnectFour_DrawPiece>:

void ConnectFour_DrawPiece(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
	int x = Game.currentCol * CELL_SIZE + CELL_SIZE / 2  + 1;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <ConnectFour_DrawPiece+0x58>)
 80009bc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80009c0:	461a      	mov	r2, r3
 80009c2:	4613      	mov	r3, r2
 80009c4:	011b      	lsls	r3, r3, #4
 80009c6:	4413      	add	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	3312      	adds	r3, #18
 80009cc:	607b      	str	r3, [r7, #4]
	int y = 25;
 80009ce:	2319      	movs	r3, #25
 80009d0:	603b      	str	r3, [r7, #0]
	if (Game.currentPlayer == PLAYER_ONE) {
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <ConnectFour_DrawPiece+0x58>)
 80009d4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d109      	bne.n	80009f0 <ConnectFour_DrawPiece+0x3c>
		LCD_Draw_Circle_Fill(x, y, PIECE_RADIUS, LCD_COLOR_YELLOW);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	b298      	uxth	r0, r3
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b299      	uxth	r1, r3
 80009e4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80009e8:	220f      	movs	r2, #15
 80009ea:	f000 fd6f 	bl	80014cc <LCD_Draw_Circle_Fill>
	} else {
		LCD_Draw_Circle_Fill(x, y, PIECE_RADIUS, LCD_COLOR_RED);
	}
}
 80009ee:	e008      	b.n	8000a02 <ConnectFour_DrawPiece+0x4e>
		LCD_Draw_Circle_Fill(x, y, PIECE_RADIUS, LCD_COLOR_RED);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	b298      	uxth	r0, r3
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b299      	uxth	r1, r3
 80009f8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80009fc:	220f      	movs	r2, #15
 80009fe:	f000 fd65 	bl	80014cc <LCD_Draw_Circle_Fill>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000009c 	.word	0x2000009c

08000a10 <ConnectFour_DrawBoard>:

void ConnectFour_DrawBoard(void){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
	for (int cols = 0; cols < BOARD_COLS; cols++){
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	e041      	b.n	8000aa0 <ConnectFour_DrawBoard+0x90>
		for(int rows = 0; rows < BOARD_ROWS; rows++){
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	e038      	b.n	8000a94 <ConnectFour_DrawBoard+0x84>
			int x = cols * CELL_SIZE + CELL_SIZE / 2 + 1;
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	4613      	mov	r3, r2
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	4413      	add	r3, r2
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	3312      	adds	r3, #18
 8000a2e:	607b      	str	r3, [r7, #4]
			int y = rows * CELL_SIZE + CELL_SIZE / 2 + 50;
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	4613      	mov	r3, r2
 8000a34:	011b      	lsls	r3, r3, #4
 8000a36:	4413      	add	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	3343      	adds	r3, #67	@ 0x43
 8000a3c:	603b      	str	r3, [r7, #0]
			if(Game.board[rows][cols] == PLAYER_ONE){
 8000a3e:	491c      	ldr	r1, [pc, #112]	@ (8000ab0 <ConnectFour_DrawBoard+0xa0>)
 8000a40:	68ba      	ldr	r2, [r7, #8]
 8000a42:	4613      	mov	r3, r2
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	1a9b      	subs	r3, r3, r2
 8000a48:	18ca      	adds	r2, r1, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d108      	bne.n	8000a66 <ConnectFour_DrawBoard+0x56>
				LCD_Draw_Circle_Fill(x,y, PIECE_RADIUS - 2, LCD_COLOR_YELLOW);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	b298      	uxth	r0, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b299      	uxth	r1, r3
 8000a5c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000a60:	220d      	movs	r2, #13
 8000a62:	f000 fd33 	bl	80014cc <LCD_Draw_Circle_Fill>
			}
			if(Game.board[rows][cols] == PLAYER_TWO){
 8000a66:	4912      	ldr	r1, [pc, #72]	@ (8000ab0 <ConnectFour_DrawBoard+0xa0>)
 8000a68:	68ba      	ldr	r2, [r7, #8]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	1a9b      	subs	r3, r3, r2
 8000a70:	18ca      	adds	r2, r1, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4413      	add	r3, r2
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d108      	bne.n	8000a8e <ConnectFour_DrawBoard+0x7e>
				LCD_Draw_Circle_Fill(x,y, PIECE_RADIUS - 2, LCD_COLOR_RED);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	b298      	uxth	r0, r3
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b299      	uxth	r1, r3
 8000a84:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a88:	220d      	movs	r2, #13
 8000a8a:	f000 fd1f 	bl	80014cc <LCD_Draw_Circle_Fill>
		for(int rows = 0; rows < BOARD_ROWS; rows++){
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	3301      	adds	r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	2b05      	cmp	r3, #5
 8000a98:	ddc3      	ble.n	8000a22 <ConnectFour_DrawBoard+0x12>
	for (int cols = 0; cols < BOARD_COLS; cols++){
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	ddba      	ble.n	8000a1c <ConnectFour_DrawBoard+0xc>
			}
		}
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000009c 	.word	0x2000009c

08000ab4 <ConnectFour_GameOver>:

void ConnectFour_GameOver(void){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLACK);
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 fda7 	bl	8001610 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ac2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000ac6:	f000 fdc5 	bl	8001654 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000aca:	4896      	ldr	r0, [pc, #600]	@ (8000d24 <ConnectFour_GameOver+0x270>)
 8000acc:	f000 fdd2 	bl	8001674 <LCD_SetFont>
	char Yellow = Game.YellowWins;
 8000ad0:	4b95      	ldr	r3, [pc, #596]	@ (8000d28 <ConnectFour_GameOver+0x274>)
 8000ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000ad6:	71fb      	strb	r3, [r7, #7]
	char Red = Game.RedWins;
 8000ad8:	4b93      	ldr	r3, [pc, #588]	@ (8000d28 <ConnectFour_GameOver+0x274>)
 8000ada:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000ade:	71bb      	strb	r3, [r7, #6]

	if(Game.isDraw){
 8000ae0:	4b91      	ldr	r3, [pc, #580]	@ (8000d28 <ConnectFour_GameOver+0x274>)
 8000ae2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d019      	beq.n	8000b1e <ConnectFour_GameOver+0x6a>
		LCD_DisplayChar(90, 20, 'D');
 8000aea:	2244      	movs	r2, #68	@ 0x44
 8000aec:	2114      	movs	r1, #20
 8000aee:	205a      	movs	r0, #90	@ 0x5a
 8000af0:	f000 fe3e 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(110, 20, 'R');
 8000af4:	2252      	movs	r2, #82	@ 0x52
 8000af6:	2114      	movs	r1, #20
 8000af8:	206e      	movs	r0, #110	@ 0x6e
 8000afa:	f000 fe39 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(130, 20, 'A');
 8000afe:	2241      	movs	r2, #65	@ 0x41
 8000b00:	2114      	movs	r1, #20
 8000b02:	2082      	movs	r0, #130	@ 0x82
 8000b04:	f000 fe34 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(150, 20, 'W');
 8000b08:	2257      	movs	r2, #87	@ 0x57
 8000b0a:	2114      	movs	r1, #20
 8000b0c:	2096      	movs	r0, #150	@ 0x96
 8000b0e:	f000 fe2f 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(170,20,'!');
 8000b12:	2221      	movs	r2, #33	@ 0x21
 8000b14:	2114      	movs	r1, #20
 8000b16:	20aa      	movs	r0, #170	@ 0xaa
 8000b18:	f000 fe2a 	bl	8001770 <LCD_DisplayChar>
 8000b1c:	e04b      	b.n	8000bb6 <ConnectFour_GameOver+0x102>

	} else if(Game. winner == PLAYER_ONE){
 8000b1e:	4b82      	ldr	r3, [pc, #520]	@ (8000d28 <ConnectFour_GameOver+0x274>)
 8000b20:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d123      	bne.n	8000b70 <ConnectFour_GameOver+0xbc>
		LCD_DisplayChar(30, 20, 'P');
 8000b28:	2250      	movs	r2, #80	@ 0x50
 8000b2a:	2114      	movs	r1, #20
 8000b2c:	201e      	movs	r0, #30
 8000b2e:	f000 fe1f 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(50, 20, '1');
 8000b32:	2231      	movs	r2, #49	@ 0x31
 8000b34:	2114      	movs	r1, #20
 8000b36:	2032      	movs	r0, #50	@ 0x32
 8000b38:	f000 fe1a 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(90, 20, 'W');
 8000b3c:	2257      	movs	r2, #87	@ 0x57
 8000b3e:	2114      	movs	r1, #20
 8000b40:	205a      	movs	r0, #90	@ 0x5a
 8000b42:	f000 fe15 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(110, 20, 'I');
 8000b46:	2249      	movs	r2, #73	@ 0x49
 8000b48:	2114      	movs	r1, #20
 8000b4a:	206e      	movs	r0, #110	@ 0x6e
 8000b4c:	f000 fe10 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(130, 20,'N');
 8000b50:	224e      	movs	r2, #78	@ 0x4e
 8000b52:	2114      	movs	r1, #20
 8000b54:	2082      	movs	r0, #130	@ 0x82
 8000b56:	f000 fe0b 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(150, 20,'S');
 8000b5a:	2253      	movs	r2, #83	@ 0x53
 8000b5c:	2114      	movs	r1, #20
 8000b5e:	2096      	movs	r0, #150	@ 0x96
 8000b60:	f000 fe06 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(170, 20,'!');
 8000b64:	2221      	movs	r2, #33	@ 0x21
 8000b66:	2114      	movs	r1, #20
 8000b68:	20aa      	movs	r0, #170	@ 0xaa
 8000b6a:	f000 fe01 	bl	8001770 <LCD_DisplayChar>
 8000b6e:	e022      	b.n	8000bb6 <ConnectFour_GameOver+0x102>
	} else{
		LCD_DisplayChar(30, 20, 'P');
 8000b70:	2250      	movs	r2, #80	@ 0x50
 8000b72:	2114      	movs	r1, #20
 8000b74:	201e      	movs	r0, #30
 8000b76:	f000 fdfb 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(50, 20, '2');
 8000b7a:	2232      	movs	r2, #50	@ 0x32
 8000b7c:	2114      	movs	r1, #20
 8000b7e:	2032      	movs	r0, #50	@ 0x32
 8000b80:	f000 fdf6 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(90, 20, 'W');
 8000b84:	2257      	movs	r2, #87	@ 0x57
 8000b86:	2114      	movs	r1, #20
 8000b88:	205a      	movs	r0, #90	@ 0x5a
 8000b8a:	f000 fdf1 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(110, 20, 'I');
 8000b8e:	2249      	movs	r2, #73	@ 0x49
 8000b90:	2114      	movs	r1, #20
 8000b92:	206e      	movs	r0, #110	@ 0x6e
 8000b94:	f000 fdec 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(130, 20,'N');
 8000b98:	224e      	movs	r2, #78	@ 0x4e
 8000b9a:	2114      	movs	r1, #20
 8000b9c:	2082      	movs	r0, #130	@ 0x82
 8000b9e:	f000 fde7 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(150, 20,'S');
 8000ba2:	2253      	movs	r2, #83	@ 0x53
 8000ba4:	2114      	movs	r1, #20
 8000ba6:	2096      	movs	r0, #150	@ 0x96
 8000ba8:	f000 fde2 	bl	8001770 <LCD_DisplayChar>
		LCD_DisplayChar(170, 20,'!');
 8000bac:	2221      	movs	r2, #33	@ 0x21
 8000bae:	2114      	movs	r1, #20
 8000bb0:	20aa      	movs	r0, #170	@ 0xaa
 8000bb2:	f000 fddd 	bl	8001770 <LCD_DisplayChar>
	}
	LCD_Draw_Vertical_Line(45,75,35,LCD_COLOR_WHITE);
 8000bb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bba:	2223      	movs	r2, #35	@ 0x23
 8000bbc:	214b      	movs	r1, #75	@ 0x4b
 8000bbe:	202d      	movs	r0, #45	@ 0x2d
 8000bc0:	f000 fcd7 	bl	8001572 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(195,75,35,LCD_COLOR_WHITE);
 8000bc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bc8:	2223      	movs	r2, #35	@ 0x23
 8000bca:	214b      	movs	r1, #75	@ 0x4b
 8000bcc:	20c3      	movs	r0, #195	@ 0xc3
 8000bce:	f000 fcd0 	bl	8001572 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(45,75,150,LCD_COLOR_WHITE);
 8000bd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bd6:	2296      	movs	r2, #150	@ 0x96
 8000bd8:	214b      	movs	r1, #75	@ 0x4b
 8000bda:	202d      	movs	r0, #45	@ 0x2d
 8000bdc:	f000 fcf0 	bl	80015c0 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(45,110,150,LCD_COLOR_WHITE);
 8000be0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000be4:	2296      	movs	r2, #150	@ 0x96
 8000be6:	216e      	movs	r1, #110	@ 0x6e
 8000be8:	202d      	movs	r0, #45	@ 0x2d
 8000bea:	f000 fce9 	bl	80015c0 <LCD_Draw_Horizontal_Line>
	LCD_DisplayChar(50,80,'R');
 8000bee:	2252      	movs	r2, #82	@ 0x52
 8000bf0:	2150      	movs	r1, #80	@ 0x50
 8000bf2:	2032      	movs	r0, #50	@ 0x32
 8000bf4:	f000 fdbc 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(70,80,'E');
 8000bf8:	2245      	movs	r2, #69	@ 0x45
 8000bfa:	2150      	movs	r1, #80	@ 0x50
 8000bfc:	2046      	movs	r0, #70	@ 0x46
 8000bfe:	f000 fdb7 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(90,80,'S');
 8000c02:	2253      	movs	r2, #83	@ 0x53
 8000c04:	2150      	movs	r1, #80	@ 0x50
 8000c06:	205a      	movs	r0, #90	@ 0x5a
 8000c08:	f000 fdb2 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(110,80,'T');
 8000c0c:	2254      	movs	r2, #84	@ 0x54
 8000c0e:	2150      	movs	r1, #80	@ 0x50
 8000c10:	206e      	movs	r0, #110	@ 0x6e
 8000c12:	f000 fdad 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(130,80,'A');
 8000c16:	2241      	movs	r2, #65	@ 0x41
 8000c18:	2150      	movs	r1, #80	@ 0x50
 8000c1a:	2082      	movs	r0, #130	@ 0x82
 8000c1c:	f000 fda8 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(150,80,'R');
 8000c20:	2252      	movs	r2, #82	@ 0x52
 8000c22:	2150      	movs	r1, #80	@ 0x50
 8000c24:	2096      	movs	r0, #150	@ 0x96
 8000c26:	f000 fda3 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(170,80,'T');
 8000c2a:	2254      	movs	r2, #84	@ 0x54
 8000c2c:	2150      	movs	r1, #80	@ 0x50
 8000c2e:	20aa      	movs	r0, #170	@ 0xaa
 8000c30:	f000 fd9e 	bl	8001770 <LCD_DisplayChar>

	LCD_DisplayChar(40,250,'T');
 8000c34:	2254      	movs	r2, #84	@ 0x54
 8000c36:	21fa      	movs	r1, #250	@ 0xfa
 8000c38:	2028      	movs	r0, #40	@ 0x28
 8000c3a:	f000 fd99 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(60,250,'I');
 8000c3e:	2249      	movs	r2, #73	@ 0x49
 8000c40:	21fa      	movs	r1, #250	@ 0xfa
 8000c42:	203c      	movs	r0, #60	@ 0x3c
 8000c44:	f000 fd94 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(80,250,'M');
 8000c48:	224d      	movs	r2, #77	@ 0x4d
 8000c4a:	21fa      	movs	r1, #250	@ 0xfa
 8000c4c:	2050      	movs	r0, #80	@ 0x50
 8000c4e:	f000 fd8f 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(110,250,'E');
 8000c52:	2245      	movs	r2, #69	@ 0x45
 8000c54:	21fa      	movs	r1, #250	@ 0xfa
 8000c56:	206e      	movs	r0, #110	@ 0x6e
 8000c58:	f000 fd8a 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(170,200,'0'); // need to figure out how to make timer
 8000c5c:	2230      	movs	r2, #48	@ 0x30
 8000c5e:	21c8      	movs	r1, #200	@ 0xc8
 8000c60:	20aa      	movs	r0, #170	@ 0xaa
 8000c62:	f000 fd85 	bl	8001770 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000c66:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8000c6a:	f000 fcf3 	bl	8001654 <LCD_SetTextColor>
	LCD_DisplayChar(40,150,'Y');
 8000c6e:	2259      	movs	r2, #89	@ 0x59
 8000c70:	2196      	movs	r1, #150	@ 0x96
 8000c72:	2028      	movs	r0, #40	@ 0x28
 8000c74:	f000 fd7c 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(60,150,'E');
 8000c78:	2245      	movs	r2, #69	@ 0x45
 8000c7a:	2196      	movs	r1, #150	@ 0x96
 8000c7c:	203c      	movs	r0, #60	@ 0x3c
 8000c7e:	f000 fd77 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(80,150,'L');
 8000c82:	224c      	movs	r2, #76	@ 0x4c
 8000c84:	2196      	movs	r1, #150	@ 0x96
 8000c86:	2050      	movs	r0, #80	@ 0x50
 8000c88:	f000 fd72 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(110,150,'W');
 8000c8c:	2257      	movs	r2, #87	@ 0x57
 8000c8e:	2196      	movs	r1, #150	@ 0x96
 8000c90:	206e      	movs	r0, #110	@ 0x6e
 8000c92:	f000 fd6d 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(130,150,'I');
 8000c96:	2249      	movs	r2, #73	@ 0x49
 8000c98:	2196      	movs	r1, #150	@ 0x96
 8000c9a:	2082      	movs	r0, #130	@ 0x82
 8000c9c:	f000 fd68 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(150,150,'N');
 8000ca0:	224e      	movs	r2, #78	@ 0x4e
 8000ca2:	2196      	movs	r1, #150	@ 0x96
 8000ca4:	2096      	movs	r0, #150	@ 0x96
 8000ca6:	f000 fd63 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(170,150,'S');
 8000caa:	2253      	movs	r2, #83	@ 0x53
 8000cac:	2196      	movs	r1, #150	@ 0x96
 8000cae:	20aa      	movs	r0, #170	@ 0xaa
 8000cb0:	f000 fd5e 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(170,150,Yellow);
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	2196      	movs	r1, #150	@ 0x96
 8000cba:	20aa      	movs	r0, #170	@ 0xaa
 8000cbc:	f000 fd58 	bl	8001770 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_RED);
 8000cc0:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000cc4:	f000 fcc6 	bl	8001654 <LCD_SetTextColor>
	LCD_DisplayChar(40,200,'R');
 8000cc8:	2252      	movs	r2, #82	@ 0x52
 8000cca:	21c8      	movs	r1, #200	@ 0xc8
 8000ccc:	2028      	movs	r0, #40	@ 0x28
 8000cce:	f000 fd4f 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(60,200,'E');
 8000cd2:	2245      	movs	r2, #69	@ 0x45
 8000cd4:	21c8      	movs	r1, #200	@ 0xc8
 8000cd6:	203c      	movs	r0, #60	@ 0x3c
 8000cd8:	f000 fd4a 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(80,200,'D');
 8000cdc:	2244      	movs	r2, #68	@ 0x44
 8000cde:	21c8      	movs	r1, #200	@ 0xc8
 8000ce0:	2050      	movs	r0, #80	@ 0x50
 8000ce2:	f000 fd45 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(110,200,'W');
 8000ce6:	2257      	movs	r2, #87	@ 0x57
 8000ce8:	21c8      	movs	r1, #200	@ 0xc8
 8000cea:	206e      	movs	r0, #110	@ 0x6e
 8000cec:	f000 fd40 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(130,200,'I');
 8000cf0:	2249      	movs	r2, #73	@ 0x49
 8000cf2:	21c8      	movs	r1, #200	@ 0xc8
 8000cf4:	2082      	movs	r0, #130	@ 0x82
 8000cf6:	f000 fd3b 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(150,200,'N');
 8000cfa:	224e      	movs	r2, #78	@ 0x4e
 8000cfc:	21c8      	movs	r1, #200	@ 0xc8
 8000cfe:	2096      	movs	r0, #150	@ 0x96
 8000d00:	f000 fd36 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(170,200,'S');
 8000d04:	2253      	movs	r2, #83	@ 0x53
 8000d06:	21c8      	movs	r1, #200	@ 0xc8
 8000d08:	20aa      	movs	r0, #170	@ 0xaa
 8000d0a:	f000 fd31 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(170,200,Red);
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	461a      	mov	r2, r3
 8000d12:	21c8      	movs	r1, #200	@ 0xc8
 8000d14:	20aa      	movs	r0, #170	@ 0xaa
 8000d16:	f000 fd2b 	bl	8001770 <LCD_DisplayChar>


}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000004 	.word	0x20000004
 8000d28:	2000009c 	.word	0x2000009c

08000d2c <ConnectFour_DropPiece>:


uint8_t ConnectFour_DropPiece(uint8_t col){
 8000d2c:	b490      	push	{r4, r7}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	for (int rows = BOARD_ROWS - 1; rows >= 0; rows--) {
 8000d36:	2305      	movs	r3, #5
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	e01c      	b.n	8000d76 <ConnectFour_DropPiece+0x4a>
		if (Game.board[rows][col] == EMPTY_CELL) {
 8000d3c:	79f9      	ldrb	r1, [r7, #7]
 8000d3e:	4812      	ldr	r0, [pc, #72]	@ (8000d88 <ConnectFour_DropPiece+0x5c>)
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4613      	mov	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	4403      	add	r3, r0
 8000d4a:	440b      	add	r3, r1
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10e      	bne.n	8000d70 <ConnectFour_DropPiece+0x44>
			Game.board[rows][col] = Game.currentPlayer;
 8000d52:	79f9      	ldrb	r1, [r7, #7]
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <ConnectFour_DropPiece+0x5c>)
 8000d56:	f893 402a 	ldrb.w	r4, [r3, #42]	@ 0x2a
 8000d5a:	480b      	ldr	r0, [pc, #44]	@ (8000d88 <ConnectFour_DropPiece+0x5c>)
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	1a9b      	subs	r3, r3, r2
 8000d64:	4403      	add	r3, r0
 8000d66:	440b      	add	r3, r1
 8000d68:	4622      	mov	r2, r4
 8000d6a:	701a      	strb	r2, [r3, #0]
			return 1;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e006      	b.n	8000d7e <ConnectFour_DropPiece+0x52>
	for (int rows = BOARD_ROWS - 1; rows >= 0; rows--) {
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	dadf      	bge.n	8000d3c <ConnectFour_DropPiece+0x10>
		}
	}
	return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc90      	pop	{r4, r7}
 8000d86:	4770      	bx	lr
 8000d88:	2000009c 	.word	0x2000009c

08000d8c <ConnectFour_ComputerMove>:

void ConnectFour_ComputerMove(void){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
	uint32_t random;
	uint8_t cols;
	uint8_t valid = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	71bb      	strb	r3, [r7, #6]
	if(HAL_RNG_GenerateRandomNumber(&hrng, &random) == HAL_OK){
 8000d96:	463b      	mov	r3, r7
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4828      	ldr	r0, [pc, #160]	@ (8000e3c <ConnectFour_ComputerMove+0xb0>)
 8000d9c:	f005 fa9e 	bl	80062dc <HAL_RNG_GenerateRandomNumber>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d129      	bne.n	8000dfa <ConnectFour_ComputerMove+0x6e>
		cols = random % BOARD_COLS;
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	4b25      	ldr	r3, [pc, #148]	@ (8000e40 <ConnectFour_ComputerMove+0xb4>)
 8000daa:	fba3 1302 	umull	r1, r3, r3, r2
 8000dae:	1ad1      	subs	r1, r2, r3
 8000db0:	0849      	lsrs	r1, r1, #1
 8000db2:	440b      	add	r3, r1
 8000db4:	0899      	lsrs	r1, r3, #2
 8000db6:	460b      	mov	r3, r1
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	1a5b      	subs	r3, r3, r1
 8000dbc:	1ad1      	subs	r1, r2, r3
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	71fb      	strb	r3, [r7, #7]
		valid = ConnectFour_DropPiece(cols);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ffb1 	bl	8000d2c <ConnectFour_DropPiece>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71bb      	strb	r3, [r7, #6]
		if(!valid){
 8000dce:	79bb      	ldrb	r3, [r7, #6]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d128      	bne.n	8000e26 <ConnectFour_ComputerMove+0x9a>
			for(cols = 0; cols < BOARD_COLS; cols++){
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	e00b      	b.n	8000df2 <ConnectFour_ComputerMove+0x66>
				valid = ConnectFour_DropPiece(cols);
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ffa5 	bl	8000d2c <ConnectFour_DropPiece>
 8000de2:	4603      	mov	r3, r0
 8000de4:	71bb      	strb	r3, [r7, #6]
				if(valid){
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d119      	bne.n	8000e20 <ConnectFour_ComputerMove+0x94>
			for(cols = 0; cols < BOARD_COLS; cols++){
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	3301      	adds	r3, #1
 8000df0:	71fb      	strb	r3, [r7, #7]
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	2b06      	cmp	r3, #6
 8000df6:	d9f0      	bls.n	8000dda <ConnectFour_ComputerMove+0x4e>
 8000df8:	e015      	b.n	8000e26 <ConnectFour_ComputerMove+0x9a>
				}
			}
		}
	}
	else{
		for(cols = 0; cols < BOARD_COLS; cols++){
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	e00b      	b.n	8000e18 <ConnectFour_ComputerMove+0x8c>
			valid = ConnectFour_DropPiece(cols);
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff92 	bl	8000d2c <ConnectFour_DropPiece>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71bb      	strb	r3, [r7, #6]
			if(valid){
 8000e0c:	79bb      	ldrb	r3, [r7, #6]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d108      	bne.n	8000e24 <ConnectFour_ComputerMove+0x98>
		for(cols = 0; cols < BOARD_COLS; cols++){
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	3301      	adds	r3, #1
 8000e16:	71fb      	strb	r3, [r7, #7]
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d9f0      	bls.n	8000e00 <ConnectFour_ComputerMove+0x74>
 8000e1e:	e002      	b.n	8000e26 <ConnectFour_ComputerMove+0x9a>
					break;
 8000e20:	bf00      	nop
 8000e22:	e000      	b.n	8000e26 <ConnectFour_ComputerMove+0x9a>
				break;
 8000e24:	bf00      	nop
			}
		}
	}
	if(valid){
 8000e26:	79bb      	ldrb	r3, [r7, #6]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <ConnectFour_ComputerMove+0xa8>
		Game.currentCol = cols;
 8000e2c:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <ConnectFour_ComputerMove+0xb8>)
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	}
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200000d0 	.word	0x200000d0
 8000e40:	24924925 	.word	0x24924925
 8000e44:	2000009c 	.word	0x2000009c

08000e48 <ConnectFour_CheckWin>:

uint8_t ConnectFour_CheckWin(void){
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	@ 0x24
 8000e4c:	af00      	add	r7, sp, #0
	// horizontal
	for(int rows = 0; rows < BOARD_ROWS; rows++){
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	e048      	b.n	8000ee6 <ConnectFour_CheckWin+0x9e>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 8000e54:	2300      	movs	r3, #0
 8000e56:	61bb      	str	r3, [r7, #24]
 8000e58:	e03f      	b.n	8000eda <ConnectFour_CheckWin+0x92>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows][cols+1] == Game.currentPlayer && Game.board[rows][cols+2] == Game.currentPlayer && Game.board[rows][cols+3] == Game.currentPlayer){
 8000e5a:	49a1      	ldr	r1, [pc, #644]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000e5c:	69fa      	ldr	r2, [r7, #28]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	18ca      	adds	r2, r1, r3
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4413      	add	r3, r2
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	4b9c      	ldr	r3, [pc, #624]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000e6e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d12e      	bne.n	8000ed4 <ConnectFour_CheckWin+0x8c>
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	1c59      	adds	r1, r3, #1
 8000e7a:	4899      	ldr	r0, [pc, #612]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000e7c:	69fa      	ldr	r2, [r7, #28]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	4403      	add	r3, r0
 8000e86:	440b      	add	r3, r1
 8000e88:	781a      	ldrb	r2, [r3, #0]
 8000e8a:	4b95      	ldr	r3, [pc, #596]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000e8c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d11f      	bne.n	8000ed4 <ConnectFour_CheckWin+0x8c>
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	1c99      	adds	r1, r3, #2
 8000e98:	4891      	ldr	r0, [pc, #580]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000e9a:	69fa      	ldr	r2, [r7, #28]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	1a9b      	subs	r3, r3, r2
 8000ea2:	4403      	add	r3, r0
 8000ea4:	440b      	add	r3, r1
 8000ea6:	781a      	ldrb	r2, [r3, #0]
 8000ea8:	4b8d      	ldr	r3, [pc, #564]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000eaa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d110      	bne.n	8000ed4 <ConnectFour_CheckWin+0x8c>
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	1cd9      	adds	r1, r3, #3
 8000eb6:	488a      	ldr	r0, [pc, #552]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000eb8:	69fa      	ldr	r2, [r7, #28]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	1a9b      	subs	r3, r3, r2
 8000ec0:	4403      	add	r3, r0
 8000ec2:	440b      	add	r3, r1
 8000ec4:	781a      	ldrb	r2, [r3, #0]
 8000ec6:	4b86      	ldr	r3, [pc, #536]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000ec8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d101      	bne.n	8000ed4 <ConnectFour_CheckWin+0x8c>
				return 1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e0ff      	b.n	80010d4 <ConnectFour_CheckWin+0x28c>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	ddbc      	ble.n	8000e5a <ConnectFour_CheckWin+0x12>
	for(int rows = 0; rows < BOARD_ROWS; rows++){
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	2b05      	cmp	r3, #5
 8000eea:	ddb3      	ble.n	8000e54 <ConnectFour_CheckWin+0xc>
			}
		}
	}
	// vertical
	for(int rows = 0; rows < BOARD_ROWS - 3; rows++){
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e048      	b.n	8000f84 <ConnectFour_CheckWin+0x13c>
		for(int cols = 0; cols < BOARD_COLS; cols++){
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	e03f      	b.n	8000f78 <ConnectFour_CheckWin+0x130>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows+1][cols] == Game.currentPlayer && Game.board[rows+2][cols] == Game.currentPlayer && Game.board[rows+3][cols] == Game.currentPlayer){
 8000ef8:	4979      	ldr	r1, [pc, #484]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4613      	mov	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	1a9b      	subs	r3, r3, r2
 8000f02:	18ca      	adds	r2, r1, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4413      	add	r3, r2
 8000f08:	781a      	ldrb	r2, [r3, #0]
 8000f0a:	4b75      	ldr	r3, [pc, #468]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000f0c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d12e      	bne.n	8000f72 <ConnectFour_CheckWin+0x12a>
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	4971      	ldr	r1, [pc, #452]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	18ca      	adds	r2, r1, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4413      	add	r3, r2
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	4b6d      	ldr	r3, [pc, #436]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000f2a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d11f      	bne.n	8000f72 <ConnectFour_CheckWin+0x12a>
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	1c9a      	adds	r2, r3, #2
 8000f36:	496a      	ldr	r1, [pc, #424]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000f38:	4613      	mov	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	1a9b      	subs	r3, r3, r2
 8000f3e:	18ca      	adds	r2, r1, r3
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4413      	add	r3, r2
 8000f44:	781a      	ldrb	r2, [r3, #0]
 8000f46:	4b66      	ldr	r3, [pc, #408]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000f48:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d110      	bne.n	8000f72 <ConnectFour_CheckWin+0x12a>
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	1cda      	adds	r2, r3, #3
 8000f54:	4962      	ldr	r1, [pc, #392]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000f56:	4613      	mov	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	1a9b      	subs	r3, r3, r2
 8000f5c:	18ca      	adds	r2, r1, r3
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4413      	add	r3, r2
 8000f62:	781a      	ldrb	r2, [r3, #0]
 8000f64:	4b5e      	ldr	r3, [pc, #376]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000f66:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d101      	bne.n	8000f72 <ConnectFour_CheckWin+0x12a>
				return 1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e0b0      	b.n	80010d4 <ConnectFour_CheckWin+0x28c>
		for(int cols = 0; cols < BOARD_COLS; cols++){
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	3301      	adds	r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	ddbc      	ble.n	8000ef8 <ConnectFour_CheckWin+0xb0>
	for(int rows = 0; rows < BOARD_ROWS - 3; rows++){
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	ddb3      	ble.n	8000ef2 <ConnectFour_CheckWin+0xaa>
			}
		}
	}
	// diagonal upwards to right
	for(int rows = 0; rows < BOARD_ROWS - 3  ; rows++){
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	e04b      	b.n	8001028 <ConnectFour_CheckWin+0x1e0>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	e042      	b.n	800101c <ConnectFour_CheckWin+0x1d4>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows+1][cols+1] == Game.currentPlayer && Game.board[rows+2][cols+2] == Game.currentPlayer && Game.board[rows+3][cols+3] == Game.currentPlayer){
 8000f96:	4952      	ldr	r1, [pc, #328]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	1a9b      	subs	r3, r3, r2
 8000fa0:	18ca      	adds	r2, r1, r3
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000faa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d131      	bne.n	8001016 <ConnectFour_CheckWin+0x1ce>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1c59      	adds	r1, r3, #1
 8000fba:	4849      	ldr	r0, [pc, #292]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	1a9b      	subs	r3, r3, r2
 8000fc2:	4403      	add	r3, r0
 8000fc4:	440b      	add	r3, r1
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	4b45      	ldr	r3, [pc, #276]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000fca:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d121      	bne.n	8001016 <ConnectFour_CheckWin+0x1ce>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	1c9a      	adds	r2, r3, #2
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1c99      	adds	r1, r3, #2
 8000fda:	4841      	ldr	r0, [pc, #260]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000fdc:	4613      	mov	r3, r2
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	1a9b      	subs	r3, r3, r2
 8000fe2:	4403      	add	r3, r0
 8000fe4:	440b      	add	r3, r1
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000fea:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d111      	bne.n	8001016 <ConnectFour_CheckWin+0x1ce>
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1cda      	adds	r2, r3, #3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1cd9      	adds	r1, r3, #3
 8000ffa:	4839      	ldr	r0, [pc, #228]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	1a9b      	subs	r3, r3, r2
 8001002:	4403      	add	r3, r0
 8001004:	440b      	add	r3, r1
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	4b35      	ldr	r3, [pc, #212]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 800100a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800100e:	429a      	cmp	r2, r3
 8001010:	d101      	bne.n	8001016 <ConnectFour_CheckWin+0x1ce>
				return 1;
 8001012:	2301      	movs	r3, #1
 8001014:	e05e      	b.n	80010d4 <ConnectFour_CheckWin+0x28c>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	3301      	adds	r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	2b03      	cmp	r3, #3
 8001020:	ddb9      	ble.n	8000f96 <ConnectFour_CheckWin+0x14e>
	for(int rows = 0; rows < BOARD_ROWS - 3  ; rows++){
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3301      	adds	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b02      	cmp	r3, #2
 800102c:	ddb0      	ble.n	8000f90 <ConnectFour_CheckWin+0x148>
			}
		}
	}
	// diagonal downwards to right
	for(int rows = 3; rows < BOARD_ROWS; rows++){
 800102e:	2303      	movs	r3, #3
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	e04b      	b.n	80010cc <ConnectFour_CheckWin+0x284>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 8001034:	2300      	movs	r3, #0
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	e042      	b.n	80010c0 <ConnectFour_CheckWin+0x278>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows-1][cols+1] == Game.currentPlayer && Game.board[rows-2][cols+2] == Game.currentPlayer && Game.board[rows-3][cols+3] == Game.currentPlayer){
 800103a:	4929      	ldr	r1, [pc, #164]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	1a9b      	subs	r3, r3, r2
 8001044:	18ca      	adds	r2, r1, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	4413      	add	r3, r2
 800104a:	781a      	ldrb	r2, [r3, #0]
 800104c:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 800104e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001052:	429a      	cmp	r2, r3
 8001054:	d131      	bne.n	80010ba <ConnectFour_CheckWin+0x272>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	1c59      	adds	r1, r3, #1
 800105e:	4820      	ldr	r0, [pc, #128]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	4403      	add	r3, r0
 8001068:	440b      	add	r3, r1
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 800106e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001072:	429a      	cmp	r2, r3
 8001074:	d121      	bne.n	80010ba <ConnectFour_CheckWin+0x272>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	1e9a      	subs	r2, r3, #2
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	1c99      	adds	r1, r3, #2
 800107e:	4818      	ldr	r0, [pc, #96]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 8001080:	4613      	mov	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	4403      	add	r3, r0
 8001088:	440b      	add	r3, r1
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 800108e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001092:	429a      	cmp	r2, r3
 8001094:	d111      	bne.n	80010ba <ConnectFour_CheckWin+0x272>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	1eda      	subs	r2, r3, #3
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	1cd9      	adds	r1, r3, #3
 800109e:	4810      	ldr	r0, [pc, #64]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 80010a0:	4613      	mov	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	1a9b      	subs	r3, r3, r2
 80010a6:	4403      	add	r3, r0
 80010a8:	440b      	add	r3, r1
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <ConnectFour_CheckWin+0x298>)
 80010ae:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d101      	bne.n	80010ba <ConnectFour_CheckWin+0x272>
				return 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00c      	b.n	80010d4 <ConnectFour_CheckWin+0x28c>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	ddb9      	ble.n	800103a <ConnectFour_CheckWin+0x1f2>
	for(int rows = 3; rows < BOARD_ROWS; rows++){
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3301      	adds	r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b05      	cmp	r3, #5
 80010d0:	ddb0      	ble.n	8001034 <ConnectFour_CheckWin+0x1ec>
			}
		}
	}
	return 0;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3724      	adds	r7, #36	@ 0x24
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	2000009c 	.word	0x2000009c

080010e4 <ConnectFour_CheckDraw>:

uint8_t ConnectFour_CheckDraw(void){
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
	for (int cols = 0; cols < BOARD_COLS; cols++){
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	e018      	b.n	8001122 <ConnectFour_CheckDraw+0x3e>
		for(int rows = 0; rows < BOARD_ROWS; rows++){
 80010f0:	2300      	movs	r3, #0
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	e00f      	b.n	8001116 <ConnectFour_CheckDraw+0x32>
			if(Game.board[rows][cols] == EMPTY_CELL){
 80010f6:	4910      	ldr	r1, [pc, #64]	@ (8001138 <ConnectFour_CheckDraw+0x54>)
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	18ca      	adds	r2, r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <ConnectFour_CheckDraw+0x2c>
				return 0;
 800110c:	2300      	movs	r3, #0
 800110e:	e00c      	b.n	800112a <ConnectFour_CheckDraw+0x46>
		for(int rows = 0; rows < BOARD_ROWS; rows++){
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	2b05      	cmp	r3, #5
 800111a:	ddec      	ble.n	80010f6 <ConnectFour_CheckDraw+0x12>
	for (int cols = 0; cols < BOARD_COLS; cols++){
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3301      	adds	r3, #1
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b06      	cmp	r3, #6
 8001126:	dde3      	ble.n	80010f0 <ConnectFour_CheckDraw+0xc>
			}
		}
	}
	return 1;
 8001128:	2301      	movs	r3, #1
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2000009c 	.word	0x2000009c

0800113c <enableInterruptIRQ>:
 */


#include "InterruptControl.h"

void enableInterruptIRQ(uint8_t IRQ_num){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	if (IRQ_num < 32){
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b1f      	cmp	r3, #31
 800114a:	d804      	bhi.n	8001156 <enableInterruptIRQ+0x1a>
		// *NVIC_ISER_SETENABLE = (SET << IRQ_num);
		HAL_NVIC_EnableIRQ(IRQ_num);
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	4618      	mov	r0, r3
 8001152:	f002 fc06 	bl	8003962 <HAL_NVIC_EnableIRQ>
	}
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <disableInterruptIRQ>:

void disableInterruptIRQ(uint8_t IRQ_num){
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
	if (IRQ_num < 32){
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b1f      	cmp	r3, #31
 800116c:	d804      	bhi.n	8001178 <disableInterruptIRQ+0x1a>
		// *NVIC_ISER_CLEARENABLE = (SET << IRQ_num);
		HAL_NVIC_DisableIRQ(IRQ_num);
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fc03 	bl	800397e <HAL_NVIC_DisableIRQ>
	}
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <clearInterruptIRQ>:
void setInterruptIRQ(uint8_t IRQ_num){


}

void clearInterruptIRQ(uint8_t IRQ_num){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	if (IRQ_num < 32){
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b1f      	cmp	r3, #31
 800118e:	d804      	bhi.n	800119a <clearInterruptIRQ+0x1a>
		// *NVIC_ISER_CLEARPENDING = (SET << IRQ_num);
		HAL_NVIC_ClearPendingIRQ(IRQ_num);
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fc0c 	bl	80039b2 <HAL_NVIC_ClearPendingIRQ>
	}

}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <clearInterruptEXTI>:

void clearInterruptEXTI(uint8_t IRQ_num){
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	// EXTI->PR |= (SET << IRQ_num);
	__HAL_GPIO_EXTI_CLEAR_FLAG(IRQ_num);
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <clearInterruptEXTI+0x1c>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	6153      	str	r3, [r2, #20]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40013c00 	.word	0x40013c00

080011c4 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	@ 0x30
 80011c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001338 <LCD_GPIO_Init+0x174>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a59      	ldr	r2, [pc, #356]	@ (8001338 <LCD_GPIO_Init+0x174>)
 80011d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b57      	ldr	r3, [pc, #348]	@ (8001338 <LCD_GPIO_Init+0x174>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	4b53      	ldr	r3, [pc, #332]	@ (8001338 <LCD_GPIO_Init+0x174>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a52      	ldr	r2, [pc, #328]	@ (8001338 <LCD_GPIO_Init+0x174>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b50      	ldr	r3, [pc, #320]	@ (8001338 <LCD_GPIO_Init+0x174>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b4c      	ldr	r3, [pc, #304]	@ (8001338 <LCD_GPIO_Init+0x174>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a4b      	ldr	r2, [pc, #300]	@ (8001338 <LCD_GPIO_Init+0x174>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b49      	ldr	r3, [pc, #292]	@ (8001338 <LCD_GPIO_Init+0x174>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b45      	ldr	r3, [pc, #276]	@ (8001338 <LCD_GPIO_Init+0x174>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a44      	ldr	r2, [pc, #272]	@ (8001338 <LCD_GPIO_Init+0x174>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b42      	ldr	r3, [pc, #264]	@ (8001338 <LCD_GPIO_Init+0x174>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b3e      	ldr	r3, [pc, #248]	@ (8001338 <LCD_GPIO_Init+0x174>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a3d      	ldr	r2, [pc, #244]	@ (8001338 <LCD_GPIO_Init+0x174>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b3b      	ldr	r3, [pc, #236]	@ (8001338 <LCD_GPIO_Init+0x174>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b37      	ldr	r3, [pc, #220]	@ (8001338 <LCD_GPIO_Init+0x174>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a36      	ldr	r2, [pc, #216]	@ (8001338 <LCD_GPIO_Init+0x174>)
 8001260:	f043 0320 	orr.w	r3, r3, #32
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <LCD_GPIO_Init+0x174>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0320 	and.w	r3, r3, #32
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4b30      	ldr	r3, [pc, #192]	@ (8001338 <LCD_GPIO_Init+0x174>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a2f      	ldr	r2, [pc, #188]	@ (8001338 <LCD_GPIO_Init+0x174>)
 800127c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b2d      	ldr	r3, [pc, #180]	@ (8001338 <LCD_GPIO_Init+0x174>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800128e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001292:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800129c:	2302      	movs	r3, #2
 800129e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80012a0:	230e      	movs	r3, #14
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	4824      	ldr	r0, [pc, #144]	@ (800133c <LCD_GPIO_Init+0x178>)
 80012ac:	f002 fb90 	bl	80039d0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80012b0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80012b4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	4619      	mov	r1, r3
 80012bc:	4820      	ldr	r0, [pc, #128]	@ (8001340 <LCD_GPIO_Init+0x17c>)
 80012be:	f002 fb87 	bl	80039d0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80012c2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80012c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	481d      	ldr	r0, [pc, #116]	@ (8001344 <LCD_GPIO_Init+0x180>)
 80012d0:	f002 fb7e 	bl	80039d0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80012d4:	2348      	movs	r3, #72	@ 0x48
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	481a      	ldr	r0, [pc, #104]	@ (8001348 <LCD_GPIO_Init+0x184>)
 80012e0:	f002 fb76 	bl	80039d0 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80012e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4816      	ldr	r0, [pc, #88]	@ (800134c <LCD_GPIO_Init+0x188>)
 80012f2:	f002 fb6d 	bl	80039d0 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80012f6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80012fa:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	4813      	ldr	r0, [pc, #76]	@ (8001350 <LCD_GPIO_Init+0x18c>)
 8001304:	f002 fb64 	bl	80039d0 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001308:	2303      	movs	r3, #3
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800130c:	2309      	movs	r3, #9
 800130e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	480a      	ldr	r0, [pc, #40]	@ (8001340 <LCD_GPIO_Init+0x17c>)
 8001318:	f002 fb5a 	bl	80039d0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800131c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4809      	ldr	r0, [pc, #36]	@ (8001350 <LCD_GPIO_Init+0x18c>)
 800132a:	f002 fb51 	bl	80039d0 <HAL_GPIO_Init>
}
 800132e:	bf00      	nop
 8001330:	3730      	adds	r7, #48	@ 0x30
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000
 8001340:	40020400 	.word	0x40020400
 8001344:	40020800 	.word	0x40020800
 8001348:	40020c00 	.word	0x40020c00
 800134c:	40021400 	.word	0x40021400
 8001350:	40021800 	.word	0x40021800

08001354 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b090      	sub	sp, #64	@ 0x40
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001362:	23f0      	movs	r3, #240	@ 0xf0
 8001364:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800136a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800136e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001370:	2302      	movs	r3, #2
 8001372:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001374:	23ff      	movs	r3, #255	@ 0xff
 8001376:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800137c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001382:	2305      	movs	r3, #5
 8001384:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <LTCD_Layer_Init+0x78>)
 800138e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001390:	23f0      	movs	r3, #240	@ 0xf0
 8001392:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001394:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001398:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	4806      	ldr	r0, [pc, #24]	@ (80013d0 <LTCD_Layer_Init+0x7c>)
 80013b6:	f003 ff4d 	bl	8005254 <HAL_LTDC_ConfigLayer>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80013c0:	f000 fb99 	bl	8001af6 <LCD_Error_Handler>
	}
}
 80013c4:	bf00      	nop
 80013c6:	3740      	adds	r7, #64	@ 0x40
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200001c4 	.word	0x200001c4
 80013d0:	200000e8 	.word	0x200000e8

080013d4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80013d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001484 <LTCD__Init+0xb0>)
 80013da:	4a2b      	ldr	r2, [pc, #172]	@ (8001488 <LTCD__Init+0xb4>)
 80013dc:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80013de:	4b29      	ldr	r3, [pc, #164]	@ (8001484 <LTCD__Init+0xb0>)
 80013e0:	2209      	movs	r2, #9
 80013e2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80013e4:	4b27      	ldr	r3, [pc, #156]	@ (8001484 <LTCD__Init+0xb0>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80013ea:	4b26      	ldr	r3, [pc, #152]	@ (8001484 <LTCD__Init+0xb0>)
 80013ec:	221d      	movs	r2, #29
 80013ee:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80013f0:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <LTCD__Init+0xb0>)
 80013f2:	2203      	movs	r2, #3
 80013f4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80013f6:	4b23      	ldr	r3, [pc, #140]	@ (8001484 <LTCD__Init+0xb0>)
 80013f8:	f240 120d 	movw	r2, #269	@ 0x10d
 80013fc:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80013fe:	4b21      	ldr	r3, [pc, #132]	@ (8001484 <LTCD__Init+0xb0>)
 8001400:	f240 1243 	movw	r2, #323	@ 0x143
 8001404:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001406:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <LTCD__Init+0xb0>)
 8001408:	f240 1217 	movw	r2, #279	@ 0x117
 800140c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800140e:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <LTCD__Init+0xb0>)
 8001410:	f240 1247 	movw	r2, #327	@ 0x147
 8001414:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001416:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <LTCD__Init+0xb0>)
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <LTCD__Init+0xb0>)
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001426:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <LTCD__Init+0xb0>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <LTCD__Init+0xb8>)
 8001430:	2208      	movs	r2, #8
 8001432:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001434:	4b15      	ldr	r3, [pc, #84]	@ (800148c <LTCD__Init+0xb8>)
 8001436:	22c0      	movs	r2, #192	@ 0xc0
 8001438:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800143a:	4b14      	ldr	r3, [pc, #80]	@ (800148c <LTCD__Init+0xb8>)
 800143c:	2204      	movs	r2, #4
 800143e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001440:	4b12      	ldr	r3, [pc, #72]	@ (800148c <LTCD__Init+0xb8>)
 8001442:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001446:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001448:	4810      	ldr	r0, [pc, #64]	@ (800148c <LTCD__Init+0xb8>)
 800144a:	f004 fd5d 	bl	8005f08 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800144e:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <LTCD__Init+0xb0>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <LTCD__Init+0xb0>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <LTCD__Init+0xb0>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <LTCD__Init+0xb0>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001466:	f7ff fead 	bl	80011c4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800146a:	4806      	ldr	r0, [pc, #24]	@ (8001484 <LTCD__Init+0xb0>)
 800146c:	f003 fe22 	bl	80050b4 <HAL_LTDC_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001476:	f000 fb3e 	bl	8001af6 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800147a:	f000 fb59 	bl	8001b30 <ili9341_Init>
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200000e8 	.word	0x200000e8
 8001488:	40016800 	.word	0x40016800
 800148c:	20000190 	.word	0x20000190

08001490 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
 800149a:	460b      	mov	r3, r1
 800149c:	80bb      	strh	r3, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	461a      	mov	r2, r3
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	4413      	add	r3, r2
 80014b2:	4905      	ldr	r1, [pc, #20]	@ (80014c8 <LCD_Draw_Pixel+0x38>)
 80014b4:	887a      	ldrh	r2, [r7, #2]
 80014b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	200001c4 	.word	0x200001c4

080014cc <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4604      	mov	r4, r0
 80014d4:	4608      	mov	r0, r1
 80014d6:	4611      	mov	r1, r2
 80014d8:	461a      	mov	r2, r3
 80014da:	4623      	mov	r3, r4
 80014dc:	80fb      	strh	r3, [r7, #6]
 80014de:	4603      	mov	r3, r0
 80014e0:	80bb      	strh	r3, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	807b      	strh	r3, [r7, #2]
 80014e6:	4613      	mov	r3, r2
 80014e8:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	425b      	negs	r3, r3
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	81fb      	strh	r3, [r7, #14]
 80014f2:	e034      	b.n	800155e <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 80014f4:	887b      	ldrh	r3, [r7, #2]
 80014f6:	425b      	negs	r3, r3
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	81bb      	strh	r3, [r7, #12]
 80014fc:	e024      	b.n	8001548 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 80014fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001502:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001506:	fb03 f202 	mul.w	r2, r3, r2
 800150a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800150e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001512:	fb01 f303 	mul.w	r3, r1, r3
 8001516:	441a      	add	r2, r3
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	8879      	ldrh	r1, [r7, #2]
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	429a      	cmp	r2, r3
 8001522:	dc0b      	bgt.n	800153c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8001524:	89ba      	ldrh	r2, [r7, #12]
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	4413      	add	r3, r2
 800152a:	b298      	uxth	r0, r3
 800152c:	89fa      	ldrh	r2, [r7, #14]
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	b29b      	uxth	r3, r3
 8001534:	883a      	ldrh	r2, [r7, #0]
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff ffaa 	bl	8001490 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 800153c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001540:	b29b      	uxth	r3, r3
 8001542:	3301      	adds	r3, #1
 8001544:	b29b      	uxth	r3, r3
 8001546:	81bb      	strh	r3, [r7, #12]
 8001548:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	429a      	cmp	r2, r3
 8001550:	ddd5      	ble.n	80014fe <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8001552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001556:	b29b      	uxth	r3, r3
 8001558:	3301      	adds	r3, #1
 800155a:	b29b      	uxth	r3, r3
 800155c:	81fb      	strh	r3, [r7, #14]
 800155e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	429a      	cmp	r2, r3
 8001566:	ddc5      	ble.n	80014f4 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}

08001572 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001572:	b590      	push	{r4, r7, lr}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	4604      	mov	r4, r0
 800157a:	4608      	mov	r0, r1
 800157c:	4611      	mov	r1, r2
 800157e:	461a      	mov	r2, r3
 8001580:	4623      	mov	r3, r4
 8001582:	80fb      	strh	r3, [r7, #6]
 8001584:	4603      	mov	r3, r0
 8001586:	80bb      	strh	r3, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001590:	2300      	movs	r3, #0
 8001592:	81fb      	strh	r3, [r7, #14]
 8001594:	e00b      	b.n	80015ae <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8001596:	89fa      	ldrh	r2, [r7, #14]
 8001598:	88bb      	ldrh	r3, [r7, #4]
 800159a:	4413      	add	r3, r2
 800159c:	b299      	uxth	r1, r3
 800159e:	883a      	ldrh	r2, [r7, #0]
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff74 	bl	8001490 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80015a8:	89fb      	ldrh	r3, [r7, #14]
 80015aa:	3301      	adds	r3, #1
 80015ac:	81fb      	strh	r3, [r7, #14]
 80015ae:	89fa      	ldrh	r2, [r7, #14]
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d3ef      	bcc.n	8001596 <LCD_Draw_Vertical_Line+0x24>
  }
}
 80015b6:	bf00      	nop
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd90      	pop	{r4, r7, pc}

080015c0 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4604      	mov	r4, r0
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4623      	mov	r3, r4
 80015d0:	80fb      	strh	r3, [r7, #6]
 80015d2:	4603      	mov	r3, r0
 80015d4:	80bb      	strh	r3, [r7, #4]
 80015d6:	460b      	mov	r3, r1
 80015d8:	807b      	strh	r3, [r7, #2]
 80015da:	4613      	mov	r3, r2
 80015dc:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80015de:	2300      	movs	r3, #0
 80015e0:	81fb      	strh	r3, [r7, #14]
 80015e2:	e00b      	b.n	80015fc <LCD_Draw_Horizontal_Line+0x3c>
  {
      LCD_Draw_Pixel(i+x, y, color);
 80015e4:	89fa      	ldrh	r2, [r7, #14]
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	4413      	add	r3, r2
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	883a      	ldrh	r2, [r7, #0]
 80015ee:	88b9      	ldrh	r1, [r7, #4]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff4d 	bl	8001490 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	3301      	adds	r3, #1
 80015fa:	81fb      	strh	r3, [r7, #14]
 80015fc:	89fa      	ldrh	r2, [r7, #14]
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	429a      	cmp	r2, r3
 8001602:	d3ef      	bcc.n	80015e4 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bd90      	pop	{r4, r7, pc}
	...

08001610 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	460a      	mov	r2, r1
 800161a:	71fb      	strb	r3, [r7, #7]
 800161c:	4613      	mov	r3, r2
 800161e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10e      	bne.n	8001644 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	e007      	b.n	800163c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 800162c:	4908      	ldr	r1, [pc, #32]	@ (8001650 <LCD_Clear+0x40>)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	88ba      	ldrh	r2, [r7, #4]
 8001632:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3301      	adds	r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001642:	d3f3      	bcc.n	800162c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	200001c4 	.word	0x200001c4

08001654 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800165e:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <LCD_SetTextColor+0x1c>)
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	8013      	strh	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	20000000 	.word	0x20000000

08001674 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 800167c:	4a04      	ldr	r2, [pc, #16]	@ (8001690 <LCD_SetFont+0x1c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	200001c0 	.word	0x200001c0

08001694 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	603a      	str	r2, [r7, #0]
 800169e:	80fb      	strh	r3, [r7, #6]
 80016a0:	460b      	mov	r3, r1
 80016a2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	e04c      	b.n	800174c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	e03f      	b.n	8001738 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	4619      	mov	r1, r3
 80016c4:	4b27      	ldr	r3, [pc, #156]	@ (8001764 <LCD_Draw_Char+0xd0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	889b      	ldrh	r3, [r3, #4]
 80016ca:	4a27      	ldr	r2, [pc, #156]	@ (8001768 <LCD_Draw_Char+0xd4>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	08db      	lsrs	r3, r3, #3
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	2280      	movs	r2, #128	@ 0x80
 80016d8:	409a      	lsls	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	fa42 f303 	asr.w	r3, r2, r3
 80016e0:	400b      	ands	r3, r1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d104      	bne.n	80016f0 <LCD_Draw_Char+0x5c>
 80016e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <LCD_Draw_Char+0xd0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	889b      	ldrh	r3, [r3, #4]
 80016ec:	2b0c      	cmp	r3, #12
 80016ee:	d920      	bls.n	8001732 <LCD_Draw_Char+0x9e>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	fa42 f303 	asr.w	r3, r2, r3
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d104      	bne.n	8001714 <LCD_Draw_Char+0x80>
 800170a:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <LCD_Draw_Char+0xd0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	889b      	ldrh	r3, [r3, #4]
 8001710:	2b0c      	cmp	r3, #12
 8001712:	d80e      	bhi.n	8001732 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	b29a      	uxth	r2, r3
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	4413      	add	r3, r2
 800171c:	b298      	uxth	r0, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	b29a      	uxth	r2, r3
 8001722:	88bb      	ldrh	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	b29b      	uxth	r3, r3
 8001728:	4a10      	ldr	r2, [pc, #64]	@ (800176c <LCD_Draw_Char+0xd8>)
 800172a:	8812      	ldrh	r2, [r2, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff feaf 	bl	8001490 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	3301      	adds	r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <LCD_Draw_Char+0xd0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	889b      	ldrh	r3, [r3, #4]
 800173e:	461a      	mov	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	4293      	cmp	r3, r2
 8001744:	d3b8      	bcc.n	80016b8 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3301      	adds	r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <LCD_Draw_Char+0xd0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	88db      	ldrh	r3, [r3, #6]
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4293      	cmp	r3, r2
 8001758:	d3ab      	bcc.n	80016b2 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200001c0 	.word	0x200001c0
 8001768:	aaaaaaab 	.word	0xaaaaaaab
 800176c:	20000000 	.word	0x20000000

08001770 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	80fb      	strh	r3, [r7, #6]
 800177a:	460b      	mov	r3, r1
 800177c:	80bb      	strh	r3, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	3b20      	subs	r3, #32
 8001786:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001788:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <LCD_DisplayChar+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	4907      	ldr	r1, [pc, #28]	@ (80017b0 <LCD_DisplayChar+0x40>)
 8001792:	6809      	ldr	r1, [r1, #0]
 8001794:	88c9      	ldrh	r1, [r1, #6]
 8001796:	fb01 f303 	mul.w	r3, r1, r3
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	441a      	add	r2, r3
 800179e:	88b9      	ldrh	r1, [r7, #4]
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ff76 	bl	8001694 <LCD_Draw_Char>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200001c0 	.word	0x200001c0

080017b4 <screen1>:
	LCD_DisplayChar(125,160,'r');
	LCD_DisplayChar(130,160,'l');
	LCD_DisplayChar(140,160,'d');
}

void screen1(void){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLACK);
 80017b8:	2100      	movs	r1, #0
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff ff28 	bl	8001610 <LCD_Clear>
	// Initial game screen, select game mode
	LCD_SetTextColor(LCD_COLOR_WHITE);
 80017c0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80017c4:	f7ff ff46 	bl	8001654 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80017c8:	4891      	ldr	r0, [pc, #580]	@ (8001a10 <screen1+0x25c>)
 80017ca:	f7ff ff53 	bl	8001674 <LCD_SetFont>

	LCD_DisplayChar(30, 20, 'C');
 80017ce:	2243      	movs	r2, #67	@ 0x43
 80017d0:	2114      	movs	r1, #20
 80017d2:	201e      	movs	r0, #30
 80017d4:	f7ff ffcc 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(50, 20, 'O');
 80017d8:	224f      	movs	r2, #79	@ 0x4f
 80017da:	2114      	movs	r1, #20
 80017dc:	2032      	movs	r0, #50	@ 0x32
 80017de:	f7ff ffc7 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(70, 20, 'N');
 80017e2:	224e      	movs	r2, #78	@ 0x4e
 80017e4:	2114      	movs	r1, #20
 80017e6:	2046      	movs	r0, #70	@ 0x46
 80017e8:	f7ff ffc2 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(90, 20, 'N');
 80017ec:	224e      	movs	r2, #78	@ 0x4e
 80017ee:	2114      	movs	r1, #20
 80017f0:	205a      	movs	r0, #90	@ 0x5a
 80017f2:	f7ff ffbd 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(110, 20, 'E');
 80017f6:	2245      	movs	r2, #69	@ 0x45
 80017f8:	2114      	movs	r1, #20
 80017fa:	206e      	movs	r0, #110	@ 0x6e
 80017fc:	f7ff ffb8 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(130, 20, 'C');
 8001800:	2243      	movs	r2, #67	@ 0x43
 8001802:	2114      	movs	r1, #20
 8001804:	2082      	movs	r0, #130	@ 0x82
 8001806:	f7ff ffb3 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(150, 20, 'T');
 800180a:	2254      	movs	r2, #84	@ 0x54
 800180c:	2114      	movs	r1, #20
 800180e:	2096      	movs	r0, #150	@ 0x96
 8001810:	f7ff ffae 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(170, 20, ' ');
 8001814:	2220      	movs	r2, #32
 8001816:	2114      	movs	r1, #20
 8001818:	20aa      	movs	r0, #170	@ 0xaa
 800181a:	f7ff ffa9 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(190, 20, '4');
 800181e:	2234      	movs	r2, #52	@ 0x34
 8001820:	2114      	movs	r1, #20
 8001822:	20be      	movs	r0, #190	@ 0xbe
 8001824:	f7ff ffa4 	bl	8001770 <LCD_DisplayChar>

	LCD_DisplayChar(20,80,'S');
 8001828:	2253      	movs	r2, #83	@ 0x53
 800182a:	2150      	movs	r1, #80	@ 0x50
 800182c:	2014      	movs	r0, #20
 800182e:	f7ff ff9f 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(35,80,'e');
 8001832:	2265      	movs	r2, #101	@ 0x65
 8001834:	2150      	movs	r1, #80	@ 0x50
 8001836:	2023      	movs	r0, #35	@ 0x23
 8001838:	f7ff ff9a 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(45,80,'l');
 800183c:	226c      	movs	r2, #108	@ 0x6c
 800183e:	2150      	movs	r1, #80	@ 0x50
 8001840:	202d      	movs	r0, #45	@ 0x2d
 8001842:	f7ff ff95 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(55,80,'e');
 8001846:	2265      	movs	r2, #101	@ 0x65
 8001848:	2150      	movs	r1, #80	@ 0x50
 800184a:	2037      	movs	r0, #55	@ 0x37
 800184c:	f7ff ff90 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(70,80,'c');
 8001850:	2263      	movs	r2, #99	@ 0x63
 8001852:	2150      	movs	r1, #80	@ 0x50
 8001854:	2046      	movs	r0, #70	@ 0x46
 8001856:	f7ff ff8b 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(80,80,'t');
 800185a:	2274      	movs	r2, #116	@ 0x74
 800185c:	2150      	movs	r1, #80	@ 0x50
 800185e:	2050      	movs	r0, #80	@ 0x50
 8001860:	f7ff ff86 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(100,80,'G');
 8001864:	2247      	movs	r2, #71	@ 0x47
 8001866:	2150      	movs	r1, #80	@ 0x50
 8001868:	2064      	movs	r0, #100	@ 0x64
 800186a:	f7ff ff81 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(118,80,'a');
 800186e:	2261      	movs	r2, #97	@ 0x61
 8001870:	2150      	movs	r1, #80	@ 0x50
 8001872:	2076      	movs	r0, #118	@ 0x76
 8001874:	f7ff ff7c 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(135,80,'m');
 8001878:	226d      	movs	r2, #109	@ 0x6d
 800187a:	2150      	movs	r1, #80	@ 0x50
 800187c:	2087      	movs	r0, #135	@ 0x87
 800187e:	f7ff ff77 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(150,80,'e');
 8001882:	2265      	movs	r2, #101	@ 0x65
 8001884:	2150      	movs	r1, #80	@ 0x50
 8001886:	2096      	movs	r0, #150	@ 0x96
 8001888:	f7ff ff72 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(165,80,'m');
 800188c:	226d      	movs	r2, #109	@ 0x6d
 800188e:	2150      	movs	r1, #80	@ 0x50
 8001890:	20a5      	movs	r0, #165	@ 0xa5
 8001892:	f7ff ff6d 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(180,80,'o');
 8001896:	226f      	movs	r2, #111	@ 0x6f
 8001898:	2150      	movs	r1, #80	@ 0x50
 800189a:	20b4      	movs	r0, #180	@ 0xb4
 800189c:	f7ff ff68 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(192,80,'d');
 80018a0:	2264      	movs	r2, #100	@ 0x64
 80018a2:	2150      	movs	r1, #80	@ 0x50
 80018a4:	20c0      	movs	r0, #192	@ 0xc0
 80018a6:	f7ff ff63 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(205,80,'e');
 80018aa:	2265      	movs	r2, #101	@ 0x65
 80018ac:	2150      	movs	r1, #80	@ 0x50
 80018ae:	20cd      	movs	r0, #205	@ 0xcd
 80018b0:	f7ff ff5e 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(215,80,':');
 80018b4:	223a      	movs	r2, #58	@ 0x3a
 80018b6:	2150      	movs	r1, #80	@ 0x50
 80018b8:	20d7      	movs	r0, #215	@ 0xd7
 80018ba:	f7ff ff59 	bl	8001770 <LCD_DisplayChar>
	// button 1
	LCD_DisplayChar(50,150,'1');
 80018be:	2231      	movs	r2, #49	@ 0x31
 80018c0:	2196      	movs	r1, #150	@ 0x96
 80018c2:	2032      	movs	r0, #50	@ 0x32
 80018c4:	f7ff ff54 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(70,150,'P');
 80018c8:	2250      	movs	r2, #80	@ 0x50
 80018ca:	2196      	movs	r1, #150	@ 0x96
 80018cc:	2046      	movs	r0, #70	@ 0x46
 80018ce:	f7ff ff4f 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(80,150,'l');
 80018d2:	226c      	movs	r2, #108	@ 0x6c
 80018d4:	2196      	movs	r1, #150	@ 0x96
 80018d6:	2050      	movs	r0, #80	@ 0x50
 80018d8:	f7ff ff4a 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(90,150,'a');
 80018dc:	2261      	movs	r2, #97	@ 0x61
 80018de:	2196      	movs	r1, #150	@ 0x96
 80018e0:	205a      	movs	r0, #90	@ 0x5a
 80018e2:	f7ff ff45 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(100,150,'y');
 80018e6:	2279      	movs	r2, #121	@ 0x79
 80018e8:	2196      	movs	r1, #150	@ 0x96
 80018ea:	2064      	movs	r0, #100	@ 0x64
 80018ec:	f7ff ff40 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(110,150,'e');
 80018f0:	2265      	movs	r2, #101	@ 0x65
 80018f2:	2196      	movs	r1, #150	@ 0x96
 80018f4:	206e      	movs	r0, #110	@ 0x6e
 80018f6:	f7ff ff3b 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(120,150,'r');
 80018fa:	2272      	movs	r2, #114	@ 0x72
 80018fc:	2196      	movs	r1, #150	@ 0x96
 80018fe:	2078      	movs	r0, #120	@ 0x78
 8001900:	f7ff ff36 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(140,150,'M');
 8001904:	224d      	movs	r2, #77	@ 0x4d
 8001906:	2196      	movs	r1, #150	@ 0x96
 8001908:	208c      	movs	r0, #140	@ 0x8c
 800190a:	f7ff ff31 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(155,150,'o');
 800190e:	226f      	movs	r2, #111	@ 0x6f
 8001910:	2196      	movs	r1, #150	@ 0x96
 8001912:	209b      	movs	r0, #155	@ 0x9b
 8001914:	f7ff ff2c 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(167,150,'d');
 8001918:	2264      	movs	r2, #100	@ 0x64
 800191a:	2196      	movs	r1, #150	@ 0x96
 800191c:	20a7      	movs	r0, #167	@ 0xa7
 800191e:	f7ff ff27 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(180,150,'e');
 8001922:	2265      	movs	r2, #101	@ 0x65
 8001924:	2196      	movs	r1, #150	@ 0x96
 8001926:	20b4      	movs	r0, #180	@ 0xb4
 8001928:	f7ff ff22 	bl	8001770 <LCD_DisplayChar>
	LCD_Draw_Vertical_Line(45,145,35,LCD_COLOR_WHITE);
 800192c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001930:	2223      	movs	r2, #35	@ 0x23
 8001932:	2191      	movs	r1, #145	@ 0x91
 8001934:	202d      	movs	r0, #45	@ 0x2d
 8001936:	f7ff fe1c 	bl	8001572 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(195,145,35,LCD_COLOR_WHITE);
 800193a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800193e:	2223      	movs	r2, #35	@ 0x23
 8001940:	2191      	movs	r1, #145	@ 0x91
 8001942:	20c3      	movs	r0, #195	@ 0xc3
 8001944:	f7ff fe15 	bl	8001572 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(45,145,150,LCD_COLOR_WHITE);
 8001948:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800194c:	2296      	movs	r2, #150	@ 0x96
 800194e:	2191      	movs	r1, #145	@ 0x91
 8001950:	202d      	movs	r0, #45	@ 0x2d
 8001952:	f7ff fe35 	bl	80015c0 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(45,180,150,LCD_COLOR_WHITE);
 8001956:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800195a:	2296      	movs	r2, #150	@ 0x96
 800195c:	21b4      	movs	r1, #180	@ 0xb4
 800195e:	202d      	movs	r0, #45	@ 0x2d
 8001960:	f7ff fe2e 	bl	80015c0 <LCD_Draw_Horizontal_Line>

	// button 2
	LCD_DisplayChar(50,220,'2');
 8001964:	2232      	movs	r2, #50	@ 0x32
 8001966:	21dc      	movs	r1, #220	@ 0xdc
 8001968:	2032      	movs	r0, #50	@ 0x32
 800196a:	f7ff ff01 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(70,220,'P');
 800196e:	2250      	movs	r2, #80	@ 0x50
 8001970:	21dc      	movs	r1, #220	@ 0xdc
 8001972:	2046      	movs	r0, #70	@ 0x46
 8001974:	f7ff fefc 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(80,220,'l');
 8001978:	226c      	movs	r2, #108	@ 0x6c
 800197a:	21dc      	movs	r1, #220	@ 0xdc
 800197c:	2050      	movs	r0, #80	@ 0x50
 800197e:	f7ff fef7 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(90,220,'a');
 8001982:	2261      	movs	r2, #97	@ 0x61
 8001984:	21dc      	movs	r1, #220	@ 0xdc
 8001986:	205a      	movs	r0, #90	@ 0x5a
 8001988:	f7ff fef2 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(100,220,'y');
 800198c:	2279      	movs	r2, #121	@ 0x79
 800198e:	21dc      	movs	r1, #220	@ 0xdc
 8001990:	2064      	movs	r0, #100	@ 0x64
 8001992:	f7ff feed 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(110,220,'e');
 8001996:	2265      	movs	r2, #101	@ 0x65
 8001998:	21dc      	movs	r1, #220	@ 0xdc
 800199a:	206e      	movs	r0, #110	@ 0x6e
 800199c:	f7ff fee8 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(120,220,'r');
 80019a0:	2272      	movs	r2, #114	@ 0x72
 80019a2:	21dc      	movs	r1, #220	@ 0xdc
 80019a4:	2078      	movs	r0, #120	@ 0x78
 80019a6:	f7ff fee3 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(140,220,'M');
 80019aa:	224d      	movs	r2, #77	@ 0x4d
 80019ac:	21dc      	movs	r1, #220	@ 0xdc
 80019ae:	208c      	movs	r0, #140	@ 0x8c
 80019b0:	f7ff fede 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(155,220,'o');
 80019b4:	226f      	movs	r2, #111	@ 0x6f
 80019b6:	21dc      	movs	r1, #220	@ 0xdc
 80019b8:	209b      	movs	r0, #155	@ 0x9b
 80019ba:	f7ff fed9 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(167,220,'d');
 80019be:	2264      	movs	r2, #100	@ 0x64
 80019c0:	21dc      	movs	r1, #220	@ 0xdc
 80019c2:	20a7      	movs	r0, #167	@ 0xa7
 80019c4:	f7ff fed4 	bl	8001770 <LCD_DisplayChar>
	LCD_DisplayChar(180,220,'e');
 80019c8:	2265      	movs	r2, #101	@ 0x65
 80019ca:	21dc      	movs	r1, #220	@ 0xdc
 80019cc:	20b4      	movs	r0, #180	@ 0xb4
 80019ce:	f7ff fecf 	bl	8001770 <LCD_DisplayChar>
	LCD_Draw_Vertical_Line(45,215,35,LCD_COLOR_WHITE);
 80019d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019d6:	2223      	movs	r2, #35	@ 0x23
 80019d8:	21d7      	movs	r1, #215	@ 0xd7
 80019da:	202d      	movs	r0, #45	@ 0x2d
 80019dc:	f7ff fdc9 	bl	8001572 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(195,215,35,LCD_COLOR_WHITE);
 80019e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019e4:	2223      	movs	r2, #35	@ 0x23
 80019e6:	21d7      	movs	r1, #215	@ 0xd7
 80019e8:	20c3      	movs	r0, #195	@ 0xc3
 80019ea:	f7ff fdc2 	bl	8001572 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(45,215,150,LCD_COLOR_WHITE);
 80019ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019f2:	2296      	movs	r2, #150	@ 0x96
 80019f4:	21d7      	movs	r1, #215	@ 0xd7
 80019f6:	202d      	movs	r0, #45	@ 0x2d
 80019f8:	f7ff fde2 	bl	80015c0 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(45,250,150,LCD_COLOR_WHITE);
 80019fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a00:	2296      	movs	r2, #150	@ 0x96
 8001a02:	21fa      	movs	r1, #250	@ 0xfa
 8001a04:	202d      	movs	r0, #45	@ 0x2d
 8001a06:	f7ff fddb 	bl	80015c0 <LCD_Draw_Horizontal_Line>

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000004 	.word	0x20000004

08001a14 <screen2>:

void screen2(void){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLUE);
 8001a18:	211f      	movs	r1, #31
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff fdf8 	bl	8001610 <LCD_Clear>
	// Gameplay
	// Draw vertical lines in connect four grid screen is 320 x 240
	LCD_Draw_Vertical_Line(1,50,204, LCD_COLOR_WHITE);
 8001a20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a24:	22cc      	movs	r2, #204	@ 0xcc
 8001a26:	2132      	movs	r1, #50	@ 0x32
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f7ff fda2 	bl	8001572 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(35,50,204, LCD_COLOR_WHITE);
 8001a2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a32:	22cc      	movs	r2, #204	@ 0xcc
 8001a34:	2132      	movs	r1, #50	@ 0x32
 8001a36:	2023      	movs	r0, #35	@ 0x23
 8001a38:	f7ff fd9b 	bl	8001572 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(69,50,204, LCD_COLOR_WHITE);
 8001a3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a40:	22cc      	movs	r2, #204	@ 0xcc
 8001a42:	2132      	movs	r1, #50	@ 0x32
 8001a44:	2045      	movs	r0, #69	@ 0x45
 8001a46:	f7ff fd94 	bl	8001572 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(103,50,204, LCD_COLOR_WHITE);
 8001a4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a4e:	22cc      	movs	r2, #204	@ 0xcc
 8001a50:	2132      	movs	r1, #50	@ 0x32
 8001a52:	2067      	movs	r0, #103	@ 0x67
 8001a54:	f7ff fd8d 	bl	8001572 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(137,50,204, LCD_COLOR_WHITE);
 8001a58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a5c:	22cc      	movs	r2, #204	@ 0xcc
 8001a5e:	2132      	movs	r1, #50	@ 0x32
 8001a60:	2089      	movs	r0, #137	@ 0x89
 8001a62:	f7ff fd86 	bl	8001572 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(171,50,204, LCD_COLOR_WHITE);
 8001a66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a6a:	22cc      	movs	r2, #204	@ 0xcc
 8001a6c:	2132      	movs	r1, #50	@ 0x32
 8001a6e:	20ab      	movs	r0, #171	@ 0xab
 8001a70:	f7ff fd7f 	bl	8001572 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(205,50,204, LCD_COLOR_WHITE);
 8001a74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a78:	22cc      	movs	r2, #204	@ 0xcc
 8001a7a:	2132      	movs	r1, #50	@ 0x32
 8001a7c:	20cd      	movs	r0, #205	@ 0xcd
 8001a7e:	f7ff fd78 	bl	8001572 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(239,50,204, LCD_COLOR_WHITE);
 8001a82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a86:	22cc      	movs	r2, #204	@ 0xcc
 8001a88:	2132      	movs	r1, #50	@ 0x32
 8001a8a:	20ef      	movs	r0, #239	@ 0xef
 8001a8c:	f7ff fd71 	bl	8001572 <LCD_Draw_Vertical_Line>
	// draw horizontal lines in connected four grid
	LCD_Draw_Horizontal_Line(0,50,240,LCD_COLOR_WHITE);
 8001a90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a94:	22f0      	movs	r2, #240	@ 0xf0
 8001a96:	2132      	movs	r1, #50	@ 0x32
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff fd91 	bl	80015c0 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,84,240,LCD_COLOR_WHITE);
 8001a9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001aa2:	22f0      	movs	r2, #240	@ 0xf0
 8001aa4:	2154      	movs	r1, #84	@ 0x54
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff fd8a 	bl	80015c0 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,118,240,LCD_COLOR_WHITE);
 8001aac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ab0:	22f0      	movs	r2, #240	@ 0xf0
 8001ab2:	2176      	movs	r1, #118	@ 0x76
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff fd83 	bl	80015c0 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,152,240,LCD_COLOR_WHITE);
 8001aba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001abe:	22f0      	movs	r2, #240	@ 0xf0
 8001ac0:	2198      	movs	r1, #152	@ 0x98
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff fd7c 	bl	80015c0 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,186,240,LCD_COLOR_WHITE);
 8001ac8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001acc:	22f0      	movs	r2, #240	@ 0xf0
 8001ace:	21ba      	movs	r1, #186	@ 0xba
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f7ff fd75 	bl	80015c0 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,220,240,LCD_COLOR_WHITE);
 8001ad6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ada:	22f0      	movs	r2, #240	@ 0xf0
 8001adc:	21dc      	movs	r1, #220	@ 0xdc
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff fd6e 	bl	80015c0 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,254,240,LCD_COLOR_WHITE);
 8001ae4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ae8:	22f0      	movs	r2, #240	@ 0xf0
 8001aea:	21fe      	movs	r1, #254	@ 0xfe
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff fd67 	bl	80015c0 <LCD_Draw_Horizontal_Line>
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afa:	b672      	cpsid	i
}
 8001afc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afe:	bf00      	nop
 8001b00:	e7fd      	b.n	8001afe <LCD_Error_Handler+0x8>

08001b02 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001b06:	f001 f92e 	bl	8002d66 <STMPE811_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d001      	beq.n	8001b14 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <InitializeLCDTouch+0xe>
  }
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f001 f9d8 	bl	8002ed6 <STMPE811_ReadTouch>
 8001b26:	4603      	mov	r3, r0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001b34:	f000 f9fe 	bl	8001f34 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001b38:	20ca      	movs	r0, #202	@ 0xca
 8001b3a:	f000 f943 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001b3e:	20c3      	movs	r0, #195	@ 0xc3
 8001b40:	f000 f94d 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001b44:	2008      	movs	r0, #8
 8001b46:	f000 f94a 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001b4a:	2050      	movs	r0, #80	@ 0x50
 8001b4c:	f000 f947 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001b50:	20cf      	movs	r0, #207	@ 0xcf
 8001b52:	f000 f937 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001b56:	2000      	movs	r0, #0
 8001b58:	f000 f941 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001b5c:	20c1      	movs	r0, #193	@ 0xc1
 8001b5e:	f000 f93e 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001b62:	2030      	movs	r0, #48	@ 0x30
 8001b64:	f000 f93b 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001b68:	20ed      	movs	r0, #237	@ 0xed
 8001b6a:	f000 f92b 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001b6e:	2064      	movs	r0, #100	@ 0x64
 8001b70:	f000 f935 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001b74:	2003      	movs	r0, #3
 8001b76:	f000 f932 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001b7a:	2012      	movs	r0, #18
 8001b7c:	f000 f92f 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001b80:	2081      	movs	r0, #129	@ 0x81
 8001b82:	f000 f92c 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001b86:	20e8      	movs	r0, #232	@ 0xe8
 8001b88:	f000 f91c 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001b8c:	2085      	movs	r0, #133	@ 0x85
 8001b8e:	f000 f926 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f000 f923 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001b98:	2078      	movs	r0, #120	@ 0x78
 8001b9a:	f000 f920 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001b9e:	20cb      	movs	r0, #203	@ 0xcb
 8001ba0:	f000 f910 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001ba4:	2039      	movs	r0, #57	@ 0x39
 8001ba6:	f000 f91a 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001baa:	202c      	movs	r0, #44	@ 0x2c
 8001bac:	f000 f917 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f000 f914 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001bb6:	2034      	movs	r0, #52	@ 0x34
 8001bb8:	f000 f911 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001bbc:	2002      	movs	r0, #2
 8001bbe:	f000 f90e 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001bc2:	20f7      	movs	r0, #247	@ 0xf7
 8001bc4:	f000 f8fe 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001bc8:	2020      	movs	r0, #32
 8001bca:	f000 f908 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001bce:	20ea      	movs	r0, #234	@ 0xea
 8001bd0:	f000 f8f8 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f000 f902 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f000 f8ff 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001be0:	20b1      	movs	r0, #177	@ 0xb1
 8001be2:	f000 f8ef 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 f8f9 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001bec:	201b      	movs	r0, #27
 8001bee:	f000 f8f6 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001bf2:	20b6      	movs	r0, #182	@ 0xb6
 8001bf4:	f000 f8e6 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001bf8:	200a      	movs	r0, #10
 8001bfa:	f000 f8f0 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001bfe:	20a2      	movs	r0, #162	@ 0xa2
 8001c00:	f000 f8ed 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001c04:	20c0      	movs	r0, #192	@ 0xc0
 8001c06:	f000 f8dd 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001c0a:	2010      	movs	r0, #16
 8001c0c:	f000 f8e7 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001c10:	20c1      	movs	r0, #193	@ 0xc1
 8001c12:	f000 f8d7 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001c16:	2010      	movs	r0, #16
 8001c18:	f000 f8e1 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001c1c:	20c5      	movs	r0, #197	@ 0xc5
 8001c1e:	f000 f8d1 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001c22:	2045      	movs	r0, #69	@ 0x45
 8001c24:	f000 f8db 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001c28:	2015      	movs	r0, #21
 8001c2a:	f000 f8d8 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001c2e:	20c7      	movs	r0, #199	@ 0xc7
 8001c30:	f000 f8c8 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001c34:	2090      	movs	r0, #144	@ 0x90
 8001c36:	f000 f8d2 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001c3a:	2036      	movs	r0, #54	@ 0x36
 8001c3c:	f000 f8c2 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001c40:	20c8      	movs	r0, #200	@ 0xc8
 8001c42:	f000 f8cc 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001c46:	20f2      	movs	r0, #242	@ 0xf2
 8001c48:	f000 f8bc 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f000 f8c6 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001c52:	20b0      	movs	r0, #176	@ 0xb0
 8001c54:	f000 f8b6 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001c58:	20c2      	movs	r0, #194	@ 0xc2
 8001c5a:	f000 f8c0 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001c5e:	20b6      	movs	r0, #182	@ 0xb6
 8001c60:	f000 f8b0 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001c64:	200a      	movs	r0, #10
 8001c66:	f000 f8ba 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001c6a:	20a7      	movs	r0, #167	@ 0xa7
 8001c6c:	f000 f8b7 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001c70:	2027      	movs	r0, #39	@ 0x27
 8001c72:	f000 f8b4 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001c76:	2004      	movs	r0, #4
 8001c78:	f000 f8b1 	bl	8001dde <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001c7c:	202a      	movs	r0, #42	@ 0x2a
 8001c7e:	f000 f8a1 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c82:	2000      	movs	r0, #0
 8001c84:	f000 f8ab 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f000 f8a8 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 f8a5 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001c94:	20ef      	movs	r0, #239	@ 0xef
 8001c96:	f000 f8a2 	bl	8001dde <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001c9a:	202b      	movs	r0, #43	@ 0x2b
 8001c9c:	f000 f892 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f000 f89c 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f000 f899 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001cac:	2001      	movs	r0, #1
 8001cae:	f000 f896 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001cb2:	203f      	movs	r0, #63	@ 0x3f
 8001cb4:	f000 f893 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001cb8:	20f6      	movs	r0, #246	@ 0xf6
 8001cba:	f000 f883 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f000 f88d 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f000 f88a 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001cca:	2006      	movs	r0, #6
 8001ccc:	f000 f887 	bl	8001dde <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001cd0:	202c      	movs	r0, #44	@ 0x2c
 8001cd2:	f000 f877 	bl	8001dc4 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001cd6:	20c8      	movs	r0, #200	@ 0xc8
 8001cd8:	f000 f9e8 	bl	80020ac <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001cdc:	2026      	movs	r0, #38	@ 0x26
 8001cde:	f000 f871 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f000 f87b 	bl	8001dde <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001ce8:	20e0      	movs	r0, #224	@ 0xe0
 8001cea:	f000 f86b 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001cee:	200f      	movs	r0, #15
 8001cf0:	f000 f875 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001cf4:	2029      	movs	r0, #41	@ 0x29
 8001cf6:	f000 f872 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001cfa:	2024      	movs	r0, #36	@ 0x24
 8001cfc:	f000 f86f 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001d00:	200c      	movs	r0, #12
 8001d02:	f000 f86c 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001d06:	200e      	movs	r0, #14
 8001d08:	f000 f869 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001d0c:	2009      	movs	r0, #9
 8001d0e:	f000 f866 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001d12:	204e      	movs	r0, #78	@ 0x4e
 8001d14:	f000 f863 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001d18:	2078      	movs	r0, #120	@ 0x78
 8001d1a:	f000 f860 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001d1e:	203c      	movs	r0, #60	@ 0x3c
 8001d20:	f000 f85d 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001d24:	2009      	movs	r0, #9
 8001d26:	f000 f85a 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001d2a:	2013      	movs	r0, #19
 8001d2c:	f000 f857 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001d30:	2005      	movs	r0, #5
 8001d32:	f000 f854 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001d36:	2017      	movs	r0, #23
 8001d38:	f000 f851 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001d3c:	2011      	movs	r0, #17
 8001d3e:	f000 f84e 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f000 f84b 	bl	8001dde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001d48:	20e1      	movs	r0, #225	@ 0xe1
 8001d4a:	f000 f83b 	bl	8001dc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f000 f845 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001d54:	2016      	movs	r0, #22
 8001d56:	f000 f842 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001d5a:	201b      	movs	r0, #27
 8001d5c:	f000 f83f 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001d60:	2004      	movs	r0, #4
 8001d62:	f000 f83c 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001d66:	2011      	movs	r0, #17
 8001d68:	f000 f839 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001d6c:	2007      	movs	r0, #7
 8001d6e:	f000 f836 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001d72:	2031      	movs	r0, #49	@ 0x31
 8001d74:	f000 f833 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001d78:	2033      	movs	r0, #51	@ 0x33
 8001d7a:	f000 f830 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001d7e:	2042      	movs	r0, #66	@ 0x42
 8001d80:	f000 f82d 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001d84:	2005      	movs	r0, #5
 8001d86:	f000 f82a 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001d8a:	200c      	movs	r0, #12
 8001d8c:	f000 f827 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001d90:	200a      	movs	r0, #10
 8001d92:	f000 f824 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001d96:	2028      	movs	r0, #40	@ 0x28
 8001d98:	f000 f821 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001d9c:	202f      	movs	r0, #47	@ 0x2f
 8001d9e:	f000 f81e 	bl	8001dde <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001da2:	200f      	movs	r0, #15
 8001da4:	f000 f81b 	bl	8001dde <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001da8:	2011      	movs	r0, #17
 8001daa:	f000 f80b 	bl	8001dc4 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001dae:	20c8      	movs	r0, #200	@ 0xc8
 8001db0:	f000 f97c 	bl	80020ac <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001db4:	2029      	movs	r0, #41	@ 0x29
 8001db6:	f000 f805 	bl	8001dc4 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001dba:	202c      	movs	r0, #44	@ 0x2c
 8001dbc:	f000 f802 	bl	8001dc4 <ili9341_Write_Reg>
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 f949 	bl	8002068 <LCD_IO_WriteReg>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f91a 	bl	8002024 <LCD_IO_WriteData>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001dfc:	4819      	ldr	r0, [pc, #100]	@ (8001e64 <SPI_Init+0x6c>)
 8001dfe:	f004 fcb8 	bl	8006772 <HAL_SPI_GetState>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d12b      	bne.n	8001e60 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001e08:	4b16      	ldr	r3, [pc, #88]	@ (8001e64 <SPI_Init+0x6c>)
 8001e0a:	4a17      	ldr	r2, [pc, #92]	@ (8001e68 <SPI_Init+0x70>)
 8001e0c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <SPI_Init+0x6c>)
 8001e10:	2218      	movs	r2, #24
 8001e12:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001e14:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <SPI_Init+0x6c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001e1a:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <SPI_Init+0x6c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001e20:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <SPI_Init+0x6c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001e26:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <SPI_Init+0x6c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <SPI_Init+0x6c>)
 8001e2e:	2207      	movs	r2, #7
 8001e30:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001e32:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <SPI_Init+0x6c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <SPI_Init+0x6c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001e3e:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <SPI_Init+0x6c>)
 8001e40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e44:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001e46:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <SPI_Init+0x6c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <SPI_Init+0x6c>)
 8001e4e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e52:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001e54:	4803      	ldr	r0, [pc, #12]	@ (8001e64 <SPI_Init+0x6c>)
 8001e56:	f000 f833 	bl	8001ec0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001e5a:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <SPI_Init+0x6c>)
 8001e5c:	f004 fa94 	bl	8006388 <HAL_SPI_Init>
  }
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	200259c4 	.word	0x200259c4
 8001e68:	40015000 	.word	0x40015000

08001e6c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001e7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <SPI_Write+0x34>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	1db9      	adds	r1, r7, #6
 8001e80:	2201      	movs	r2, #1
 8001e82:	4808      	ldr	r0, [pc, #32]	@ (8001ea4 <SPI_Write+0x38>)
 8001e84:	f004 fb31 	bl	80064ea <HAL_SPI_Transmit>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001e92:	f000 f809 	bl	8001ea8 <SPI_Error>
  }
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000000c 	.word	0x2000000c
 8001ea4:	200259c4 	.word	0x200259c4

08001ea8 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001eac:	4803      	ldr	r0, [pc, #12]	@ (8001ebc <SPI_Error+0x14>)
 8001eae:	f004 faf4 	bl	800649a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001eb2:	f7ff ffa1 	bl	8001df8 <SPI_Init>
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200259c4 	.word	0x200259c4

08001ec0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	@ 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	4b17      	ldr	r3, [pc, #92]	@ (8001f2c <SPI_MspInit+0x6c>)
 8001ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed0:	4a16      	ldr	r2, [pc, #88]	@ (8001f2c <SPI_MspInit+0x6c>)
 8001ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ed6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ed8:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <SPI_MspInit+0x6c>)
 8001eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001edc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <SPI_MspInit+0x6c>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eec:	4a0f      	ldr	r2, [pc, #60]	@ (8001f2c <SPI_MspInit+0x6c>)
 8001eee:	f043 0320 	orr.w	r3, r3, #32
 8001ef2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <SPI_MspInit+0x6c>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef8:	f003 0320 	and.w	r3, r3, #32
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001f00:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001f12:	2305      	movs	r3, #5
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4804      	ldr	r0, [pc, #16]	@ (8001f30 <SPI_MspInit+0x70>)
 8001f1e:	f001 fd57 	bl	80039d0 <HAL_GPIO_Init>
}
 8001f22:	bf00      	nop
 8001f24:	3728      	adds	r7, #40	@ 0x28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40021400 	.word	0x40021400

08001f34 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001f3a:	4b36      	ldr	r3, [pc, #216]	@ (8002014 <LCD_IO_Init+0xe0>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d164      	bne.n	800200c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001f42:	4b34      	ldr	r3, [pc, #208]	@ (8002014 <LCD_IO_Init+0xe0>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	4b32      	ldr	r3, [pc, #200]	@ (8002018 <LCD_IO_Init+0xe4>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f50:	4a31      	ldr	r2, [pc, #196]	@ (8002018 <LCD_IO_Init+0xe4>)
 8001f52:	f043 0308 	orr.w	r3, r3, #8
 8001f56:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f58:	4b2f      	ldr	r3, [pc, #188]	@ (8002018 <LCD_IO_Init+0xe4>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001f64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001f76:	f107 030c 	add.w	r3, r7, #12
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4827      	ldr	r0, [pc, #156]	@ (800201c <LCD_IO_Init+0xe8>)
 8001f7e:	f001 fd27 	bl	80039d0 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	4b24      	ldr	r3, [pc, #144]	@ (8002018 <LCD_IO_Init+0xe4>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a23      	ldr	r2, [pc, #140]	@ (8002018 <LCD_IO_Init+0xe4>)
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b21      	ldr	r3, [pc, #132]	@ (8002018 <LCD_IO_Init+0xe4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001f9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001fac:	2302      	movs	r3, #2
 8001fae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4819      	ldr	r0, [pc, #100]	@ (800201c <LCD_IO_Init+0xe8>)
 8001fb8:	f001 fd0a 	bl	80039d0 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	4b15      	ldr	r3, [pc, #84]	@ (8002018 <LCD_IO_Init+0xe4>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc4:	4a14      	ldr	r2, [pc, #80]	@ (8002018 <LCD_IO_Init+0xe4>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fcc:	4b12      	ldr	r3, [pc, #72]	@ (8002018 <LCD_IO_Init+0xe4>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001fd8:	2304      	movs	r3, #4
 8001fda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	4619      	mov	r1, r3
 8001fee:	480c      	ldr	r0, [pc, #48]	@ (8002020 <LCD_IO_Init+0xec>)
 8001ff0:	f001 fcee 	bl	80039d0 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	4809      	ldr	r0, [pc, #36]	@ (8002020 <LCD_IO_Init+0xec>)
 8001ffa:	f001 ffa1 	bl	8003f40 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001ffe:	2201      	movs	r2, #1
 8002000:	2104      	movs	r1, #4
 8002002:	4807      	ldr	r0, [pc, #28]	@ (8002020 <LCD_IO_Init+0xec>)
 8002004:	f001 ff9c 	bl	8003f40 <HAL_GPIO_WritePin>

    SPI_Init();
 8002008:	f7ff fef6 	bl	8001df8 <SPI_Init>
  }
}
 800200c:	bf00      	nop
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20025a1c 	.word	0x20025a1c
 8002018:	40023800 	.word	0x40023800
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40020800 	.word	0x40020800

08002024 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800202e:	2201      	movs	r2, #1
 8002030:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002034:	480a      	ldr	r0, [pc, #40]	@ (8002060 <LCD_IO_WriteData+0x3c>)
 8002036:	f001 ff83 	bl	8003f40 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800203a:	2200      	movs	r2, #0
 800203c:	2104      	movs	r1, #4
 800203e:	4809      	ldr	r0, [pc, #36]	@ (8002064 <LCD_IO_WriteData+0x40>)
 8002040:	f001 ff7e 	bl	8003f40 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff10 	bl	8001e6c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800204c:	2201      	movs	r2, #1
 800204e:	2104      	movs	r1, #4
 8002050:	4804      	ldr	r0, [pc, #16]	@ (8002064 <LCD_IO_WriteData+0x40>)
 8002052:	f001 ff75 	bl	8003f40 <HAL_GPIO_WritePin>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40020c00 	.word	0x40020c00
 8002064:	40020800 	.word	0x40020800

08002068 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002072:	2200      	movs	r2, #0
 8002074:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002078:	480a      	ldr	r0, [pc, #40]	@ (80020a4 <LCD_IO_WriteReg+0x3c>)
 800207a:	f001 ff61 	bl	8003f40 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800207e:	2200      	movs	r2, #0
 8002080:	2104      	movs	r1, #4
 8002082:	4809      	ldr	r0, [pc, #36]	@ (80020a8 <LCD_IO_WriteReg+0x40>)
 8002084:	f001 ff5c 	bl	8003f40 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	b29b      	uxth	r3, r3
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff feed 	bl	8001e6c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002092:	2201      	movs	r2, #1
 8002094:	2104      	movs	r1, #4
 8002096:	4804      	ldr	r0, [pc, #16]	@ (80020a8 <LCD_IO_WriteReg+0x40>)
 8002098:	f001 ff52 	bl	8003f40 <HAL_GPIO_WritePin>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40020c00 	.word	0x40020c00
 80020a8:	40020800 	.word	0x40020800

080020ac <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f001 faf7 	bl	80036a8 <HAL_Delay>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c6:	f001 fa7d 	bl	80035c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ca:	f000 f815 	bl	80020f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ce:	f000 fa05 	bl	80024dc <MX_GPIO_Init>
  MX_LTDC_Init();
 80020d2:	f000 f8bb 	bl	800224c <MX_LTDC_Init>
  MX_RNG_Init();
 80020d6:	f000 f96b 	bl	80023b0 <MX_RNG_Init>
  MX_TIM2_Init();
 80020da:	f000 f9b3 	bl	8002444 <MX_TIM2_Init>
  MX_SPI5_Init();
 80020de:	f000 f97b 	bl	80023d8 <MX_SPI5_Init>
  MX_I2C3_Init();
 80020e2:	f000 f873 	bl	80021cc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 80020e6:	f7fe fa4b 	bl	8000580 <ApplicationInit>
  //LCD_Visual_Demo();
  ConnectFour_GameLoop();
 80020ea:	f7fe fbb3 	bl	8000854 <ConnectFour_GameLoop>

    /* USER CODE END 2 */
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
  LCD_Touch_Polling_Demo(); // This function Will not return
 80020ee:	f7fe fa61 	bl	80005b4 <LCD_Touch_Polling_Demo>
#endif
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020f2:	bf00      	nop
 80020f4:	e7fd      	b.n	80020f2 <main+0x30>
	...

080020f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b094      	sub	sp, #80	@ 0x50
 80020fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020fe:	f107 0320 	add.w	r3, r7, #32
 8002102:	2230      	movs	r2, #48	@ 0x30
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f005 f900 	bl	800730c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	4b28      	ldr	r3, [pc, #160]	@ (80021c4 <SystemClock_Config+0xcc>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	4a27      	ldr	r2, [pc, #156]	@ (80021c4 <SystemClock_Config+0xcc>)
 8002126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212a:	6413      	str	r3, [r2, #64]	@ 0x40
 800212c:	4b25      	ldr	r3, [pc, #148]	@ (80021c4 <SystemClock_Config+0xcc>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	4b22      	ldr	r3, [pc, #136]	@ (80021c8 <SystemClock_Config+0xd0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a21      	ldr	r2, [pc, #132]	@ (80021c8 <SystemClock_Config+0xd0>)
 8002142:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b1f      	ldr	r3, [pc, #124]	@ (80021c8 <SystemClock_Config+0xd0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002154:	2301      	movs	r3, #1
 8002156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002158:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800215c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800215e:	2302      	movs	r3, #2
 8002160:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002162:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002166:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002168:	2308      	movs	r3, #8
 800216a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800216c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002170:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002172:	2302      	movs	r3, #2
 8002174:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002176:	2307      	movs	r3, #7
 8002178:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217a:	f107 0320 	add.w	r3, r7, #32
 800217e:	4618      	mov	r0, r3
 8002180:	f003 fa3e 	bl	8005600 <HAL_RCC_OscConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800218a:	f000 fb55 	bl	8002838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800218e:	230f      	movs	r3, #15
 8002190:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002192:	2302      	movs	r3, #2
 8002194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800219a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800219e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	2105      	movs	r1, #5
 80021ac:	4618      	mov	r0, r3
 80021ae:	f003 fc9f 	bl	8005af0 <HAL_RCC_ClockConfig>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80021b8:	f000 fb3e 	bl	8002838 <Error_Handler>
  }
}
 80021bc:	bf00      	nop
 80021be:	3750      	adds	r7, #80	@ 0x50
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40007000 	.word	0x40007000

080021cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80021d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <MX_I2C3_Init+0x74>)
 80021d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002244 <MX_I2C3_Init+0x78>)
 80021d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80021d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <MX_I2C3_Init+0x74>)
 80021d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002248 <MX_I2C3_Init+0x7c>)
 80021da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021dc:	4b18      	ldr	r3, [pc, #96]	@ (8002240 <MX_I2C3_Init+0x74>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80021e2:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <MX_I2C3_Init+0x74>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021e8:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <MX_I2C3_Init+0x74>)
 80021ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021ee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021f0:	4b13      	ldr	r3, [pc, #76]	@ (8002240 <MX_I2C3_Init+0x74>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80021f6:	4b12      	ldr	r3, [pc, #72]	@ (8002240 <MX_I2C3_Init+0x74>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021fc:	4b10      	ldr	r3, [pc, #64]	@ (8002240 <MX_I2C3_Init+0x74>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002202:	4b0f      	ldr	r3, [pc, #60]	@ (8002240 <MX_I2C3_Init+0x74>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002208:	480d      	ldr	r0, [pc, #52]	@ (8002240 <MX_I2C3_Init+0x74>)
 800220a:	f001 feb3 	bl	8003f74 <HAL_I2C_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002214:	f000 fb10 	bl	8002838 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002218:	2100      	movs	r1, #0
 800221a:	4809      	ldr	r0, [pc, #36]	@ (8002240 <MX_I2C3_Init+0x74>)
 800221c:	f002 fece 	bl	8004fbc <HAL_I2CEx_ConfigAnalogFilter>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002226:	f000 fb07 	bl	8002838 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800222a:	2100      	movs	r1, #0
 800222c:	4804      	ldr	r0, [pc, #16]	@ (8002240 <MX_I2C3_Init+0x74>)
 800222e:	f002 ff01 	bl	8005034 <HAL_I2CEx_ConfigDigitalFilter>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002238:	f000 fafe 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20025a20 	.word	0x20025a20
 8002244:	40005c00 	.word	0x40005c00
 8002248:	000186a0 	.word	0x000186a0

0800224c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b09a      	sub	sp, #104	@ 0x68
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002252:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002256:	2234      	movs	r2, #52	@ 0x34
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f005 f856 	bl	800730c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002260:	463b      	mov	r3, r7
 8002262:	2234      	movs	r2, #52	@ 0x34
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f005 f850 	bl	800730c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800226c:	4b4e      	ldr	r3, [pc, #312]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 800226e:	4a4f      	ldr	r2, [pc, #316]	@ (80023ac <MX_LTDC_Init+0x160>)
 8002270:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002272:	4b4d      	ldr	r3, [pc, #308]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002278:	4b4b      	ldr	r3, [pc, #300]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800227e:	4b4a      	ldr	r3, [pc, #296]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 8002280:	2200      	movs	r2, #0
 8002282:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002284:	4b48      	ldr	r3, [pc, #288]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800228a:	4b47      	ldr	r3, [pc, #284]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 800228c:	2207      	movs	r2, #7
 800228e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002290:	4b45      	ldr	r3, [pc, #276]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 8002292:	2203      	movs	r2, #3
 8002294:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8002296:	4b44      	ldr	r3, [pc, #272]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 8002298:	220e      	movs	r2, #14
 800229a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800229c:	4b42      	ldr	r3, [pc, #264]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 800229e:	2205      	movs	r2, #5
 80022a0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80022a2:	4b41      	ldr	r3, [pc, #260]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 80022a4:	f240 228e 	movw	r2, #654	@ 0x28e
 80022a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80022aa:	4b3f      	ldr	r3, [pc, #252]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 80022ac:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80022b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80022b2:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 80022b4:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80022b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80022ba:	4b3b      	ldr	r3, [pc, #236]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 80022bc:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80022c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80022c2:	4b39      	ldr	r3, [pc, #228]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80022ca:	4b37      	ldr	r3, [pc, #220]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80022d2:	4b35      	ldr	r3, [pc, #212]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80022da:	4833      	ldr	r0, [pc, #204]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 80022dc:	f002 feea 	bl	80050b4 <HAL_LTDC_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80022e6:	f000 faa7 	bl	8002838 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80022fa:	2300      	movs	r3, #0
 80022fc:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800230a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800230c:	2305      	movs	r3, #5
 800230e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800232e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002332:	2200      	movs	r2, #0
 8002334:	4619      	mov	r1, r3
 8002336:	481c      	ldr	r0, [pc, #112]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 8002338:	f002 ff8c 	bl	8005254 <HAL_LTDC_ConfigLayer>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002342:	f000 fa79 	bl	8002838 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002366:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002368:	2305      	movs	r3, #5
 800236a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800238a:	463b      	mov	r3, r7
 800238c:	2201      	movs	r2, #1
 800238e:	4619      	mov	r1, r3
 8002390:	4805      	ldr	r0, [pc, #20]	@ (80023a8 <MX_LTDC_Init+0x15c>)
 8002392:	f002 ff5f 	bl	8005254 <HAL_LTDC_ConfigLayer>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800239c:	f000 fa4c 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80023a0:	bf00      	nop
 80023a2:	3768      	adds	r7, #104	@ 0x68
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20025a74 	.word	0x20025a74
 80023ac:	40016800 	.word	0x40016800

080023b0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80023b4:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <MX_RNG_Init+0x20>)
 80023b6:	4a07      	ldr	r2, [pc, #28]	@ (80023d4 <MX_RNG_Init+0x24>)
 80023b8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023ba:	4805      	ldr	r0, [pc, #20]	@ (80023d0 <MX_RNG_Init+0x20>)
 80023bc:	f003 ff64 	bl	8006288 <HAL_RNG_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80023c6:	f000 fa37 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200000d0 	.word	0x200000d0
 80023d4:	50060800 	.word	0x50060800

080023d8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80023dc:	4b17      	ldr	r3, [pc, #92]	@ (800243c <MX_SPI5_Init+0x64>)
 80023de:	4a18      	ldr	r2, [pc, #96]	@ (8002440 <MX_SPI5_Init+0x68>)
 80023e0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80023e2:	4b16      	ldr	r3, [pc, #88]	@ (800243c <MX_SPI5_Init+0x64>)
 80023e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023e8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80023ea:	4b14      	ldr	r3, [pc, #80]	@ (800243c <MX_SPI5_Init+0x64>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80023f0:	4b12      	ldr	r3, [pc, #72]	@ (800243c <MX_SPI5_Init+0x64>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023f6:	4b11      	ldr	r3, [pc, #68]	@ (800243c <MX_SPI5_Init+0x64>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023fc:	4b0f      	ldr	r3, [pc, #60]	@ (800243c <MX_SPI5_Init+0x64>)
 80023fe:	2200      	movs	r2, #0
 8002400:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002402:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <MX_SPI5_Init+0x64>)
 8002404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002408:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800240a:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <MX_SPI5_Init+0x64>)
 800240c:	2200      	movs	r2, #0
 800240e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002410:	4b0a      	ldr	r3, [pc, #40]	@ (800243c <MX_SPI5_Init+0x64>)
 8002412:	2200      	movs	r2, #0
 8002414:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002416:	4b09      	ldr	r3, [pc, #36]	@ (800243c <MX_SPI5_Init+0x64>)
 8002418:	2200      	movs	r2, #0
 800241a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800241c:	4b07      	ldr	r3, [pc, #28]	@ (800243c <MX_SPI5_Init+0x64>)
 800241e:	2200      	movs	r2, #0
 8002420:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002422:	4b06      	ldr	r3, [pc, #24]	@ (800243c <MX_SPI5_Init+0x64>)
 8002424:	220a      	movs	r2, #10
 8002426:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002428:	4804      	ldr	r0, [pc, #16]	@ (800243c <MX_SPI5_Init+0x64>)
 800242a:	f003 ffad 	bl	8006388 <HAL_SPI_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002434:	f000 fa00 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20025b1c 	.word	0x20025b1c
 8002440:	40015000 	.word	0x40015000

08002444 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	f107 0308 	add.w	r3, r7, #8
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	463b      	mov	r3, r7
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002460:	4b1d      	ldr	r3, [pc, #116]	@ (80024d8 <MX_TIM2_Init+0x94>)
 8002462:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002466:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002468:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <MX_TIM2_Init+0x94>)
 800246a:	2200      	movs	r2, #0
 800246c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246e:	4b1a      	ldr	r3, [pc, #104]	@ (80024d8 <MX_TIM2_Init+0x94>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002474:	4b18      	ldr	r3, [pc, #96]	@ (80024d8 <MX_TIM2_Init+0x94>)
 8002476:	f04f 32ff 	mov.w	r2, #4294967295
 800247a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247c:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <MX_TIM2_Init+0x94>)
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002482:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <MX_TIM2_Init+0x94>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002488:	4813      	ldr	r0, [pc, #76]	@ (80024d8 <MX_TIM2_Init+0x94>)
 800248a:	f004 fa5d 	bl	8006948 <HAL_TIM_Base_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002494:	f000 f9d0 	bl	8002838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800249c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800249e:	f107 0308 	add.w	r3, r7, #8
 80024a2:	4619      	mov	r1, r3
 80024a4:	480c      	ldr	r0, [pc, #48]	@ (80024d8 <MX_TIM2_Init+0x94>)
 80024a6:	f004 fa9e 	bl	80069e6 <HAL_TIM_ConfigClockSource>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80024b0:	f000 f9c2 	bl	8002838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024bc:	463b      	mov	r3, r7
 80024be:	4619      	mov	r1, r3
 80024c0:	4805      	ldr	r0, [pc, #20]	@ (80024d8 <MX_TIM2_Init+0x94>)
 80024c2:	f004 fc9d 	bl	8006e00 <HAL_TIMEx_MasterConfigSynchronization>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80024cc:	f000 f9b4 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024d0:	bf00      	nop
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20025b74 	.word	0x20025b74

080024dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08e      	sub	sp, #56	@ 0x38
 80024e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	60da      	str	r2, [r3, #12]
 80024f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
 80024f6:	4bb2      	ldr	r3, [pc, #712]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	4ab1      	ldr	r2, [pc, #708]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 80024fc:	f043 0304 	orr.w	r3, r3, #4
 8002500:	6313      	str	r3, [r2, #48]	@ 0x30
 8002502:	4baf      	ldr	r3, [pc, #700]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	623b      	str	r3, [r7, #32]
 800250c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	4bab      	ldr	r3, [pc, #684]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	4aaa      	ldr	r2, [pc, #680]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 8002518:	f043 0320 	orr.w	r3, r3, #32
 800251c:	6313      	str	r3, [r2, #48]	@ 0x30
 800251e:	4ba8      	ldr	r3, [pc, #672]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	4ba4      	ldr	r3, [pc, #656]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	4aa3      	ldr	r2, [pc, #652]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 8002534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002538:	6313      	str	r3, [r2, #48]	@ 0x30
 800253a:	4ba1      	ldr	r3, [pc, #644]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	4b9d      	ldr	r3, [pc, #628]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	4a9c      	ldr	r2, [pc, #624]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6313      	str	r3, [r2, #48]	@ 0x30
 8002556:	4b9a      	ldr	r3, [pc, #616]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	4b96      	ldr	r3, [pc, #600]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	4a95      	ldr	r2, [pc, #596]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	6313      	str	r3, [r2, #48]	@ 0x30
 8002572:	4b93      	ldr	r3, [pc, #588]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	4b8f      	ldr	r3, [pc, #572]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	4a8e      	ldr	r2, [pc, #568]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 8002588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800258c:	6313      	str	r3, [r2, #48]	@ 0x30
 800258e:	4b8c      	ldr	r3, [pc, #560]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	4b88      	ldr	r3, [pc, #544]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	4a87      	ldr	r2, [pc, #540]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 80025a4:	f043 0310 	orr.w	r3, r3, #16
 80025a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025aa:	4b85      	ldr	r3, [pc, #532]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	4b81      	ldr	r3, [pc, #516]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	4a80      	ldr	r2, [pc, #512]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 80025c0:	f043 0308 	orr.w	r3, r3, #8
 80025c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c6:	4b7e      	ldr	r3, [pc, #504]	@ (80027c0 <MX_GPIO_Init+0x2e4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2116      	movs	r1, #22
 80025d6:	487b      	ldr	r0, [pc, #492]	@ (80027c4 <MX_GPIO_Init+0x2e8>)
 80025d8:	f001 fcb2 	bl	8003f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80025dc:	2200      	movs	r2, #0
 80025de:	2180      	movs	r1, #128	@ 0x80
 80025e0:	4879      	ldr	r0, [pc, #484]	@ (80027c8 <MX_GPIO_Init+0x2ec>)
 80025e2:	f001 fcad 	bl	8003f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80025e6:	2200      	movs	r2, #0
 80025e8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80025ec:	4877      	ldr	r0, [pc, #476]	@ (80027cc <MX_GPIO_Init+0x2f0>)
 80025ee:	f001 fca7 	bl	8003f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80025f2:	2200      	movs	r2, #0
 80025f4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80025f8:	4875      	ldr	r0, [pc, #468]	@ (80027d0 <MX_GPIO_Init+0x2f4>)
 80025fa:	f001 fca1 	bl	8003f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80025fe:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260c:	2303      	movs	r3, #3
 800260e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002610:	230c      	movs	r3, #12
 8002612:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002618:	4619      	mov	r1, r3
 800261a:	486e      	ldr	r0, [pc, #440]	@ (80027d4 <MX_GPIO_Init+0x2f8>)
 800261c:	f001 f9d8 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002620:	2301      	movs	r3, #1
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002630:	230c      	movs	r3, #12
 8002632:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002638:	4619      	mov	r1, r3
 800263a:	4862      	ldr	r0, [pc, #392]	@ (80027c4 <MX_GPIO_Init+0x2e8>)
 800263c:	f001 f9c8 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002640:	2316      	movs	r3, #22
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002644:	2301      	movs	r3, #1
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002650:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002654:	4619      	mov	r1, r3
 8002656:	485b      	ldr	r0, [pc, #364]	@ (80027c4 <MX_GPIO_Init+0x2e8>)
 8002658:	f001 f9ba 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800265c:	f248 0307 	movw	r3, #32775	@ 0x8007
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002662:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002666:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002670:	4619      	mov	r1, r3
 8002672:	4855      	ldr	r0, [pc, #340]	@ (80027c8 <MX_GPIO_Init+0x2ec>)
 8002674:	f001 f9ac 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267c:	2301      	movs	r3, #1
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800268c:	4619      	mov	r1, r3
 800268e:	484e      	ldr	r0, [pc, #312]	@ (80027c8 <MX_GPIO_Init+0x2ec>)
 8002690:	f001 f99e 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002694:	2320      	movs	r3, #32
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002698:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800269c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80026a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026a6:	4619      	mov	r1, r3
 80026a8:	4846      	ldr	r0, [pc, #280]	@ (80027c4 <MX_GPIO_Init+0x2e8>)
 80026aa:	f001 f991 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80026ae:	2304      	movs	r3, #4
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b2:	2300      	movs	r3, #0
 80026b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80026ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026be:	4619      	mov	r1, r3
 80026c0:	4845      	ldr	r0, [pc, #276]	@ (80027d8 <MX_GPIO_Init+0x2fc>)
 80026c2:	f001 f985 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80026c6:	f248 1333 	movw	r3, #33075	@ 0x8133
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d4:	2303      	movs	r3, #3
 80026d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026d8:	230c      	movs	r3, #12
 80026da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026e0:	4619      	mov	r1, r3
 80026e2:	483b      	ldr	r0, [pc, #236]	@ (80027d0 <MX_GPIO_Init+0x2f4>)
 80026e4:	f001 f974 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80026e8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f6:	2303      	movs	r3, #3
 80026f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026fa:	230c      	movs	r3, #12
 80026fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002702:	4619      	mov	r1, r3
 8002704:	4835      	ldr	r0, [pc, #212]	@ (80027dc <MX_GPIO_Init+0x300>)
 8002706:	f001 f963 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800270a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800270e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	2300      	movs	r3, #0
 800271a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800271c:	230c      	movs	r3, #12
 800271e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002724:	4619      	mov	r1, r3
 8002726:	482c      	ldr	r0, [pc, #176]	@ (80027d8 <MX_GPIO_Init+0x2fc>)
 8002728:	f001 f952 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800272c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002732:	2300      	movs	r3, #0
 8002734:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800273a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800273e:	4619      	mov	r1, r3
 8002740:	4825      	ldr	r0, [pc, #148]	@ (80027d8 <MX_GPIO_Init+0x2fc>)
 8002742:	f001 f945 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002746:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002754:	2303      	movs	r3, #3
 8002756:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002758:	230c      	movs	r3, #12
 800275a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800275c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002760:	4619      	mov	r1, r3
 8002762:	481a      	ldr	r0, [pc, #104]	@ (80027cc <MX_GPIO_Init+0x2f0>)
 8002764:	f001 f934 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002768:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800276e:	2300      	movs	r3, #0
 8002770:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002776:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800277a:	4619      	mov	r1, r3
 800277c:	4813      	ldr	r0, [pc, #76]	@ (80027cc <MX_GPIO_Init+0x2f0>)
 800277e:	f001 f927 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002782:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002786:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002788:	2301      	movs	r3, #1
 800278a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002798:	4619      	mov	r1, r3
 800279a:	480c      	ldr	r0, [pc, #48]	@ (80027cc <MX_GPIO_Init+0x2f0>)
 800279c:	f001 f918 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80027a0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80027a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ae:	2303      	movs	r3, #3
 80027b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b2:	2307      	movs	r3, #7
 80027b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ba:	4619      	mov	r1, r3
 80027bc:	e010      	b.n	80027e0 <MX_GPIO_Init+0x304>
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020800 	.word	0x40020800
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020c00 	.word	0x40020c00
 80027d0:	40021800 	.word	0x40021800
 80027d4:	40021400 	.word	0x40021400
 80027d8:	40020400 	.word	0x40020400
 80027dc:	40021000 	.word	0x40021000
 80027e0:	4812      	ldr	r0, [pc, #72]	@ (800282c <MX_GPIO_Init+0x350>)
 80027e2:	f001 f8f5 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80027e6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ec:	2301      	movs	r3, #1
 80027ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	2300      	movs	r3, #0
 80027f6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027fc:	4619      	mov	r1, r3
 80027fe:	480c      	ldr	r0, [pc, #48]	@ (8002830 <MX_GPIO_Init+0x354>)
 8002800:	f001 f8e6 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002804:	2360      	movs	r3, #96	@ 0x60
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002814:	230c      	movs	r3, #12
 8002816:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800281c:	4619      	mov	r1, r3
 800281e:	4805      	ldr	r0, [pc, #20]	@ (8002834 <MX_GPIO_Init+0x358>)
 8002820:	f001 f8d6 	bl	80039d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002824:	bf00      	nop
 8002826:	3738      	adds	r7, #56	@ 0x38
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40020000 	.word	0x40020000
 8002830:	40021800 	.word	0x40021800
 8002834:	40020400 	.word	0x40020400

08002838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800283c:	b672      	cpsid	i
}
 800283e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <Error_Handler+0x8>

08002844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	4b10      	ldr	r3, [pc, #64]	@ (8002890 <HAL_MspInit+0x4c>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	4a0f      	ldr	r2, [pc, #60]	@ (8002890 <HAL_MspInit+0x4c>)
 8002854:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002858:	6453      	str	r3, [r2, #68]	@ 0x44
 800285a:	4b0d      	ldr	r3, [pc, #52]	@ (8002890 <HAL_MspInit+0x4c>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <HAL_MspInit+0x4c>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	4a08      	ldr	r2, [pc, #32]	@ (8002890 <HAL_MspInit+0x4c>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	@ 0x40
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <HAL_MspInit+0x4c>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002882:	2007      	movs	r0, #7
 8002884:	f001 f846 	bl	8003914 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800

08002894 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	@ 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a29      	ldr	r2, [pc, #164]	@ (8002958 <HAL_I2C_MspInit+0xc4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d14b      	bne.n	800294e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	4b28      	ldr	r3, [pc, #160]	@ (800295c <HAL_I2C_MspInit+0xc8>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	4a27      	ldr	r2, [pc, #156]	@ (800295c <HAL_I2C_MspInit+0xc8>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c6:	4b25      	ldr	r3, [pc, #148]	@ (800295c <HAL_I2C_MspInit+0xc8>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b21      	ldr	r3, [pc, #132]	@ (800295c <HAL_I2C_MspInit+0xc8>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	4a20      	ldr	r2, [pc, #128]	@ (800295c <HAL_I2C_MspInit+0xc8>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e2:	4b1e      	ldr	r3, [pc, #120]	@ (800295c <HAL_I2C_MspInit+0xc8>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80028ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f4:	2312      	movs	r3, #18
 80028f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002900:	2304      	movs	r3, #4
 8002902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4619      	mov	r1, r3
 800290a:	4815      	ldr	r0, [pc, #84]	@ (8002960 <HAL_I2C_MspInit+0xcc>)
 800290c:	f001 f860 	bl	80039d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002910:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002916:	2312      	movs	r3, #18
 8002918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002922:	2304      	movs	r3, #4
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	480d      	ldr	r0, [pc, #52]	@ (8002964 <HAL_I2C_MspInit+0xd0>)
 800292e:	f001 f84f 	bl	80039d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	4b09      	ldr	r3, [pc, #36]	@ (800295c <HAL_I2C_MspInit+0xc8>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	4a08      	ldr	r2, [pc, #32]	@ (800295c <HAL_I2C_MspInit+0xc8>)
 800293c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002940:	6413      	str	r3, [r2, #64]	@ 0x40
 8002942:	4b06      	ldr	r3, [pc, #24]	@ (800295c <HAL_I2C_MspInit+0xc8>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800294e:	bf00      	nop
 8002950:	3728      	adds	r7, #40	@ 0x28
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40005c00 	.word	0x40005c00
 800295c:	40023800 	.word	0x40023800
 8002960:	40020800 	.word	0x40020800
 8002964:	40020000 	.word	0x40020000

08002968 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b09a      	sub	sp, #104	@ 0x68
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002984:	2230      	movs	r2, #48	@ 0x30
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f004 fcbf 	bl	800730c <memset>
  if(hltdc->Instance==LTDC)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a81      	ldr	r2, [pc, #516]	@ (8002b98 <HAL_LTDC_MspInit+0x230>)
 8002994:	4293      	cmp	r3, r2
 8002996:	f040 80fb 	bne.w	8002b90 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800299a:	2308      	movs	r3, #8
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 800299e:	23c8      	movs	r3, #200	@ 0xc8
 80029a0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80029a2:	2302      	movs	r3, #2
 80029a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 80029a6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80029aa:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 faa9 	bl	8005f08 <HAL_RCCEx_PeriphCLKConfig>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80029bc:	f7ff ff3c 	bl	8002838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	623b      	str	r3, [r7, #32]
 80029c4:	4b75      	ldr	r3, [pc, #468]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 80029c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c8:	4a74      	ldr	r2, [pc, #464]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 80029ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80029d0:	4b72      	ldr	r3, [pc, #456]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 80029d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029d8:	623b      	str	r3, [r7, #32]
 80029da:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	4b6e      	ldr	r3, [pc, #440]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e4:	4a6d      	ldr	r2, [pc, #436]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 80029e6:	f043 0320 	orr.w	r3, r3, #32
 80029ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ec:	4b6b      	ldr	r3, [pc, #428]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f8:	2300      	movs	r3, #0
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	4b67      	ldr	r3, [pc, #412]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a00:	4a66      	ldr	r2, [pc, #408]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a08:	4b64      	ldr	r3, [pc, #400]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	4b60      	ldr	r3, [pc, #384]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1c:	4a5f      	ldr	r2, [pc, #380]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a24:	4b5d      	ldr	r3, [pc, #372]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	4b59      	ldr	r3, [pc, #356]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 8002a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a38:	4a58      	ldr	r2, [pc, #352]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 8002a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a40:	4b56      	ldr	r3, [pc, #344]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	4b52      	ldr	r3, [pc, #328]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a54:	4a51      	ldr	r2, [pc, #324]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 8002a56:	f043 0304 	orr.w	r3, r3, #4
 8002a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a5c:	4b4f      	ldr	r3, [pc, #316]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a70:	4a4a      	ldr	r2, [pc, #296]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 8002a72:	f043 0308 	orr.w	r3, r3, #8
 8002a76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a78:	4b48      	ldr	r3, [pc, #288]	@ (8002b9c <HAL_LTDC_MspInit+0x234>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002a84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a88:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a96:	230e      	movs	r3, #14
 8002a98:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002a9a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	483f      	ldr	r0, [pc, #252]	@ (8002ba0 <HAL_LTDC_MspInit+0x238>)
 8002aa2:	f000 ff95 	bl	80039d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002aa6:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002aaa:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	2302      	movs	r3, #2
 8002aae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ab8:	230e      	movs	r3, #14
 8002aba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002abc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4838      	ldr	r0, [pc, #224]	@ (8002ba4 <HAL_LTDC_MspInit+0x23c>)
 8002ac4:	f000 ff84 	bl	80039d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002ad8:	2309      	movs	r3, #9
 8002ada:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002adc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4831      	ldr	r0, [pc, #196]	@ (8002ba8 <HAL_LTDC_MspInit+0x240>)
 8002ae4:	f000 ff74 	bl	80039d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002ae8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002aec:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aee:	2302      	movs	r3, #2
 8002af0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af6:	2300      	movs	r3, #0
 8002af8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002afa:	230e      	movs	r3, #14
 8002afc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b02:	4619      	mov	r1, r3
 8002b04:	4828      	ldr	r0, [pc, #160]	@ (8002ba8 <HAL_LTDC_MspInit+0x240>)
 8002b06:	f000 ff63 	bl	80039d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002b0a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002b0e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b10:	2302      	movs	r3, #2
 8002b12:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b1c:	230e      	movs	r3, #14
 8002b1e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b24:	4619      	mov	r1, r3
 8002b26:	4821      	ldr	r0, [pc, #132]	@ (8002bac <HAL_LTDC_MspInit+0x244>)
 8002b28:	f000 ff52 	bl	80039d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002b2c:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002b30:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b32:	2302      	movs	r3, #2
 8002b34:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b3e:	230e      	movs	r3, #14
 8002b40:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b42:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b46:	4619      	mov	r1, r3
 8002b48:	4819      	ldr	r0, [pc, #100]	@ (8002bb0 <HAL_LTDC_MspInit+0x248>)
 8002b4a:	f000 ff41 	bl	80039d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002b4e:	2348      	movs	r3, #72	@ 0x48
 8002b50:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b5e:	230e      	movs	r3, #14
 8002b60:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b62:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b66:	4619      	mov	r1, r3
 8002b68:	4812      	ldr	r0, [pc, #72]	@ (8002bb4 <HAL_LTDC_MspInit+0x24c>)
 8002b6a:	f000 ff31 	bl	80039d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002b6e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b72:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b80:	2309      	movs	r3, #9
 8002b82:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4808      	ldr	r0, [pc, #32]	@ (8002bac <HAL_LTDC_MspInit+0x244>)
 8002b8c:	f000 ff20 	bl	80039d0 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002b90:	bf00      	nop
 8002b92:	3768      	adds	r7, #104	@ 0x68
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40016800 	.word	0x40016800
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40021400 	.word	0x40021400
 8002ba4:	40020000 	.word	0x40020000
 8002ba8:	40020400 	.word	0x40020400
 8002bac:	40021800 	.word	0x40021800
 8002bb0:	40020800 	.word	0x40020800
 8002bb4:	40020c00 	.word	0x40020c00

08002bb8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf4 <HAL_RNG_MspInit+0x3c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d10d      	bne.n	8002be6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf8 <HAL_RNG_MspInit+0x40>)
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd2:	4a09      	ldr	r2, [pc, #36]	@ (8002bf8 <HAL_RNG_MspInit+0x40>)
 8002bd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bd8:	6353      	str	r3, [r2, #52]	@ 0x34
 8002bda:	4b07      	ldr	r3, [pc, #28]	@ (8002bf8 <HAL_RNG_MspInit+0x40>)
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	50060800 	.word	0x50060800
 8002bf8:	40023800 	.word	0x40023800

08002bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	@ 0x28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a19      	ldr	r2, [pc, #100]	@ (8002c80 <HAL_SPI_MspInit+0x84>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d12c      	bne.n	8002c78 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	4b18      	ldr	r3, [pc, #96]	@ (8002c84 <HAL_SPI_MspInit+0x88>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c26:	4a17      	ldr	r2, [pc, #92]	@ (8002c84 <HAL_SPI_MspInit+0x88>)
 8002c28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c2e:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <HAL_SPI_MspInit+0x88>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <HAL_SPI_MspInit+0x88>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	4a10      	ldr	r2, [pc, #64]	@ (8002c84 <HAL_SPI_MspInit+0x88>)
 8002c44:	f043 0320 	orr.w	r3, r3, #32
 8002c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c84 <HAL_SPI_MspInit+0x88>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002c56:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002c68:	2305      	movs	r3, #5
 8002c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	4619      	mov	r1, r3
 8002c72:	4805      	ldr	r0, [pc, #20]	@ (8002c88 <HAL_SPI_MspInit+0x8c>)
 8002c74:	f000 feac 	bl	80039d0 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002c78:	bf00      	nop
 8002c7a:	3728      	adds	r7, #40	@ 0x28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40015000 	.word	0x40015000
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40021400 	.word	0x40021400

08002c8c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a08      	ldr	r2, [pc, #32]	@ (8002cbc <HAL_SPI_MspDeInit+0x30>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d10a      	bne.n	8002cb4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002c9e:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <HAL_SPI_MspDeInit+0x34>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	4a07      	ldr	r2, [pc, #28]	@ (8002cc0 <HAL_SPI_MspDeInit+0x34>)
 8002ca4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002ca8:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002caa:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002cae:	4805      	ldr	r0, [pc, #20]	@ (8002cc4 <HAL_SPI_MspDeInit+0x38>)
 8002cb0:	f001 f83a 	bl	8003d28 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40015000 	.word	0x40015000
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40021400 	.word	0x40021400

08002cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd8:	d10d      	bne.n	8002cf6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b09      	ldr	r3, [pc, #36]	@ (8002d04 <HAL_TIM_Base_MspInit+0x3c>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	4a08      	ldr	r2, [pc, #32]	@ (8002d04 <HAL_TIM_Base_MspInit+0x3c>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cea:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <HAL_TIM_Base_MspInit+0x3c>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800

08002d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d0c:	bf00      	nop
 8002d0e:	e7fd      	b.n	8002d0c <NMI_Handler+0x4>

08002d10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <HardFault_Handler+0x4>

08002d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <MemManage_Handler+0x4>

08002d20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <BusFault_Handler+0x4>

08002d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <UsageFault_Handler+0x4>

08002d30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d5e:	f000 fc83 	bl	8003668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002d6c:	f000 f9ce 	bl	800310c <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002d70:	f000 f98e 	bl	8003090 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002d74:	2202      	movs	r2, #2
 8002d76:	2103      	movs	r1, #3
 8002d78:	2082      	movs	r0, #130	@ 0x82
 8002d7a:	f000 fa1b 	bl	80031b4 <I2C3_Write>
    HAL_Delay(5);
 8002d7e:	2005      	movs	r0, #5
 8002d80:	f000 fc92 	bl	80036a8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002d84:	2200      	movs	r2, #0
 8002d86:	2103      	movs	r1, #3
 8002d88:	2082      	movs	r0, #130	@ 0x82
 8002d8a:	f000 fa13 	bl	80031b4 <I2C3_Write>
    HAL_Delay(2);
 8002d8e:	2002      	movs	r0, #2
 8002d90:	f000 fc8a 	bl	80036a8 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002d94:	1cba      	adds	r2, r7, #2
 8002d96:	2302      	movs	r3, #2
 8002d98:	2100      	movs	r1, #0
 8002d9a:	2082      	movs	r0, #130	@ 0x82
 8002d9c:	f000 fa5a 	bl	8003254 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002da6:	887b      	ldrh	r3, [r7, #2]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	f640 0211 	movw	r2, #2065	@ 0x811
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d001      	beq.n	8002dc0 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e075      	b.n	8002eac <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	2103      	movs	r1, #3
 8002dc4:	2082      	movs	r0, #130	@ 0x82
 8002dc6:	f000 f9f5 	bl	80031b4 <I2C3_Write>
    HAL_Delay(5);
 8002dca:	2005      	movs	r0, #5
 8002dcc:	f000 fc6c 	bl	80036a8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2103      	movs	r1, #3
 8002dd4:	2082      	movs	r0, #130	@ 0x82
 8002dd6:	f000 f9ed 	bl	80031b4 <I2C3_Write>
    HAL_Delay(2);
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f000 fc64 	bl	80036a8 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002de0:	2004      	movs	r0, #4
 8002de2:	f000 f867 	bl	8002eb4 <STMPE811_Read>
 8002de6:	4603      	mov	r3, r0
 8002de8:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002dea:	797b      	ldrb	r3, [r7, #5]
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002df2:	797b      	ldrb	r3, [r7, #5]
 8002df4:	461a      	mov	r2, r3
 8002df6:	2104      	movs	r1, #4
 8002df8:	2082      	movs	r0, #130	@ 0x82
 8002dfa:	f000 f9db 	bl	80031b4 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002dfe:	2004      	movs	r0, #4
 8002e00:	f000 f858 	bl	8002eb4 <STMPE811_Read>
 8002e04:	4603      	mov	r3, r0
 8002e06:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002e08:	797b      	ldrb	r3, [r7, #5]
 8002e0a:	f023 0302 	bic.w	r3, r3, #2
 8002e0e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002e10:	797b      	ldrb	r3, [r7, #5]
 8002e12:	461a      	mov	r2, r3
 8002e14:	2104      	movs	r1, #4
 8002e16:	2082      	movs	r0, #130	@ 0x82
 8002e18:	f000 f9cc 	bl	80031b4 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002e1c:	2249      	movs	r2, #73	@ 0x49
 8002e1e:	2120      	movs	r1, #32
 8002e20:	2082      	movs	r0, #130	@ 0x82
 8002e22:	f000 f9c7 	bl	80031b4 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002e26:	2002      	movs	r0, #2
 8002e28:	f000 fc3e 	bl	80036a8 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	2121      	movs	r1, #33	@ 0x21
 8002e30:	2082      	movs	r0, #130	@ 0x82
 8002e32:	f000 f9bf 	bl	80031b4 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002e36:	2017      	movs	r0, #23
 8002e38:	f000 f83c 	bl	8002eb4 <STMPE811_Read>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002e40:	797b      	ldrb	r3, [r7, #5]
 8002e42:	f043 031e 	orr.w	r3, r3, #30
 8002e46:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002e48:	797b      	ldrb	r3, [r7, #5]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2117      	movs	r1, #23
 8002e4e:	2082      	movs	r0, #130	@ 0x82
 8002e50:	f000 f9b0 	bl	80031b4 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002e54:	229a      	movs	r2, #154	@ 0x9a
 8002e56:	2141      	movs	r1, #65	@ 0x41
 8002e58:	2082      	movs	r0, #130	@ 0x82
 8002e5a:	f000 f9ab 	bl	80031b4 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002e5e:	2201      	movs	r2, #1
 8002e60:	214a      	movs	r1, #74	@ 0x4a
 8002e62:	2082      	movs	r0, #130	@ 0x82
 8002e64:	f000 f9a6 	bl	80031b4 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002e68:	2201      	movs	r2, #1
 8002e6a:	214b      	movs	r1, #75	@ 0x4b
 8002e6c:	2082      	movs	r0, #130	@ 0x82
 8002e6e:	f000 f9a1 	bl	80031b4 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002e72:	2200      	movs	r2, #0
 8002e74:	214b      	movs	r1, #75	@ 0x4b
 8002e76:	2082      	movs	r0, #130	@ 0x82
 8002e78:	f000 f99c 	bl	80031b4 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	2156      	movs	r1, #86	@ 0x56
 8002e80:	2082      	movs	r0, #130	@ 0x82
 8002e82:	f000 f997 	bl	80031b4 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002e86:	2201      	movs	r2, #1
 8002e88:	2158      	movs	r1, #88	@ 0x58
 8002e8a:	2082      	movs	r0, #130	@ 0x82
 8002e8c:	f000 f992 	bl	80031b4 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002e90:	2203      	movs	r2, #3
 8002e92:	2140      	movs	r1, #64	@ 0x40
 8002e94:	2082      	movs	r0, #130	@ 0x82
 8002e96:	f000 f98d 	bl	80031b4 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002e9a:	22ff      	movs	r2, #255	@ 0xff
 8002e9c:	210b      	movs	r1, #11
 8002e9e:	2082      	movs	r0, #130	@ 0x82
 8002ea0:	f000 f988 	bl	80031b4 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002ea4:	20c8      	movs	r0, #200	@ 0xc8
 8002ea6:	f000 fbff 	bl	80036a8 <HAL_Delay>

    return STMPE811_State_Ok;
 8002eaa:	2302      	movs	r3, #2

}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002ebe:	f107 020f 	add.w	r2, r7, #15
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	2082      	movs	r0, #130	@ 0x82
 8002ec8:	f000 f99e 	bl	8003208 <I2C3_Read>

    return readData;
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	791a      	ldrb	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002ee6:	2040      	movs	r0, #64	@ 0x40
 8002ee8:	f7ff ffe4 	bl	8002eb4 <STMPE811_Read>
 8002eec:	4603      	mov	r3, r0
 8002eee:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	db0e      	blt.n	8002f16 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002efe:	2201      	movs	r2, #1
 8002f00:	214b      	movs	r1, #75	@ 0x4b
 8002f02:	2082      	movs	r0, #130	@ 0x82
 8002f04:	f000 f956 	bl	80031b4 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	214b      	movs	r1, #75	@ 0x4b
 8002f0c:	2082      	movs	r0, #130	@ 0x82
 8002f0e:	f000 f951 	bl	80031b4 <I2C3_Write>

        return STMPE811_State_Released;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e0a7      	b.n	8003066 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	799b      	ldrb	r3, [r3, #6]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d117      	bne.n	8002f4e <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f9b8 	bl	8003298 <TM_STMPE811_ReadX>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	885b      	ldrh	r3, [r3, #2]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fa0b 	bl	8003354 <TM_STMPE811_ReadY>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002f44:	3301      	adds	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	805a      	strh	r2, [r3, #2]
 8002f4c:	e048      	b.n	8002fe0 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	799b      	ldrb	r3, [r3, #6]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d112      	bne.n	8002f7c <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f99c 	bl	8003298 <TM_STMPE811_ReadX>
 8002f60:	4603      	mov	r3, r0
 8002f62:	461a      	mov	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	885b      	ldrh	r3, [r3, #2]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 f9f1 	bl	8003354 <TM_STMPE811_ReadY>
 8002f72:	4603      	mov	r3, r0
 8002f74:	461a      	mov	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	805a      	strh	r2, [r3, #2]
 8002f7a:	e031      	b.n	8002fe0 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	799b      	ldrb	r3, [r3, #6]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d115      	bne.n	8002fb0 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	885b      	ldrh	r3, [r3, #2]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f985 	bl	8003298 <TM_STMPE811_ReadX>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	461a      	mov	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f9da 	bl	8003354 <TM_STMPE811_ReadY>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	801a      	strh	r2, [r3, #0]
 8002fae:	e017      	b.n	8002fe0 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	799b      	ldrb	r3, [r3, #6]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d113      	bne.n	8002fe0 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 f96b 	bl	8003298 <TM_STMPE811_ReadX>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f9be 	bl	8003354 <TM_STMPE811_ReadY>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	214b      	movs	r1, #75	@ 0x4b
 8002fe4:	2082      	movs	r0, #130	@ 0x82
 8002fe6:	f000 f8e5 	bl	80031b4 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002fea:	2200      	movs	r2, #0
 8002fec:	214b      	movs	r1, #75	@ 0x4b
 8002fee:	2082      	movs	r0, #130	@ 0x82
 8002ff0:	f000 f8e0 	bl	80031b4 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	799b      	ldrb	r3, [r3, #6]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <STMPE811_ReadTouch+0x12e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	799b      	ldrb	r3, [r3, #6]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d115      	bne.n	8003030 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d027      	beq.n	800305c <STMPE811_ReadTouch+0x186>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	2bee      	cmp	r3, #238	@ 0xee
 8003012:	d823      	bhi.n	800305c <STMPE811_ReadTouch+0x186>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	885b      	ldrh	r3, [r3, #2]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01f      	beq.n	800305c <STMPE811_ReadTouch+0x186>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	885b      	ldrh	r3, [r3, #2]
 8003020:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003024:	d81a      	bhi.n	800305c <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800302c:	2300      	movs	r3, #0
 800302e:	e01a      	b.n	8003066 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d012      	beq.n	800305e <STMPE811_ReadTouch+0x188>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003040:	d80d      	bhi.n	800305e <STMPE811_ReadTouch+0x188>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	885b      	ldrh	r3, [r3, #2]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <STMPE811_ReadTouch+0x188>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	885b      	ldrh	r3, [r3, #2]
 800304e:	2bee      	cmp	r3, #238	@ 0xee
 8003050:	d805      	bhi.n	800305e <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003058:	2300      	movs	r3, #0
 800305a:	e004      	b.n	8003066 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800305c:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8003064:	2301      	movs	r3, #1
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <verifyHAL_I2C_IS_OKAY+0x1c>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20025c10 	.word	0x20025c10

08003090 <I2C3_Init>:

static void I2C3_Init()
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	4b18      	ldr	r3, [pc, #96]	@ (80030fc <I2C3_Init+0x6c>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	4a17      	ldr	r2, [pc, #92]	@ (80030fc <I2C3_Init+0x6c>)
 80030a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a6:	4b15      	ldr	r3, [pc, #84]	@ (80030fc <I2C3_Init+0x6c>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80030b2:	4b13      	ldr	r3, [pc, #76]	@ (8003100 <I2C3_Init+0x70>)
 80030b4:	4a13      	ldr	r2, [pc, #76]	@ (8003104 <I2C3_Init+0x74>)
 80030b6:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80030b8:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <I2C3_Init+0x70>)
 80030ba:	4a13      	ldr	r2, [pc, #76]	@ (8003108 <I2C3_Init+0x78>)
 80030bc:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80030be:	4b10      	ldr	r3, [pc, #64]	@ (8003100 <I2C3_Init+0x70>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80030c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003100 <I2C3_Init+0x70>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003100 <I2C3_Init+0x70>)
 80030cc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80030d0:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80030d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <I2C3_Init+0x70>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030d8:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <I2C3_Init+0x70>)
 80030da:	2200      	movs	r2, #0
 80030dc:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80030de:	4808      	ldr	r0, [pc, #32]	@ (8003100 <I2C3_Init+0x70>)
 80030e0:	f000 ff48 	bl	8003f74 <HAL_I2C_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80030ee:	bf00      	nop
 80030f0:	e7fd      	b.n	80030ee <I2C3_Init+0x5e>
    }
    return;
 80030f2:	bf00      	nop
}
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	20025bbc 	.word	0x20025bbc
 8003104:	40005c00 	.word	0x40005c00
 8003108:	000186a0 	.word	0x000186a0

0800310c <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003112:	f107 030c 	add.w	r3, r7, #12
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	60da      	str	r2, [r3, #12]
 8003120:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	4b20      	ldr	r3, [pc, #128]	@ (80031a8 <I2C3_MspInit+0x9c>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	4a1f      	ldr	r2, [pc, #124]	@ (80031a8 <I2C3_MspInit+0x9c>)
 800312c:	f043 0304 	orr.w	r3, r3, #4
 8003130:	6313      	str	r3, [r2, #48]	@ 0x30
 8003132:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <I2C3_MspInit+0x9c>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
 8003142:	4b19      	ldr	r3, [pc, #100]	@ (80031a8 <I2C3_MspInit+0x9c>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003146:	4a18      	ldr	r2, [pc, #96]	@ (80031a8 <I2C3_MspInit+0x9c>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6313      	str	r3, [r2, #48]	@ 0x30
 800314e:	4b16      	ldr	r3, [pc, #88]	@ (80031a8 <I2C3_MspInit+0x9c>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	607b      	str	r3, [r7, #4]
 8003158:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800315a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800315e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003160:	2312      	movs	r3, #18
 8003162:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003168:	2300      	movs	r3, #0
 800316a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800316c:	2304      	movs	r3, #4
 800316e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003170:	f107 030c 	add.w	r3, r7, #12
 8003174:	4619      	mov	r1, r3
 8003176:	480d      	ldr	r0, [pc, #52]	@ (80031ac <I2C3_MspInit+0xa0>)
 8003178:	f000 fc2a 	bl	80039d0 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800317c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003180:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003182:	2312      	movs	r3, #18
 8003184:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800318e:	2304      	movs	r3, #4
 8003190:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003192:	f107 030c 	add.w	r3, r7, #12
 8003196:	4619      	mov	r1, r3
 8003198:	4805      	ldr	r0, [pc, #20]	@ (80031b0 <I2C3_MspInit+0xa4>)
 800319a:	f000 fc19 	bl	80039d0 <HAL_GPIO_Init>
    
}
 800319e:	bf00      	nop
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40020800 	.word	0x40020800
 80031b0:	40020000 	.word	0x40020000

080031b4 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af04      	add	r7, sp, #16
 80031ba:	4603      	mov	r3, r0
 80031bc:	80fb      	strh	r3, [r7, #6]
 80031be:	460b      	mov	r3, r1
 80031c0:	717b      	strb	r3, [r7, #5]
 80031c2:	4613      	mov	r3, r2
 80031c4:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80031c6:	793b      	ldrb	r3, [r7, #4]
 80031c8:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80031ca:	797b      	ldrb	r3, [r7, #5]
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	88f9      	ldrh	r1, [r7, #6]
 80031d0:	4b0a      	ldr	r3, [pc, #40]	@ (80031fc <I2C3_Write+0x48>)
 80031d2:	9302      	str	r3, [sp, #8]
 80031d4:	2301      	movs	r3, #1
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	f107 030f 	add.w	r3, r7, #15
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	2301      	movs	r3, #1
 80031e0:	4807      	ldr	r0, [pc, #28]	@ (8003200 <I2C3_Write+0x4c>)
 80031e2:	f001 f80b 	bl	80041fc <HAL_I2C_Mem_Write>
 80031e6:	4603      	mov	r3, r0
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <I2C3_Write+0x50>)
 80031ec:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80031ee:	f7ff ff3f 	bl	8003070 <verifyHAL_I2C_IS_OKAY>
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	0003d090 	.word	0x0003d090
 8003200:	20025bbc 	.word	0x20025bbc
 8003204:	20025c10 	.word	0x20025c10

08003208 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af04      	add	r7, sp, #16
 800320e:	4603      	mov	r3, r0
 8003210:	603a      	str	r2, [r7, #0]
 8003212:	71fb      	strb	r3, [r7, #7]
 8003214:	460b      	mov	r3, r1
 8003216:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	b299      	uxth	r1, r3
 800321c:	79bb      	ldrb	r3, [r7, #6]
 800321e:	b29a      	uxth	r2, r3
 8003220:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <I2C3_Read+0x40>)
 8003222:	9302      	str	r3, [sp, #8]
 8003224:	2301      	movs	r3, #1
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	2301      	movs	r3, #1
 800322e:	4807      	ldr	r0, [pc, #28]	@ (800324c <I2C3_Read+0x44>)
 8003230:	f001 f8de 	bl	80043f0 <HAL_I2C_Mem_Read>
 8003234:	4603      	mov	r3, r0
 8003236:	461a      	mov	r2, r3
 8003238:	4b05      	ldr	r3, [pc, #20]	@ (8003250 <I2C3_Read+0x48>)
 800323a:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800323c:	f7ff ff18 	bl	8003070 <verifyHAL_I2C_IS_OKAY>
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	0003d090 	.word	0x0003d090
 800324c:	20025bbc 	.word	0x20025bbc
 8003250:	20025c10 	.word	0x20025c10

08003254 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af04      	add	r7, sp, #16
 800325a:	603a      	str	r2, [r7, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	4603      	mov	r3, r0
 8003260:	71fb      	strb	r3, [r7, #7]
 8003262:	460b      	mov	r3, r1
 8003264:	71bb      	strb	r3, [r7, #6]
 8003266:	4613      	mov	r3, r2
 8003268:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	b299      	uxth	r1, r3
 800326e:	79bb      	ldrb	r3, [r7, #6]
 8003270:	b29a      	uxth	r2, r3
 8003272:	4b07      	ldr	r3, [pc, #28]	@ (8003290 <I2C3_MulitByteRead+0x3c>)
 8003274:	9302      	str	r3, [sp, #8]
 8003276:	88bb      	ldrh	r3, [r7, #4]
 8003278:	9301      	str	r3, [sp, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	2301      	movs	r3, #1
 8003280:	4804      	ldr	r0, [pc, #16]	@ (8003294 <I2C3_MulitByteRead+0x40>)
 8003282:	f001 f8b5 	bl	80043f0 <HAL_I2C_Mem_Read>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	0003d090 	.word	0x0003d090
 8003294:	20025bbc 	.word	0x20025bbc

08003298 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80032a2:	204d      	movs	r0, #77	@ 0x4d
 80032a4:	f7ff fe06 	bl	8002eb4 <STMPE811_Read>
 80032a8:	4603      	mov	r3, r0
 80032aa:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80032ac:	204e      	movs	r0, #78	@ 0x4e
 80032ae:	f7ff fe01 	bl	8002eb4 <STMPE811_Read>
 80032b2:	4603      	mov	r3, r0
 80032b4:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80032b6:	7a7b      	ldrb	r3, [r7, #9]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	b21a      	sxth	r2, r3
 80032bc:	7a3b      	ldrb	r3, [r7, #8]
 80032be:	b21b      	sxth	r3, r3
 80032c0:	4313      	orrs	r3, r2
 80032c2:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80032c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032c8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80032cc:	4293      	cmp	r3, r2
 80032ce:	dc06      	bgt.n	80032de <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80032d0:	89fb      	ldrh	r3, [r7, #14]
 80032d2:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80032d6:	330c      	adds	r3, #12
 80032d8:	b29b      	uxth	r3, r3
 80032da:	81fb      	strh	r3, [r7, #14]
 80032dc:	e005      	b.n	80032ea <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80032de:	89fb      	ldrh	r3, [r7, #14]
 80032e0:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80032e4:	3308      	adds	r3, #8
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80032ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032ee:	4a18      	ldr	r2, [pc, #96]	@ (8003350 <TM_STMPE811_ReadX+0xb8>)
 80032f0:	fb82 1203 	smull	r1, r2, r2, r3
 80032f4:	441a      	add	r2, r3
 80032f6:	10d2      	asrs	r2, r2, #3
 80032f8:	17db      	asrs	r3, r3, #31
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80032fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003302:	2bef      	cmp	r3, #239	@ 0xef
 8003304:	dd02      	ble.n	800330c <TM_STMPE811_ReadX+0x74>
        val = 239;
 8003306:	23ef      	movs	r3, #239	@ 0xef
 8003308:	81fb      	strh	r3, [r7, #14]
 800330a:	e005      	b.n	8003318 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 800330c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003310:	2b00      	cmp	r3, #0
 8003312:	da01      	bge.n	8003318 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003318:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	429a      	cmp	r2, r3
 8003320:	dd05      	ble.n	800332e <TM_STMPE811_ReadX+0x96>
 8003322:	89fa      	ldrh	r2, [r7, #14]
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	b29b      	uxth	r3, r3
 800332a:	b21b      	sxth	r3, r3
 800332c:	e004      	b.n	8003338 <TM_STMPE811_ReadX+0xa0>
 800332e:	89fb      	ldrh	r3, [r7, #14]
 8003330:	88fa      	ldrh	r2, [r7, #6]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	b29b      	uxth	r3, r3
 8003336:	b21b      	sxth	r3, r3
 8003338:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 800333a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800333e:	2b04      	cmp	r3, #4
 8003340:	dd01      	ble.n	8003346 <TM_STMPE811_ReadX+0xae>
        return val;
 8003342:	89fb      	ldrh	r3, [r7, #14]
 8003344:	e000      	b.n	8003348 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003346:	88fb      	ldrh	r3, [r7, #6]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	88888889 	.word	0x88888889

08003354 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800335e:	204f      	movs	r0, #79	@ 0x4f
 8003360:	f7ff fda8 	bl	8002eb4 <STMPE811_Read>
 8003364:	4603      	mov	r3, r0
 8003366:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003368:	2050      	movs	r0, #80	@ 0x50
 800336a:	f7ff fda3 	bl	8002eb4 <STMPE811_Read>
 800336e:	4603      	mov	r3, r0
 8003370:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003372:	7a7b      	ldrb	r3, [r7, #9]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	b21a      	sxth	r2, r3
 8003378:	7a3b      	ldrb	r3, [r7, #8]
 800337a:	b21b      	sxth	r3, r3
 800337c:	4313      	orrs	r3, r2
 800337e:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003380:	89fb      	ldrh	r3, [r7, #14]
 8003382:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003386:	b29b      	uxth	r3, r3
 8003388:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800338a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800338e:	4a19      	ldr	r2, [pc, #100]	@ (80033f4 <TM_STMPE811_ReadY+0xa0>)
 8003390:	fb82 1203 	smull	r1, r2, r2, r3
 8003394:	1052      	asrs	r2, r2, #1
 8003396:	17db      	asrs	r3, r3, #31
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 800339c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	dc02      	bgt.n	80033aa <TM_STMPE811_ReadY+0x56>
        val = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	81fb      	strh	r3, [r7, #14]
 80033a8:	e007      	b.n	80033ba <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80033aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033ae:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80033b2:	db02      	blt.n	80033ba <TM_STMPE811_ReadY+0x66>
        val = 319;
 80033b4:	f240 133f 	movw	r3, #319	@ 0x13f
 80033b8:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80033ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	dd05      	ble.n	80033d0 <TM_STMPE811_ReadY+0x7c>
 80033c4:	89fa      	ldrh	r2, [r7, #14]
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	b21b      	sxth	r3, r3
 80033ce:	e004      	b.n	80033da <TM_STMPE811_ReadY+0x86>
 80033d0:	89fb      	ldrh	r3, [r7, #14]
 80033d2:	88fa      	ldrh	r2, [r7, #6]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	b21b      	sxth	r3, r3
 80033da:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80033dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	dd01      	ble.n	80033e8 <TM_STMPE811_ReadY+0x94>
        return val;
 80033e4:	89fb      	ldrh	r3, [r7, #14]
 80033e6:	e000      	b.n	80033ea <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80033e8:	88fb      	ldrh	r3, [r7, #6]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	2e8ba2e9 	.word	0x2e8ba2e9

080033f8 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	e00a      	b.n	800342e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003418:	f3af 8000 	nop.w
 800341c:	4601      	mov	r1, r0
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	60ba      	str	r2, [r7, #8]
 8003424:	b2ca      	uxtb	r2, r1
 8003426:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	3301      	adds	r3, #1
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	429a      	cmp	r2, r3
 8003434:	dbf0      	blt.n	8003418 <_read+0x12>
  }

  return len;
 8003436:	687b      	ldr	r3, [r7, #4]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	e009      	b.n	8003466 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	60ba      	str	r2, [r7, #8]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3301      	adds	r3, #1
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	dbf1      	blt.n	8003452 <_write+0x12>
  }
  return len;
 800346e:	687b      	ldr	r3, [r7, #4]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <_close>:

int _close(int file)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034a0:	605a      	str	r2, [r3, #4]
  return 0;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <_isatty>:

int _isatty(int file)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034b8:	2301      	movs	r3, #1
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b085      	sub	sp, #20
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034e8:	4a14      	ldr	r2, [pc, #80]	@ (800353c <_sbrk+0x5c>)
 80034ea:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <_sbrk+0x60>)
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034f4:	4b13      	ldr	r3, [pc, #76]	@ (8003544 <_sbrk+0x64>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034fc:	4b11      	ldr	r3, [pc, #68]	@ (8003544 <_sbrk+0x64>)
 80034fe:	4a12      	ldr	r2, [pc, #72]	@ (8003548 <_sbrk+0x68>)
 8003500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003502:	4b10      	ldr	r3, [pc, #64]	@ (8003544 <_sbrk+0x64>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4413      	add	r3, r2
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	429a      	cmp	r2, r3
 800350e:	d207      	bcs.n	8003520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003510:	f003 ff4a 	bl	80073a8 <__errno>
 8003514:	4603      	mov	r3, r0
 8003516:	220c      	movs	r2, #12
 8003518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800351a:	f04f 33ff 	mov.w	r3, #4294967295
 800351e:	e009      	b.n	8003534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003520:	4b08      	ldr	r3, [pc, #32]	@ (8003544 <_sbrk+0x64>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003526:	4b07      	ldr	r3, [pc, #28]	@ (8003544 <_sbrk+0x64>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4413      	add	r3, r2
 800352e:	4a05      	ldr	r2, [pc, #20]	@ (8003544 <_sbrk+0x64>)
 8003530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003532:	68fb      	ldr	r3, [r7, #12]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20030000 	.word	0x20030000
 8003540:	00000400 	.word	0x00000400
 8003544:	20025c14 	.word	0x20025c14
 8003548:	20025d68 	.word	0x20025d68

0800354c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003550:	4b06      	ldr	r3, [pc, #24]	@ (800356c <SystemInit+0x20>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003556:	4a05      	ldr	r2, [pc, #20]	@ (800356c <SystemInit+0x20>)
 8003558:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800355c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003574:	f7ff ffea 	bl	800354c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003578:	480c      	ldr	r0, [pc, #48]	@ (80035ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800357a:	490d      	ldr	r1, [pc, #52]	@ (80035b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800357c:	4a0d      	ldr	r2, [pc, #52]	@ (80035b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800357e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003580:	e002      	b.n	8003588 <LoopCopyDataInit>

08003582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003586:	3304      	adds	r3, #4

08003588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800358a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800358c:	d3f9      	bcc.n	8003582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800358e:	4a0a      	ldr	r2, [pc, #40]	@ (80035b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003590:	4c0a      	ldr	r4, [pc, #40]	@ (80035bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003594:	e001      	b.n	800359a <LoopFillZerobss>

08003596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003598:	3204      	adds	r2, #4

0800359a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800359a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800359c:	d3fb      	bcc.n	8003596 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800359e:	f003 ff09 	bl	80073b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035a2:	f7fe fd8e 	bl	80020c2 <main>
  bx  lr    
 80035a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80035a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80035ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035b0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80035b4:	08009090 	.word	0x08009090
  ldr r2, =_sbss
 80035b8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80035bc:	20025d68 	.word	0x20025d68

080035c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035c0:	e7fe      	b.n	80035c0 <ADC_IRQHandler>
	...

080035c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003604 <HAL_Init+0x40>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003604 <HAL_Init+0x40>)
 80035ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003604 <HAL_Init+0x40>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003604 <HAL_Init+0x40>)
 80035da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035e0:	4b08      	ldr	r3, [pc, #32]	@ (8003604 <HAL_Init+0x40>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a07      	ldr	r2, [pc, #28]	@ (8003604 <HAL_Init+0x40>)
 80035e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035ec:	2003      	movs	r0, #3
 80035ee:	f000 f991 	bl	8003914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035f2:	2000      	movs	r0, #0
 80035f4:	f000 f808 	bl	8003608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035f8:	f7ff f924 	bl	8002844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40023c00 	.word	0x40023c00

08003608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003610:	4b12      	ldr	r3, [pc, #72]	@ (800365c <HAL_InitTick+0x54>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b12      	ldr	r3, [pc, #72]	@ (8003660 <HAL_InitTick+0x58>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	4619      	mov	r1, r3
 800361a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800361e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003622:	fbb2 f3f3 	udiv	r3, r2, r3
 8003626:	4618      	mov	r0, r3
 8003628:	f000 f9b7 	bl	800399a <HAL_SYSTICK_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e00e      	b.n	8003654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b0f      	cmp	r3, #15
 800363a:	d80a      	bhi.n	8003652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800363c:	2200      	movs	r2, #0
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	f04f 30ff 	mov.w	r0, #4294967295
 8003644:	f000 f971 	bl	800392a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003648:	4a06      	ldr	r2, [pc, #24]	@ (8003664 <HAL_InitTick+0x5c>)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	e000      	b.n	8003654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20000010 	.word	0x20000010
 8003660:	20000018 	.word	0x20000018
 8003664:	20000014 	.word	0x20000014

08003668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800366c:	4b06      	ldr	r3, [pc, #24]	@ (8003688 <HAL_IncTick+0x20>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	4b06      	ldr	r3, [pc, #24]	@ (800368c <HAL_IncTick+0x24>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4413      	add	r3, r2
 8003678:	4a04      	ldr	r2, [pc, #16]	@ (800368c <HAL_IncTick+0x24>)
 800367a:	6013      	str	r3, [r2, #0]
}
 800367c:	bf00      	nop
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20000018 	.word	0x20000018
 800368c:	20025c18 	.word	0x20025c18

08003690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return uwTick;
 8003694:	4b03      	ldr	r3, [pc, #12]	@ (80036a4 <HAL_GetTick+0x14>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	4618      	mov	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20025c18 	.word	0x20025c18

080036a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036b0:	f7ff ffee 	bl	8003690 <HAL_GetTick>
 80036b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d005      	beq.n	80036ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036c2:	4b0a      	ldr	r3, [pc, #40]	@ (80036ec <HAL_Delay+0x44>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036ce:	bf00      	nop
 80036d0:	f7ff ffde 	bl	8003690 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d8f7      	bhi.n	80036d0 <HAL_Delay+0x28>
  {
  }
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000018 	.word	0x20000018

080036f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003700:	4b0c      	ldr	r3, [pc, #48]	@ (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800370c:	4013      	ands	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800371c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003722:	4a04      	ldr	r2, [pc, #16]	@ (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	60d3      	str	r3, [r2, #12]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800373c:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <__NVIC_GetPriorityGrouping+0x18>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	f003 0307 	and.w	r3, r3, #7
}
 8003746:	4618      	mov	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	2b00      	cmp	r3, #0
 8003764:	db0b      	blt.n	800377e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	f003 021f 	and.w	r2, r3, #31
 800376c:	4907      	ldr	r1, [pc, #28]	@ (800378c <__NVIC_EnableIRQ+0x38>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2001      	movs	r0, #1
 8003776:	fa00 f202 	lsl.w	r2, r0, r2
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000e100 	.word	0xe000e100

08003790 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	db12      	blt.n	80037c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	f003 021f 	and.w	r2, r3, #31
 80037a8:	490a      	ldr	r1, [pc, #40]	@ (80037d4 <__NVIC_DisableIRQ+0x44>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2001      	movs	r0, #1
 80037b2:	fa00 f202 	lsl.w	r2, r0, r2
 80037b6:	3320      	adds	r3, #32
 80037b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80037bc:	f3bf 8f4f 	dsb	sy
}
 80037c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037c2:	f3bf 8f6f 	isb	sy
}
 80037c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000e100 	.word	0xe000e100

080037d8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	db0c      	blt.n	8003804 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	f003 021f 	and.w	r2, r3, #31
 80037f0:	4907      	ldr	r1, [pc, #28]	@ (8003810 <__NVIC_ClearPendingIRQ+0x38>)
 80037f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2001      	movs	r0, #1
 80037fa:	fa00 f202 	lsl.w	r2, r0, r2
 80037fe:	3360      	adds	r3, #96	@ 0x60
 8003800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000e100 	.word	0xe000e100

08003814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	6039      	str	r1, [r7, #0]
 800381e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003824:	2b00      	cmp	r3, #0
 8003826:	db0a      	blt.n	800383e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	490c      	ldr	r1, [pc, #48]	@ (8003860 <__NVIC_SetPriority+0x4c>)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	0112      	lsls	r2, r2, #4
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	440b      	add	r3, r1
 8003838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800383c:	e00a      	b.n	8003854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4908      	ldr	r1, [pc, #32]	@ (8003864 <__NVIC_SetPriority+0x50>)
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	3b04      	subs	r3, #4
 800384c:	0112      	lsls	r2, r2, #4
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	440b      	add	r3, r1
 8003852:	761a      	strb	r2, [r3, #24]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000e100 	.word	0xe000e100
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	@ 0x24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f1c3 0307 	rsb	r3, r3, #7
 8003882:	2b04      	cmp	r3, #4
 8003884:	bf28      	it	cs
 8003886:	2304      	movcs	r3, #4
 8003888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3304      	adds	r3, #4
 800388e:	2b06      	cmp	r3, #6
 8003890:	d902      	bls.n	8003898 <NVIC_EncodePriority+0x30>
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3b03      	subs	r3, #3
 8003896:	e000      	b.n	800389a <NVIC_EncodePriority+0x32>
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	f04f 32ff 	mov.w	r2, #4294967295
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43da      	mvns	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	401a      	ands	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b0:	f04f 31ff 	mov.w	r1, #4294967295
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	43d9      	mvns	r1, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	4313      	orrs	r3, r2
         );
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3724      	adds	r7, #36	@ 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3b01      	subs	r3, #1
 80038dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038e0:	d301      	bcc.n	80038e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038e2:	2301      	movs	r3, #1
 80038e4:	e00f      	b.n	8003906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003910 <SysTick_Config+0x40>)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ee:	210f      	movs	r1, #15
 80038f0:	f04f 30ff 	mov.w	r0, #4294967295
 80038f4:	f7ff ff8e 	bl	8003814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f8:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <SysTick_Config+0x40>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038fe:	4b04      	ldr	r3, [pc, #16]	@ (8003910 <SysTick_Config+0x40>)
 8003900:	2207      	movs	r2, #7
 8003902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	e000e010 	.word	0xe000e010

08003914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff fee7 	bl	80036f0 <__NVIC_SetPriorityGrouping>
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	4603      	mov	r3, r0
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800393c:	f7ff fefc 	bl	8003738 <__NVIC_GetPriorityGrouping>
 8003940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	6978      	ldr	r0, [r7, #20]
 8003948:	f7ff ff8e 	bl	8003868 <NVIC_EncodePriority>
 800394c:	4602      	mov	r2, r0
 800394e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff5d 	bl	8003814 <__NVIC_SetPriority>
}
 800395a:	bf00      	nop
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	4603      	mov	r3, r0
 800396a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800396c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff feef 	bl	8003754 <__NVIC_EnableIRQ>
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	4603      	mov	r3, r0
 8003986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff feff 	bl	8003790 <__NVIC_DisableIRQ>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ff94 	bl	80038d0 <SysTick_Config>
 80039a8:	4603      	mov	r3, r0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	4603      	mov	r3, r0
 80039ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80039bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff09 	bl	80037d8 <__NVIC_ClearPendingIRQ>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b089      	sub	sp, #36	@ 0x24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	e177      	b.n	8003cdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039ec:	2201      	movs	r2, #1
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	f040 8166 	bne.w	8003cd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d005      	beq.n	8003a22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d130      	bne.n	8003a84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a58:	2201      	movs	r2, #1
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 0201 	and.w	r2, r3, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d017      	beq.n	8003ac0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d123      	bne.n	8003b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	08da      	lsrs	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3208      	adds	r2, #8
 8003ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	220f      	movs	r2, #15
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	08da      	lsrs	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3208      	adds	r2, #8
 8003b0e:	69b9      	ldr	r1, [r7, #24]
 8003b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	2203      	movs	r2, #3
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0203 	and.w	r2, r3, #3
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80c0 	beq.w	8003cd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	4b66      	ldr	r3, [pc, #408]	@ (8003cf4 <HAL_GPIO_Init+0x324>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5e:	4a65      	ldr	r2, [pc, #404]	@ (8003cf4 <HAL_GPIO_Init+0x324>)
 8003b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b66:	4b63      	ldr	r3, [pc, #396]	@ (8003cf4 <HAL_GPIO_Init+0x324>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b72:	4a61      	ldr	r2, [pc, #388]	@ (8003cf8 <HAL_GPIO_Init+0x328>)
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	089b      	lsrs	r3, r3, #2
 8003b78:	3302      	adds	r3, #2
 8003b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	220f      	movs	r2, #15
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4013      	ands	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a58      	ldr	r2, [pc, #352]	@ (8003cfc <HAL_GPIO_Init+0x32c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d037      	beq.n	8003c0e <HAL_GPIO_Init+0x23e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a57      	ldr	r2, [pc, #348]	@ (8003d00 <HAL_GPIO_Init+0x330>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d031      	beq.n	8003c0a <HAL_GPIO_Init+0x23a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a56      	ldr	r2, [pc, #344]	@ (8003d04 <HAL_GPIO_Init+0x334>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d02b      	beq.n	8003c06 <HAL_GPIO_Init+0x236>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a55      	ldr	r2, [pc, #340]	@ (8003d08 <HAL_GPIO_Init+0x338>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d025      	beq.n	8003c02 <HAL_GPIO_Init+0x232>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a54      	ldr	r2, [pc, #336]	@ (8003d0c <HAL_GPIO_Init+0x33c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01f      	beq.n	8003bfe <HAL_GPIO_Init+0x22e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a53      	ldr	r2, [pc, #332]	@ (8003d10 <HAL_GPIO_Init+0x340>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d019      	beq.n	8003bfa <HAL_GPIO_Init+0x22a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a52      	ldr	r2, [pc, #328]	@ (8003d14 <HAL_GPIO_Init+0x344>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <HAL_GPIO_Init+0x226>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a51      	ldr	r2, [pc, #324]	@ (8003d18 <HAL_GPIO_Init+0x348>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00d      	beq.n	8003bf2 <HAL_GPIO_Init+0x222>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a50      	ldr	r2, [pc, #320]	@ (8003d1c <HAL_GPIO_Init+0x34c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d007      	beq.n	8003bee <HAL_GPIO_Init+0x21e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a4f      	ldr	r2, [pc, #316]	@ (8003d20 <HAL_GPIO_Init+0x350>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d101      	bne.n	8003bea <HAL_GPIO_Init+0x21a>
 8003be6:	2309      	movs	r3, #9
 8003be8:	e012      	b.n	8003c10 <HAL_GPIO_Init+0x240>
 8003bea:	230a      	movs	r3, #10
 8003bec:	e010      	b.n	8003c10 <HAL_GPIO_Init+0x240>
 8003bee:	2308      	movs	r3, #8
 8003bf0:	e00e      	b.n	8003c10 <HAL_GPIO_Init+0x240>
 8003bf2:	2307      	movs	r3, #7
 8003bf4:	e00c      	b.n	8003c10 <HAL_GPIO_Init+0x240>
 8003bf6:	2306      	movs	r3, #6
 8003bf8:	e00a      	b.n	8003c10 <HAL_GPIO_Init+0x240>
 8003bfa:	2305      	movs	r3, #5
 8003bfc:	e008      	b.n	8003c10 <HAL_GPIO_Init+0x240>
 8003bfe:	2304      	movs	r3, #4
 8003c00:	e006      	b.n	8003c10 <HAL_GPIO_Init+0x240>
 8003c02:	2303      	movs	r3, #3
 8003c04:	e004      	b.n	8003c10 <HAL_GPIO_Init+0x240>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e002      	b.n	8003c10 <HAL_GPIO_Init+0x240>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <HAL_GPIO_Init+0x240>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	f002 0203 	and.w	r2, r2, #3
 8003c16:	0092      	lsls	r2, r2, #2
 8003c18:	4093      	lsls	r3, r2
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c20:	4935      	ldr	r1, [pc, #212]	@ (8003cf8 <HAL_GPIO_Init+0x328>)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	089b      	lsrs	r3, r3, #2
 8003c26:	3302      	adds	r3, #2
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d24 <HAL_GPIO_Init+0x354>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c52:	4a34      	ldr	r2, [pc, #208]	@ (8003d24 <HAL_GPIO_Init+0x354>)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c58:	4b32      	ldr	r3, [pc, #200]	@ (8003d24 <HAL_GPIO_Init+0x354>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c7c:	4a29      	ldr	r2, [pc, #164]	@ (8003d24 <HAL_GPIO_Init+0x354>)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c82:	4b28      	ldr	r3, [pc, #160]	@ (8003d24 <HAL_GPIO_Init+0x354>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8003d24 <HAL_GPIO_Init+0x354>)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cac:	4b1d      	ldr	r3, [pc, #116]	@ (8003d24 <HAL_GPIO_Init+0x354>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cd0:	4a14      	ldr	r2, [pc, #80]	@ (8003d24 <HAL_GPIO_Init+0x354>)
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b0f      	cmp	r3, #15
 8003ce0:	f67f ae84 	bls.w	80039ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	3724      	adds	r7, #36	@ 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	40013800 	.word	0x40013800
 8003cfc:	40020000 	.word	0x40020000
 8003d00:	40020400 	.word	0x40020400
 8003d04:	40020800 	.word	0x40020800
 8003d08:	40020c00 	.word	0x40020c00
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40021400 	.word	0x40021400
 8003d14:	40021800 	.word	0x40021800
 8003d18:	40021c00 	.word	0x40021c00
 8003d1c:	40022000 	.word	0x40022000
 8003d20:	40022400 	.word	0x40022400
 8003d24:	40013c00 	.word	0x40013c00

08003d28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	e0d9      	b.n	8003ef8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d44:	2201      	movs	r2, #1
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4013      	ands	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	f040 80c9 	bne.w	8003ef2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003d60:	4a6b      	ldr	r2, [pc, #428]	@ (8003f10 <HAL_GPIO_DeInit+0x1e8>)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	3302      	adds	r3, #2
 8003d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	220f      	movs	r2, #15
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a63      	ldr	r2, [pc, #396]	@ (8003f14 <HAL_GPIO_DeInit+0x1ec>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d037      	beq.n	8003dfa <HAL_GPIO_DeInit+0xd2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a62      	ldr	r2, [pc, #392]	@ (8003f18 <HAL_GPIO_DeInit+0x1f0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d031      	beq.n	8003df6 <HAL_GPIO_DeInit+0xce>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a61      	ldr	r2, [pc, #388]	@ (8003f1c <HAL_GPIO_DeInit+0x1f4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d02b      	beq.n	8003df2 <HAL_GPIO_DeInit+0xca>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a60      	ldr	r2, [pc, #384]	@ (8003f20 <HAL_GPIO_DeInit+0x1f8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d025      	beq.n	8003dee <HAL_GPIO_DeInit+0xc6>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a5f      	ldr	r2, [pc, #380]	@ (8003f24 <HAL_GPIO_DeInit+0x1fc>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01f      	beq.n	8003dea <HAL_GPIO_DeInit+0xc2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a5e      	ldr	r2, [pc, #376]	@ (8003f28 <HAL_GPIO_DeInit+0x200>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d019      	beq.n	8003de6 <HAL_GPIO_DeInit+0xbe>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a5d      	ldr	r2, [pc, #372]	@ (8003f2c <HAL_GPIO_DeInit+0x204>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_GPIO_DeInit+0xba>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a5c      	ldr	r2, [pc, #368]	@ (8003f30 <HAL_GPIO_DeInit+0x208>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00d      	beq.n	8003dde <HAL_GPIO_DeInit+0xb6>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a5b      	ldr	r2, [pc, #364]	@ (8003f34 <HAL_GPIO_DeInit+0x20c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d007      	beq.n	8003dda <HAL_GPIO_DeInit+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a5a      	ldr	r2, [pc, #360]	@ (8003f38 <HAL_GPIO_DeInit+0x210>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d101      	bne.n	8003dd6 <HAL_GPIO_DeInit+0xae>
 8003dd2:	2309      	movs	r3, #9
 8003dd4:	e012      	b.n	8003dfc <HAL_GPIO_DeInit+0xd4>
 8003dd6:	230a      	movs	r3, #10
 8003dd8:	e010      	b.n	8003dfc <HAL_GPIO_DeInit+0xd4>
 8003dda:	2308      	movs	r3, #8
 8003ddc:	e00e      	b.n	8003dfc <HAL_GPIO_DeInit+0xd4>
 8003dde:	2307      	movs	r3, #7
 8003de0:	e00c      	b.n	8003dfc <HAL_GPIO_DeInit+0xd4>
 8003de2:	2306      	movs	r3, #6
 8003de4:	e00a      	b.n	8003dfc <HAL_GPIO_DeInit+0xd4>
 8003de6:	2305      	movs	r3, #5
 8003de8:	e008      	b.n	8003dfc <HAL_GPIO_DeInit+0xd4>
 8003dea:	2304      	movs	r3, #4
 8003dec:	e006      	b.n	8003dfc <HAL_GPIO_DeInit+0xd4>
 8003dee:	2303      	movs	r3, #3
 8003df0:	e004      	b.n	8003dfc <HAL_GPIO_DeInit+0xd4>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e002      	b.n	8003dfc <HAL_GPIO_DeInit+0xd4>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_GPIO_DeInit+0xd4>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	f002 0203 	and.w	r2, r2, #3
 8003e02:	0092      	lsls	r2, r2, #2
 8003e04:	4093      	lsls	r3, r2
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d132      	bne.n	8003e72 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f3c <HAL_GPIO_DeInit+0x214>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	43db      	mvns	r3, r3
 8003e14:	4949      	ldr	r1, [pc, #292]	@ (8003f3c <HAL_GPIO_DeInit+0x214>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003e1a:	4b48      	ldr	r3, [pc, #288]	@ (8003f3c <HAL_GPIO_DeInit+0x214>)
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	43db      	mvns	r3, r3
 8003e22:	4946      	ldr	r1, [pc, #280]	@ (8003f3c <HAL_GPIO_DeInit+0x214>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003e28:	4b44      	ldr	r3, [pc, #272]	@ (8003f3c <HAL_GPIO_DeInit+0x214>)
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	4942      	ldr	r1, [pc, #264]	@ (8003f3c <HAL_GPIO_DeInit+0x214>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003e36:	4b41      	ldr	r3, [pc, #260]	@ (8003f3c <HAL_GPIO_DeInit+0x214>)
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	493f      	ldr	r1, [pc, #252]	@ (8003f3c <HAL_GPIO_DeInit+0x214>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	220f      	movs	r2, #15
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003e54:	4a2e      	ldr	r2, [pc, #184]	@ (8003f10 <HAL_GPIO_DeInit+0x1e8>)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	089b      	lsrs	r3, r3, #2
 8003e5a:	3302      	adds	r3, #2
 8003e5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	43da      	mvns	r2, r3
 8003e64:	482a      	ldr	r0, [pc, #168]	@ (8003f10 <HAL_GPIO_DeInit+0x1e8>)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	089b      	lsrs	r3, r3, #2
 8003e6a:	400a      	ands	r2, r1
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	2103      	movs	r1, #3
 8003e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	401a      	ands	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	08da      	lsrs	r2, r3, #3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3208      	adds	r2, #8
 8003e90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	220f      	movs	r2, #15
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	08d2      	lsrs	r2, r2, #3
 8003ea8:	4019      	ands	r1, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3208      	adds	r2, #8
 8003eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	2103      	movs	r1, #3
 8003ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	2101      	movs	r1, #1
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	2103      	movs	r1, #3
 8003ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eea:	43db      	mvns	r3, r3
 8003eec:	401a      	ands	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2b0f      	cmp	r3, #15
 8003efc:	f67f af22 	bls.w	8003d44 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003f00:	bf00      	nop
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40013800 	.word	0x40013800
 8003f14:	40020000 	.word	0x40020000
 8003f18:	40020400 	.word	0x40020400
 8003f1c:	40020800 	.word	0x40020800
 8003f20:	40020c00 	.word	0x40020c00
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40021400 	.word	0x40021400
 8003f2c:	40021800 	.word	0x40021800
 8003f30:	40021c00 	.word	0x40021c00
 8003f34:	40022000 	.word	0x40022000
 8003f38:	40022400 	.word	0x40022400
 8003f3c:	40013c00 	.word	0x40013c00

08003f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	807b      	strh	r3, [r7, #2]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f50:	787b      	ldrb	r3, [r7, #1]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f56:	887a      	ldrh	r2, [r7, #2]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f5c:	e003      	b.n	8003f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f5e:	887b      	ldrh	r3, [r7, #2]
 8003f60:	041a      	lsls	r2, r3, #16
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	619a      	str	r2, [r3, #24]
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
	...

08003f74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e12b      	b.n	80041de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fe fc7a 	bl	8002894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2224      	movs	r2, #36	@ 0x24
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fd8:	f001 ff82 	bl	8005ee0 <HAL_RCC_GetPCLK1Freq>
 8003fdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	4a81      	ldr	r2, [pc, #516]	@ (80041e8 <HAL_I2C_Init+0x274>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d807      	bhi.n	8003ff8 <HAL_I2C_Init+0x84>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4a80      	ldr	r2, [pc, #512]	@ (80041ec <HAL_I2C_Init+0x278>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	bf94      	ite	ls
 8003ff0:	2301      	movls	r3, #1
 8003ff2:	2300      	movhi	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	e006      	b.n	8004006 <HAL_I2C_Init+0x92>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4a7d      	ldr	r2, [pc, #500]	@ (80041f0 <HAL_I2C_Init+0x27c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	bf94      	ite	ls
 8004000:	2301      	movls	r3, #1
 8004002:	2300      	movhi	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e0e7      	b.n	80041de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4a78      	ldr	r2, [pc, #480]	@ (80041f4 <HAL_I2C_Init+0x280>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	0c9b      	lsrs	r3, r3, #18
 8004018:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4a6a      	ldr	r2, [pc, #424]	@ (80041e8 <HAL_I2C_Init+0x274>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d802      	bhi.n	8004048 <HAL_I2C_Init+0xd4>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	3301      	adds	r3, #1
 8004046:	e009      	b.n	800405c <HAL_I2C_Init+0xe8>
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800404e:	fb02 f303 	mul.w	r3, r2, r3
 8004052:	4a69      	ldr	r2, [pc, #420]	@ (80041f8 <HAL_I2C_Init+0x284>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	099b      	lsrs	r3, r3, #6
 800405a:	3301      	adds	r3, #1
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	430b      	orrs	r3, r1
 8004062:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800406e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	495c      	ldr	r1, [pc, #368]	@ (80041e8 <HAL_I2C_Init+0x274>)
 8004078:	428b      	cmp	r3, r1
 800407a:	d819      	bhi.n	80040b0 <HAL_I2C_Init+0x13c>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1e59      	subs	r1, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	fbb1 f3f3 	udiv	r3, r1, r3
 800408a:	1c59      	adds	r1, r3, #1
 800408c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004090:	400b      	ands	r3, r1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_I2C_Init+0x138>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1e59      	subs	r1, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a4:	3301      	adds	r3, #1
 80040a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040aa:	e051      	b.n	8004150 <HAL_I2C_Init+0x1dc>
 80040ac:	2304      	movs	r3, #4
 80040ae:	e04f      	b.n	8004150 <HAL_I2C_Init+0x1dc>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d111      	bne.n	80040dc <HAL_I2C_Init+0x168>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	1e58      	subs	r0, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6859      	ldr	r1, [r3, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	440b      	add	r3, r1
 80040c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ca:	3301      	adds	r3, #1
 80040cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e012      	b.n	8004102 <HAL_I2C_Init+0x18e>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1e58      	subs	r0, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6859      	ldr	r1, [r3, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	0099      	lsls	r1, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f2:	3301      	adds	r3, #1
 80040f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf0c      	ite	eq
 80040fc:	2301      	moveq	r3, #1
 80040fe:	2300      	movne	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_I2C_Init+0x196>
 8004106:	2301      	movs	r3, #1
 8004108:	e022      	b.n	8004150 <HAL_I2C_Init+0x1dc>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10e      	bne.n	8004130 <HAL_I2C_Init+0x1bc>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1e58      	subs	r0, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6859      	ldr	r1, [r3, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	440b      	add	r3, r1
 8004120:	fbb0 f3f3 	udiv	r3, r0, r3
 8004124:	3301      	adds	r3, #1
 8004126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800412e:	e00f      	b.n	8004150 <HAL_I2C_Init+0x1dc>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	1e58      	subs	r0, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6859      	ldr	r1, [r3, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	0099      	lsls	r1, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	fbb0 f3f3 	udiv	r3, r0, r3
 8004146:	3301      	adds	r3, #1
 8004148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	6809      	ldr	r1, [r1, #0]
 8004154:	4313      	orrs	r3, r2
 8004156:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69da      	ldr	r2, [r3, #28]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800417e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6911      	ldr	r1, [r2, #16]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68d2      	ldr	r2, [r2, #12]
 800418a:	4311      	orrs	r1, r2
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	430b      	orrs	r3, r1
 8004192:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	000186a0 	.word	0x000186a0
 80041ec:	001e847f 	.word	0x001e847f
 80041f0:	003d08ff 	.word	0x003d08ff
 80041f4:	431bde83 	.word	0x431bde83
 80041f8:	10624dd3 	.word	0x10624dd3

080041fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af02      	add	r7, sp, #8
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	4608      	mov	r0, r1
 8004206:	4611      	mov	r1, r2
 8004208:	461a      	mov	r2, r3
 800420a:	4603      	mov	r3, r0
 800420c:	817b      	strh	r3, [r7, #10]
 800420e:	460b      	mov	r3, r1
 8004210:	813b      	strh	r3, [r7, #8]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004216:	f7ff fa3b 	bl	8003690 <HAL_GetTick>
 800421a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b20      	cmp	r3, #32
 8004226:	f040 80d9 	bne.w	80043dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	2319      	movs	r3, #25
 8004230:	2201      	movs	r2, #1
 8004232:	496d      	ldr	r1, [pc, #436]	@ (80043e8 <HAL_I2C_Mem_Write+0x1ec>)
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fc8b 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004240:	2302      	movs	r3, #2
 8004242:	e0cc      	b.n	80043de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_I2C_Mem_Write+0x56>
 800424e:	2302      	movs	r3, #2
 8004250:	e0c5      	b.n	80043de <HAL_I2C_Mem_Write+0x1e2>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	d007      	beq.n	8004278 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004286:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2221      	movs	r2, #33	@ 0x21
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2240      	movs	r2, #64	@ 0x40
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a3a      	ldr	r2, [r7, #32]
 80042a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4a4d      	ldr	r2, [pc, #308]	@ (80043ec <HAL_I2C_Mem_Write+0x1f0>)
 80042b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042ba:	88f8      	ldrh	r0, [r7, #6]
 80042bc:	893a      	ldrh	r2, [r7, #8]
 80042be:	8979      	ldrh	r1, [r7, #10]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	4603      	mov	r3, r0
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fac2 	bl	8004854 <I2C_RequestMemoryWrite>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d052      	beq.n	800437c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e081      	b.n	80043de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 fd50 	bl	8004d84 <I2C_WaitOnTXEFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00d      	beq.n	8004306 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d107      	bne.n	8004302 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004300:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e06b      	b.n	80043de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430a:	781a      	ldrb	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b04      	cmp	r3, #4
 8004342:	d11b      	bne.n	800437c <HAL_I2C_Mem_Write+0x180>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004348:	2b00      	cmp	r3, #0
 800434a:	d017      	beq.n	800437c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1aa      	bne.n	80042da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fd43 	bl	8004e14 <I2C_WaitOnBTFFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00d      	beq.n	80043b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004398:	2b04      	cmp	r3, #4
 800439a:	d107      	bne.n	80043ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e016      	b.n	80043de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	e000      	b.n	80043de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	00100002 	.word	0x00100002
 80043ec:	ffff0000 	.word	0xffff0000

080043f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08c      	sub	sp, #48	@ 0x30
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	4608      	mov	r0, r1
 80043fa:	4611      	mov	r1, r2
 80043fc:	461a      	mov	r2, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	817b      	strh	r3, [r7, #10]
 8004402:	460b      	mov	r3, r1
 8004404:	813b      	strh	r3, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800440a:	f7ff f941 	bl	8003690 <HAL_GetTick>
 800440e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b20      	cmp	r3, #32
 800441a:	f040 8214 	bne.w	8004846 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	2319      	movs	r3, #25
 8004424:	2201      	movs	r2, #1
 8004426:	497b      	ldr	r1, [pc, #492]	@ (8004614 <HAL_I2C_Mem_Read+0x224>)
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 fb91 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
 8004436:	e207      	b.n	8004848 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_I2C_Mem_Read+0x56>
 8004442:	2302      	movs	r3, #2
 8004444:	e200      	b.n	8004848 <HAL_I2C_Mem_Read+0x458>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	d007      	beq.n	800446c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800447a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2222      	movs	r2, #34	@ 0x22
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2240      	movs	r2, #64	@ 0x40
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004496:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800449c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004618 <HAL_I2C_Mem_Read+0x228>)
 80044ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044ae:	88f8      	ldrh	r0, [r7, #6]
 80044b0:	893a      	ldrh	r2, [r7, #8]
 80044b2:	8979      	ldrh	r1, [r7, #10]
 80044b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b6:	9301      	str	r3, [sp, #4]
 80044b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	4603      	mov	r3, r0
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fa5e 	bl	8004980 <I2C_RequestMemoryRead>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e1bc      	b.n	8004848 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d113      	bne.n	80044fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d6:	2300      	movs	r3, #0
 80044d8:	623b      	str	r3, [r7, #32]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	623b      	str	r3, [r7, #32]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	623b      	str	r3, [r7, #32]
 80044ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e190      	b.n	8004820 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004502:	2b01      	cmp	r3, #1
 8004504:	d11b      	bne.n	800453e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	e170      	b.n	8004820 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004542:	2b02      	cmp	r3, #2
 8004544:	d11b      	bne.n	800457e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004554:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	e150      	b.n	8004820 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004594:	e144      	b.n	8004820 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800459a:	2b03      	cmp	r3, #3
 800459c:	f200 80f1 	bhi.w	8004782 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d123      	bne.n	80045f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fc79 	bl	8004ea4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e145      	b.n	8004848 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045ee:	e117      	b.n	8004820 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d14e      	bne.n	8004696 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045fe:	2200      	movs	r2, #0
 8004600:	4906      	ldr	r1, [pc, #24]	@ (800461c <HAL_I2C_Mem_Read+0x22c>)
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 faa4 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d008      	beq.n	8004620 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e11a      	b.n	8004848 <HAL_I2C_Mem_Read+0x458>
 8004612:	bf00      	nop
 8004614:	00100002 	.word	0x00100002
 8004618:	ffff0000 	.word	0xffff0000
 800461c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800462e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004694:	e0c4      	b.n	8004820 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469c:	2200      	movs	r2, #0
 800469e:	496c      	ldr	r1, [pc, #432]	@ (8004850 <HAL_I2C_Mem_Read+0x460>)
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 fa55 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0cb      	b.n	8004848 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691a      	ldr	r2, [r3, #16]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f8:	2200      	movs	r2, #0
 80046fa:	4955      	ldr	r1, [pc, #340]	@ (8004850 <HAL_I2C_Mem_Read+0x460>)
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 fa27 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e09d      	b.n	8004848 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800471a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004780:	e04e      	b.n	8004820 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004784:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fb8c 	bl	8004ea4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e058      	b.n	8004848 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d124      	bne.n	8004820 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d107      	bne.n	80047ee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004824:	2b00      	cmp	r3, #0
 8004826:	f47f aeb6 	bne.w	8004596 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	e000      	b.n	8004848 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004846:	2302      	movs	r3, #2
  }
}
 8004848:	4618      	mov	r0, r3
 800484a:	3728      	adds	r7, #40	@ 0x28
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	00010004 	.word	0x00010004

08004854 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	4608      	mov	r0, r1
 800485e:	4611      	mov	r1, r2
 8004860:	461a      	mov	r2, r3
 8004862:	4603      	mov	r3, r0
 8004864:	817b      	strh	r3, [r7, #10]
 8004866:	460b      	mov	r3, r1
 8004868:	813b      	strh	r3, [r7, #8]
 800486a:	4613      	mov	r3, r2
 800486c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800487c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	2200      	movs	r2, #0
 8004886:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f960 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00d      	beq.n	80048b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048a4:	d103      	bne.n	80048ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e05f      	b.n	8004972 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048b2:	897b      	ldrh	r3, [r7, #10]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c4:	6a3a      	ldr	r2, [r7, #32]
 80048c6:	492d      	ldr	r1, [pc, #180]	@ (800497c <I2C_RequestMemoryWrite+0x128>)
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f9bb 	bl	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e04c      	b.n	8004972 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f0:	6a39      	ldr	r1, [r7, #32]
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fa46 	bl	8004d84 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00d      	beq.n	800491a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	2b04      	cmp	r3, #4
 8004904:	d107      	bne.n	8004916 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004914:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e02b      	b.n	8004972 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d105      	bne.n	800492c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004920:	893b      	ldrh	r3, [r7, #8]
 8004922:	b2da      	uxtb	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	611a      	str	r2, [r3, #16]
 800492a:	e021      	b.n	8004970 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800492c:	893b      	ldrh	r3, [r7, #8]
 800492e:	0a1b      	lsrs	r3, r3, #8
 8004930:	b29b      	uxth	r3, r3
 8004932:	b2da      	uxtb	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800493a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800493c:	6a39      	ldr	r1, [r7, #32]
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fa20 	bl	8004d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00d      	beq.n	8004966 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	2b04      	cmp	r3, #4
 8004950:	d107      	bne.n	8004962 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004960:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e005      	b.n	8004972 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004966:	893b      	ldrh	r3, [r7, #8]
 8004968:	b2da      	uxtb	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	00010002 	.word	0x00010002

08004980 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af02      	add	r7, sp, #8
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	4608      	mov	r0, r1
 800498a:	4611      	mov	r1, r2
 800498c:	461a      	mov	r2, r3
 800498e:	4603      	mov	r3, r0
 8004990:	817b      	strh	r3, [r7, #10]
 8004992:	460b      	mov	r3, r1
 8004994:	813b      	strh	r3, [r7, #8]
 8004996:	4613      	mov	r3, r2
 8004998:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f8c2 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00d      	beq.n	80049ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049e0:	d103      	bne.n	80049ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e0aa      	b.n	8004b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049ee:	897b      	ldrh	r3, [r7, #10]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	6a3a      	ldr	r2, [r7, #32]
 8004a02:	4952      	ldr	r1, [pc, #328]	@ (8004b4c <I2C_RequestMemoryRead+0x1cc>)
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f91d 	bl	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e097      	b.n	8004b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a14:	2300      	movs	r3, #0
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a2c:	6a39      	ldr	r1, [r7, #32]
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f9a8 	bl	8004d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00d      	beq.n	8004a56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d107      	bne.n	8004a52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e076      	b.n	8004b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d105      	bne.n	8004a68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a5c:	893b      	ldrh	r3, [r7, #8]
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	611a      	str	r2, [r3, #16]
 8004a66:	e021      	b.n	8004aac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a68:	893b      	ldrh	r3, [r7, #8]
 8004a6a:	0a1b      	lsrs	r3, r3, #8
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a78:	6a39      	ldr	r1, [r7, #32]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f982 	bl	8004d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00d      	beq.n	8004aa2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d107      	bne.n	8004a9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e050      	b.n	8004b44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004aa2:	893b      	ldrh	r3, [r7, #8]
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aae:	6a39      	ldr	r1, [r7, #32]
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 f967 	bl	8004d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00d      	beq.n	8004ad8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d107      	bne.n	8004ad4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ad2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e035      	b.n	8004b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f82b 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00d      	beq.n	8004b1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b0e:	d103      	bne.n	8004b18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b16:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e013      	b.n	8004b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b1c:	897b      	ldrh	r3, [r7, #10]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2e:	6a3a      	ldr	r2, [r7, #32]
 8004b30:	4906      	ldr	r1, [pc, #24]	@ (8004b4c <I2C_RequestMemoryRead+0x1cc>)
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f886 	bl	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	00010002 	.word	0x00010002

08004b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b60:	e048      	b.n	8004bf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b68:	d044      	beq.n	8004bf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6a:	f7fe fd91 	bl	8003690 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d302      	bcc.n	8004b80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d139      	bne.n	8004bf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	0c1b      	lsrs	r3, r3, #16
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10d      	bne.n	8004ba6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	43da      	mvns	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	4013      	ands	r3, r2
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bf0c      	ite	eq
 8004b9c:	2301      	moveq	r3, #1
 8004b9e:	2300      	movne	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	e00c      	b.n	8004bc0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	43da      	mvns	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d116      	bne.n	8004bf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be0:	f043 0220 	orr.w	r2, r3, #32
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e023      	b.n	8004c3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	0c1b      	lsrs	r3, r3, #16
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d10d      	bne.n	8004c1a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	43da      	mvns	r2, r3
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf0c      	ite	eq
 8004c10:	2301      	moveq	r3, #1
 8004c12:	2300      	movne	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	e00c      	b.n	8004c34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	43da      	mvns	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	4013      	ands	r3, r2
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d093      	beq.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c52:	e071      	b.n	8004d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c62:	d123      	bne.n	8004cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c98:	f043 0204 	orr.w	r2, r3, #4
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e067      	b.n	8004d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d041      	beq.n	8004d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb4:	f7fe fcec 	bl	8003690 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d302      	bcc.n	8004cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d136      	bne.n	8004d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d10c      	bne.n	8004cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	43da      	mvns	r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bf14      	ite	ne
 8004ce6:	2301      	movne	r3, #1
 8004ce8:	2300      	moveq	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	e00b      	b.n	8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	43da      	mvns	r2, r3
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	bf14      	ite	ne
 8004d00:	2301      	movne	r3, #1
 8004d02:	2300      	moveq	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d016      	beq.n	8004d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d24:	f043 0220 	orr.w	r2, r3, #32
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e021      	b.n	8004d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	0c1b      	lsrs	r3, r3, #16
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d10c      	bne.n	8004d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	43da      	mvns	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e00b      	b.n	8004d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	43da      	mvns	r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4013      	ands	r3, r2
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bf14      	ite	ne
 8004d6e:	2301      	movne	r3, #1
 8004d70:	2300      	moveq	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f47f af6d 	bne.w	8004c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d90:	e034      	b.n	8004dfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f8e3 	bl	8004f5e <I2C_IsAcknowledgeFailed>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e034      	b.n	8004e0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d028      	beq.n	8004dfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004daa:	f7fe fc71 	bl	8003690 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d302      	bcc.n	8004dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d11d      	bne.n	8004dfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dca:	2b80      	cmp	r3, #128	@ 0x80
 8004dcc:	d016      	beq.n	8004dfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de8:	f043 0220 	orr.w	r2, r3, #32
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e007      	b.n	8004e0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e06:	2b80      	cmp	r3, #128	@ 0x80
 8004e08:	d1c3      	bne.n	8004d92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e20:	e034      	b.n	8004e8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f89b 	bl	8004f5e <I2C_IsAcknowledgeFailed>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e034      	b.n	8004e9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e38:	d028      	beq.n	8004e8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3a:	f7fe fc29 	bl	8003690 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d302      	bcc.n	8004e50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d11d      	bne.n	8004e8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f003 0304 	and.w	r3, r3, #4
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d016      	beq.n	8004e8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e78:	f043 0220 	orr.w	r2, r3, #32
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e007      	b.n	8004e9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d1c3      	bne.n	8004e22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004eb0:	e049      	b.n	8004f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b10      	cmp	r3, #16
 8004ebe:	d119      	bne.n	8004ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0210 	mvn.w	r2, #16
 8004ec8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e030      	b.n	8004f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef4:	f7fe fbcc 	bl	8003690 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d302      	bcc.n	8004f0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d11d      	bne.n	8004f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f14:	2b40      	cmp	r3, #64	@ 0x40
 8004f16:	d016      	beq.n	8004f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e007      	b.n	8004f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f50:	2b40      	cmp	r3, #64	@ 0x40
 8004f52:	d1ae      	bne.n	8004eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f74:	d11b      	bne.n	8004fae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f7e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	f043 0204 	orr.w	r2, r3, #4
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e000      	b.n	8004fb0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d129      	bne.n	8005026 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2224      	movs	r2, #36	@ 0x24
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0201 	bic.w	r2, r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0210 	bic.w	r2, r2, #16
 8004ff8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0201 	orr.w	r2, r2, #1
 8005018:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	e000      	b.n	8005028 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005026:	2302      	movs	r3, #2
  }
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b20      	cmp	r3, #32
 800504c:	d12a      	bne.n	80050a4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2224      	movs	r2, #36	@ 0x24
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800506e:	89fb      	ldrh	r3, [r7, #14]
 8005070:	f023 030f 	bic.w	r3, r3, #15
 8005074:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	b29a      	uxth	r2, r3
 800507a:	89fb      	ldrh	r3, [r7, #14]
 800507c:	4313      	orrs	r3, r2
 800507e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	89fa      	ldrh	r2, [r7, #14]
 8005086:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	e000      	b.n	80050a6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80050a4:	2302      	movs	r3, #2
  }
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
	...

080050b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e0bf      	b.n	8005246 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fd fc44 	bl	8002968 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80050f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6999      	ldr	r1, [r3, #24]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800510c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6899      	ldr	r1, [r3, #8]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	4b4a      	ldr	r3, [pc, #296]	@ (8005250 <HAL_LTDC_Init+0x19c>)
 8005128:	400b      	ands	r3, r1
 800512a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	041b      	lsls	r3, r3, #16
 8005132:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6899      	ldr	r1, [r3, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68d9      	ldr	r1, [r3, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	4b3e      	ldr	r3, [pc, #248]	@ (8005250 <HAL_LTDC_Init+0x19c>)
 8005156:	400b      	ands	r3, r1
 8005158:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	041b      	lsls	r3, r3, #16
 8005160:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68d9      	ldr	r1, [r3, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1a      	ldr	r2, [r3, #32]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6919      	ldr	r1, [r3, #16]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b33      	ldr	r3, [pc, #204]	@ (8005250 <HAL_LTDC_Init+0x19c>)
 8005184:	400b      	ands	r3, r1
 8005186:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	041b      	lsls	r3, r3, #16
 800518e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6919      	ldr	r1, [r3, #16]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6959      	ldr	r1, [r3, #20]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4b27      	ldr	r3, [pc, #156]	@ (8005250 <HAL_LTDC_Init+0x19c>)
 80051b2:	400b      	ands	r3, r1
 80051b4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ba:	041b      	lsls	r3, r3, #16
 80051bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6959      	ldr	r1, [r3, #20]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80051e4:	041b      	lsls	r3, r3, #16
 80051e6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80051f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0206 	orr.w	r2, r2, #6
 8005222:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	f000f800 	.word	0xf000f800

08005254 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005254:	b5b0      	push	{r4, r5, r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_LTDC_ConfigLayer+0x1a>
 800526a:	2302      	movs	r3, #2
 800526c:	e02c      	b.n	80052c8 <HAL_LTDC_ConfigLayer+0x74>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2202      	movs	r2, #2
 800527a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2134      	movs	r1, #52	@ 0x34
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	4413      	add	r3, r2
 800528a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4614      	mov	r4, r2
 8005292:	461d      	mov	r5, r3
 8005294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800529a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800529c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800529e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	68b9      	ldr	r1, [r7, #8]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f811 	bl	80052d0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2201      	movs	r2, #1
 80052b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bdb0      	pop	{r4, r5, r7, pc}

080052d0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b089      	sub	sp, #36	@ 0x24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	0c1b      	lsrs	r3, r3, #16
 80052e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ec:	4413      	add	r3, r2
 80052ee:	041b      	lsls	r3, r3, #16
 80052f0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	01db      	lsls	r3, r3, #7
 80052fc:	4413      	add	r3, r2
 80052fe:	3384      	adds	r3, #132	@ 0x84
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	6812      	ldr	r2, [r2, #0]
 8005306:	4611      	mov	r1, r2
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	01d2      	lsls	r2, r2, #7
 800530c:	440a      	add	r2, r1
 800530e:	3284      	adds	r2, #132	@ 0x84
 8005310:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005314:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	0c1b      	lsrs	r3, r3, #16
 8005322:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005326:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005328:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4619      	mov	r1, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	01db      	lsls	r3, r3, #7
 8005334:	440b      	add	r3, r1
 8005336:	3384      	adds	r3, #132	@ 0x84
 8005338:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800533e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800534e:	4413      	add	r3, r2
 8005350:	041b      	lsls	r3, r3, #16
 8005352:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	01db      	lsls	r3, r3, #7
 800535e:	4413      	add	r3, r2
 8005360:	3384      	adds	r3, #132	@ 0x84
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	4611      	mov	r1, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	01d2      	lsls	r2, r2, #7
 800536e:	440a      	add	r2, r1
 8005370:	3284      	adds	r2, #132	@ 0x84
 8005372:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005376:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005386:	4413      	add	r3, r2
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4619      	mov	r1, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	01db      	lsls	r3, r3, #7
 8005394:	440b      	add	r3, r1
 8005396:	3384      	adds	r3, #132	@ 0x84
 8005398:	4619      	mov	r1, r3
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4313      	orrs	r3, r2
 800539e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	01db      	lsls	r3, r3, #7
 80053aa:	4413      	add	r3, r2
 80053ac:	3384      	adds	r3, #132	@ 0x84
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	6812      	ldr	r2, [r2, #0]
 80053b4:	4611      	mov	r1, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	01d2      	lsls	r2, r2, #7
 80053ba:	440a      	add	r2, r1
 80053bc:	3284      	adds	r2, #132	@ 0x84
 80053be:	f023 0307 	bic.w	r3, r3, #7
 80053c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	01db      	lsls	r3, r3, #7
 80053ce:	4413      	add	r3, r2
 80053d0:	3384      	adds	r3, #132	@ 0x84
 80053d2:	461a      	mov	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80053ea:	041b      	lsls	r3, r3, #16
 80053ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	061b      	lsls	r3, r3, #24
 80053f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	01db      	lsls	r3, r3, #7
 8005400:	4413      	add	r3, r2
 8005402:	3384      	adds	r3, #132	@ 0x84
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	01db      	lsls	r3, r3, #7
 8005410:	4413      	add	r3, r2
 8005412:	3384      	adds	r3, #132	@ 0x84
 8005414:	461a      	mov	r2, r3
 8005416:	2300      	movs	r3, #0
 8005418:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005420:	461a      	mov	r2, r3
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	431a      	orrs	r2, r3
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	431a      	orrs	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4619      	mov	r1, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	01db      	lsls	r3, r3, #7
 8005434:	440b      	add	r3, r1
 8005436:	3384      	adds	r3, #132	@ 0x84
 8005438:	4619      	mov	r1, r3
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	01db      	lsls	r3, r3, #7
 800544a:	4413      	add	r3, r2
 800544c:	3384      	adds	r3, #132	@ 0x84
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	4611      	mov	r1, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	01d2      	lsls	r2, r2, #7
 800545a:	440a      	add	r2, r1
 800545c:	3284      	adds	r2, #132	@ 0x84
 800545e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005462:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	01db      	lsls	r3, r3, #7
 800546e:	4413      	add	r3, r2
 8005470:	3384      	adds	r3, #132	@ 0x84
 8005472:	461a      	mov	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	01db      	lsls	r3, r3, #7
 8005484:	4413      	add	r3, r2
 8005486:	3384      	adds	r3, #132	@ 0x84
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	4611      	mov	r1, r2
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	01d2      	lsls	r2, r2, #7
 8005494:	440a      	add	r2, r1
 8005496:	3284      	adds	r2, #132	@ 0x84
 8005498:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800549c:	f023 0307 	bic.w	r3, r3, #7
 80054a0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	69da      	ldr	r2, [r3, #28]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	68f9      	ldr	r1, [r7, #12]
 80054ac:	6809      	ldr	r1, [r1, #0]
 80054ae:	4608      	mov	r0, r1
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	01c9      	lsls	r1, r1, #7
 80054b4:	4401      	add	r1, r0
 80054b6:	3184      	adds	r1, #132	@ 0x84
 80054b8:	4313      	orrs	r3, r2
 80054ba:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	01db      	lsls	r3, r3, #7
 80054c6:	4413      	add	r3, r2
 80054c8:	3384      	adds	r3, #132	@ 0x84
 80054ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	01db      	lsls	r3, r3, #7
 80054d6:	4413      	add	r3, r2
 80054d8:	3384      	adds	r3, #132	@ 0x84
 80054da:	461a      	mov	r2, r3
 80054dc:	2300      	movs	r3, #0
 80054de:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	01db      	lsls	r3, r3, #7
 80054ea:	4413      	add	r3, r2
 80054ec:	3384      	adds	r3, #132	@ 0x84
 80054ee:	461a      	mov	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80054fe:	2304      	movs	r3, #4
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	e01b      	b.n	800553c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d102      	bne.n	8005512 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800550c:	2303      	movs	r3, #3
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	e014      	b.n	800553c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b04      	cmp	r3, #4
 8005518:	d00b      	beq.n	8005532 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800551e:	2b02      	cmp	r3, #2
 8005520:	d007      	beq.n	8005532 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005526:	2b03      	cmp	r3, #3
 8005528:	d003      	beq.n	8005532 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800552e:	2b07      	cmp	r3, #7
 8005530:	d102      	bne.n	8005538 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005532:	2302      	movs	r3, #2
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	e001      	b.n	800553c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005538:	2301      	movs	r3, #1
 800553a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	01db      	lsls	r3, r3, #7
 8005546:	4413      	add	r3, r2
 8005548:	3384      	adds	r3, #132	@ 0x84
 800554a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	6812      	ldr	r2, [r2, #0]
 8005550:	4611      	mov	r1, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	01d2      	lsls	r2, r2, #7
 8005556:	440a      	add	r2, r1
 8005558:	3284      	adds	r2, #132	@ 0x84
 800555a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800555e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	1acb      	subs	r3, r1, r3
 8005576:	69f9      	ldr	r1, [r7, #28]
 8005578:	fb01 f303 	mul.w	r3, r1, r3
 800557c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800557e:	68f9      	ldr	r1, [r7, #12]
 8005580:	6809      	ldr	r1, [r1, #0]
 8005582:	4608      	mov	r0, r1
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	01c9      	lsls	r1, r1, #7
 8005588:	4401      	add	r1, r0
 800558a:	3184      	adds	r1, #132	@ 0x84
 800558c:	4313      	orrs	r3, r2
 800558e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	461a      	mov	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	01db      	lsls	r3, r3, #7
 800559a:	4413      	add	r3, r2
 800559c:	3384      	adds	r3, #132	@ 0x84
 800559e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	4611      	mov	r1, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	01d2      	lsls	r2, r2, #7
 80055aa:	440a      	add	r2, r1
 80055ac:	3284      	adds	r2, #132	@ 0x84
 80055ae:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80055b2:	f023 0307 	bic.w	r3, r3, #7
 80055b6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	01db      	lsls	r3, r3, #7
 80055c2:	4413      	add	r3, r2
 80055c4:	3384      	adds	r3, #132	@ 0x84
 80055c6:	461a      	mov	r2, r3
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	01db      	lsls	r3, r3, #7
 80055d8:	4413      	add	r3, r2
 80055da:	3384      	adds	r3, #132	@ 0x84
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	4611      	mov	r1, r2
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	01d2      	lsls	r2, r2, #7
 80055e8:	440a      	add	r2, r1
 80055ea:	3284      	adds	r2, #132	@ 0x84
 80055ec:	f043 0301 	orr.w	r3, r3, #1
 80055f0:	6013      	str	r3, [r2, #0]
}
 80055f2:	bf00      	nop
 80055f4:	3724      	adds	r7, #36	@ 0x24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
	...

08005600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e267      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d075      	beq.n	800570a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800561e:	4b88      	ldr	r3, [pc, #544]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 030c 	and.w	r3, r3, #12
 8005626:	2b04      	cmp	r3, #4
 8005628:	d00c      	beq.n	8005644 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800562a:	4b85      	ldr	r3, [pc, #532]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005632:	2b08      	cmp	r3, #8
 8005634:	d112      	bne.n	800565c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005636:	4b82      	ldr	r3, [pc, #520]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800563e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005642:	d10b      	bne.n	800565c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005644:	4b7e      	ldr	r3, [pc, #504]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d05b      	beq.n	8005708 <HAL_RCC_OscConfig+0x108>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d157      	bne.n	8005708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e242      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005664:	d106      	bne.n	8005674 <HAL_RCC_OscConfig+0x74>
 8005666:	4b76      	ldr	r3, [pc, #472]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a75      	ldr	r2, [pc, #468]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 800566c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	e01d      	b.n	80056b0 <HAL_RCC_OscConfig+0xb0>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800567c:	d10c      	bne.n	8005698 <HAL_RCC_OscConfig+0x98>
 800567e:	4b70      	ldr	r3, [pc, #448]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a6f      	ldr	r2, [pc, #444]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 8005684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	4b6d      	ldr	r3, [pc, #436]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a6c      	ldr	r2, [pc, #432]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 8005690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	e00b      	b.n	80056b0 <HAL_RCC_OscConfig+0xb0>
 8005698:	4b69      	ldr	r3, [pc, #420]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a68      	ldr	r2, [pc, #416]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 800569e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	4b66      	ldr	r3, [pc, #408]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a65      	ldr	r2, [pc, #404]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 80056aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d013      	beq.n	80056e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b8:	f7fd ffea 	bl	8003690 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056be:	e008      	b.n	80056d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c0:	f7fd ffe6 	bl	8003690 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b64      	cmp	r3, #100	@ 0x64
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e207      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d2:	4b5b      	ldr	r3, [pc, #364]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0f0      	beq.n	80056c0 <HAL_RCC_OscConfig+0xc0>
 80056de:	e014      	b.n	800570a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e0:	f7fd ffd6 	bl	8003690 <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056e8:	f7fd ffd2 	bl	8003690 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b64      	cmp	r3, #100	@ 0x64
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e1f3      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056fa:	4b51      	ldr	r3, [pc, #324]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0xe8>
 8005706:	e000      	b.n	800570a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d063      	beq.n	80057de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005716:	4b4a      	ldr	r3, [pc, #296]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 030c 	and.w	r3, r3, #12
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00b      	beq.n	800573a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005722:	4b47      	ldr	r3, [pc, #284]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800572a:	2b08      	cmp	r3, #8
 800572c:	d11c      	bne.n	8005768 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800572e:	4b44      	ldr	r3, [pc, #272]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d116      	bne.n	8005768 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800573a:	4b41      	ldr	r3, [pc, #260]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d005      	beq.n	8005752 <HAL_RCC_OscConfig+0x152>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d001      	beq.n	8005752 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e1c7      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005752:	4b3b      	ldr	r3, [pc, #236]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	4937      	ldr	r1, [pc, #220]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 8005762:	4313      	orrs	r3, r2
 8005764:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005766:	e03a      	b.n	80057de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d020      	beq.n	80057b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005770:	4b34      	ldr	r3, [pc, #208]	@ (8005844 <HAL_RCC_OscConfig+0x244>)
 8005772:	2201      	movs	r2, #1
 8005774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005776:	f7fd ff8b 	bl	8003690 <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800577c:	e008      	b.n	8005790 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800577e:	f7fd ff87 	bl	8003690 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e1a8      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005790:	4b2b      	ldr	r3, [pc, #172]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f0      	beq.n	800577e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800579c:	4b28      	ldr	r3, [pc, #160]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	4925      	ldr	r1, [pc, #148]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	600b      	str	r3, [r1, #0]
 80057b0:	e015      	b.n	80057de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057b2:	4b24      	ldr	r3, [pc, #144]	@ (8005844 <HAL_RCC_OscConfig+0x244>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7fd ff6a 	bl	8003690 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057c0:	f7fd ff66 	bl	8003690 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e187      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f0      	bne.n	80057c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0308 	and.w	r3, r3, #8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d036      	beq.n	8005858 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d016      	beq.n	8005820 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057f2:	4b15      	ldr	r3, [pc, #84]	@ (8005848 <HAL_RCC_OscConfig+0x248>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f8:	f7fd ff4a 	bl	8003690 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005800:	f7fd ff46 	bl	8003690 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e167      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005812:	4b0b      	ldr	r3, [pc, #44]	@ (8005840 <HAL_RCC_OscConfig+0x240>)
 8005814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0f0      	beq.n	8005800 <HAL_RCC_OscConfig+0x200>
 800581e:	e01b      	b.n	8005858 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005820:	4b09      	ldr	r3, [pc, #36]	@ (8005848 <HAL_RCC_OscConfig+0x248>)
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005826:	f7fd ff33 	bl	8003690 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800582c:	e00e      	b.n	800584c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800582e:	f7fd ff2f 	bl	8003690 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d907      	bls.n	800584c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e150      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
 8005840:	40023800 	.word	0x40023800
 8005844:	42470000 	.word	0x42470000
 8005848:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800584c:	4b88      	ldr	r3, [pc, #544]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 800584e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1ea      	bne.n	800582e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 8097 	beq.w	8005994 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005866:	2300      	movs	r3, #0
 8005868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800586a:	4b81      	ldr	r3, [pc, #516]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 800586c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10f      	bne.n	8005896 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005876:	2300      	movs	r3, #0
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	4b7d      	ldr	r3, [pc, #500]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 800587c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587e:	4a7c      	ldr	r2, [pc, #496]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 8005880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005884:	6413      	str	r3, [r2, #64]	@ 0x40
 8005886:	4b7a      	ldr	r3, [pc, #488]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 8005888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800588e:	60bb      	str	r3, [r7, #8]
 8005890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005892:	2301      	movs	r3, #1
 8005894:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005896:	4b77      	ldr	r3, [pc, #476]	@ (8005a74 <HAL_RCC_OscConfig+0x474>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d118      	bne.n	80058d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058a2:	4b74      	ldr	r3, [pc, #464]	@ (8005a74 <HAL_RCC_OscConfig+0x474>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a73      	ldr	r2, [pc, #460]	@ (8005a74 <HAL_RCC_OscConfig+0x474>)
 80058a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ae:	f7fd feef 	bl	8003690 <HAL_GetTick>
 80058b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b6:	f7fd feeb 	bl	8003690 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e10c      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005a74 <HAL_RCC_OscConfig+0x474>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0f0      	beq.n	80058b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d106      	bne.n	80058ea <HAL_RCC_OscConfig+0x2ea>
 80058dc:	4b64      	ldr	r3, [pc, #400]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 80058de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e0:	4a63      	ldr	r2, [pc, #396]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80058e8:	e01c      	b.n	8005924 <HAL_RCC_OscConfig+0x324>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	2b05      	cmp	r3, #5
 80058f0:	d10c      	bne.n	800590c <HAL_RCC_OscConfig+0x30c>
 80058f2:	4b5f      	ldr	r3, [pc, #380]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 80058f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f6:	4a5e      	ldr	r2, [pc, #376]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 80058f8:	f043 0304 	orr.w	r3, r3, #4
 80058fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80058fe:	4b5c      	ldr	r3, [pc, #368]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 8005900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005902:	4a5b      	ldr	r2, [pc, #364]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 8005904:	f043 0301 	orr.w	r3, r3, #1
 8005908:	6713      	str	r3, [r2, #112]	@ 0x70
 800590a:	e00b      	b.n	8005924 <HAL_RCC_OscConfig+0x324>
 800590c:	4b58      	ldr	r3, [pc, #352]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 800590e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005910:	4a57      	ldr	r2, [pc, #348]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 8005912:	f023 0301 	bic.w	r3, r3, #1
 8005916:	6713      	str	r3, [r2, #112]	@ 0x70
 8005918:	4b55      	ldr	r3, [pc, #340]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 800591a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800591c:	4a54      	ldr	r2, [pc, #336]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 800591e:	f023 0304 	bic.w	r3, r3, #4
 8005922:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d015      	beq.n	8005958 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592c:	f7fd feb0 	bl	8003690 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005932:	e00a      	b.n	800594a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005934:	f7fd feac 	bl	8003690 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e0cb      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800594a:	4b49      	ldr	r3, [pc, #292]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 800594c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0ee      	beq.n	8005934 <HAL_RCC_OscConfig+0x334>
 8005956:	e014      	b.n	8005982 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005958:	f7fd fe9a 	bl	8003690 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800595e:	e00a      	b.n	8005976 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005960:	f7fd fe96 	bl	8003690 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800596e:	4293      	cmp	r3, r2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e0b5      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005976:	4b3e      	ldr	r3, [pc, #248]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 8005978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1ee      	bne.n	8005960 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005982:	7dfb      	ldrb	r3, [r7, #23]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d105      	bne.n	8005994 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005988:	4b39      	ldr	r3, [pc, #228]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 800598a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598c:	4a38      	ldr	r2, [pc, #224]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 800598e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005992:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80a1 	beq.w	8005ae0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800599e:	4b34      	ldr	r3, [pc, #208]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 030c 	and.w	r3, r3, #12
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d05c      	beq.n	8005a64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d141      	bne.n	8005a36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b2:	4b31      	ldr	r3, [pc, #196]	@ (8005a78 <HAL_RCC_OscConfig+0x478>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b8:	f7fd fe6a 	bl	8003690 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c0:	f7fd fe66 	bl	8003690 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e087      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059d2:	4b27      	ldr	r3, [pc, #156]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1f0      	bne.n	80059c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69da      	ldr	r2, [r3, #28]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	019b      	lsls	r3, r3, #6
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f4:	085b      	lsrs	r3, r3, #1
 80059f6:	3b01      	subs	r3, #1
 80059f8:	041b      	lsls	r3, r3, #16
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a00:	061b      	lsls	r3, r3, #24
 8005a02:	491b      	ldr	r1, [pc, #108]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a08:	4b1b      	ldr	r3, [pc, #108]	@ (8005a78 <HAL_RCC_OscConfig+0x478>)
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0e:	f7fd fe3f 	bl	8003690 <HAL_GetTick>
 8005a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a14:	e008      	b.n	8005a28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a16:	f7fd fe3b 	bl	8003690 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e05c      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a28:	4b11      	ldr	r3, [pc, #68]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0f0      	beq.n	8005a16 <HAL_RCC_OscConfig+0x416>
 8005a34:	e054      	b.n	8005ae0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a36:	4b10      	ldr	r3, [pc, #64]	@ (8005a78 <HAL_RCC_OscConfig+0x478>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3c:	f7fd fe28 	bl	8003690 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a44:	f7fd fe24 	bl	8003690 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e045      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a56:	4b06      	ldr	r3, [pc, #24]	@ (8005a70 <HAL_RCC_OscConfig+0x470>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1f0      	bne.n	8005a44 <HAL_RCC_OscConfig+0x444>
 8005a62:	e03d      	b.n	8005ae0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d107      	bne.n	8005a7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e038      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
 8005a70:	40023800 	.word	0x40023800
 8005a74:	40007000 	.word	0x40007000
 8005a78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005aec <HAL_RCC_OscConfig+0x4ec>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d028      	beq.n	8005adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d121      	bne.n	8005adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d11a      	bne.n	8005adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005aac:	4013      	ands	r3, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ab2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d111      	bne.n	8005adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac2:	085b      	lsrs	r3, r3, #1
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d107      	bne.n	8005adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40023800 	.word	0x40023800

08005af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0cc      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b04:	4b68      	ldr	r3, [pc, #416]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 030f 	and.w	r3, r3, #15
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d90c      	bls.n	8005b2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b12:	4b65      	ldr	r3, [pc, #404]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1a:	4b63      	ldr	r3, [pc, #396]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d001      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e0b8      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d020      	beq.n	8005b7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b44:	4b59      	ldr	r3, [pc, #356]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	4a58      	ldr	r2, [pc, #352]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b5c:	4b53      	ldr	r3, [pc, #332]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	4a52      	ldr	r2, [pc, #328]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b68:	4b50      	ldr	r3, [pc, #320]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	494d      	ldr	r1, [pc, #308]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d044      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d107      	bne.n	8005b9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b8e:	4b47      	ldr	r3, [pc, #284]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d119      	bne.n	8005bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e07f      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d003      	beq.n	8005bae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d107      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bae:	4b3f      	ldr	r3, [pc, #252]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d109      	bne.n	8005bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e06f      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e067      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bce:	4b37      	ldr	r3, [pc, #220]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f023 0203 	bic.w	r2, r3, #3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	4934      	ldr	r1, [pc, #208]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005be0:	f7fd fd56 	bl	8003690 <HAL_GetTick>
 8005be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be6:	e00a      	b.n	8005bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be8:	f7fd fd52 	bl	8003690 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e04f      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 020c 	and.w	r2, r3, #12
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d1eb      	bne.n	8005be8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c10:	4b25      	ldr	r3, [pc, #148]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d20c      	bcs.n	8005c38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1e:	4b22      	ldr	r3, [pc, #136]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c26:	4b20      	ldr	r3, [pc, #128]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d001      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e032      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d008      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c44:	4b19      	ldr	r3, [pc, #100]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	4916      	ldr	r1, [pc, #88]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d009      	beq.n	8005c76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c62:	4b12      	ldr	r3, [pc, #72]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	490e      	ldr	r1, [pc, #56]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c76:	f000 f821 	bl	8005cbc <HAL_RCC_GetSysClockFreq>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	091b      	lsrs	r3, r3, #4
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	490a      	ldr	r1, [pc, #40]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c88:	5ccb      	ldrb	r3, [r1, r3]
 8005c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8e:	4a09      	ldr	r2, [pc, #36]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005c92:	4b09      	ldr	r3, [pc, #36]	@ (8005cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fd fcb6 	bl	8003608 <HAL_InitTick>

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40023c00 	.word	0x40023c00
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	08009034 	.word	0x08009034
 8005cb4:	20000010 	.word	0x20000010
 8005cb8:	20000014 	.word	0x20000014

08005cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc0:	b094      	sub	sp, #80	@ 0x50
 8005cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cd4:	4b79      	ldr	r3, [pc, #484]	@ (8005ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 030c 	and.w	r3, r3, #12
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d00d      	beq.n	8005cfc <HAL_RCC_GetSysClockFreq+0x40>
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	f200 80e1 	bhi.w	8005ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d003      	beq.n	8005cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005cee:	e0db      	b.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cf0:	4b73      	ldr	r3, [pc, #460]	@ (8005ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005cf4:	e0db      	b.n	8005eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cf6:	4b73      	ldr	r3, [pc, #460]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005cfa:	e0d8      	b.n	8005eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cfc:	4b6f      	ldr	r3, [pc, #444]	@ (8005ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d06:	4b6d      	ldr	r3, [pc, #436]	@ (8005ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d063      	beq.n	8005dda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d12:	4b6a      	ldr	r3, [pc, #424]	@ (8005ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	099b      	lsrs	r3, r3, #6
 8005d18:	2200      	movs	r2, #0
 8005d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d24:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d26:	2300      	movs	r3, #0
 8005d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d2e:	4622      	mov	r2, r4
 8005d30:	462b      	mov	r3, r5
 8005d32:	f04f 0000 	mov.w	r0, #0
 8005d36:	f04f 0100 	mov.w	r1, #0
 8005d3a:	0159      	lsls	r1, r3, #5
 8005d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d40:	0150      	lsls	r0, r2, #5
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4621      	mov	r1, r4
 8005d48:	1a51      	subs	r1, r2, r1
 8005d4a:	6139      	str	r1, [r7, #16]
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d60:	4659      	mov	r1, fp
 8005d62:	018b      	lsls	r3, r1, #6
 8005d64:	4651      	mov	r1, sl
 8005d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d6a:	4651      	mov	r1, sl
 8005d6c:	018a      	lsls	r2, r1, #6
 8005d6e:	4651      	mov	r1, sl
 8005d70:	ebb2 0801 	subs.w	r8, r2, r1
 8005d74:	4659      	mov	r1, fp
 8005d76:	eb63 0901 	sbc.w	r9, r3, r1
 8005d7a:	f04f 0200 	mov.w	r2, #0
 8005d7e:	f04f 0300 	mov.w	r3, #0
 8005d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d8e:	4690      	mov	r8, r2
 8005d90:	4699      	mov	r9, r3
 8005d92:	4623      	mov	r3, r4
 8005d94:	eb18 0303 	adds.w	r3, r8, r3
 8005d98:	60bb      	str	r3, [r7, #8]
 8005d9a:	462b      	mov	r3, r5
 8005d9c:	eb49 0303 	adc.w	r3, r9, r3
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	f04f 0200 	mov.w	r2, #0
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dae:	4629      	mov	r1, r5
 8005db0:	024b      	lsls	r3, r1, #9
 8005db2:	4621      	mov	r1, r4
 8005db4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005db8:	4621      	mov	r1, r4
 8005dba:	024a      	lsls	r2, r1, #9
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dcc:	f7fa fa60 	bl	8000290 <__aeabi_uldivmod>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dd8:	e058      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dda:	4b38      	ldr	r3, [pc, #224]	@ (8005ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	099b      	lsrs	r3, r3, #6
 8005de0:	2200      	movs	r2, #0
 8005de2:	4618      	mov	r0, r3
 8005de4:	4611      	mov	r1, r2
 8005de6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005dea:	623b      	str	r3, [r7, #32]
 8005dec:	2300      	movs	r3, #0
 8005dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8005df0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005df4:	4642      	mov	r2, r8
 8005df6:	464b      	mov	r3, r9
 8005df8:	f04f 0000 	mov.w	r0, #0
 8005dfc:	f04f 0100 	mov.w	r1, #0
 8005e00:	0159      	lsls	r1, r3, #5
 8005e02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e06:	0150      	lsls	r0, r2, #5
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4641      	mov	r1, r8
 8005e0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e12:	4649      	mov	r1, r9
 8005e14:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e18:	f04f 0200 	mov.w	r2, #0
 8005e1c:	f04f 0300 	mov.w	r3, #0
 8005e20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e2c:	ebb2 040a 	subs.w	r4, r2, sl
 8005e30:	eb63 050b 	sbc.w	r5, r3, fp
 8005e34:	f04f 0200 	mov.w	r2, #0
 8005e38:	f04f 0300 	mov.w	r3, #0
 8005e3c:	00eb      	lsls	r3, r5, #3
 8005e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e42:	00e2      	lsls	r2, r4, #3
 8005e44:	4614      	mov	r4, r2
 8005e46:	461d      	mov	r5, r3
 8005e48:	4643      	mov	r3, r8
 8005e4a:	18e3      	adds	r3, r4, r3
 8005e4c:	603b      	str	r3, [r7, #0]
 8005e4e:	464b      	mov	r3, r9
 8005e50:	eb45 0303 	adc.w	r3, r5, r3
 8005e54:	607b      	str	r3, [r7, #4]
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	f04f 0300 	mov.w	r3, #0
 8005e5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e62:	4629      	mov	r1, r5
 8005e64:	028b      	lsls	r3, r1, #10
 8005e66:	4621      	mov	r1, r4
 8005e68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	028a      	lsls	r2, r1, #10
 8005e70:	4610      	mov	r0, r2
 8005e72:	4619      	mov	r1, r3
 8005e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e76:	2200      	movs	r2, #0
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	61fa      	str	r2, [r7, #28]
 8005e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e80:	f7fa fa06 	bl	8000290 <__aeabi_uldivmod>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4613      	mov	r3, r2
 8005e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	0c1b      	lsrs	r3, r3, #16
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	3301      	adds	r3, #1
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005e9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ea6:	e002      	b.n	8005eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ea8:	4b05      	ldr	r3, [pc, #20]	@ (8005ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3750      	adds	r7, #80	@ 0x50
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eba:	bf00      	nop
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	00f42400 	.word	0x00f42400
 8005ec4:	007a1200 	.word	0x007a1200

08005ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ecc:	4b03      	ldr	r3, [pc, #12]	@ (8005edc <HAL_RCC_GetHCLKFreq+0x14>)
 8005ece:	681b      	ldr	r3, [r3, #0]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	20000010 	.word	0x20000010

08005ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ee4:	f7ff fff0 	bl	8005ec8 <HAL_RCC_GetHCLKFreq>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	4b05      	ldr	r3, [pc, #20]	@ (8005f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	0a9b      	lsrs	r3, r3, #10
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	4903      	ldr	r1, [pc, #12]	@ (8005f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ef6:	5ccb      	ldrb	r3, [r1, r3]
 8005ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	40023800 	.word	0x40023800
 8005f04:	08009044 	.word	0x08009044

08005f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10b      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d105      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d075      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f3c:	4b91      	ldr	r3, [pc, #580]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f42:	f7fd fba5 	bl	8003690 <HAL_GetTick>
 8005f46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f48:	e008      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f4a:	f7fd fba1 	bl	8003690 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e189      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f5c:	4b8a      	ldr	r3, [pc, #552]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1f0      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d009      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	019a      	lsls	r2, r3, #6
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	071b      	lsls	r3, r3, #28
 8005f80:	4981      	ldr	r1, [pc, #516]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01f      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f94:	4b7c      	ldr	r3, [pc, #496]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f9a:	0f1b      	lsrs	r3, r3, #28
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	019a      	lsls	r2, r3, #6
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	061b      	lsls	r3, r3, #24
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	071b      	lsls	r3, r3, #28
 8005fb4:	4974      	ldr	r1, [pc, #464]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fbc:	4b72      	ldr	r3, [pc, #456]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fc2:	f023 021f 	bic.w	r2, r3, #31
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	496e      	ldr	r1, [pc, #440]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00d      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	019a      	lsls	r2, r3, #6
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	061b      	lsls	r3, r3, #24
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	071b      	lsls	r3, r3, #28
 8005ff4:	4964      	ldr	r1, [pc, #400]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ffc:	4b61      	ldr	r3, [pc, #388]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006002:	f7fd fb45 	bl	8003690 <HAL_GetTick>
 8006006:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006008:	e008      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800600a:	f7fd fb41 	bl	8003690 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e129      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800601c:	4b5a      	ldr	r3, [pc, #360]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0f0      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d105      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800603c:	2b00      	cmp	r3, #0
 800603e:	d079      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006040:	4b52      	ldr	r3, [pc, #328]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006046:	f7fd fb23 	bl	8003690 <HAL_GetTick>
 800604a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800604c:	e008      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800604e:	f7fd fb1f 	bl	8003690 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d901      	bls.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e107      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006060:	4b49      	ldr	r3, [pc, #292]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800606c:	d0ef      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	d020      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800607a:	4b43      	ldr	r3, [pc, #268]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800607c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006080:	0f1b      	lsrs	r3, r3, #28
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	019a      	lsls	r2, r3, #6
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	061b      	lsls	r3, r3, #24
 8006094:	431a      	orrs	r2, r3
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	071b      	lsls	r3, r3, #28
 800609a:	493b      	ldr	r1, [pc, #236]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800609c:	4313      	orrs	r3, r2
 800609e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060a2:	4b39      	ldr	r3, [pc, #228]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060a8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	4934      	ldr	r1, [pc, #208]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01e      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060c8:	4b2f      	ldr	r3, [pc, #188]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ce:	0e1b      	lsrs	r3, r3, #24
 80060d0:	f003 030f 	and.w	r3, r3, #15
 80060d4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	019a      	lsls	r2, r3, #6
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	061b      	lsls	r3, r3, #24
 80060e0:	431a      	orrs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	071b      	lsls	r3, r3, #28
 80060e8:	4927      	ldr	r1, [pc, #156]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80060f0:	4b25      	ldr	r3, [pc, #148]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fe:	4922      	ldr	r1, [pc, #136]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006106:	4b21      	ldr	r3, [pc, #132]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006108:	2201      	movs	r2, #1
 800610a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800610c:	f7fd fac0 	bl	8003690 <HAL_GetTick>
 8006110:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006112:	e008      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006114:	f7fd fabc 	bl	8003690 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d901      	bls.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e0a4      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006126:	4b18      	ldr	r3, [pc, #96]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800612e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006132:	d1ef      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0320 	and.w	r3, r3, #32
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 808b 	beq.w	8006258 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	4b10      	ldr	r3, [pc, #64]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614a:	4a0f      	ldr	r2, [pc, #60]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800614c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006150:	6413      	str	r3, [r2, #64]	@ 0x40
 8006152:	4b0d      	ldr	r3, [pc, #52]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800615e:	4b0c      	ldr	r3, [pc, #48]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a0b      	ldr	r2, [pc, #44]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006168:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800616a:	f7fd fa91 	bl	8003690 <HAL_GetTick>
 800616e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006170:	e010      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006172:	f7fd fa8d 	bl	8003690 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d909      	bls.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e075      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006184:	42470068 	.word	0x42470068
 8006188:	40023800 	.word	0x40023800
 800618c:	42470070 	.word	0x42470070
 8006190:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006194:	4b38      	ldr	r3, [pc, #224]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0e8      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061a0:	4b36      	ldr	r3, [pc, #216]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061a8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d02f      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d028      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061be:	4b2f      	ldr	r3, [pc, #188]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061c8:	4b2d      	ldr	r3, [pc, #180]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80061ca:	2201      	movs	r2, #1
 80061cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061ce:	4b2c      	ldr	r3, [pc, #176]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80061d4:	4a29      	ldr	r2, [pc, #164]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061da:	4b28      	ldr	r3, [pc, #160]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d114      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061e6:	f7fd fa53 	bl	8003690 <HAL_GetTick>
 80061ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ec:	e00a      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ee:	f7fd fa4f 	bl	8003690 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d901      	bls.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e035      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006204:	4b1d      	ldr	r3, [pc, #116]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0ee      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006218:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800621c:	d10d      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800621e:	4b17      	ldr	r3, [pc, #92]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800622e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006232:	4912      	ldr	r1, [pc, #72]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006234:	4313      	orrs	r3, r2
 8006236:	608b      	str	r3, [r1, #8]
 8006238:	e005      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800623a:	4b10      	ldr	r3, [pc, #64]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	4a0f      	ldr	r2, [pc, #60]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006240:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006244:	6093      	str	r3, [r2, #8]
 8006246:	4b0d      	ldr	r3, [pc, #52]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006248:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006252:	490a      	ldr	r1, [pc, #40]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006254:	4313      	orrs	r3, r2
 8006256:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800626a:	4b06      	ldr	r3, [pc, #24]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800626c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	40007000 	.word	0x40007000
 800627c:	40023800 	.word	0x40023800
 8006280:	42470e40 	.word	0x42470e40
 8006284:	424711e0 	.word	0x424711e0

08006288 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e01c      	b.n	80062d4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	795b      	ldrb	r3, [r3, #5]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fc fc84 	bl	8002bb8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0204 	orr.w	r2, r2, #4
 80062c4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	791b      	ldrb	r3, [r3, #4]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_RNG_GenerateRandomNumber+0x1a>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e044      	b.n	8006380 <HAL_RNG_GenerateRandomNumber+0xa4>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	795b      	ldrb	r3, [r3, #5]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b01      	cmp	r3, #1
 8006304:	d133      	bne.n	800636e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2202      	movs	r2, #2
 800630a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800630c:	f7fd f9c0 	bl	8003690 <HAL_GetTick>
 8006310:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006312:	e018      	b.n	8006346 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006314:	f7fd f9bc 	bl	8003690 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d911      	bls.n	8006346 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b01      	cmp	r3, #1
 800632e:	d00a      	beq.n	8006346 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2202      	movs	r2, #2
 800633a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e01c      	b.n	8006380 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b01      	cmp	r3, #1
 8006352:	d1df      	bne.n	8006314 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68da      	ldr	r2, [r3, #12]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	715a      	strb	r2, [r3, #5]
 800636c:	e004      	b.n	8006378 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2204      	movs	r2, #4
 8006372:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	711a      	strb	r2, [r3, #4]

  return status;
 800637e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e07b      	b.n	8006492 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d108      	bne.n	80063b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063aa:	d009      	beq.n	80063c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	61da      	str	r2, [r3, #28]
 80063b2:	e005      	b.n	80063c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d106      	bne.n	80063e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fc fc0e 	bl	8002bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006412:	431a      	orrs	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006444:	ea42 0103 	orr.w	r1, r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	0c1b      	lsrs	r3, r3, #16
 800645e:	f003 0104 	and.w	r1, r3, #4
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	f003 0210 	and.w	r2, r3, #16
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006480:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e01a      	b.n	80064e2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064c2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7fc fbe1 	bl	8002c8c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b088      	sub	sp, #32
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	603b      	str	r3, [r7, #0]
 80064f6:	4613      	mov	r3, r2
 80064f8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064fa:	f7fd f8c9 	bl	8003690 <HAL_GetTick>
 80064fe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006500:	88fb      	ldrh	r3, [r7, #6]
 8006502:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b01      	cmp	r3, #1
 800650e:	d001      	beq.n	8006514 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006510:	2302      	movs	r3, #2
 8006512:	e12a      	b.n	800676a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_SPI_Transmit+0x36>
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e122      	b.n	800676a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800652a:	2b01      	cmp	r3, #1
 800652c:	d101      	bne.n	8006532 <HAL_SPI_Transmit+0x48>
 800652e:	2302      	movs	r3, #2
 8006530:	e11b      	b.n	800676a <HAL_SPI_Transmit+0x280>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2203      	movs	r2, #3
 800653e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	88fa      	ldrh	r2, [r7, #6]
 8006552:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	88fa      	ldrh	r2, [r7, #6]
 8006558:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006580:	d10f      	bne.n	80065a2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006590:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ac:	2b40      	cmp	r3, #64	@ 0x40
 80065ae:	d007      	beq.n	80065c0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c8:	d152      	bne.n	8006670 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_SPI_Transmit+0xee>
 80065d2:	8b7b      	ldrh	r3, [r7, #26]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d145      	bne.n	8006664 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065dc:	881a      	ldrh	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e8:	1c9a      	adds	r2, r3, #2
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065fc:	e032      	b.n	8006664 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b02      	cmp	r3, #2
 800660a:	d112      	bne.n	8006632 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006610:	881a      	ldrh	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661c:	1c9a      	adds	r2, r3, #2
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006626:	b29b      	uxth	r3, r3
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006630:	e018      	b.n	8006664 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006632:	f7fd f82d 	bl	8003690 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d803      	bhi.n	800664a <HAL_SPI_Transmit+0x160>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d102      	bne.n	8006650 <HAL_SPI_Transmit+0x166>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d109      	bne.n	8006664 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e082      	b.n	800676a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1c7      	bne.n	80065fe <HAL_SPI_Transmit+0x114>
 800666e:	e053      	b.n	8006718 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <HAL_SPI_Transmit+0x194>
 8006678:	8b7b      	ldrh	r3, [r7, #26]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d147      	bne.n	800670e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	330c      	adds	r3, #12
 8006688:	7812      	ldrb	r2, [r2, #0]
 800668a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80066a4:	e033      	b.n	800670e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d113      	bne.n	80066dc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	330c      	adds	r3, #12
 80066be:	7812      	ldrb	r2, [r2, #0]
 80066c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80066da:	e018      	b.n	800670e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066dc:	f7fc ffd8 	bl	8003690 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d803      	bhi.n	80066f4 <HAL_SPI_Transmit+0x20a>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f2:	d102      	bne.n	80066fa <HAL_SPI_Transmit+0x210>
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d109      	bne.n	800670e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e02d      	b.n	800676a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1c6      	bne.n	80066a6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	6839      	ldr	r1, [r7, #0]
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 f8bf 	bl	80068a0 <SPI_EndRxTxTransaction>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2220      	movs	r2, #32
 800672c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10a      	bne.n	800674c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006768:	2300      	movs	r3, #0
  }
}
 800676a:	4618      	mov	r0, r3
 800676c:	3720      	adds	r7, #32
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006780:	b2db      	uxtb	r3, r3
}
 8006782:	4618      	mov	r0, r3
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
	...

08006790 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	4613      	mov	r3, r2
 800679e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067a0:	f7fc ff76 	bl	8003690 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a8:	1a9b      	subs	r3, r3, r2
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	4413      	add	r3, r2
 80067ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067b0:	f7fc ff6e 	bl	8003690 <HAL_GetTick>
 80067b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067b6:	4b39      	ldr	r3, [pc, #228]	@ (800689c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	015b      	lsls	r3, r3, #5
 80067bc:	0d1b      	lsrs	r3, r3, #20
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	fb02 f303 	mul.w	r3, r2, r3
 80067c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067c6:	e054      	b.n	8006872 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ce:	d050      	beq.n	8006872 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067d0:	f7fc ff5e 	bl	8003690 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	69fa      	ldr	r2, [r7, #28]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d902      	bls.n	80067e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d13d      	bne.n	8006862 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067fe:	d111      	bne.n	8006824 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006808:	d004      	beq.n	8006814 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006812:	d107      	bne.n	8006824 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006822:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800682c:	d10f      	bne.n	800684e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800684c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e017      	b.n	8006892 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	3b01      	subs	r3, #1
 8006870:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	4013      	ands	r3, r2
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	429a      	cmp	r2, r3
 8006880:	bf0c      	ite	eq
 8006882:	2301      	moveq	r3, #1
 8006884:	2300      	movne	r3, #0
 8006886:	b2db      	uxtb	r3, r3
 8006888:	461a      	mov	r2, r3
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	429a      	cmp	r2, r3
 800688e:	d19b      	bne.n	80067c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3720      	adds	r7, #32
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000010 	.word	0x20000010

080068a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2201      	movs	r2, #1
 80068b4:	2102      	movs	r1, #2
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f7ff ff6a 	bl	8006790 <SPI_WaitFlagStateUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d007      	beq.n	80068d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e032      	b.n	8006938 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006940 <SPI_EndRxTxTransaction+0xa0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006944 <SPI_EndRxTxTransaction+0xa4>)
 80068d8:	fba2 2303 	umull	r2, r3, r2, r3
 80068dc:	0d5b      	lsrs	r3, r3, #21
 80068de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80068e2:	fb02 f303 	mul.w	r3, r2, r3
 80068e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068f0:	d112      	bne.n	8006918 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2200      	movs	r2, #0
 80068fa:	2180      	movs	r1, #128	@ 0x80
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff ff47 	bl	8006790 <SPI_WaitFlagStateUntilTimeout>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d016      	beq.n	8006936 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800690c:	f043 0220 	orr.w	r2, r3, #32
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e00f      	b.n	8006938 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	3b01      	subs	r3, #1
 8006922:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800692e:	2b80      	cmp	r3, #128	@ 0x80
 8006930:	d0f2      	beq.n	8006918 <SPI_EndRxTxTransaction+0x78>
 8006932:	e000      	b.n	8006936 <SPI_EndRxTxTransaction+0x96>
        break;
 8006934:	bf00      	nop
  }

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	20000010 	.word	0x20000010
 8006944:	165e9f81 	.word	0x165e9f81

08006948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e041      	b.n	80069de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d106      	bne.n	8006974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7fc f9aa 	bl	8002cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3304      	adds	r3, #4
 8006984:	4619      	mov	r1, r3
 8006986:	4610      	mov	r0, r2
 8006988:	f000 f8f4 	bl	8006b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d101      	bne.n	8006a02 <HAL_TIM_ConfigClockSource+0x1c>
 80069fe:	2302      	movs	r3, #2
 8006a00:	e0b4      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x186>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a28:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a3a:	d03e      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0xd4>
 8006a3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a40:	f200 8087 	bhi.w	8006b52 <HAL_TIM_ConfigClockSource+0x16c>
 8006a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a48:	f000 8086 	beq.w	8006b58 <HAL_TIM_ConfigClockSource+0x172>
 8006a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a50:	d87f      	bhi.n	8006b52 <HAL_TIM_ConfigClockSource+0x16c>
 8006a52:	2b70      	cmp	r3, #112	@ 0x70
 8006a54:	d01a      	beq.n	8006a8c <HAL_TIM_ConfigClockSource+0xa6>
 8006a56:	2b70      	cmp	r3, #112	@ 0x70
 8006a58:	d87b      	bhi.n	8006b52 <HAL_TIM_ConfigClockSource+0x16c>
 8006a5a:	2b60      	cmp	r3, #96	@ 0x60
 8006a5c:	d050      	beq.n	8006b00 <HAL_TIM_ConfigClockSource+0x11a>
 8006a5e:	2b60      	cmp	r3, #96	@ 0x60
 8006a60:	d877      	bhi.n	8006b52 <HAL_TIM_ConfigClockSource+0x16c>
 8006a62:	2b50      	cmp	r3, #80	@ 0x50
 8006a64:	d03c      	beq.n	8006ae0 <HAL_TIM_ConfigClockSource+0xfa>
 8006a66:	2b50      	cmp	r3, #80	@ 0x50
 8006a68:	d873      	bhi.n	8006b52 <HAL_TIM_ConfigClockSource+0x16c>
 8006a6a:	2b40      	cmp	r3, #64	@ 0x40
 8006a6c:	d058      	beq.n	8006b20 <HAL_TIM_ConfigClockSource+0x13a>
 8006a6e:	2b40      	cmp	r3, #64	@ 0x40
 8006a70:	d86f      	bhi.n	8006b52 <HAL_TIM_ConfigClockSource+0x16c>
 8006a72:	2b30      	cmp	r3, #48	@ 0x30
 8006a74:	d064      	beq.n	8006b40 <HAL_TIM_ConfigClockSource+0x15a>
 8006a76:	2b30      	cmp	r3, #48	@ 0x30
 8006a78:	d86b      	bhi.n	8006b52 <HAL_TIM_ConfigClockSource+0x16c>
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	d060      	beq.n	8006b40 <HAL_TIM_ConfigClockSource+0x15a>
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	d867      	bhi.n	8006b52 <HAL_TIM_ConfigClockSource+0x16c>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d05c      	beq.n	8006b40 <HAL_TIM_ConfigClockSource+0x15a>
 8006a86:	2b10      	cmp	r3, #16
 8006a88:	d05a      	beq.n	8006b40 <HAL_TIM_ConfigClockSource+0x15a>
 8006a8a:	e062      	b.n	8006b52 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a9c:	f000 f990 	bl	8006dc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006aae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	609a      	str	r2, [r3, #8]
      break;
 8006ab8:	e04f      	b.n	8006b5a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006aca:	f000 f979 	bl	8006dc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006adc:	609a      	str	r2, [r3, #8]
      break;
 8006ade:	e03c      	b.n	8006b5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aec:	461a      	mov	r2, r3
 8006aee:	f000 f8ed 	bl	8006ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2150      	movs	r1, #80	@ 0x50
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 f946 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 8006afe:	e02c      	b.n	8006b5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	f000 f90c 	bl	8006d2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2160      	movs	r1, #96	@ 0x60
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 f936 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 8006b1e:	e01c      	b.n	8006b5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f000 f8cd 	bl	8006ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2140      	movs	r1, #64	@ 0x40
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 f926 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 8006b3e:	e00c      	b.n	8006b5a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	f000 f91d 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 8006b50:	e003      	b.n	8006b5a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	73fb      	strb	r3, [r7, #15]
      break;
 8006b56:	e000      	b.n	8006b5a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a46      	ldr	r2, [pc, #280]	@ (8006ca0 <TIM_Base_SetConfig+0x12c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d013      	beq.n	8006bb4 <TIM_Base_SetConfig+0x40>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b92:	d00f      	beq.n	8006bb4 <TIM_Base_SetConfig+0x40>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a43      	ldr	r2, [pc, #268]	@ (8006ca4 <TIM_Base_SetConfig+0x130>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d00b      	beq.n	8006bb4 <TIM_Base_SetConfig+0x40>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a42      	ldr	r2, [pc, #264]	@ (8006ca8 <TIM_Base_SetConfig+0x134>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d007      	beq.n	8006bb4 <TIM_Base_SetConfig+0x40>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a41      	ldr	r2, [pc, #260]	@ (8006cac <TIM_Base_SetConfig+0x138>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d003      	beq.n	8006bb4 <TIM_Base_SetConfig+0x40>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a40      	ldr	r2, [pc, #256]	@ (8006cb0 <TIM_Base_SetConfig+0x13c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d108      	bne.n	8006bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a35      	ldr	r2, [pc, #212]	@ (8006ca0 <TIM_Base_SetConfig+0x12c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d02b      	beq.n	8006c26 <TIM_Base_SetConfig+0xb2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd4:	d027      	beq.n	8006c26 <TIM_Base_SetConfig+0xb2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a32      	ldr	r2, [pc, #200]	@ (8006ca4 <TIM_Base_SetConfig+0x130>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d023      	beq.n	8006c26 <TIM_Base_SetConfig+0xb2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a31      	ldr	r2, [pc, #196]	@ (8006ca8 <TIM_Base_SetConfig+0x134>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d01f      	beq.n	8006c26 <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a30      	ldr	r2, [pc, #192]	@ (8006cac <TIM_Base_SetConfig+0x138>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d01b      	beq.n	8006c26 <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2f      	ldr	r2, [pc, #188]	@ (8006cb0 <TIM_Base_SetConfig+0x13c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d017      	beq.n	8006c26 <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8006cb4 <TIM_Base_SetConfig+0x140>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d013      	beq.n	8006c26 <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a2d      	ldr	r2, [pc, #180]	@ (8006cb8 <TIM_Base_SetConfig+0x144>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00f      	beq.n	8006c26 <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a2c      	ldr	r2, [pc, #176]	@ (8006cbc <TIM_Base_SetConfig+0x148>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00b      	beq.n	8006c26 <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a2b      	ldr	r2, [pc, #172]	@ (8006cc0 <TIM_Base_SetConfig+0x14c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d007      	beq.n	8006c26 <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a2a      	ldr	r2, [pc, #168]	@ (8006cc4 <TIM_Base_SetConfig+0x150>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d003      	beq.n	8006c26 <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a29      	ldr	r2, [pc, #164]	@ (8006cc8 <TIM_Base_SetConfig+0x154>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d108      	bne.n	8006c38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a10      	ldr	r2, [pc, #64]	@ (8006ca0 <TIM_Base_SetConfig+0x12c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d003      	beq.n	8006c6c <TIM_Base_SetConfig+0xf8>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a12      	ldr	r2, [pc, #72]	@ (8006cb0 <TIM_Base_SetConfig+0x13c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d103      	bne.n	8006c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d105      	bne.n	8006c92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f023 0201 	bic.w	r2, r3, #1
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	611a      	str	r2, [r3, #16]
  }
}
 8006c92:	bf00      	nop
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40010000 	.word	0x40010000
 8006ca4:	40000400 	.word	0x40000400
 8006ca8:	40000800 	.word	0x40000800
 8006cac:	40000c00 	.word	0x40000c00
 8006cb0:	40010400 	.word	0x40010400
 8006cb4:	40014000 	.word	0x40014000
 8006cb8:	40014400 	.word	0x40014400
 8006cbc:	40014800 	.word	0x40014800
 8006cc0:	40001800 	.word	0x40001800
 8006cc4:	40001c00 	.word	0x40001c00
 8006cc8:	40002000 	.word	0x40002000

08006ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f023 0201 	bic.w	r2, r3, #1
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f023 030a 	bic.w	r3, r3, #10
 8006d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b087      	sub	sp, #28
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	f023 0210 	bic.w	r2, r3, #16
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	031b      	lsls	r3, r3, #12
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	621a      	str	r2, [r3, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	371c      	adds	r7, #28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b085      	sub	sp, #20
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006da0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f043 0307 	orr.w	r3, r3, #7
 8006dac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	609a      	str	r2, [r3, #8]
}
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	021a      	lsls	r2, r3, #8
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	431a      	orrs	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	609a      	str	r2, [r3, #8]
}
 8006df4:	bf00      	nop
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e05a      	b.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a21      	ldr	r2, [pc, #132]	@ (8006edc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d022      	beq.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e64:	d01d      	beq.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d018      	beq.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a1b      	ldr	r2, [pc, #108]	@ (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d013      	beq.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00e      	beq.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a18      	ldr	r2, [pc, #96]	@ (8006eec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d009      	beq.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a17      	ldr	r2, [pc, #92]	@ (8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d004      	beq.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a15      	ldr	r2, [pc, #84]	@ (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d10c      	bne.n	8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40010000 	.word	0x40010000
 8006ee0:	40000400 	.word	0x40000400
 8006ee4:	40000800 	.word	0x40000800
 8006ee8:	40000c00 	.word	0x40000c00
 8006eec:	40010400 	.word	0x40010400
 8006ef0:	40014000 	.word	0x40014000
 8006ef4:	40001800 	.word	0x40001800

08006ef8 <std>:
 8006ef8:	2300      	movs	r3, #0
 8006efa:	b510      	push	{r4, lr}
 8006efc:	4604      	mov	r4, r0
 8006efe:	e9c0 3300 	strd	r3, r3, [r0]
 8006f02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f06:	6083      	str	r3, [r0, #8]
 8006f08:	8181      	strh	r1, [r0, #12]
 8006f0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f0c:	81c2      	strh	r2, [r0, #14]
 8006f0e:	6183      	str	r3, [r0, #24]
 8006f10:	4619      	mov	r1, r3
 8006f12:	2208      	movs	r2, #8
 8006f14:	305c      	adds	r0, #92	@ 0x5c
 8006f16:	f000 f9f9 	bl	800730c <memset>
 8006f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f50 <std+0x58>)
 8006f1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f54 <std+0x5c>)
 8006f20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f22:	4b0d      	ldr	r3, [pc, #52]	@ (8006f58 <std+0x60>)
 8006f24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f26:	4b0d      	ldr	r3, [pc, #52]	@ (8006f5c <std+0x64>)
 8006f28:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f60 <std+0x68>)
 8006f2c:	6224      	str	r4, [r4, #32]
 8006f2e:	429c      	cmp	r4, r3
 8006f30:	d006      	beq.n	8006f40 <std+0x48>
 8006f32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f36:	4294      	cmp	r4, r2
 8006f38:	d002      	beq.n	8006f40 <std+0x48>
 8006f3a:	33d0      	adds	r3, #208	@ 0xd0
 8006f3c:	429c      	cmp	r4, r3
 8006f3e:	d105      	bne.n	8006f4c <std+0x54>
 8006f40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f48:	f000 ba58 	b.w	80073fc <__retarget_lock_init_recursive>
 8006f4c:	bd10      	pop	{r4, pc}
 8006f4e:	bf00      	nop
 8006f50:	0800715d 	.word	0x0800715d
 8006f54:	0800717f 	.word	0x0800717f
 8006f58:	080071b7 	.word	0x080071b7
 8006f5c:	080071db 	.word	0x080071db
 8006f60:	20025c1c 	.word	0x20025c1c

08006f64 <stdio_exit_handler>:
 8006f64:	4a02      	ldr	r2, [pc, #8]	@ (8006f70 <stdio_exit_handler+0xc>)
 8006f66:	4903      	ldr	r1, [pc, #12]	@ (8006f74 <stdio_exit_handler+0x10>)
 8006f68:	4803      	ldr	r0, [pc, #12]	@ (8006f78 <stdio_exit_handler+0x14>)
 8006f6a:	f000 b869 	b.w	8007040 <_fwalk_sglue>
 8006f6e:	bf00      	nop
 8006f70:	2000001c 	.word	0x2000001c
 8006f74:	08007c9d 	.word	0x08007c9d
 8006f78:	2000002c 	.word	0x2000002c

08006f7c <cleanup_stdio>:
 8006f7c:	6841      	ldr	r1, [r0, #4]
 8006f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb0 <cleanup_stdio+0x34>)
 8006f80:	4299      	cmp	r1, r3
 8006f82:	b510      	push	{r4, lr}
 8006f84:	4604      	mov	r4, r0
 8006f86:	d001      	beq.n	8006f8c <cleanup_stdio+0x10>
 8006f88:	f000 fe88 	bl	8007c9c <_fflush_r>
 8006f8c:	68a1      	ldr	r1, [r4, #8]
 8006f8e:	4b09      	ldr	r3, [pc, #36]	@ (8006fb4 <cleanup_stdio+0x38>)
 8006f90:	4299      	cmp	r1, r3
 8006f92:	d002      	beq.n	8006f9a <cleanup_stdio+0x1e>
 8006f94:	4620      	mov	r0, r4
 8006f96:	f000 fe81 	bl	8007c9c <_fflush_r>
 8006f9a:	68e1      	ldr	r1, [r4, #12]
 8006f9c:	4b06      	ldr	r3, [pc, #24]	@ (8006fb8 <cleanup_stdio+0x3c>)
 8006f9e:	4299      	cmp	r1, r3
 8006fa0:	d004      	beq.n	8006fac <cleanup_stdio+0x30>
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa8:	f000 be78 	b.w	8007c9c <_fflush_r>
 8006fac:	bd10      	pop	{r4, pc}
 8006fae:	bf00      	nop
 8006fb0:	20025c1c 	.word	0x20025c1c
 8006fb4:	20025c84 	.word	0x20025c84
 8006fb8:	20025cec 	.word	0x20025cec

08006fbc <global_stdio_init.part.0>:
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8006fec <global_stdio_init.part.0+0x30>)
 8006fc0:	4c0b      	ldr	r4, [pc, #44]	@ (8006ff0 <global_stdio_init.part.0+0x34>)
 8006fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8006ff4 <global_stdio_init.part.0+0x38>)
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2104      	movs	r1, #4
 8006fcc:	f7ff ff94 	bl	8006ef8 <std>
 8006fd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	2109      	movs	r1, #9
 8006fd8:	f7ff ff8e 	bl	8006ef8 <std>
 8006fdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fe6:	2112      	movs	r1, #18
 8006fe8:	f7ff bf86 	b.w	8006ef8 <std>
 8006fec:	20025d54 	.word	0x20025d54
 8006ff0:	20025c1c 	.word	0x20025c1c
 8006ff4:	08006f65 	.word	0x08006f65

08006ff8 <__sfp_lock_acquire>:
 8006ff8:	4801      	ldr	r0, [pc, #4]	@ (8007000 <__sfp_lock_acquire+0x8>)
 8006ffa:	f000 ba00 	b.w	80073fe <__retarget_lock_acquire_recursive>
 8006ffe:	bf00      	nop
 8007000:	20025d5d 	.word	0x20025d5d

08007004 <__sfp_lock_release>:
 8007004:	4801      	ldr	r0, [pc, #4]	@ (800700c <__sfp_lock_release+0x8>)
 8007006:	f000 b9fb 	b.w	8007400 <__retarget_lock_release_recursive>
 800700a:	bf00      	nop
 800700c:	20025d5d 	.word	0x20025d5d

08007010 <__sinit>:
 8007010:	b510      	push	{r4, lr}
 8007012:	4604      	mov	r4, r0
 8007014:	f7ff fff0 	bl	8006ff8 <__sfp_lock_acquire>
 8007018:	6a23      	ldr	r3, [r4, #32]
 800701a:	b11b      	cbz	r3, 8007024 <__sinit+0x14>
 800701c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007020:	f7ff bff0 	b.w	8007004 <__sfp_lock_release>
 8007024:	4b04      	ldr	r3, [pc, #16]	@ (8007038 <__sinit+0x28>)
 8007026:	6223      	str	r3, [r4, #32]
 8007028:	4b04      	ldr	r3, [pc, #16]	@ (800703c <__sinit+0x2c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1f5      	bne.n	800701c <__sinit+0xc>
 8007030:	f7ff ffc4 	bl	8006fbc <global_stdio_init.part.0>
 8007034:	e7f2      	b.n	800701c <__sinit+0xc>
 8007036:	bf00      	nop
 8007038:	08006f7d 	.word	0x08006f7d
 800703c:	20025d54 	.word	0x20025d54

08007040 <_fwalk_sglue>:
 8007040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007044:	4607      	mov	r7, r0
 8007046:	4688      	mov	r8, r1
 8007048:	4614      	mov	r4, r2
 800704a:	2600      	movs	r6, #0
 800704c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007050:	f1b9 0901 	subs.w	r9, r9, #1
 8007054:	d505      	bpl.n	8007062 <_fwalk_sglue+0x22>
 8007056:	6824      	ldr	r4, [r4, #0]
 8007058:	2c00      	cmp	r4, #0
 800705a:	d1f7      	bne.n	800704c <_fwalk_sglue+0xc>
 800705c:	4630      	mov	r0, r6
 800705e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007062:	89ab      	ldrh	r3, [r5, #12]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d907      	bls.n	8007078 <_fwalk_sglue+0x38>
 8007068:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800706c:	3301      	adds	r3, #1
 800706e:	d003      	beq.n	8007078 <_fwalk_sglue+0x38>
 8007070:	4629      	mov	r1, r5
 8007072:	4638      	mov	r0, r7
 8007074:	47c0      	blx	r8
 8007076:	4306      	orrs	r6, r0
 8007078:	3568      	adds	r5, #104	@ 0x68
 800707a:	e7e9      	b.n	8007050 <_fwalk_sglue+0x10>

0800707c <iprintf>:
 800707c:	b40f      	push	{r0, r1, r2, r3}
 800707e:	b507      	push	{r0, r1, r2, lr}
 8007080:	4906      	ldr	r1, [pc, #24]	@ (800709c <iprintf+0x20>)
 8007082:	ab04      	add	r3, sp, #16
 8007084:	6808      	ldr	r0, [r1, #0]
 8007086:	f853 2b04 	ldr.w	r2, [r3], #4
 800708a:	6881      	ldr	r1, [r0, #8]
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	f000 fadb 	bl	8007648 <_vfiprintf_r>
 8007092:	b003      	add	sp, #12
 8007094:	f85d eb04 	ldr.w	lr, [sp], #4
 8007098:	b004      	add	sp, #16
 800709a:	4770      	bx	lr
 800709c:	20000028 	.word	0x20000028

080070a0 <_puts_r>:
 80070a0:	6a03      	ldr	r3, [r0, #32]
 80070a2:	b570      	push	{r4, r5, r6, lr}
 80070a4:	6884      	ldr	r4, [r0, #8]
 80070a6:	4605      	mov	r5, r0
 80070a8:	460e      	mov	r6, r1
 80070aa:	b90b      	cbnz	r3, 80070b0 <_puts_r+0x10>
 80070ac:	f7ff ffb0 	bl	8007010 <__sinit>
 80070b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070b2:	07db      	lsls	r3, r3, #31
 80070b4:	d405      	bmi.n	80070c2 <_puts_r+0x22>
 80070b6:	89a3      	ldrh	r3, [r4, #12]
 80070b8:	0598      	lsls	r0, r3, #22
 80070ba:	d402      	bmi.n	80070c2 <_puts_r+0x22>
 80070bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070be:	f000 f99e 	bl	80073fe <__retarget_lock_acquire_recursive>
 80070c2:	89a3      	ldrh	r3, [r4, #12]
 80070c4:	0719      	lsls	r1, r3, #28
 80070c6:	d502      	bpl.n	80070ce <_puts_r+0x2e>
 80070c8:	6923      	ldr	r3, [r4, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d135      	bne.n	800713a <_puts_r+0x9a>
 80070ce:	4621      	mov	r1, r4
 80070d0:	4628      	mov	r0, r5
 80070d2:	f000 f8c5 	bl	8007260 <__swsetup_r>
 80070d6:	b380      	cbz	r0, 800713a <_puts_r+0x9a>
 80070d8:	f04f 35ff 	mov.w	r5, #4294967295
 80070dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070de:	07da      	lsls	r2, r3, #31
 80070e0:	d405      	bmi.n	80070ee <_puts_r+0x4e>
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	059b      	lsls	r3, r3, #22
 80070e6:	d402      	bmi.n	80070ee <_puts_r+0x4e>
 80070e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070ea:	f000 f989 	bl	8007400 <__retarget_lock_release_recursive>
 80070ee:	4628      	mov	r0, r5
 80070f0:	bd70      	pop	{r4, r5, r6, pc}
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	da04      	bge.n	8007100 <_puts_r+0x60>
 80070f6:	69a2      	ldr	r2, [r4, #24]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	dc17      	bgt.n	800712c <_puts_r+0x8c>
 80070fc:	290a      	cmp	r1, #10
 80070fe:	d015      	beq.n	800712c <_puts_r+0x8c>
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	6022      	str	r2, [r4, #0]
 8007106:	7019      	strb	r1, [r3, #0]
 8007108:	68a3      	ldr	r3, [r4, #8]
 800710a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800710e:	3b01      	subs	r3, #1
 8007110:	60a3      	str	r3, [r4, #8]
 8007112:	2900      	cmp	r1, #0
 8007114:	d1ed      	bne.n	80070f2 <_puts_r+0x52>
 8007116:	2b00      	cmp	r3, #0
 8007118:	da11      	bge.n	800713e <_puts_r+0x9e>
 800711a:	4622      	mov	r2, r4
 800711c:	210a      	movs	r1, #10
 800711e:	4628      	mov	r0, r5
 8007120:	f000 f85f 	bl	80071e2 <__swbuf_r>
 8007124:	3001      	adds	r0, #1
 8007126:	d0d7      	beq.n	80070d8 <_puts_r+0x38>
 8007128:	250a      	movs	r5, #10
 800712a:	e7d7      	b.n	80070dc <_puts_r+0x3c>
 800712c:	4622      	mov	r2, r4
 800712e:	4628      	mov	r0, r5
 8007130:	f000 f857 	bl	80071e2 <__swbuf_r>
 8007134:	3001      	adds	r0, #1
 8007136:	d1e7      	bne.n	8007108 <_puts_r+0x68>
 8007138:	e7ce      	b.n	80070d8 <_puts_r+0x38>
 800713a:	3e01      	subs	r6, #1
 800713c:	e7e4      	b.n	8007108 <_puts_r+0x68>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	1c5a      	adds	r2, r3, #1
 8007142:	6022      	str	r2, [r4, #0]
 8007144:	220a      	movs	r2, #10
 8007146:	701a      	strb	r2, [r3, #0]
 8007148:	e7ee      	b.n	8007128 <_puts_r+0x88>
	...

0800714c <puts>:
 800714c:	4b02      	ldr	r3, [pc, #8]	@ (8007158 <puts+0xc>)
 800714e:	4601      	mov	r1, r0
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	f7ff bfa5 	b.w	80070a0 <_puts_r>
 8007156:	bf00      	nop
 8007158:	20000028 	.word	0x20000028

0800715c <__sread>:
 800715c:	b510      	push	{r4, lr}
 800715e:	460c      	mov	r4, r1
 8007160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007164:	f000 f8fc 	bl	8007360 <_read_r>
 8007168:	2800      	cmp	r0, #0
 800716a:	bfab      	itete	ge
 800716c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800716e:	89a3      	ldrhlt	r3, [r4, #12]
 8007170:	181b      	addge	r3, r3, r0
 8007172:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007176:	bfac      	ite	ge
 8007178:	6563      	strge	r3, [r4, #84]	@ 0x54
 800717a:	81a3      	strhlt	r3, [r4, #12]
 800717c:	bd10      	pop	{r4, pc}

0800717e <__swrite>:
 800717e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007182:	461f      	mov	r7, r3
 8007184:	898b      	ldrh	r3, [r1, #12]
 8007186:	05db      	lsls	r3, r3, #23
 8007188:	4605      	mov	r5, r0
 800718a:	460c      	mov	r4, r1
 800718c:	4616      	mov	r6, r2
 800718e:	d505      	bpl.n	800719c <__swrite+0x1e>
 8007190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007194:	2302      	movs	r3, #2
 8007196:	2200      	movs	r2, #0
 8007198:	f000 f8d0 	bl	800733c <_lseek_r>
 800719c:	89a3      	ldrh	r3, [r4, #12]
 800719e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071a6:	81a3      	strh	r3, [r4, #12]
 80071a8:	4632      	mov	r2, r6
 80071aa:	463b      	mov	r3, r7
 80071ac:	4628      	mov	r0, r5
 80071ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071b2:	f000 b8e7 	b.w	8007384 <_write_r>

080071b6 <__sseek>:
 80071b6:	b510      	push	{r4, lr}
 80071b8:	460c      	mov	r4, r1
 80071ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071be:	f000 f8bd 	bl	800733c <_lseek_r>
 80071c2:	1c43      	adds	r3, r0, #1
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	bf15      	itete	ne
 80071c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80071ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80071ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80071d2:	81a3      	strheq	r3, [r4, #12]
 80071d4:	bf18      	it	ne
 80071d6:	81a3      	strhne	r3, [r4, #12]
 80071d8:	bd10      	pop	{r4, pc}

080071da <__sclose>:
 80071da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071de:	f000 b89d 	b.w	800731c <_close_r>

080071e2 <__swbuf_r>:
 80071e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e4:	460e      	mov	r6, r1
 80071e6:	4614      	mov	r4, r2
 80071e8:	4605      	mov	r5, r0
 80071ea:	b118      	cbz	r0, 80071f4 <__swbuf_r+0x12>
 80071ec:	6a03      	ldr	r3, [r0, #32]
 80071ee:	b90b      	cbnz	r3, 80071f4 <__swbuf_r+0x12>
 80071f0:	f7ff ff0e 	bl	8007010 <__sinit>
 80071f4:	69a3      	ldr	r3, [r4, #24]
 80071f6:	60a3      	str	r3, [r4, #8]
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	071a      	lsls	r2, r3, #28
 80071fc:	d501      	bpl.n	8007202 <__swbuf_r+0x20>
 80071fe:	6923      	ldr	r3, [r4, #16]
 8007200:	b943      	cbnz	r3, 8007214 <__swbuf_r+0x32>
 8007202:	4621      	mov	r1, r4
 8007204:	4628      	mov	r0, r5
 8007206:	f000 f82b 	bl	8007260 <__swsetup_r>
 800720a:	b118      	cbz	r0, 8007214 <__swbuf_r+0x32>
 800720c:	f04f 37ff 	mov.w	r7, #4294967295
 8007210:	4638      	mov	r0, r7
 8007212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	6922      	ldr	r2, [r4, #16]
 8007218:	1a98      	subs	r0, r3, r2
 800721a:	6963      	ldr	r3, [r4, #20]
 800721c:	b2f6      	uxtb	r6, r6
 800721e:	4283      	cmp	r3, r0
 8007220:	4637      	mov	r7, r6
 8007222:	dc05      	bgt.n	8007230 <__swbuf_r+0x4e>
 8007224:	4621      	mov	r1, r4
 8007226:	4628      	mov	r0, r5
 8007228:	f000 fd38 	bl	8007c9c <_fflush_r>
 800722c:	2800      	cmp	r0, #0
 800722e:	d1ed      	bne.n	800720c <__swbuf_r+0x2a>
 8007230:	68a3      	ldr	r3, [r4, #8]
 8007232:	3b01      	subs	r3, #1
 8007234:	60a3      	str	r3, [r4, #8]
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	6022      	str	r2, [r4, #0]
 800723c:	701e      	strb	r6, [r3, #0]
 800723e:	6962      	ldr	r2, [r4, #20]
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	429a      	cmp	r2, r3
 8007244:	d004      	beq.n	8007250 <__swbuf_r+0x6e>
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	07db      	lsls	r3, r3, #31
 800724a:	d5e1      	bpl.n	8007210 <__swbuf_r+0x2e>
 800724c:	2e0a      	cmp	r6, #10
 800724e:	d1df      	bne.n	8007210 <__swbuf_r+0x2e>
 8007250:	4621      	mov	r1, r4
 8007252:	4628      	mov	r0, r5
 8007254:	f000 fd22 	bl	8007c9c <_fflush_r>
 8007258:	2800      	cmp	r0, #0
 800725a:	d0d9      	beq.n	8007210 <__swbuf_r+0x2e>
 800725c:	e7d6      	b.n	800720c <__swbuf_r+0x2a>
	...

08007260 <__swsetup_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4b29      	ldr	r3, [pc, #164]	@ (8007308 <__swsetup_r+0xa8>)
 8007264:	4605      	mov	r5, r0
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	460c      	mov	r4, r1
 800726a:	b118      	cbz	r0, 8007274 <__swsetup_r+0x14>
 800726c:	6a03      	ldr	r3, [r0, #32]
 800726e:	b90b      	cbnz	r3, 8007274 <__swsetup_r+0x14>
 8007270:	f7ff fece 	bl	8007010 <__sinit>
 8007274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007278:	0719      	lsls	r1, r3, #28
 800727a:	d422      	bmi.n	80072c2 <__swsetup_r+0x62>
 800727c:	06da      	lsls	r2, r3, #27
 800727e:	d407      	bmi.n	8007290 <__swsetup_r+0x30>
 8007280:	2209      	movs	r2, #9
 8007282:	602a      	str	r2, [r5, #0]
 8007284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007288:	81a3      	strh	r3, [r4, #12]
 800728a:	f04f 30ff 	mov.w	r0, #4294967295
 800728e:	e033      	b.n	80072f8 <__swsetup_r+0x98>
 8007290:	0758      	lsls	r0, r3, #29
 8007292:	d512      	bpl.n	80072ba <__swsetup_r+0x5a>
 8007294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007296:	b141      	cbz	r1, 80072aa <__swsetup_r+0x4a>
 8007298:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800729c:	4299      	cmp	r1, r3
 800729e:	d002      	beq.n	80072a6 <__swsetup_r+0x46>
 80072a0:	4628      	mov	r0, r5
 80072a2:	f000 f8af 	bl	8007404 <_free_r>
 80072a6:	2300      	movs	r3, #0
 80072a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80072b0:	81a3      	strh	r3, [r4, #12]
 80072b2:	2300      	movs	r3, #0
 80072b4:	6063      	str	r3, [r4, #4]
 80072b6:	6923      	ldr	r3, [r4, #16]
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	f043 0308 	orr.w	r3, r3, #8
 80072c0:	81a3      	strh	r3, [r4, #12]
 80072c2:	6923      	ldr	r3, [r4, #16]
 80072c4:	b94b      	cbnz	r3, 80072da <__swsetup_r+0x7a>
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80072cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072d0:	d003      	beq.n	80072da <__swsetup_r+0x7a>
 80072d2:	4621      	mov	r1, r4
 80072d4:	4628      	mov	r0, r5
 80072d6:	f000 fd2f 	bl	8007d38 <__smakebuf_r>
 80072da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072de:	f013 0201 	ands.w	r2, r3, #1
 80072e2:	d00a      	beq.n	80072fa <__swsetup_r+0x9a>
 80072e4:	2200      	movs	r2, #0
 80072e6:	60a2      	str	r2, [r4, #8]
 80072e8:	6962      	ldr	r2, [r4, #20]
 80072ea:	4252      	negs	r2, r2
 80072ec:	61a2      	str	r2, [r4, #24]
 80072ee:	6922      	ldr	r2, [r4, #16]
 80072f0:	b942      	cbnz	r2, 8007304 <__swsetup_r+0xa4>
 80072f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80072f6:	d1c5      	bne.n	8007284 <__swsetup_r+0x24>
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
 80072fa:	0799      	lsls	r1, r3, #30
 80072fc:	bf58      	it	pl
 80072fe:	6962      	ldrpl	r2, [r4, #20]
 8007300:	60a2      	str	r2, [r4, #8]
 8007302:	e7f4      	b.n	80072ee <__swsetup_r+0x8e>
 8007304:	2000      	movs	r0, #0
 8007306:	e7f7      	b.n	80072f8 <__swsetup_r+0x98>
 8007308:	20000028 	.word	0x20000028

0800730c <memset>:
 800730c:	4402      	add	r2, r0
 800730e:	4603      	mov	r3, r0
 8007310:	4293      	cmp	r3, r2
 8007312:	d100      	bne.n	8007316 <memset+0xa>
 8007314:	4770      	bx	lr
 8007316:	f803 1b01 	strb.w	r1, [r3], #1
 800731a:	e7f9      	b.n	8007310 <memset+0x4>

0800731c <_close_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4d06      	ldr	r5, [pc, #24]	@ (8007338 <_close_r+0x1c>)
 8007320:	2300      	movs	r3, #0
 8007322:	4604      	mov	r4, r0
 8007324:	4608      	mov	r0, r1
 8007326:	602b      	str	r3, [r5, #0]
 8007328:	f7fc f8a6 	bl	8003478 <_close>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d102      	bne.n	8007336 <_close_r+0x1a>
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	b103      	cbz	r3, 8007336 <_close_r+0x1a>
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	20025d58 	.word	0x20025d58

0800733c <_lseek_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	4d07      	ldr	r5, [pc, #28]	@ (800735c <_lseek_r+0x20>)
 8007340:	4604      	mov	r4, r0
 8007342:	4608      	mov	r0, r1
 8007344:	4611      	mov	r1, r2
 8007346:	2200      	movs	r2, #0
 8007348:	602a      	str	r2, [r5, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	f7fc f8bb 	bl	80034c6 <_lseek>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_lseek_r+0x1e>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_lseek_r+0x1e>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	20025d58 	.word	0x20025d58

08007360 <_read_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4d07      	ldr	r5, [pc, #28]	@ (8007380 <_read_r+0x20>)
 8007364:	4604      	mov	r4, r0
 8007366:	4608      	mov	r0, r1
 8007368:	4611      	mov	r1, r2
 800736a:	2200      	movs	r2, #0
 800736c:	602a      	str	r2, [r5, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	f7fc f849 	bl	8003406 <_read>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d102      	bne.n	800737e <_read_r+0x1e>
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	b103      	cbz	r3, 800737e <_read_r+0x1e>
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	bd38      	pop	{r3, r4, r5, pc}
 8007380:	20025d58 	.word	0x20025d58

08007384 <_write_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4d07      	ldr	r5, [pc, #28]	@ (80073a4 <_write_r+0x20>)
 8007388:	4604      	mov	r4, r0
 800738a:	4608      	mov	r0, r1
 800738c:	4611      	mov	r1, r2
 800738e:	2200      	movs	r2, #0
 8007390:	602a      	str	r2, [r5, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	f7fc f854 	bl	8003440 <_write>
 8007398:	1c43      	adds	r3, r0, #1
 800739a:	d102      	bne.n	80073a2 <_write_r+0x1e>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	b103      	cbz	r3, 80073a2 <_write_r+0x1e>
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
 80073a4:	20025d58 	.word	0x20025d58

080073a8 <__errno>:
 80073a8:	4b01      	ldr	r3, [pc, #4]	@ (80073b0 <__errno+0x8>)
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	20000028 	.word	0x20000028

080073b4 <__libc_init_array>:
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	4d0d      	ldr	r5, [pc, #52]	@ (80073ec <__libc_init_array+0x38>)
 80073b8:	4c0d      	ldr	r4, [pc, #52]	@ (80073f0 <__libc_init_array+0x3c>)
 80073ba:	1b64      	subs	r4, r4, r5
 80073bc:	10a4      	asrs	r4, r4, #2
 80073be:	2600      	movs	r6, #0
 80073c0:	42a6      	cmp	r6, r4
 80073c2:	d109      	bne.n	80073d8 <__libc_init_array+0x24>
 80073c4:	4d0b      	ldr	r5, [pc, #44]	@ (80073f4 <__libc_init_array+0x40>)
 80073c6:	4c0c      	ldr	r4, [pc, #48]	@ (80073f8 <__libc_init_array+0x44>)
 80073c8:	f000 fd24 	bl	8007e14 <_init>
 80073cc:	1b64      	subs	r4, r4, r5
 80073ce:	10a4      	asrs	r4, r4, #2
 80073d0:	2600      	movs	r6, #0
 80073d2:	42a6      	cmp	r6, r4
 80073d4:	d105      	bne.n	80073e2 <__libc_init_array+0x2e>
 80073d6:	bd70      	pop	{r4, r5, r6, pc}
 80073d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073dc:	4798      	blx	r3
 80073de:	3601      	adds	r6, #1
 80073e0:	e7ee      	b.n	80073c0 <__libc_init_array+0xc>
 80073e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e6:	4798      	blx	r3
 80073e8:	3601      	adds	r6, #1
 80073ea:	e7f2      	b.n	80073d2 <__libc_init_array+0x1e>
 80073ec:	08009088 	.word	0x08009088
 80073f0:	08009088 	.word	0x08009088
 80073f4:	08009088 	.word	0x08009088
 80073f8:	0800908c 	.word	0x0800908c

080073fc <__retarget_lock_init_recursive>:
 80073fc:	4770      	bx	lr

080073fe <__retarget_lock_acquire_recursive>:
 80073fe:	4770      	bx	lr

08007400 <__retarget_lock_release_recursive>:
 8007400:	4770      	bx	lr
	...

08007404 <_free_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4605      	mov	r5, r0
 8007408:	2900      	cmp	r1, #0
 800740a:	d041      	beq.n	8007490 <_free_r+0x8c>
 800740c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007410:	1f0c      	subs	r4, r1, #4
 8007412:	2b00      	cmp	r3, #0
 8007414:	bfb8      	it	lt
 8007416:	18e4      	addlt	r4, r4, r3
 8007418:	f000 f8e0 	bl	80075dc <__malloc_lock>
 800741c:	4a1d      	ldr	r2, [pc, #116]	@ (8007494 <_free_r+0x90>)
 800741e:	6813      	ldr	r3, [r2, #0]
 8007420:	b933      	cbnz	r3, 8007430 <_free_r+0x2c>
 8007422:	6063      	str	r3, [r4, #4]
 8007424:	6014      	str	r4, [r2, #0]
 8007426:	4628      	mov	r0, r5
 8007428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800742c:	f000 b8dc 	b.w	80075e8 <__malloc_unlock>
 8007430:	42a3      	cmp	r3, r4
 8007432:	d908      	bls.n	8007446 <_free_r+0x42>
 8007434:	6820      	ldr	r0, [r4, #0]
 8007436:	1821      	adds	r1, r4, r0
 8007438:	428b      	cmp	r3, r1
 800743a:	bf01      	itttt	eq
 800743c:	6819      	ldreq	r1, [r3, #0]
 800743e:	685b      	ldreq	r3, [r3, #4]
 8007440:	1809      	addeq	r1, r1, r0
 8007442:	6021      	streq	r1, [r4, #0]
 8007444:	e7ed      	b.n	8007422 <_free_r+0x1e>
 8007446:	461a      	mov	r2, r3
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	b10b      	cbz	r3, 8007450 <_free_r+0x4c>
 800744c:	42a3      	cmp	r3, r4
 800744e:	d9fa      	bls.n	8007446 <_free_r+0x42>
 8007450:	6811      	ldr	r1, [r2, #0]
 8007452:	1850      	adds	r0, r2, r1
 8007454:	42a0      	cmp	r0, r4
 8007456:	d10b      	bne.n	8007470 <_free_r+0x6c>
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	4401      	add	r1, r0
 800745c:	1850      	adds	r0, r2, r1
 800745e:	4283      	cmp	r3, r0
 8007460:	6011      	str	r1, [r2, #0]
 8007462:	d1e0      	bne.n	8007426 <_free_r+0x22>
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	6053      	str	r3, [r2, #4]
 800746a:	4408      	add	r0, r1
 800746c:	6010      	str	r0, [r2, #0]
 800746e:	e7da      	b.n	8007426 <_free_r+0x22>
 8007470:	d902      	bls.n	8007478 <_free_r+0x74>
 8007472:	230c      	movs	r3, #12
 8007474:	602b      	str	r3, [r5, #0]
 8007476:	e7d6      	b.n	8007426 <_free_r+0x22>
 8007478:	6820      	ldr	r0, [r4, #0]
 800747a:	1821      	adds	r1, r4, r0
 800747c:	428b      	cmp	r3, r1
 800747e:	bf04      	itt	eq
 8007480:	6819      	ldreq	r1, [r3, #0]
 8007482:	685b      	ldreq	r3, [r3, #4]
 8007484:	6063      	str	r3, [r4, #4]
 8007486:	bf04      	itt	eq
 8007488:	1809      	addeq	r1, r1, r0
 800748a:	6021      	streq	r1, [r4, #0]
 800748c:	6054      	str	r4, [r2, #4]
 800748e:	e7ca      	b.n	8007426 <_free_r+0x22>
 8007490:	bd38      	pop	{r3, r4, r5, pc}
 8007492:	bf00      	nop
 8007494:	20025d64 	.word	0x20025d64

08007498 <sbrk_aligned>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	4e0f      	ldr	r6, [pc, #60]	@ (80074d8 <sbrk_aligned+0x40>)
 800749c:	460c      	mov	r4, r1
 800749e:	6831      	ldr	r1, [r6, #0]
 80074a0:	4605      	mov	r5, r0
 80074a2:	b911      	cbnz	r1, 80074aa <sbrk_aligned+0x12>
 80074a4:	f000 fca6 	bl	8007df4 <_sbrk_r>
 80074a8:	6030      	str	r0, [r6, #0]
 80074aa:	4621      	mov	r1, r4
 80074ac:	4628      	mov	r0, r5
 80074ae:	f000 fca1 	bl	8007df4 <_sbrk_r>
 80074b2:	1c43      	adds	r3, r0, #1
 80074b4:	d103      	bne.n	80074be <sbrk_aligned+0x26>
 80074b6:	f04f 34ff 	mov.w	r4, #4294967295
 80074ba:	4620      	mov	r0, r4
 80074bc:	bd70      	pop	{r4, r5, r6, pc}
 80074be:	1cc4      	adds	r4, r0, #3
 80074c0:	f024 0403 	bic.w	r4, r4, #3
 80074c4:	42a0      	cmp	r0, r4
 80074c6:	d0f8      	beq.n	80074ba <sbrk_aligned+0x22>
 80074c8:	1a21      	subs	r1, r4, r0
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 fc92 	bl	8007df4 <_sbrk_r>
 80074d0:	3001      	adds	r0, #1
 80074d2:	d1f2      	bne.n	80074ba <sbrk_aligned+0x22>
 80074d4:	e7ef      	b.n	80074b6 <sbrk_aligned+0x1e>
 80074d6:	bf00      	nop
 80074d8:	20025d60 	.word	0x20025d60

080074dc <_malloc_r>:
 80074dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e0:	1ccd      	adds	r5, r1, #3
 80074e2:	f025 0503 	bic.w	r5, r5, #3
 80074e6:	3508      	adds	r5, #8
 80074e8:	2d0c      	cmp	r5, #12
 80074ea:	bf38      	it	cc
 80074ec:	250c      	movcc	r5, #12
 80074ee:	2d00      	cmp	r5, #0
 80074f0:	4606      	mov	r6, r0
 80074f2:	db01      	blt.n	80074f8 <_malloc_r+0x1c>
 80074f4:	42a9      	cmp	r1, r5
 80074f6:	d904      	bls.n	8007502 <_malloc_r+0x26>
 80074f8:	230c      	movs	r3, #12
 80074fa:	6033      	str	r3, [r6, #0]
 80074fc:	2000      	movs	r0, #0
 80074fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007502:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075d8 <_malloc_r+0xfc>
 8007506:	f000 f869 	bl	80075dc <__malloc_lock>
 800750a:	f8d8 3000 	ldr.w	r3, [r8]
 800750e:	461c      	mov	r4, r3
 8007510:	bb44      	cbnz	r4, 8007564 <_malloc_r+0x88>
 8007512:	4629      	mov	r1, r5
 8007514:	4630      	mov	r0, r6
 8007516:	f7ff ffbf 	bl	8007498 <sbrk_aligned>
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	4604      	mov	r4, r0
 800751e:	d158      	bne.n	80075d2 <_malloc_r+0xf6>
 8007520:	f8d8 4000 	ldr.w	r4, [r8]
 8007524:	4627      	mov	r7, r4
 8007526:	2f00      	cmp	r7, #0
 8007528:	d143      	bne.n	80075b2 <_malloc_r+0xd6>
 800752a:	2c00      	cmp	r4, #0
 800752c:	d04b      	beq.n	80075c6 <_malloc_r+0xea>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	4639      	mov	r1, r7
 8007532:	4630      	mov	r0, r6
 8007534:	eb04 0903 	add.w	r9, r4, r3
 8007538:	f000 fc5c 	bl	8007df4 <_sbrk_r>
 800753c:	4581      	cmp	r9, r0
 800753e:	d142      	bne.n	80075c6 <_malloc_r+0xea>
 8007540:	6821      	ldr	r1, [r4, #0]
 8007542:	1a6d      	subs	r5, r5, r1
 8007544:	4629      	mov	r1, r5
 8007546:	4630      	mov	r0, r6
 8007548:	f7ff ffa6 	bl	8007498 <sbrk_aligned>
 800754c:	3001      	adds	r0, #1
 800754e:	d03a      	beq.n	80075c6 <_malloc_r+0xea>
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	442b      	add	r3, r5
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	f8d8 3000 	ldr.w	r3, [r8]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	bb62      	cbnz	r2, 80075b8 <_malloc_r+0xdc>
 800755e:	f8c8 7000 	str.w	r7, [r8]
 8007562:	e00f      	b.n	8007584 <_malloc_r+0xa8>
 8007564:	6822      	ldr	r2, [r4, #0]
 8007566:	1b52      	subs	r2, r2, r5
 8007568:	d420      	bmi.n	80075ac <_malloc_r+0xd0>
 800756a:	2a0b      	cmp	r2, #11
 800756c:	d917      	bls.n	800759e <_malloc_r+0xc2>
 800756e:	1961      	adds	r1, r4, r5
 8007570:	42a3      	cmp	r3, r4
 8007572:	6025      	str	r5, [r4, #0]
 8007574:	bf18      	it	ne
 8007576:	6059      	strne	r1, [r3, #4]
 8007578:	6863      	ldr	r3, [r4, #4]
 800757a:	bf08      	it	eq
 800757c:	f8c8 1000 	streq.w	r1, [r8]
 8007580:	5162      	str	r2, [r4, r5]
 8007582:	604b      	str	r3, [r1, #4]
 8007584:	4630      	mov	r0, r6
 8007586:	f000 f82f 	bl	80075e8 <__malloc_unlock>
 800758a:	f104 000b 	add.w	r0, r4, #11
 800758e:	1d23      	adds	r3, r4, #4
 8007590:	f020 0007 	bic.w	r0, r0, #7
 8007594:	1ac2      	subs	r2, r0, r3
 8007596:	bf1c      	itt	ne
 8007598:	1a1b      	subne	r3, r3, r0
 800759a:	50a3      	strne	r3, [r4, r2]
 800759c:	e7af      	b.n	80074fe <_malloc_r+0x22>
 800759e:	6862      	ldr	r2, [r4, #4]
 80075a0:	42a3      	cmp	r3, r4
 80075a2:	bf0c      	ite	eq
 80075a4:	f8c8 2000 	streq.w	r2, [r8]
 80075a8:	605a      	strne	r2, [r3, #4]
 80075aa:	e7eb      	b.n	8007584 <_malloc_r+0xa8>
 80075ac:	4623      	mov	r3, r4
 80075ae:	6864      	ldr	r4, [r4, #4]
 80075b0:	e7ae      	b.n	8007510 <_malloc_r+0x34>
 80075b2:	463c      	mov	r4, r7
 80075b4:	687f      	ldr	r7, [r7, #4]
 80075b6:	e7b6      	b.n	8007526 <_malloc_r+0x4a>
 80075b8:	461a      	mov	r2, r3
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	42a3      	cmp	r3, r4
 80075be:	d1fb      	bne.n	80075b8 <_malloc_r+0xdc>
 80075c0:	2300      	movs	r3, #0
 80075c2:	6053      	str	r3, [r2, #4]
 80075c4:	e7de      	b.n	8007584 <_malloc_r+0xa8>
 80075c6:	230c      	movs	r3, #12
 80075c8:	6033      	str	r3, [r6, #0]
 80075ca:	4630      	mov	r0, r6
 80075cc:	f000 f80c 	bl	80075e8 <__malloc_unlock>
 80075d0:	e794      	b.n	80074fc <_malloc_r+0x20>
 80075d2:	6005      	str	r5, [r0, #0]
 80075d4:	e7d6      	b.n	8007584 <_malloc_r+0xa8>
 80075d6:	bf00      	nop
 80075d8:	20025d64 	.word	0x20025d64

080075dc <__malloc_lock>:
 80075dc:	4801      	ldr	r0, [pc, #4]	@ (80075e4 <__malloc_lock+0x8>)
 80075de:	f7ff bf0e 	b.w	80073fe <__retarget_lock_acquire_recursive>
 80075e2:	bf00      	nop
 80075e4:	20025d5c 	.word	0x20025d5c

080075e8 <__malloc_unlock>:
 80075e8:	4801      	ldr	r0, [pc, #4]	@ (80075f0 <__malloc_unlock+0x8>)
 80075ea:	f7ff bf09 	b.w	8007400 <__retarget_lock_release_recursive>
 80075ee:	bf00      	nop
 80075f0:	20025d5c 	.word	0x20025d5c

080075f4 <__sfputc_r>:
 80075f4:	6893      	ldr	r3, [r2, #8]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	b410      	push	{r4}
 80075fc:	6093      	str	r3, [r2, #8]
 80075fe:	da08      	bge.n	8007612 <__sfputc_r+0x1e>
 8007600:	6994      	ldr	r4, [r2, #24]
 8007602:	42a3      	cmp	r3, r4
 8007604:	db01      	blt.n	800760a <__sfputc_r+0x16>
 8007606:	290a      	cmp	r1, #10
 8007608:	d103      	bne.n	8007612 <__sfputc_r+0x1e>
 800760a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800760e:	f7ff bde8 	b.w	80071e2 <__swbuf_r>
 8007612:	6813      	ldr	r3, [r2, #0]
 8007614:	1c58      	adds	r0, r3, #1
 8007616:	6010      	str	r0, [r2, #0]
 8007618:	7019      	strb	r1, [r3, #0]
 800761a:	4608      	mov	r0, r1
 800761c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007620:	4770      	bx	lr

08007622 <__sfputs_r>:
 8007622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007624:	4606      	mov	r6, r0
 8007626:	460f      	mov	r7, r1
 8007628:	4614      	mov	r4, r2
 800762a:	18d5      	adds	r5, r2, r3
 800762c:	42ac      	cmp	r4, r5
 800762e:	d101      	bne.n	8007634 <__sfputs_r+0x12>
 8007630:	2000      	movs	r0, #0
 8007632:	e007      	b.n	8007644 <__sfputs_r+0x22>
 8007634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007638:	463a      	mov	r2, r7
 800763a:	4630      	mov	r0, r6
 800763c:	f7ff ffda 	bl	80075f4 <__sfputc_r>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d1f3      	bne.n	800762c <__sfputs_r+0xa>
 8007644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007648 <_vfiprintf_r>:
 8007648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	460d      	mov	r5, r1
 800764e:	b09d      	sub	sp, #116	@ 0x74
 8007650:	4614      	mov	r4, r2
 8007652:	4698      	mov	r8, r3
 8007654:	4606      	mov	r6, r0
 8007656:	b118      	cbz	r0, 8007660 <_vfiprintf_r+0x18>
 8007658:	6a03      	ldr	r3, [r0, #32]
 800765a:	b90b      	cbnz	r3, 8007660 <_vfiprintf_r+0x18>
 800765c:	f7ff fcd8 	bl	8007010 <__sinit>
 8007660:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007662:	07d9      	lsls	r1, r3, #31
 8007664:	d405      	bmi.n	8007672 <_vfiprintf_r+0x2a>
 8007666:	89ab      	ldrh	r3, [r5, #12]
 8007668:	059a      	lsls	r2, r3, #22
 800766a:	d402      	bmi.n	8007672 <_vfiprintf_r+0x2a>
 800766c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800766e:	f7ff fec6 	bl	80073fe <__retarget_lock_acquire_recursive>
 8007672:	89ab      	ldrh	r3, [r5, #12]
 8007674:	071b      	lsls	r3, r3, #28
 8007676:	d501      	bpl.n	800767c <_vfiprintf_r+0x34>
 8007678:	692b      	ldr	r3, [r5, #16]
 800767a:	b99b      	cbnz	r3, 80076a4 <_vfiprintf_r+0x5c>
 800767c:	4629      	mov	r1, r5
 800767e:	4630      	mov	r0, r6
 8007680:	f7ff fdee 	bl	8007260 <__swsetup_r>
 8007684:	b170      	cbz	r0, 80076a4 <_vfiprintf_r+0x5c>
 8007686:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007688:	07dc      	lsls	r4, r3, #31
 800768a:	d504      	bpl.n	8007696 <_vfiprintf_r+0x4e>
 800768c:	f04f 30ff 	mov.w	r0, #4294967295
 8007690:	b01d      	add	sp, #116	@ 0x74
 8007692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007696:	89ab      	ldrh	r3, [r5, #12]
 8007698:	0598      	lsls	r0, r3, #22
 800769a:	d4f7      	bmi.n	800768c <_vfiprintf_r+0x44>
 800769c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800769e:	f7ff feaf 	bl	8007400 <__retarget_lock_release_recursive>
 80076a2:	e7f3      	b.n	800768c <_vfiprintf_r+0x44>
 80076a4:	2300      	movs	r3, #0
 80076a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a8:	2320      	movs	r3, #32
 80076aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80076b2:	2330      	movs	r3, #48	@ 0x30
 80076b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007864 <_vfiprintf_r+0x21c>
 80076b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076bc:	f04f 0901 	mov.w	r9, #1
 80076c0:	4623      	mov	r3, r4
 80076c2:	469a      	mov	sl, r3
 80076c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076c8:	b10a      	cbz	r2, 80076ce <_vfiprintf_r+0x86>
 80076ca:	2a25      	cmp	r2, #37	@ 0x25
 80076cc:	d1f9      	bne.n	80076c2 <_vfiprintf_r+0x7a>
 80076ce:	ebba 0b04 	subs.w	fp, sl, r4
 80076d2:	d00b      	beq.n	80076ec <_vfiprintf_r+0xa4>
 80076d4:	465b      	mov	r3, fp
 80076d6:	4622      	mov	r2, r4
 80076d8:	4629      	mov	r1, r5
 80076da:	4630      	mov	r0, r6
 80076dc:	f7ff ffa1 	bl	8007622 <__sfputs_r>
 80076e0:	3001      	adds	r0, #1
 80076e2:	f000 80a7 	beq.w	8007834 <_vfiprintf_r+0x1ec>
 80076e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076e8:	445a      	add	r2, fp
 80076ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80076ec:	f89a 3000 	ldrb.w	r3, [sl]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 809f 	beq.w	8007834 <_vfiprintf_r+0x1ec>
 80076f6:	2300      	movs	r3, #0
 80076f8:	f04f 32ff 	mov.w	r2, #4294967295
 80076fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007700:	f10a 0a01 	add.w	sl, sl, #1
 8007704:	9304      	str	r3, [sp, #16]
 8007706:	9307      	str	r3, [sp, #28]
 8007708:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800770c:	931a      	str	r3, [sp, #104]	@ 0x68
 800770e:	4654      	mov	r4, sl
 8007710:	2205      	movs	r2, #5
 8007712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007716:	4853      	ldr	r0, [pc, #332]	@ (8007864 <_vfiprintf_r+0x21c>)
 8007718:	f7f8 fd6a 	bl	80001f0 <memchr>
 800771c:	9a04      	ldr	r2, [sp, #16]
 800771e:	b9d8      	cbnz	r0, 8007758 <_vfiprintf_r+0x110>
 8007720:	06d1      	lsls	r1, r2, #27
 8007722:	bf44      	itt	mi
 8007724:	2320      	movmi	r3, #32
 8007726:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800772a:	0713      	lsls	r3, r2, #28
 800772c:	bf44      	itt	mi
 800772e:	232b      	movmi	r3, #43	@ 0x2b
 8007730:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007734:	f89a 3000 	ldrb.w	r3, [sl]
 8007738:	2b2a      	cmp	r3, #42	@ 0x2a
 800773a:	d015      	beq.n	8007768 <_vfiprintf_r+0x120>
 800773c:	9a07      	ldr	r2, [sp, #28]
 800773e:	4654      	mov	r4, sl
 8007740:	2000      	movs	r0, #0
 8007742:	f04f 0c0a 	mov.w	ip, #10
 8007746:	4621      	mov	r1, r4
 8007748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800774c:	3b30      	subs	r3, #48	@ 0x30
 800774e:	2b09      	cmp	r3, #9
 8007750:	d94b      	bls.n	80077ea <_vfiprintf_r+0x1a2>
 8007752:	b1b0      	cbz	r0, 8007782 <_vfiprintf_r+0x13a>
 8007754:	9207      	str	r2, [sp, #28]
 8007756:	e014      	b.n	8007782 <_vfiprintf_r+0x13a>
 8007758:	eba0 0308 	sub.w	r3, r0, r8
 800775c:	fa09 f303 	lsl.w	r3, r9, r3
 8007760:	4313      	orrs	r3, r2
 8007762:	9304      	str	r3, [sp, #16]
 8007764:	46a2      	mov	sl, r4
 8007766:	e7d2      	b.n	800770e <_vfiprintf_r+0xc6>
 8007768:	9b03      	ldr	r3, [sp, #12]
 800776a:	1d19      	adds	r1, r3, #4
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	9103      	str	r1, [sp, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	bfbb      	ittet	lt
 8007774:	425b      	neglt	r3, r3
 8007776:	f042 0202 	orrlt.w	r2, r2, #2
 800777a:	9307      	strge	r3, [sp, #28]
 800777c:	9307      	strlt	r3, [sp, #28]
 800777e:	bfb8      	it	lt
 8007780:	9204      	strlt	r2, [sp, #16]
 8007782:	7823      	ldrb	r3, [r4, #0]
 8007784:	2b2e      	cmp	r3, #46	@ 0x2e
 8007786:	d10a      	bne.n	800779e <_vfiprintf_r+0x156>
 8007788:	7863      	ldrb	r3, [r4, #1]
 800778a:	2b2a      	cmp	r3, #42	@ 0x2a
 800778c:	d132      	bne.n	80077f4 <_vfiprintf_r+0x1ac>
 800778e:	9b03      	ldr	r3, [sp, #12]
 8007790:	1d1a      	adds	r2, r3, #4
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	9203      	str	r2, [sp, #12]
 8007796:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800779a:	3402      	adds	r4, #2
 800779c:	9305      	str	r3, [sp, #20]
 800779e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007874 <_vfiprintf_r+0x22c>
 80077a2:	7821      	ldrb	r1, [r4, #0]
 80077a4:	2203      	movs	r2, #3
 80077a6:	4650      	mov	r0, sl
 80077a8:	f7f8 fd22 	bl	80001f0 <memchr>
 80077ac:	b138      	cbz	r0, 80077be <_vfiprintf_r+0x176>
 80077ae:	9b04      	ldr	r3, [sp, #16]
 80077b0:	eba0 000a 	sub.w	r0, r0, sl
 80077b4:	2240      	movs	r2, #64	@ 0x40
 80077b6:	4082      	lsls	r2, r0
 80077b8:	4313      	orrs	r3, r2
 80077ba:	3401      	adds	r4, #1
 80077bc:	9304      	str	r3, [sp, #16]
 80077be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c2:	4829      	ldr	r0, [pc, #164]	@ (8007868 <_vfiprintf_r+0x220>)
 80077c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077c8:	2206      	movs	r2, #6
 80077ca:	f7f8 fd11 	bl	80001f0 <memchr>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d03f      	beq.n	8007852 <_vfiprintf_r+0x20a>
 80077d2:	4b26      	ldr	r3, [pc, #152]	@ (800786c <_vfiprintf_r+0x224>)
 80077d4:	bb1b      	cbnz	r3, 800781e <_vfiprintf_r+0x1d6>
 80077d6:	9b03      	ldr	r3, [sp, #12]
 80077d8:	3307      	adds	r3, #7
 80077da:	f023 0307 	bic.w	r3, r3, #7
 80077de:	3308      	adds	r3, #8
 80077e0:	9303      	str	r3, [sp, #12]
 80077e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e4:	443b      	add	r3, r7
 80077e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80077e8:	e76a      	b.n	80076c0 <_vfiprintf_r+0x78>
 80077ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80077ee:	460c      	mov	r4, r1
 80077f0:	2001      	movs	r0, #1
 80077f2:	e7a8      	b.n	8007746 <_vfiprintf_r+0xfe>
 80077f4:	2300      	movs	r3, #0
 80077f6:	3401      	adds	r4, #1
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	4619      	mov	r1, r3
 80077fc:	f04f 0c0a 	mov.w	ip, #10
 8007800:	4620      	mov	r0, r4
 8007802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007806:	3a30      	subs	r2, #48	@ 0x30
 8007808:	2a09      	cmp	r2, #9
 800780a:	d903      	bls.n	8007814 <_vfiprintf_r+0x1cc>
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0c6      	beq.n	800779e <_vfiprintf_r+0x156>
 8007810:	9105      	str	r1, [sp, #20]
 8007812:	e7c4      	b.n	800779e <_vfiprintf_r+0x156>
 8007814:	fb0c 2101 	mla	r1, ip, r1, r2
 8007818:	4604      	mov	r4, r0
 800781a:	2301      	movs	r3, #1
 800781c:	e7f0      	b.n	8007800 <_vfiprintf_r+0x1b8>
 800781e:	ab03      	add	r3, sp, #12
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	462a      	mov	r2, r5
 8007824:	4b12      	ldr	r3, [pc, #72]	@ (8007870 <_vfiprintf_r+0x228>)
 8007826:	a904      	add	r1, sp, #16
 8007828:	4630      	mov	r0, r6
 800782a:	f3af 8000 	nop.w
 800782e:	4607      	mov	r7, r0
 8007830:	1c78      	adds	r0, r7, #1
 8007832:	d1d6      	bne.n	80077e2 <_vfiprintf_r+0x19a>
 8007834:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007836:	07d9      	lsls	r1, r3, #31
 8007838:	d405      	bmi.n	8007846 <_vfiprintf_r+0x1fe>
 800783a:	89ab      	ldrh	r3, [r5, #12]
 800783c:	059a      	lsls	r2, r3, #22
 800783e:	d402      	bmi.n	8007846 <_vfiprintf_r+0x1fe>
 8007840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007842:	f7ff fddd 	bl	8007400 <__retarget_lock_release_recursive>
 8007846:	89ab      	ldrh	r3, [r5, #12]
 8007848:	065b      	lsls	r3, r3, #25
 800784a:	f53f af1f 	bmi.w	800768c <_vfiprintf_r+0x44>
 800784e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007850:	e71e      	b.n	8007690 <_vfiprintf_r+0x48>
 8007852:	ab03      	add	r3, sp, #12
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	462a      	mov	r2, r5
 8007858:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <_vfiprintf_r+0x228>)
 800785a:	a904      	add	r1, sp, #16
 800785c:	4630      	mov	r0, r6
 800785e:	f000 f879 	bl	8007954 <_printf_i>
 8007862:	e7e4      	b.n	800782e <_vfiprintf_r+0x1e6>
 8007864:	0800904c 	.word	0x0800904c
 8007868:	08009056 	.word	0x08009056
 800786c:	00000000 	.word	0x00000000
 8007870:	08007623 	.word	0x08007623
 8007874:	08009052 	.word	0x08009052

08007878 <_printf_common>:
 8007878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800787c:	4616      	mov	r6, r2
 800787e:	4698      	mov	r8, r3
 8007880:	688a      	ldr	r2, [r1, #8]
 8007882:	690b      	ldr	r3, [r1, #16]
 8007884:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007888:	4293      	cmp	r3, r2
 800788a:	bfb8      	it	lt
 800788c:	4613      	movlt	r3, r2
 800788e:	6033      	str	r3, [r6, #0]
 8007890:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007894:	4607      	mov	r7, r0
 8007896:	460c      	mov	r4, r1
 8007898:	b10a      	cbz	r2, 800789e <_printf_common+0x26>
 800789a:	3301      	adds	r3, #1
 800789c:	6033      	str	r3, [r6, #0]
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	0699      	lsls	r1, r3, #26
 80078a2:	bf42      	ittt	mi
 80078a4:	6833      	ldrmi	r3, [r6, #0]
 80078a6:	3302      	addmi	r3, #2
 80078a8:	6033      	strmi	r3, [r6, #0]
 80078aa:	6825      	ldr	r5, [r4, #0]
 80078ac:	f015 0506 	ands.w	r5, r5, #6
 80078b0:	d106      	bne.n	80078c0 <_printf_common+0x48>
 80078b2:	f104 0a19 	add.w	sl, r4, #25
 80078b6:	68e3      	ldr	r3, [r4, #12]
 80078b8:	6832      	ldr	r2, [r6, #0]
 80078ba:	1a9b      	subs	r3, r3, r2
 80078bc:	42ab      	cmp	r3, r5
 80078be:	dc26      	bgt.n	800790e <_printf_common+0x96>
 80078c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078c4:	6822      	ldr	r2, [r4, #0]
 80078c6:	3b00      	subs	r3, #0
 80078c8:	bf18      	it	ne
 80078ca:	2301      	movne	r3, #1
 80078cc:	0692      	lsls	r2, r2, #26
 80078ce:	d42b      	bmi.n	8007928 <_printf_common+0xb0>
 80078d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078d4:	4641      	mov	r1, r8
 80078d6:	4638      	mov	r0, r7
 80078d8:	47c8      	blx	r9
 80078da:	3001      	adds	r0, #1
 80078dc:	d01e      	beq.n	800791c <_printf_common+0xa4>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	6922      	ldr	r2, [r4, #16]
 80078e2:	f003 0306 	and.w	r3, r3, #6
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	bf02      	ittt	eq
 80078ea:	68e5      	ldreq	r5, [r4, #12]
 80078ec:	6833      	ldreq	r3, [r6, #0]
 80078ee:	1aed      	subeq	r5, r5, r3
 80078f0:	68a3      	ldr	r3, [r4, #8]
 80078f2:	bf0c      	ite	eq
 80078f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078f8:	2500      	movne	r5, #0
 80078fa:	4293      	cmp	r3, r2
 80078fc:	bfc4      	itt	gt
 80078fe:	1a9b      	subgt	r3, r3, r2
 8007900:	18ed      	addgt	r5, r5, r3
 8007902:	2600      	movs	r6, #0
 8007904:	341a      	adds	r4, #26
 8007906:	42b5      	cmp	r5, r6
 8007908:	d11a      	bne.n	8007940 <_printf_common+0xc8>
 800790a:	2000      	movs	r0, #0
 800790c:	e008      	b.n	8007920 <_printf_common+0xa8>
 800790e:	2301      	movs	r3, #1
 8007910:	4652      	mov	r2, sl
 8007912:	4641      	mov	r1, r8
 8007914:	4638      	mov	r0, r7
 8007916:	47c8      	blx	r9
 8007918:	3001      	adds	r0, #1
 800791a:	d103      	bne.n	8007924 <_printf_common+0xac>
 800791c:	f04f 30ff 	mov.w	r0, #4294967295
 8007920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007924:	3501      	adds	r5, #1
 8007926:	e7c6      	b.n	80078b6 <_printf_common+0x3e>
 8007928:	18e1      	adds	r1, r4, r3
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	2030      	movs	r0, #48	@ 0x30
 800792e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007932:	4422      	add	r2, r4
 8007934:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007938:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800793c:	3302      	adds	r3, #2
 800793e:	e7c7      	b.n	80078d0 <_printf_common+0x58>
 8007940:	2301      	movs	r3, #1
 8007942:	4622      	mov	r2, r4
 8007944:	4641      	mov	r1, r8
 8007946:	4638      	mov	r0, r7
 8007948:	47c8      	blx	r9
 800794a:	3001      	adds	r0, #1
 800794c:	d0e6      	beq.n	800791c <_printf_common+0xa4>
 800794e:	3601      	adds	r6, #1
 8007950:	e7d9      	b.n	8007906 <_printf_common+0x8e>
	...

08007954 <_printf_i>:
 8007954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007958:	7e0f      	ldrb	r7, [r1, #24]
 800795a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800795c:	2f78      	cmp	r7, #120	@ 0x78
 800795e:	4691      	mov	r9, r2
 8007960:	4680      	mov	r8, r0
 8007962:	460c      	mov	r4, r1
 8007964:	469a      	mov	sl, r3
 8007966:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800796a:	d807      	bhi.n	800797c <_printf_i+0x28>
 800796c:	2f62      	cmp	r7, #98	@ 0x62
 800796e:	d80a      	bhi.n	8007986 <_printf_i+0x32>
 8007970:	2f00      	cmp	r7, #0
 8007972:	f000 80d2 	beq.w	8007b1a <_printf_i+0x1c6>
 8007976:	2f58      	cmp	r7, #88	@ 0x58
 8007978:	f000 80b9 	beq.w	8007aee <_printf_i+0x19a>
 800797c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007980:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007984:	e03a      	b.n	80079fc <_printf_i+0xa8>
 8007986:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800798a:	2b15      	cmp	r3, #21
 800798c:	d8f6      	bhi.n	800797c <_printf_i+0x28>
 800798e:	a101      	add	r1, pc, #4	@ (adr r1, 8007994 <_printf_i+0x40>)
 8007990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007994:	080079ed 	.word	0x080079ed
 8007998:	08007a01 	.word	0x08007a01
 800799c:	0800797d 	.word	0x0800797d
 80079a0:	0800797d 	.word	0x0800797d
 80079a4:	0800797d 	.word	0x0800797d
 80079a8:	0800797d 	.word	0x0800797d
 80079ac:	08007a01 	.word	0x08007a01
 80079b0:	0800797d 	.word	0x0800797d
 80079b4:	0800797d 	.word	0x0800797d
 80079b8:	0800797d 	.word	0x0800797d
 80079bc:	0800797d 	.word	0x0800797d
 80079c0:	08007b01 	.word	0x08007b01
 80079c4:	08007a2b 	.word	0x08007a2b
 80079c8:	08007abb 	.word	0x08007abb
 80079cc:	0800797d 	.word	0x0800797d
 80079d0:	0800797d 	.word	0x0800797d
 80079d4:	08007b23 	.word	0x08007b23
 80079d8:	0800797d 	.word	0x0800797d
 80079dc:	08007a2b 	.word	0x08007a2b
 80079e0:	0800797d 	.word	0x0800797d
 80079e4:	0800797d 	.word	0x0800797d
 80079e8:	08007ac3 	.word	0x08007ac3
 80079ec:	6833      	ldr	r3, [r6, #0]
 80079ee:	1d1a      	adds	r2, r3, #4
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6032      	str	r2, [r6, #0]
 80079f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079fc:	2301      	movs	r3, #1
 80079fe:	e09d      	b.n	8007b3c <_printf_i+0x1e8>
 8007a00:	6833      	ldr	r3, [r6, #0]
 8007a02:	6820      	ldr	r0, [r4, #0]
 8007a04:	1d19      	adds	r1, r3, #4
 8007a06:	6031      	str	r1, [r6, #0]
 8007a08:	0606      	lsls	r6, r0, #24
 8007a0a:	d501      	bpl.n	8007a10 <_printf_i+0xbc>
 8007a0c:	681d      	ldr	r5, [r3, #0]
 8007a0e:	e003      	b.n	8007a18 <_printf_i+0xc4>
 8007a10:	0645      	lsls	r5, r0, #25
 8007a12:	d5fb      	bpl.n	8007a0c <_printf_i+0xb8>
 8007a14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a18:	2d00      	cmp	r5, #0
 8007a1a:	da03      	bge.n	8007a24 <_printf_i+0xd0>
 8007a1c:	232d      	movs	r3, #45	@ 0x2d
 8007a1e:	426d      	negs	r5, r5
 8007a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a24:	4859      	ldr	r0, [pc, #356]	@ (8007b8c <_printf_i+0x238>)
 8007a26:	230a      	movs	r3, #10
 8007a28:	e011      	b.n	8007a4e <_printf_i+0xfa>
 8007a2a:	6821      	ldr	r1, [r4, #0]
 8007a2c:	6833      	ldr	r3, [r6, #0]
 8007a2e:	0608      	lsls	r0, r1, #24
 8007a30:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a34:	d402      	bmi.n	8007a3c <_printf_i+0xe8>
 8007a36:	0649      	lsls	r1, r1, #25
 8007a38:	bf48      	it	mi
 8007a3a:	b2ad      	uxthmi	r5, r5
 8007a3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a3e:	4853      	ldr	r0, [pc, #332]	@ (8007b8c <_printf_i+0x238>)
 8007a40:	6033      	str	r3, [r6, #0]
 8007a42:	bf14      	ite	ne
 8007a44:	230a      	movne	r3, #10
 8007a46:	2308      	moveq	r3, #8
 8007a48:	2100      	movs	r1, #0
 8007a4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a4e:	6866      	ldr	r6, [r4, #4]
 8007a50:	60a6      	str	r6, [r4, #8]
 8007a52:	2e00      	cmp	r6, #0
 8007a54:	bfa2      	ittt	ge
 8007a56:	6821      	ldrge	r1, [r4, #0]
 8007a58:	f021 0104 	bicge.w	r1, r1, #4
 8007a5c:	6021      	strge	r1, [r4, #0]
 8007a5e:	b90d      	cbnz	r5, 8007a64 <_printf_i+0x110>
 8007a60:	2e00      	cmp	r6, #0
 8007a62:	d04b      	beq.n	8007afc <_printf_i+0x1a8>
 8007a64:	4616      	mov	r6, r2
 8007a66:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a6a:	fb03 5711 	mls	r7, r3, r1, r5
 8007a6e:	5dc7      	ldrb	r7, [r0, r7]
 8007a70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a74:	462f      	mov	r7, r5
 8007a76:	42bb      	cmp	r3, r7
 8007a78:	460d      	mov	r5, r1
 8007a7a:	d9f4      	bls.n	8007a66 <_printf_i+0x112>
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d10b      	bne.n	8007a98 <_printf_i+0x144>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	07df      	lsls	r7, r3, #31
 8007a84:	d508      	bpl.n	8007a98 <_printf_i+0x144>
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	6861      	ldr	r1, [r4, #4]
 8007a8a:	4299      	cmp	r1, r3
 8007a8c:	bfde      	ittt	le
 8007a8e:	2330      	movle	r3, #48	@ 0x30
 8007a90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a98:	1b92      	subs	r2, r2, r6
 8007a9a:	6122      	str	r2, [r4, #16]
 8007a9c:	f8cd a000 	str.w	sl, [sp]
 8007aa0:	464b      	mov	r3, r9
 8007aa2:	aa03      	add	r2, sp, #12
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	4640      	mov	r0, r8
 8007aa8:	f7ff fee6 	bl	8007878 <_printf_common>
 8007aac:	3001      	adds	r0, #1
 8007aae:	d14a      	bne.n	8007b46 <_printf_i+0x1f2>
 8007ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab4:	b004      	add	sp, #16
 8007ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	f043 0320 	orr.w	r3, r3, #32
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	4833      	ldr	r0, [pc, #204]	@ (8007b90 <_printf_i+0x23c>)
 8007ac4:	2778      	movs	r7, #120	@ 0x78
 8007ac6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	6831      	ldr	r1, [r6, #0]
 8007ace:	061f      	lsls	r7, r3, #24
 8007ad0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ad4:	d402      	bmi.n	8007adc <_printf_i+0x188>
 8007ad6:	065f      	lsls	r7, r3, #25
 8007ad8:	bf48      	it	mi
 8007ada:	b2ad      	uxthmi	r5, r5
 8007adc:	6031      	str	r1, [r6, #0]
 8007ade:	07d9      	lsls	r1, r3, #31
 8007ae0:	bf44      	itt	mi
 8007ae2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ae6:	6023      	strmi	r3, [r4, #0]
 8007ae8:	b11d      	cbz	r5, 8007af2 <_printf_i+0x19e>
 8007aea:	2310      	movs	r3, #16
 8007aec:	e7ac      	b.n	8007a48 <_printf_i+0xf4>
 8007aee:	4827      	ldr	r0, [pc, #156]	@ (8007b8c <_printf_i+0x238>)
 8007af0:	e7e9      	b.n	8007ac6 <_printf_i+0x172>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	f023 0320 	bic.w	r3, r3, #32
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	e7f6      	b.n	8007aea <_printf_i+0x196>
 8007afc:	4616      	mov	r6, r2
 8007afe:	e7bd      	b.n	8007a7c <_printf_i+0x128>
 8007b00:	6833      	ldr	r3, [r6, #0]
 8007b02:	6825      	ldr	r5, [r4, #0]
 8007b04:	6961      	ldr	r1, [r4, #20]
 8007b06:	1d18      	adds	r0, r3, #4
 8007b08:	6030      	str	r0, [r6, #0]
 8007b0a:	062e      	lsls	r6, r5, #24
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	d501      	bpl.n	8007b14 <_printf_i+0x1c0>
 8007b10:	6019      	str	r1, [r3, #0]
 8007b12:	e002      	b.n	8007b1a <_printf_i+0x1c6>
 8007b14:	0668      	lsls	r0, r5, #25
 8007b16:	d5fb      	bpl.n	8007b10 <_printf_i+0x1bc>
 8007b18:	8019      	strh	r1, [r3, #0]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	6123      	str	r3, [r4, #16]
 8007b1e:	4616      	mov	r6, r2
 8007b20:	e7bc      	b.n	8007a9c <_printf_i+0x148>
 8007b22:	6833      	ldr	r3, [r6, #0]
 8007b24:	1d1a      	adds	r2, r3, #4
 8007b26:	6032      	str	r2, [r6, #0]
 8007b28:	681e      	ldr	r6, [r3, #0]
 8007b2a:	6862      	ldr	r2, [r4, #4]
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f7f8 fb5e 	bl	80001f0 <memchr>
 8007b34:	b108      	cbz	r0, 8007b3a <_printf_i+0x1e6>
 8007b36:	1b80      	subs	r0, r0, r6
 8007b38:	6060      	str	r0, [r4, #4]
 8007b3a:	6863      	ldr	r3, [r4, #4]
 8007b3c:	6123      	str	r3, [r4, #16]
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b44:	e7aa      	b.n	8007a9c <_printf_i+0x148>
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	4632      	mov	r2, r6
 8007b4a:	4649      	mov	r1, r9
 8007b4c:	4640      	mov	r0, r8
 8007b4e:	47d0      	blx	sl
 8007b50:	3001      	adds	r0, #1
 8007b52:	d0ad      	beq.n	8007ab0 <_printf_i+0x15c>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	079b      	lsls	r3, r3, #30
 8007b58:	d413      	bmi.n	8007b82 <_printf_i+0x22e>
 8007b5a:	68e0      	ldr	r0, [r4, #12]
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	4298      	cmp	r0, r3
 8007b60:	bfb8      	it	lt
 8007b62:	4618      	movlt	r0, r3
 8007b64:	e7a6      	b.n	8007ab4 <_printf_i+0x160>
 8007b66:	2301      	movs	r3, #1
 8007b68:	4632      	mov	r2, r6
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	47d0      	blx	sl
 8007b70:	3001      	adds	r0, #1
 8007b72:	d09d      	beq.n	8007ab0 <_printf_i+0x15c>
 8007b74:	3501      	adds	r5, #1
 8007b76:	68e3      	ldr	r3, [r4, #12]
 8007b78:	9903      	ldr	r1, [sp, #12]
 8007b7a:	1a5b      	subs	r3, r3, r1
 8007b7c:	42ab      	cmp	r3, r5
 8007b7e:	dcf2      	bgt.n	8007b66 <_printf_i+0x212>
 8007b80:	e7eb      	b.n	8007b5a <_printf_i+0x206>
 8007b82:	2500      	movs	r5, #0
 8007b84:	f104 0619 	add.w	r6, r4, #25
 8007b88:	e7f5      	b.n	8007b76 <_printf_i+0x222>
 8007b8a:	bf00      	nop
 8007b8c:	0800905d 	.word	0x0800905d
 8007b90:	0800906e 	.word	0x0800906e

08007b94 <__sflush_r>:
 8007b94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9c:	0716      	lsls	r6, r2, #28
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	d454      	bmi.n	8007c4e <__sflush_r+0xba>
 8007ba4:	684b      	ldr	r3, [r1, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	dc02      	bgt.n	8007bb0 <__sflush_r+0x1c>
 8007baa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dd48      	ble.n	8007c42 <__sflush_r+0xae>
 8007bb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bb2:	2e00      	cmp	r6, #0
 8007bb4:	d045      	beq.n	8007c42 <__sflush_r+0xae>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bbc:	682f      	ldr	r7, [r5, #0]
 8007bbe:	6a21      	ldr	r1, [r4, #32]
 8007bc0:	602b      	str	r3, [r5, #0]
 8007bc2:	d030      	beq.n	8007c26 <__sflush_r+0x92>
 8007bc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	0759      	lsls	r1, r3, #29
 8007bca:	d505      	bpl.n	8007bd8 <__sflush_r+0x44>
 8007bcc:	6863      	ldr	r3, [r4, #4]
 8007bce:	1ad2      	subs	r2, r2, r3
 8007bd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bd2:	b10b      	cbz	r3, 8007bd8 <__sflush_r+0x44>
 8007bd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bd6:	1ad2      	subs	r2, r2, r3
 8007bd8:	2300      	movs	r3, #0
 8007bda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bdc:	6a21      	ldr	r1, [r4, #32]
 8007bde:	4628      	mov	r0, r5
 8007be0:	47b0      	blx	r6
 8007be2:	1c43      	adds	r3, r0, #1
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	d106      	bne.n	8007bf6 <__sflush_r+0x62>
 8007be8:	6829      	ldr	r1, [r5, #0]
 8007bea:	291d      	cmp	r1, #29
 8007bec:	d82b      	bhi.n	8007c46 <__sflush_r+0xb2>
 8007bee:	4a2a      	ldr	r2, [pc, #168]	@ (8007c98 <__sflush_r+0x104>)
 8007bf0:	410a      	asrs	r2, r1
 8007bf2:	07d6      	lsls	r6, r2, #31
 8007bf4:	d427      	bmi.n	8007c46 <__sflush_r+0xb2>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	6062      	str	r2, [r4, #4]
 8007bfa:	04d9      	lsls	r1, r3, #19
 8007bfc:	6922      	ldr	r2, [r4, #16]
 8007bfe:	6022      	str	r2, [r4, #0]
 8007c00:	d504      	bpl.n	8007c0c <__sflush_r+0x78>
 8007c02:	1c42      	adds	r2, r0, #1
 8007c04:	d101      	bne.n	8007c0a <__sflush_r+0x76>
 8007c06:	682b      	ldr	r3, [r5, #0]
 8007c08:	b903      	cbnz	r3, 8007c0c <__sflush_r+0x78>
 8007c0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c0e:	602f      	str	r7, [r5, #0]
 8007c10:	b1b9      	cbz	r1, 8007c42 <__sflush_r+0xae>
 8007c12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c16:	4299      	cmp	r1, r3
 8007c18:	d002      	beq.n	8007c20 <__sflush_r+0x8c>
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	f7ff fbf2 	bl	8007404 <_free_r>
 8007c20:	2300      	movs	r3, #0
 8007c22:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c24:	e00d      	b.n	8007c42 <__sflush_r+0xae>
 8007c26:	2301      	movs	r3, #1
 8007c28:	4628      	mov	r0, r5
 8007c2a:	47b0      	blx	r6
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	1c50      	adds	r0, r2, #1
 8007c30:	d1c9      	bne.n	8007bc6 <__sflush_r+0x32>
 8007c32:	682b      	ldr	r3, [r5, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0c6      	beq.n	8007bc6 <__sflush_r+0x32>
 8007c38:	2b1d      	cmp	r3, #29
 8007c3a:	d001      	beq.n	8007c40 <__sflush_r+0xac>
 8007c3c:	2b16      	cmp	r3, #22
 8007c3e:	d11e      	bne.n	8007c7e <__sflush_r+0xea>
 8007c40:	602f      	str	r7, [r5, #0]
 8007c42:	2000      	movs	r0, #0
 8007c44:	e022      	b.n	8007c8c <__sflush_r+0xf8>
 8007c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c4a:	b21b      	sxth	r3, r3
 8007c4c:	e01b      	b.n	8007c86 <__sflush_r+0xf2>
 8007c4e:	690f      	ldr	r7, [r1, #16]
 8007c50:	2f00      	cmp	r7, #0
 8007c52:	d0f6      	beq.n	8007c42 <__sflush_r+0xae>
 8007c54:	0793      	lsls	r3, r2, #30
 8007c56:	680e      	ldr	r6, [r1, #0]
 8007c58:	bf08      	it	eq
 8007c5a:	694b      	ldreq	r3, [r1, #20]
 8007c5c:	600f      	str	r7, [r1, #0]
 8007c5e:	bf18      	it	ne
 8007c60:	2300      	movne	r3, #0
 8007c62:	eba6 0807 	sub.w	r8, r6, r7
 8007c66:	608b      	str	r3, [r1, #8]
 8007c68:	f1b8 0f00 	cmp.w	r8, #0
 8007c6c:	dde9      	ble.n	8007c42 <__sflush_r+0xae>
 8007c6e:	6a21      	ldr	r1, [r4, #32]
 8007c70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c72:	4643      	mov	r3, r8
 8007c74:	463a      	mov	r2, r7
 8007c76:	4628      	mov	r0, r5
 8007c78:	47b0      	blx	r6
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	dc08      	bgt.n	8007c90 <__sflush_r+0xfc>
 8007c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c90:	4407      	add	r7, r0
 8007c92:	eba8 0800 	sub.w	r8, r8, r0
 8007c96:	e7e7      	b.n	8007c68 <__sflush_r+0xd4>
 8007c98:	dfbffffe 	.word	0xdfbffffe

08007c9c <_fflush_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	690b      	ldr	r3, [r1, #16]
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	b913      	cbnz	r3, 8007cac <_fflush_r+0x10>
 8007ca6:	2500      	movs	r5, #0
 8007ca8:	4628      	mov	r0, r5
 8007caa:	bd38      	pop	{r3, r4, r5, pc}
 8007cac:	b118      	cbz	r0, 8007cb6 <_fflush_r+0x1a>
 8007cae:	6a03      	ldr	r3, [r0, #32]
 8007cb0:	b90b      	cbnz	r3, 8007cb6 <_fflush_r+0x1a>
 8007cb2:	f7ff f9ad 	bl	8007010 <__sinit>
 8007cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d0f3      	beq.n	8007ca6 <_fflush_r+0xa>
 8007cbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cc0:	07d0      	lsls	r0, r2, #31
 8007cc2:	d404      	bmi.n	8007cce <_fflush_r+0x32>
 8007cc4:	0599      	lsls	r1, r3, #22
 8007cc6:	d402      	bmi.n	8007cce <_fflush_r+0x32>
 8007cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cca:	f7ff fb98 	bl	80073fe <__retarget_lock_acquire_recursive>
 8007cce:	4628      	mov	r0, r5
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	f7ff ff5f 	bl	8007b94 <__sflush_r>
 8007cd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cd8:	07da      	lsls	r2, r3, #31
 8007cda:	4605      	mov	r5, r0
 8007cdc:	d4e4      	bmi.n	8007ca8 <_fflush_r+0xc>
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	059b      	lsls	r3, r3, #22
 8007ce2:	d4e1      	bmi.n	8007ca8 <_fflush_r+0xc>
 8007ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ce6:	f7ff fb8b 	bl	8007400 <__retarget_lock_release_recursive>
 8007cea:	e7dd      	b.n	8007ca8 <_fflush_r+0xc>

08007cec <__swhatbuf_r>:
 8007cec:	b570      	push	{r4, r5, r6, lr}
 8007cee:	460c      	mov	r4, r1
 8007cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	b096      	sub	sp, #88	@ 0x58
 8007cf8:	4615      	mov	r5, r2
 8007cfa:	461e      	mov	r6, r3
 8007cfc:	da0d      	bge.n	8007d1a <__swhatbuf_r+0x2e>
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d04:	f04f 0100 	mov.w	r1, #0
 8007d08:	bf14      	ite	ne
 8007d0a:	2340      	movne	r3, #64	@ 0x40
 8007d0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d10:	2000      	movs	r0, #0
 8007d12:	6031      	str	r1, [r6, #0]
 8007d14:	602b      	str	r3, [r5, #0]
 8007d16:	b016      	add	sp, #88	@ 0x58
 8007d18:	bd70      	pop	{r4, r5, r6, pc}
 8007d1a:	466a      	mov	r2, sp
 8007d1c:	f000 f848 	bl	8007db0 <_fstat_r>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	dbec      	blt.n	8007cfe <__swhatbuf_r+0x12>
 8007d24:	9901      	ldr	r1, [sp, #4]
 8007d26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d2e:	4259      	negs	r1, r3
 8007d30:	4159      	adcs	r1, r3
 8007d32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d36:	e7eb      	b.n	8007d10 <__swhatbuf_r+0x24>

08007d38 <__smakebuf_r>:
 8007d38:	898b      	ldrh	r3, [r1, #12]
 8007d3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d3c:	079d      	lsls	r5, r3, #30
 8007d3e:	4606      	mov	r6, r0
 8007d40:	460c      	mov	r4, r1
 8007d42:	d507      	bpl.n	8007d54 <__smakebuf_r+0x1c>
 8007d44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	6123      	str	r3, [r4, #16]
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	6163      	str	r3, [r4, #20]
 8007d50:	b003      	add	sp, #12
 8007d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d54:	ab01      	add	r3, sp, #4
 8007d56:	466a      	mov	r2, sp
 8007d58:	f7ff ffc8 	bl	8007cec <__swhatbuf_r>
 8007d5c:	9f00      	ldr	r7, [sp, #0]
 8007d5e:	4605      	mov	r5, r0
 8007d60:	4639      	mov	r1, r7
 8007d62:	4630      	mov	r0, r6
 8007d64:	f7ff fbba 	bl	80074dc <_malloc_r>
 8007d68:	b948      	cbnz	r0, 8007d7e <__smakebuf_r+0x46>
 8007d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d6e:	059a      	lsls	r2, r3, #22
 8007d70:	d4ee      	bmi.n	8007d50 <__smakebuf_r+0x18>
 8007d72:	f023 0303 	bic.w	r3, r3, #3
 8007d76:	f043 0302 	orr.w	r3, r3, #2
 8007d7a:	81a3      	strh	r3, [r4, #12]
 8007d7c:	e7e2      	b.n	8007d44 <__smakebuf_r+0xc>
 8007d7e:	89a3      	ldrh	r3, [r4, #12]
 8007d80:	6020      	str	r0, [r4, #0]
 8007d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d86:	81a3      	strh	r3, [r4, #12]
 8007d88:	9b01      	ldr	r3, [sp, #4]
 8007d8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d8e:	b15b      	cbz	r3, 8007da8 <__smakebuf_r+0x70>
 8007d90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d94:	4630      	mov	r0, r6
 8007d96:	f000 f81d 	bl	8007dd4 <_isatty_r>
 8007d9a:	b128      	cbz	r0, 8007da8 <__smakebuf_r+0x70>
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	f043 0301 	orr.w	r3, r3, #1
 8007da6:	81a3      	strh	r3, [r4, #12]
 8007da8:	89a3      	ldrh	r3, [r4, #12]
 8007daa:	431d      	orrs	r5, r3
 8007dac:	81a5      	strh	r5, [r4, #12]
 8007dae:	e7cf      	b.n	8007d50 <__smakebuf_r+0x18>

08007db0 <_fstat_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4d07      	ldr	r5, [pc, #28]	@ (8007dd0 <_fstat_r+0x20>)
 8007db4:	2300      	movs	r3, #0
 8007db6:	4604      	mov	r4, r0
 8007db8:	4608      	mov	r0, r1
 8007dba:	4611      	mov	r1, r2
 8007dbc:	602b      	str	r3, [r5, #0]
 8007dbe:	f7fb fb67 	bl	8003490 <_fstat>
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	d102      	bne.n	8007dcc <_fstat_r+0x1c>
 8007dc6:	682b      	ldr	r3, [r5, #0]
 8007dc8:	b103      	cbz	r3, 8007dcc <_fstat_r+0x1c>
 8007dca:	6023      	str	r3, [r4, #0]
 8007dcc:	bd38      	pop	{r3, r4, r5, pc}
 8007dce:	bf00      	nop
 8007dd0:	20025d58 	.word	0x20025d58

08007dd4 <_isatty_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4d06      	ldr	r5, [pc, #24]	@ (8007df0 <_isatty_r+0x1c>)
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4604      	mov	r4, r0
 8007ddc:	4608      	mov	r0, r1
 8007dde:	602b      	str	r3, [r5, #0]
 8007de0:	f7fb fb66 	bl	80034b0 <_isatty>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d102      	bne.n	8007dee <_isatty_r+0x1a>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	b103      	cbz	r3, 8007dee <_isatty_r+0x1a>
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	20025d58 	.word	0x20025d58

08007df4 <_sbrk_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4d06      	ldr	r5, [pc, #24]	@ (8007e10 <_sbrk_r+0x1c>)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	602b      	str	r3, [r5, #0]
 8007e00:	f7fb fb6e 	bl	80034e0 <_sbrk>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d102      	bne.n	8007e0e <_sbrk_r+0x1a>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	b103      	cbz	r3, 8007e0e <_sbrk_r+0x1a>
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	20025d58 	.word	0x20025d58

08007e14 <_init>:
 8007e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e16:	bf00      	nop
 8007e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e1a:	bc08      	pop	{r3}
 8007e1c:	469e      	mov	lr, r3
 8007e1e:	4770      	bx	lr

08007e20 <_fini>:
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e22:	bf00      	nop
 8007e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e26:	bc08      	pop	{r3}
 8007e28:	469e      	mov	lr, r3
 8007e2a:	4770      	bx	lr
