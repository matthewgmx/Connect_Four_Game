
MGorboldMcCardleLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d30  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001254  08007ee0  08007ee0  00008ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009134  08009134  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  08009134  08009134  0000a134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800913c  0800913c  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800913c  0800913c  0000a13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009140  08009140  0000a140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08009144  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b078  2**0
                  CONTENTS
 10 .bss          00025cf4  20000078  20000078  0000b078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025d6c  20025d6c  0000b078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001459f  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034a6  00000000  00000000  0001f647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  00022af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc8  00000000  00000000  00023f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027592  00000000  00000000  00024f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019eb7  00000000  00000000  0004c4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2e2c  00000000  00000000  00066389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001491b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ccc  00000000  00000000  001491f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0014eec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007ec8 	.word	0x08007ec8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007ec8 	.word	0x08007ec8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 ff92 	bl	80034ac <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 ff7e 	bl	8001488 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 ff3b 	bl	8001408 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f001 f894 	bl	80016c4 <LCD_Clear>
    Game_Init();
 800059c:	f000 f912 	bl	80007c4 <Game_Init>
    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005a0:	f001 fb09 	bl	8001bb6 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a4:	4b02      	ldr	r3, [pc, #8]	@ (80005b0 <ApplicationInit+0x30>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000094 	.word	0x20000094

080005b4 <LCD_Touch_Polling_Demo>:
	visualDemo();
}

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_GREEN);
 80005b8:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80005bc:	2000      	movs	r0, #0
 80005be:	f001 f881 	bl	80016c4 <LCD_Clear>
	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005c2:	480f      	ldr	r0, [pc, #60]	@ (8000600 <LCD_Touch_Polling_Demo+0x4c>)
 80005c4:	f001 fb02 	bl	8001bcc <returnTouchStateAndLocation>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10e      	bne.n	80005ec <LCD_Touch_Polling_Demo+0x38>
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <LCD_Touch_Polling_Demo+0x4c>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	4619      	mov	r1, r3
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <LCD_Touch_Polling_Demo+0x4c>)
 80005d6:	885b      	ldrh	r3, [r3, #2]
 80005d8:	461a      	mov	r2, r3
 80005da:	480a      	ldr	r0, [pc, #40]	@ (8000604 <LCD_Touch_Polling_Demo+0x50>)
 80005dc:	f006 fda8 	bl	8007130 <iprintf>
			LCD_Clear(0, LCD_COLOR_RED);
 80005e0:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80005e4:	2000      	movs	r0, #0
 80005e6:	f001 f86d 	bl	80016c4 <LCD_Clear>
 80005ea:	e7ea      	b.n	80005c2 <LCD_Touch_Polling_Demo+0xe>
		} else {
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 80005ec:	4806      	ldr	r0, [pc, #24]	@ (8000608 <LCD_Touch_Polling_Demo+0x54>)
 80005ee:	f006 fe07 	bl	8007200 <puts>
			LCD_Clear(0, LCD_COLOR_GREEN);
 80005f2:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80005f6:	2000      	movs	r0, #0
 80005f8:	f001 f864 	bl	80016c4 <LCD_Clear>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005fc:	e7e1      	b.n	80005c2 <LCD_Touch_Polling_Demo+0xe>
 80005fe:	bf00      	nop
 8000600:	20000094 	.word	0x20000094
 8000604:	08007ee0 	.word	0x08007ee0
 8000608:	08007ef4 	.word	0x08007ef4

0800060c <EXTI0_IRQHandler>:
		}
	}
}
#endif // COMPILE_TOUCH_FUNCTIONS

void EXTI0_IRQHandler(){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	disableInterruptIRQ(EXTI0_IRQn);
 8000610:	2006      	movs	r0, #6
 8000612:	f000 fdfe 	bl	8001212 <disableInterruptIRQ>
	clearInterruptEXTI(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fe1e 	bl	8001258 <clearInterruptEXTI>

	if(ConnectFour_DropPiece(Game.currentCol)){
 800061c:	4b53      	ldr	r3, [pc, #332]	@ (800076c <EXTI0_IRQHandler+0x160>)
 800061e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fbd8 	bl	8000dd8 <ConnectFour_DropPiece>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	f000 8096 	beq.w	800075c <EXTI0_IRQHandler+0x150>

		ConnectFour_DrawBoard();
 8000630:	f000 fa00 	bl	8000a34 <ConnectFour_DrawBoard>
		if(ConnectFour_CheckWin()){
 8000634:	f000 fc3a 	bl	8000eac <ConnectFour_CheckWin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d022      	beq.n	8000684 <EXTI0_IRQHandler+0x78>
			Game.winner = Game.currentPlayer;
 800063e:	4b4b      	ldr	r3, [pc, #300]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000640:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8000644:	4b49      	ldr	r3, [pc, #292]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000646:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			if(Game.currentPlayer == PLAYER_ONE){
 800064a:	4b48      	ldr	r3, [pc, #288]	@ (800076c <EXTI0_IRQHandler+0x160>)
 800064c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000650:	2b01      	cmp	r3, #1
 8000652:	d108      	bne.n	8000666 <EXTI0_IRQHandler+0x5a>
				Game.YellowWins++;
 8000654:	4b45      	ldr	r3, [pc, #276]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000656:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800065a:	3301      	adds	r3, #1
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b43      	ldr	r3, [pc, #268]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000660:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8000664:	e007      	b.n	8000676 <EXTI0_IRQHandler+0x6a>
			}
			else{
				Game.RedWins++;
 8000666:	4b41      	ldr	r3, [pc, #260]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000668:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b3e      	ldr	r3, [pc, #248]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000672:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			}
			Game.state = STATE_GAME_OVER;
 8000676:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000678:	2202      	movs	r2, #2
 800067a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			ConnectFour_GameOver();
 800067e:	f000 fa2b 	bl	8000ad8 <ConnectFour_GameOver>
 8000682:	e06b      	b.n	800075c <EXTI0_IRQHandler+0x150>
		}
		else if(ConnectFour_CheckDraw()){
 8000684:	f000 fd60 	bl	8001148 <ConnectFour_CheckDraw>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00a      	beq.n	80006a4 <EXTI0_IRQHandler+0x98>
			Game.isDraw = 1;
 800068e:	4b37      	ldr	r3, [pc, #220]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000690:	2201      	movs	r2, #1
 8000692:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
			Game.state = STATE_GAME_OVER;
 8000696:	4b35      	ldr	r3, [pc, #212]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000698:	2202      	movs	r2, #2
 800069a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			ConnectFour_GameOver();
 800069e:	f000 fa1b 	bl	8000ad8 <ConnectFour_GameOver>
 80006a2:	e05b      	b.n	800075c <EXTI0_IRQHandler+0x150>
		}
		else{
			//
			if(Game.gameMode == GAMEMODE_ONE_PLAYER && Game.currentPlayer == PLAYER_ONE){
 80006a4:	4b31      	ldr	r3, [pc, #196]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006a6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d13d      	bne.n	800072a <EXTI0_IRQHandler+0x11e>
 80006ae:	4b2f      	ldr	r3, [pc, #188]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006b0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d138      	bne.n	800072a <EXTI0_IRQHandler+0x11e>
				Game.currentPlayer = PLAYER_TWO;
 80006b8:	4b2c      	ldr	r3, [pc, #176]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006ba:	2202      	movs	r2, #2
 80006bc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

				ConnectFour_ComputerMove();
 80006c0:	f000 fbba 	bl	8000e38 <ConnectFour_ComputerMove>
				ConnectFour_DrawBoard();
 80006c4:	f000 f9b6 	bl	8000a34 <ConnectFour_DrawBoard>
				Game.currentCol = 4;
 80006c8:	4b28      	ldr	r3, [pc, #160]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006ca:	2204      	movs	r2, #4
 80006cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
				if(ConnectFour_CheckWin()){
 80006d0:	f000 fbec 	bl	8000eac <ConnectFour_CheckWin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d012      	beq.n	8000700 <EXTI0_IRQHandler+0xf4>
					Game.winner = COMPUTER_PLAYER;
 80006da:	4b24      	ldr	r3, [pc, #144]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006dc:	2202      	movs	r2, #2
 80006de:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
					Game.RedWins++;
 80006e2:	4b22      	ldr	r3, [pc, #136]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80006e8:	3301      	adds	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006ee:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
					Game.state = STATE_GAME_OVER;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					ConnectFour_GameOver();
 80006fa:	f000 f9ed 	bl	8000ad8 <ConnectFour_GameOver>
				if(ConnectFour_CheckWin()){
 80006fe:	e027      	b.n	8000750 <EXTI0_IRQHandler+0x144>
				}
				else if(ConnectFour_CheckDraw()){
 8000700:	f000 fd22 	bl	8001148 <ConnectFour_CheckDraw>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00a      	beq.n	8000720 <EXTI0_IRQHandler+0x114>
					Game.isDraw = 1;
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <EXTI0_IRQHandler+0x160>)
 800070c:	2201      	movs	r2, #1
 800070e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
					Game.state = STATE_GAME_OVER;
 8000712:	4b16      	ldr	r3, [pc, #88]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000714:	2202      	movs	r2, #2
 8000716:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					ConnectFour_GameOver();
 800071a:	f000 f9dd 	bl	8000ad8 <ConnectFour_GameOver>
				if(ConnectFour_CheckWin()){
 800071e:	e017      	b.n	8000750 <EXTI0_IRQHandler+0x144>
				}
				else{
					Game.currentPlayer = PLAYER_ONE;
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000722:	2201      	movs	r2, #1
 8000724:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				if(ConnectFour_CheckWin()){
 8000728:	e012      	b.n	8000750 <EXTI0_IRQHandler+0x144>
				}
			}
			else if(Game.gameMode == GAMEMODE_TWO_PLAYER) {
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <EXTI0_IRQHandler+0x160>)
 800072c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000730:	2b02      	cmp	r3, #2
 8000732:	d10d      	bne.n	8000750 <EXTI0_IRQHandler+0x144>
				if(Game.currentPlayer == PLAYER_ONE){
 8000734:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000736:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800073a:	2b01      	cmp	r3, #1
 800073c:	d104      	bne.n	8000748 <EXTI0_IRQHandler+0x13c>
					Game.currentPlayer = PLAYER_TWO;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000740:	2202      	movs	r2, #2
 8000742:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000746:	e003      	b.n	8000750 <EXTI0_IRQHandler+0x144>
				}
				else{
					Game.currentPlayer = PLAYER_ONE;
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <EXTI0_IRQHandler+0x160>)
 800074a:	2201      	movs	r2, #1
 800074c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				}
			}
			screen2();
 8000750:	f001 f9ba 	bl	8001ac8 <screen2>
			ConnectFour_DrawPiece();
 8000754:	f000 f940 	bl	80009d8 <ConnectFour_DrawPiece>
			ConnectFour_DrawBoard();
 8000758:	f000 f96c 	bl	8000a34 <ConnectFour_DrawBoard>
		}
	}
	clearInterruptIRQ(EXTI0_IRQn);
 800075c:	2006      	movs	r0, #6
 800075e:	f000 fd69 	bl	8001234 <clearInterruptIRQ>
	enableInterruptIRQ(EXTI0_IRQn);
 8000762:	2006      	movs	r0, #6
 8000764:	f000 fd44 	bl	80011f0 <enableInterruptIRQ>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000009c 	.word	0x2000009c

08000770 <Button_Interrupts_Init>:
	else{
		return FALSE;
	}
}

void Button_Interrupts_Init(){
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOA_BUTTON;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <Button_Interrupts_Init+0x4c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a0f      	ldr	r2, [pc, #60]	@ (80007bc <Button_Interrupts_Init+0x4c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <Button_Interrupts_Init+0x4c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
	GPIOA_BUTTON.Pin = GPIO_PIN_0;
 8000792:	2301      	movs	r3, #1
 8000794:	607b      	str	r3, [r7, #4]
	GPIOA_BUTTON.Mode = GPIO_MODE_IT_RISING;
 8000796:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800079a:	60bb      	str	r3, [r7, #8]
	GPIOA_BUTTON.Speed = GPIO_SPEED_FREQ_HIGH; // choose speed high
 800079c:	2302      	movs	r3, #2
 800079e:	613b      	str	r3, [r7, #16]
	// GPIOA_BUTTON.OPType = GPIO_OPTYPE_PUSHPULL;
	GPIOA_BUTTON.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
	// GPIOA_BUTTON.Alternate = 0;
	HAL_GPIO_Init(GPIOA, &GPIOA_BUTTON);
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <Button_Interrupts_Init+0x50>)
 80007aa:	f003 f96b 	bl	8003a84 <HAL_GPIO_Init>
	enableInterruptIRQ(EXTI0_IRQn);
 80007ae:	2006      	movs	r0, #6
 80007b0:	f000 fd1e 	bl	80011f0 <enableInterruptIRQ>
}
 80007b4:	bf00      	nop
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020000 	.word	0x40020000

080007c4 <Game_Init>:

ConnectFourGame Game;
RNG_HandleTypeDef hrng;
static STMPE811_TouchData TouchScreen;

void Game_Init(void){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	TouchScreen.orientation = STMPE811_Orientation_Portrait_2;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <Game_Init+0x20>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	719a      	strb	r2, [r3, #6]
	ConnectFour_ResetGame();
 80007ce:	f000 f80d 	bl	80007ec <ConnectFour_ResetGame>
	Game.state = STATE_MENU;
 80007d2:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <Game_Init+0x24>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	Button_Interrupts_Init();
 80007da:	f7ff ffc9 	bl	8000770 <Button_Interrupts_Init>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000e0 	.word	0x200000e0
 80007e8:	2000009c 	.word	0x2000009c

080007ec <ConnectFour_ResetGame>:

void ConnectFour_ResetGame(void){
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
	for(int rows = 0; rows < BOARD_ROWS; rows++){
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	e015      	b.n	8000824 <ConnectFour_ResetGame+0x38>
		for(int cols = 0; cols < BOARD_COLS; cols++){
 80007f8:	2300      	movs	r3, #0
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	e00c      	b.n	8000818 <ConnectFour_ResetGame+0x2c>
			Game.board[rows][cols] = EMPTY_CELL;
 80007fe:	4918      	ldr	r1, [pc, #96]	@ (8000860 <ConnectFour_ResetGame+0x74>)
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	1a9b      	subs	r3, r3, r2
 8000808:	18ca      	adds	r2, r1, r3
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	4413      	add	r3, r2
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
		for(int cols = 0; cols < BOARD_COLS; cols++){
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	2b06      	cmp	r3, #6
 800081c:	ddef      	ble.n	80007fe <ConnectFour_ResetGame+0x12>
	for(int rows = 0; rows < BOARD_ROWS; rows++){
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3301      	adds	r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b05      	cmp	r3, #5
 8000828:	dde6      	ble.n	80007f8 <ConnectFour_ResetGame+0xc>
		}
	}

	Game.currentPlayer = PLAYER_ONE;
 800082a:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <ConnectFour_ResetGame+0x74>)
 800082c:	2201      	movs	r2, #1
 800082e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	Game.currentCol = 4;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <ConnectFour_ResetGame+0x74>)
 8000834:	2204      	movs	r2, #4
 8000836:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	Game.winner = 0;
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <ConnectFour_ResetGame+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	Game.isDraw = 0;
 8000842:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <ConnectFour_ResetGame+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	Game.startTime = 0;
 800084a:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <ConnectFour_ResetGame+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	2000009c 	.word	0x2000009c

08000864 <ConnectFour_GameLoop>:

void ConnectFour_GameLoop(void){
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	screen1();
 8000868:	f000 fffe 	bl	8001868 <screen1>

	while(1){
		if(returnTouchStateAndLocation(&TouchScreen) == STMPE811_State_Pressed){
 800086c:	480a      	ldr	r0, [pc, #40]	@ (8000898 <ConnectFour_GameLoop+0x34>)
 800086e:	f001 f9ad 	bl	8001bcc <returnTouchStateAndLocation>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d10b      	bne.n	8000890 <ConnectFour_GameLoop+0x2c>
			ConnectFour_ProcessInput(&TouchScreen);
 8000878:	4807      	ldr	r0, [pc, #28]	@ (8000898 <ConnectFour_GameLoop+0x34>)
 800087a:	f000 f811 	bl	80008a0 <ConnectFour_ProcessInput>
			printf("\nX: %03d\nY: %03d\n", TouchScreen.x, TouchScreen.y);
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <ConnectFour_GameLoop+0x34>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	4619      	mov	r1, r3
 8000884:	4b04      	ldr	r3, [pc, #16]	@ (8000898 <ConnectFour_GameLoop+0x34>)
 8000886:	885b      	ldrh	r3, [r3, #2]
 8000888:	461a      	mov	r2, r3
 800088a:	4804      	ldr	r0, [pc, #16]	@ (800089c <ConnectFour_GameLoop+0x38>)
 800088c:	f006 fc50 	bl	8007130 <iprintf>
		}
		HAL_Delay(100);
 8000890:	2064      	movs	r0, #100	@ 0x64
 8000892:	f002 ff63 	bl	800375c <HAL_Delay>
		if(returnTouchStateAndLocation(&TouchScreen) == STMPE811_State_Pressed){
 8000896:	e7e9      	b.n	800086c <ConnectFour_GameLoop+0x8>
 8000898:	200000e0 	.word	0x200000e0
 800089c:	08007f04 	.word	0x08007f04

080008a0 <ConnectFour_ProcessInput>:
	}
}

void ConnectFour_ProcessInput(STMPE811_TouchData *touchData){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	uint16_t x = TouchScreen.x;
 80008a8:	4b49      	ldr	r3, [pc, #292]	@ (80009d0 <ConnectFour_ProcessInput+0x130>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	81fb      	strh	r3, [r7, #14]
	uint16_t y = TouchScreen.y;
 80008ae:	4b48      	ldr	r3, [pc, #288]	@ (80009d0 <ConnectFour_ProcessInput+0x130>)
 80008b0:	885b      	ldrh	r3, [r3, #2]
 80008b2:	81bb      	strh	r3, [r7, #12]

	switch(Game.state){
 80008b4:	4b47      	ldr	r3, [pc, #284]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 80008b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d069      	beq.n	8000992 <ConnectFour_ProcessInput+0xf2>
 80008be:	2b02      	cmp	r3, #2
 80008c0:	f300 8081 	bgt.w	80009c6 <ConnectFour_ProcessInput+0x126>
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <ConnectFour_ProcessInput+0x2e>
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d03a      	beq.n	8000942 <ConnectFour_ProcessInput+0xa2>
			screen1();
			Game.state = STATE_MENU;
		}
		break;
	}
}
 80008cc:	e07b      	b.n	80009c6 <ConnectFour_ProcessInput+0x126>
		if(x >= 45 && x <= 195 && y >= 140 && y <= 175){
 80008ce:	89fb      	ldrh	r3, [r7, #14]
 80008d0:	2b2c      	cmp	r3, #44	@ 0x2c
 80008d2:	d919      	bls.n	8000908 <ConnectFour_ProcessInput+0x68>
 80008d4:	89fb      	ldrh	r3, [r7, #14]
 80008d6:	2bc3      	cmp	r3, #195	@ 0xc3
 80008d8:	d816      	bhi.n	8000908 <ConnectFour_ProcessInput+0x68>
 80008da:	89bb      	ldrh	r3, [r7, #12]
 80008dc:	2b8b      	cmp	r3, #139	@ 0x8b
 80008de:	d913      	bls.n	8000908 <ConnectFour_ProcessInput+0x68>
 80008e0:	89bb      	ldrh	r3, [r7, #12]
 80008e2:	2baf      	cmp	r3, #175	@ 0xaf
 80008e4:	d810      	bhi.n	8000908 <ConnectFour_ProcessInput+0x68>
			Game.gameMode = GAMEMODE_ONE_PLAYER;
 80008e6:	4b3b      	ldr	r3, [pc, #236]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			Game.state = STATE_GAME;
 80008ee:	4b39      	ldr	r3, [pc, #228]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			Game.startTime = 0;
 80008f6:	4b37      	ldr	r3, [pc, #220]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
			screen2();
 80008fe:	f001 f8e3 	bl	8001ac8 <screen2>
			ConnectFour_DrawPiece();
 8000902:	f000 f869 	bl	80009d8 <ConnectFour_DrawPiece>
		break;
 8000906:	e05b      	b.n	80009c0 <ConnectFour_ProcessInput+0x120>
		else if(x >= 45 && x <= 195 && y >= 70 && y <= 105){
 8000908:	89fb      	ldrh	r3, [r7, #14]
 800090a:	2b2c      	cmp	r3, #44	@ 0x2c
 800090c:	d958      	bls.n	80009c0 <ConnectFour_ProcessInput+0x120>
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	2bc3      	cmp	r3, #195	@ 0xc3
 8000912:	d855      	bhi.n	80009c0 <ConnectFour_ProcessInput+0x120>
 8000914:	89bb      	ldrh	r3, [r7, #12]
 8000916:	2b45      	cmp	r3, #69	@ 0x45
 8000918:	d952      	bls.n	80009c0 <ConnectFour_ProcessInput+0x120>
 800091a:	89bb      	ldrh	r3, [r7, #12]
 800091c:	2b69      	cmp	r3, #105	@ 0x69
 800091e:	d84f      	bhi.n	80009c0 <ConnectFour_ProcessInput+0x120>
			Game.gameMode = GAMEMODE_TWO_PLAYER;
 8000920:	4b2c      	ldr	r3, [pc, #176]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 8000922:	2202      	movs	r2, #2
 8000924:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			Game.state = STATE_GAME;
 8000928:	4b2a      	ldr	r3, [pc, #168]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 800092a:	2201      	movs	r2, #1
 800092c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			Game.startTime = 0;
 8000930:	4b28      	ldr	r3, [pc, #160]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
			screen2();
 8000938:	f001 f8c6 	bl	8001ac8 <screen2>
			ConnectFour_DrawPiece();
 800093c:	f000 f84c 	bl	80009d8 <ConnectFour_DrawPiece>
		break;
 8000940:	e03e      	b.n	80009c0 <ConnectFour_ProcessInput+0x120>
		if (x < BOARD_MARGIN_X / 2) {
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	2b77      	cmp	r3, #119	@ 0x77
 8000946:	d80d      	bhi.n	8000964 <ConnectFour_ProcessInput+0xc4>
			if (Game.currentCol > 0) {
 8000948:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 800094a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800094e:	2b00      	cmp	r3, #0
 8000950:	d018      	beq.n	8000984 <ConnectFour_ProcessInput+0xe4>
				Game.currentCol--;
 8000952:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 8000954:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000958:	3b01      	subs	r3, #1
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 800095e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8000962:	e00f      	b.n	8000984 <ConnectFour_ProcessInput+0xe4>
		else if (x >= BOARD_MARGIN_X / 2) {
 8000964:	89fb      	ldrh	r3, [r7, #14]
 8000966:	2b77      	cmp	r3, #119	@ 0x77
 8000968:	d90c      	bls.n	8000984 <ConnectFour_ProcessInput+0xe4>
			if (Game.currentCol < BOARD_COLS - 1) {
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 800096c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000970:	2b05      	cmp	r3, #5
 8000972:	d807      	bhi.n	8000984 <ConnectFour_ProcessInput+0xe4>
				Game.currentCol++;
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 8000976:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800097a:	3301      	adds	r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 8000980:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		screen2();
 8000984:	f001 f8a0 	bl	8001ac8 <screen2>
		ConnectFour_DrawPiece();
 8000988:	f000 f826 	bl	80009d8 <ConnectFour_DrawPiece>
		ConnectFour_DrawBoard();
 800098c:	f000 f852 	bl	8000a34 <ConnectFour_DrawBoard>
		break;
 8000990:	e019      	b.n	80009c6 <ConnectFour_ProcessInput+0x126>
		ConnectFour_GameOver();
 8000992:	f000 f8a1 	bl	8000ad8 <ConnectFour_GameOver>
		if(x >= 45 && x <= 195 && y >= 210 && y <= 245){
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	2b2c      	cmp	r3, #44	@ 0x2c
 800099a:	d913      	bls.n	80009c4 <ConnectFour_ProcessInput+0x124>
 800099c:	89fb      	ldrh	r3, [r7, #14]
 800099e:	2bc3      	cmp	r3, #195	@ 0xc3
 80009a0:	d810      	bhi.n	80009c4 <ConnectFour_ProcessInput+0x124>
 80009a2:	89bb      	ldrh	r3, [r7, #12]
 80009a4:	2bd1      	cmp	r3, #209	@ 0xd1
 80009a6:	d90d      	bls.n	80009c4 <ConnectFour_ProcessInput+0x124>
 80009a8:	89bb      	ldrh	r3, [r7, #12]
 80009aa:	2bf5      	cmp	r3, #245	@ 0xf5
 80009ac:	d80a      	bhi.n	80009c4 <ConnectFour_ProcessInput+0x124>
			ConnectFour_ResetGame();
 80009ae:	f7ff ff1d 	bl	80007ec <ConnectFour_ResetGame>
			screen1();
 80009b2:	f000 ff59 	bl	8001868 <screen1>
			Game.state = STATE_MENU;
 80009b6:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		break;
 80009be:	e001      	b.n	80009c4 <ConnectFour_ProcessInput+0x124>
		break;
 80009c0:	bf00      	nop
 80009c2:	e000      	b.n	80009c6 <ConnectFour_ProcessInput+0x126>
		break;
 80009c4:	bf00      	nop
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000e0 	.word	0x200000e0
 80009d4:	2000009c 	.word	0x2000009c

080009d8 <ConnectFour_DrawPiece>:

void ConnectFour_DrawPiece(void) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
	int x = Game.currentCol * CELL_SIZE + CELL_SIZE / 2  + 1;
 80009de:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <ConnectFour_DrawPiece+0x58>)
 80009e0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80009e4:	461a      	mov	r2, r3
 80009e6:	4613      	mov	r3, r2
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	4413      	add	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	3312      	adds	r3, #18
 80009f0:	607b      	str	r3, [r7, #4]
	int y = 25;
 80009f2:	2319      	movs	r3, #25
 80009f4:	603b      	str	r3, [r7, #0]
	if (Game.currentPlayer == PLAYER_ONE) {
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <ConnectFour_DrawPiece+0x58>)
 80009f8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d109      	bne.n	8000a14 <ConnectFour_DrawPiece+0x3c>
		LCD_Draw_Circle_Fill(x, y, PIECE_RADIUS, LCD_COLOR_YELLOW);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	b298      	uxth	r0, r3
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b299      	uxth	r1, r3
 8000a08:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	f000 fdb7 	bl	8001580 <LCD_Draw_Circle_Fill>
	} else {
		LCD_Draw_Circle_Fill(x, y, PIECE_RADIUS, LCD_COLOR_RED);
	}
}
 8000a12:	e008      	b.n	8000a26 <ConnectFour_DrawPiece+0x4e>
		LCD_Draw_Circle_Fill(x, y, PIECE_RADIUS, LCD_COLOR_RED);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	b298      	uxth	r0, r3
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	b299      	uxth	r1, r3
 8000a1c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a20:	220f      	movs	r2, #15
 8000a22:	f000 fdad 	bl	8001580 <LCD_Draw_Circle_Fill>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000009c 	.word	0x2000009c

08000a34 <ConnectFour_DrawBoard>:

void ConnectFour_DrawBoard(void){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
	for (int cols = 0; cols < BOARD_COLS; cols++){
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e041      	b.n	8000ac4 <ConnectFour_DrawBoard+0x90>
		for(int rows = 0; rows < BOARD_ROWS; rows++){
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	e038      	b.n	8000ab8 <ConnectFour_DrawBoard+0x84>
			int x = cols * CELL_SIZE + CELL_SIZE / 2 + 1;
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	011b      	lsls	r3, r3, #4
 8000a4c:	4413      	add	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	3312      	adds	r3, #18
 8000a52:	607b      	str	r3, [r7, #4]
			int y = rows * CELL_SIZE + CELL_SIZE / 2 + 50;
 8000a54:	68ba      	ldr	r2, [r7, #8]
 8000a56:	4613      	mov	r3, r2
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	4413      	add	r3, r2
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	3343      	adds	r3, #67	@ 0x43
 8000a60:	603b      	str	r3, [r7, #0]
			if(Game.board[rows][cols] == PLAYER_ONE){
 8000a62:	491c      	ldr	r1, [pc, #112]	@ (8000ad4 <ConnectFour_DrawBoard+0xa0>)
 8000a64:	68ba      	ldr	r2, [r7, #8]
 8000a66:	4613      	mov	r3, r2
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	1a9b      	subs	r3, r3, r2
 8000a6c:	18ca      	adds	r2, r1, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4413      	add	r3, r2
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d108      	bne.n	8000a8a <ConnectFour_DrawBoard+0x56>
				LCD_Draw_Circle_Fill(x,y, PIECE_RADIUS - 2, LCD_COLOR_YELLOW);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	b298      	uxth	r0, r3
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b299      	uxth	r1, r3
 8000a80:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000a84:	220d      	movs	r2, #13
 8000a86:	f000 fd7b 	bl	8001580 <LCD_Draw_Circle_Fill>
			}
			if(Game.board[rows][cols] == PLAYER_TWO){
 8000a8a:	4912      	ldr	r1, [pc, #72]	@ (8000ad4 <ConnectFour_DrawBoard+0xa0>)
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	1a9b      	subs	r3, r3, r2
 8000a94:	18ca      	adds	r2, r1, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d108      	bne.n	8000ab2 <ConnectFour_DrawBoard+0x7e>
				LCD_Draw_Circle_Fill(x,y, PIECE_RADIUS - 2, LCD_COLOR_RED);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	b298      	uxth	r0, r3
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b299      	uxth	r1, r3
 8000aa8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000aac:	220d      	movs	r2, #13
 8000aae:	f000 fd67 	bl	8001580 <LCD_Draw_Circle_Fill>
		for(int rows = 0; rows < BOARD_ROWS; rows++){
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	2b05      	cmp	r3, #5
 8000abc:	ddc3      	ble.n	8000a46 <ConnectFour_DrawBoard+0x12>
	for (int cols = 0; cols < BOARD_COLS; cols++){
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	ddba      	ble.n	8000a40 <ConnectFour_DrawBoard+0xc>
			}
		}
	}
}
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000009c 	.word	0x2000009c

08000ad8 <ConnectFour_GameOver>:

void ConnectFour_GameOver(void){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLACK);
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f000 fdef 	bl	80016c4 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ae6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000aea:	f000 fe0d 	bl	8001708 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000aee:	48b6      	ldr	r0, [pc, #728]	@ (8000dc8 <ConnectFour_GameOver+0x2f0>)
 8000af0:	f000 fe1a 	bl	8001728 <LCD_SetFont>
	uint8_t Yellow = Game.YellowWins;
 8000af4:	4bb5      	ldr	r3, [pc, #724]	@ (8000dcc <ConnectFour_GameOver+0x2f4>)
 8000af6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000afa:	71fb      	strb	r3, [r7, #7]
	uint8_t Red = Game.RedWins;
 8000afc:	4bb3      	ldr	r3, [pc, #716]	@ (8000dcc <ConnectFour_GameOver+0x2f4>)
 8000afe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000b02:	71bb      	strb	r3, [r7, #6]
	uint8_t Time = ConnectFour_GetGameTime();
 8000b04:	f000 fb4c 	bl	80011a0 <ConnectFour_GetGameTime>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	717b      	strb	r3, [r7, #5]
	char one = '0' + (Time / 100);
 8000b0c:	797b      	ldrb	r3, [r7, #5]
 8000b0e:	4ab0      	ldr	r2, [pc, #704]	@ (8000dd0 <ConnectFour_GameOver+0x2f8>)
 8000b10:	fba2 2303 	umull	r2, r3, r2, r3
 8000b14:	095b      	lsrs	r3, r3, #5
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	3330      	adds	r3, #48	@ 0x30
 8000b1a:	713b      	strb	r3, [r7, #4]
	char two = '0' + ((Time / 10) % 10);
 8000b1c:	797b      	ldrb	r3, [r7, #5]
 8000b1e:	4aad      	ldr	r2, [pc, #692]	@ (8000dd4 <ConnectFour_GameOver+0x2fc>)
 8000b20:	fba2 2303 	umull	r2, r3, r2, r3
 8000b24:	08db      	lsrs	r3, r3, #3
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4baa      	ldr	r3, [pc, #680]	@ (8000dd4 <ConnectFour_GameOver+0x2fc>)
 8000b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b2e:	08d9      	lsrs	r1, r3, #3
 8000b30:	460b      	mov	r3, r1
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	440b      	add	r3, r1
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	3330      	adds	r3, #48	@ 0x30
 8000b3e:	70fb      	strb	r3, [r7, #3]
	char three = '0' + (Time % 10);
 8000b40:	797a      	ldrb	r2, [r7, #5]
 8000b42:	4ba4      	ldr	r3, [pc, #656]	@ (8000dd4 <ConnectFour_GameOver+0x2fc>)
 8000b44:	fba3 1302 	umull	r1, r3, r3, r2
 8000b48:	08d9      	lsrs	r1, r3, #3
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	440b      	add	r3, r1
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	3330      	adds	r3, #48	@ 0x30
 8000b58:	70bb      	strb	r3, [r7, #2]

	if(Game.isDraw){
 8000b5a:	4b9c      	ldr	r3, [pc, #624]	@ (8000dcc <ConnectFour_GameOver+0x2f4>)
 8000b5c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d019      	beq.n	8000b98 <ConnectFour_GameOver+0xc0>
		LCD_DisplayChar(90, 20, 'D');
 8000b64:	2244      	movs	r2, #68	@ 0x44
 8000b66:	2114      	movs	r1, #20
 8000b68:	205a      	movs	r0, #90	@ 0x5a
 8000b6a:	f000 fe5b 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(110, 20, 'R');
 8000b6e:	2252      	movs	r2, #82	@ 0x52
 8000b70:	2114      	movs	r1, #20
 8000b72:	206e      	movs	r0, #110	@ 0x6e
 8000b74:	f000 fe56 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(130, 20, 'A');
 8000b78:	2241      	movs	r2, #65	@ 0x41
 8000b7a:	2114      	movs	r1, #20
 8000b7c:	2082      	movs	r0, #130	@ 0x82
 8000b7e:	f000 fe51 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(150, 20, 'W');
 8000b82:	2257      	movs	r2, #87	@ 0x57
 8000b84:	2114      	movs	r1, #20
 8000b86:	2096      	movs	r0, #150	@ 0x96
 8000b88:	f000 fe4c 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(170,20,'!');
 8000b8c:	2221      	movs	r2, #33	@ 0x21
 8000b8e:	2114      	movs	r1, #20
 8000b90:	20aa      	movs	r0, #170	@ 0xaa
 8000b92:	f000 fe47 	bl	8001824 <LCD_DisplayChar>
 8000b96:	e04b      	b.n	8000c30 <ConnectFour_GameOver+0x158>

	} else if(Game. winner == PLAYER_ONE){
 8000b98:	4b8c      	ldr	r3, [pc, #560]	@ (8000dcc <ConnectFour_GameOver+0x2f4>)
 8000b9a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d123      	bne.n	8000bea <ConnectFour_GameOver+0x112>
		LCD_DisplayChar(30, 20, 'P');
 8000ba2:	2250      	movs	r2, #80	@ 0x50
 8000ba4:	2114      	movs	r1, #20
 8000ba6:	201e      	movs	r0, #30
 8000ba8:	f000 fe3c 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(50, 20, '1');
 8000bac:	2231      	movs	r2, #49	@ 0x31
 8000bae:	2114      	movs	r1, #20
 8000bb0:	2032      	movs	r0, #50	@ 0x32
 8000bb2:	f000 fe37 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(90, 20, 'W');
 8000bb6:	2257      	movs	r2, #87	@ 0x57
 8000bb8:	2114      	movs	r1, #20
 8000bba:	205a      	movs	r0, #90	@ 0x5a
 8000bbc:	f000 fe32 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(110, 20, 'I');
 8000bc0:	2249      	movs	r2, #73	@ 0x49
 8000bc2:	2114      	movs	r1, #20
 8000bc4:	206e      	movs	r0, #110	@ 0x6e
 8000bc6:	f000 fe2d 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(130, 20,'N');
 8000bca:	224e      	movs	r2, #78	@ 0x4e
 8000bcc:	2114      	movs	r1, #20
 8000bce:	2082      	movs	r0, #130	@ 0x82
 8000bd0:	f000 fe28 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(150, 20,'S');
 8000bd4:	2253      	movs	r2, #83	@ 0x53
 8000bd6:	2114      	movs	r1, #20
 8000bd8:	2096      	movs	r0, #150	@ 0x96
 8000bda:	f000 fe23 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(170, 20,'!');
 8000bde:	2221      	movs	r2, #33	@ 0x21
 8000be0:	2114      	movs	r1, #20
 8000be2:	20aa      	movs	r0, #170	@ 0xaa
 8000be4:	f000 fe1e 	bl	8001824 <LCD_DisplayChar>
 8000be8:	e022      	b.n	8000c30 <ConnectFour_GameOver+0x158>
	} else{
		LCD_DisplayChar(30, 20, 'P');
 8000bea:	2250      	movs	r2, #80	@ 0x50
 8000bec:	2114      	movs	r1, #20
 8000bee:	201e      	movs	r0, #30
 8000bf0:	f000 fe18 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(50, 20, '2');
 8000bf4:	2232      	movs	r2, #50	@ 0x32
 8000bf6:	2114      	movs	r1, #20
 8000bf8:	2032      	movs	r0, #50	@ 0x32
 8000bfa:	f000 fe13 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(90, 20, 'W');
 8000bfe:	2257      	movs	r2, #87	@ 0x57
 8000c00:	2114      	movs	r1, #20
 8000c02:	205a      	movs	r0, #90	@ 0x5a
 8000c04:	f000 fe0e 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(110, 20, 'I');
 8000c08:	2249      	movs	r2, #73	@ 0x49
 8000c0a:	2114      	movs	r1, #20
 8000c0c:	206e      	movs	r0, #110	@ 0x6e
 8000c0e:	f000 fe09 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(130, 20,'N');
 8000c12:	224e      	movs	r2, #78	@ 0x4e
 8000c14:	2114      	movs	r1, #20
 8000c16:	2082      	movs	r0, #130	@ 0x82
 8000c18:	f000 fe04 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(150, 20,'S');
 8000c1c:	2253      	movs	r2, #83	@ 0x53
 8000c1e:	2114      	movs	r1, #20
 8000c20:	2096      	movs	r0, #150	@ 0x96
 8000c22:	f000 fdff 	bl	8001824 <LCD_DisplayChar>
		LCD_DisplayChar(170, 20,'!');
 8000c26:	2221      	movs	r2, #33	@ 0x21
 8000c28:	2114      	movs	r1, #20
 8000c2a:	20aa      	movs	r0, #170	@ 0xaa
 8000c2c:	f000 fdfa 	bl	8001824 <LCD_DisplayChar>
	}
	LCD_Draw_Vertical_Line(45,75,35,LCD_COLOR_WHITE);
 8000c30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c34:	2223      	movs	r2, #35	@ 0x23
 8000c36:	214b      	movs	r1, #75	@ 0x4b
 8000c38:	202d      	movs	r0, #45	@ 0x2d
 8000c3a:	f000 fcf4 	bl	8001626 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(195,75,35,LCD_COLOR_WHITE);
 8000c3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c42:	2223      	movs	r2, #35	@ 0x23
 8000c44:	214b      	movs	r1, #75	@ 0x4b
 8000c46:	20c3      	movs	r0, #195	@ 0xc3
 8000c48:	f000 fced 	bl	8001626 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(45,75,150,LCD_COLOR_WHITE);
 8000c4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c50:	2296      	movs	r2, #150	@ 0x96
 8000c52:	214b      	movs	r1, #75	@ 0x4b
 8000c54:	202d      	movs	r0, #45	@ 0x2d
 8000c56:	f000 fd0d 	bl	8001674 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(45,110,150,LCD_COLOR_WHITE);
 8000c5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c5e:	2296      	movs	r2, #150	@ 0x96
 8000c60:	216e      	movs	r1, #110	@ 0x6e
 8000c62:	202d      	movs	r0, #45	@ 0x2d
 8000c64:	f000 fd06 	bl	8001674 <LCD_Draw_Horizontal_Line>
	LCD_DisplayChar(50,80,'R');
 8000c68:	2252      	movs	r2, #82	@ 0x52
 8000c6a:	2150      	movs	r1, #80	@ 0x50
 8000c6c:	2032      	movs	r0, #50	@ 0x32
 8000c6e:	f000 fdd9 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(70,80,'E');
 8000c72:	2245      	movs	r2, #69	@ 0x45
 8000c74:	2150      	movs	r1, #80	@ 0x50
 8000c76:	2046      	movs	r0, #70	@ 0x46
 8000c78:	f000 fdd4 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(90,80,'S');
 8000c7c:	2253      	movs	r2, #83	@ 0x53
 8000c7e:	2150      	movs	r1, #80	@ 0x50
 8000c80:	205a      	movs	r0, #90	@ 0x5a
 8000c82:	f000 fdcf 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(110,80,'T');
 8000c86:	2254      	movs	r2, #84	@ 0x54
 8000c88:	2150      	movs	r1, #80	@ 0x50
 8000c8a:	206e      	movs	r0, #110	@ 0x6e
 8000c8c:	f000 fdca 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(130,80,'A');
 8000c90:	2241      	movs	r2, #65	@ 0x41
 8000c92:	2150      	movs	r1, #80	@ 0x50
 8000c94:	2082      	movs	r0, #130	@ 0x82
 8000c96:	f000 fdc5 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(150,80,'R');
 8000c9a:	2252      	movs	r2, #82	@ 0x52
 8000c9c:	2150      	movs	r1, #80	@ 0x50
 8000c9e:	2096      	movs	r0, #150	@ 0x96
 8000ca0:	f000 fdc0 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(170,80,'T');
 8000ca4:	2254      	movs	r2, #84	@ 0x54
 8000ca6:	2150      	movs	r1, #80	@ 0x50
 8000ca8:	20aa      	movs	r0, #170	@ 0xaa
 8000caa:	f000 fdbb 	bl	8001824 <LCD_DisplayChar>

	LCD_DisplayChar(40,250,'T');
 8000cae:	2254      	movs	r2, #84	@ 0x54
 8000cb0:	21fa      	movs	r1, #250	@ 0xfa
 8000cb2:	2028      	movs	r0, #40	@ 0x28
 8000cb4:	f000 fdb6 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(60,250,'I');
 8000cb8:	2249      	movs	r2, #73	@ 0x49
 8000cba:	21fa      	movs	r1, #250	@ 0xfa
 8000cbc:	203c      	movs	r0, #60	@ 0x3c
 8000cbe:	f000 fdb1 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(80,250,'M');
 8000cc2:	224d      	movs	r2, #77	@ 0x4d
 8000cc4:	21fa      	movs	r1, #250	@ 0xfa
 8000cc6:	2050      	movs	r0, #80	@ 0x50
 8000cc8:	f000 fdac 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(110,250,'E');
 8000ccc:	2245      	movs	r2, #69	@ 0x45
 8000cce:	21fa      	movs	r1, #250	@ 0xfa
 8000cd0:	206e      	movs	r0, #110	@ 0x6e
 8000cd2:	f000 fda7 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(150,250,one); // need to figure out how to make timer
 8000cd6:	793b      	ldrb	r3, [r7, #4]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	21fa      	movs	r1, #250	@ 0xfa
 8000cdc:	2096      	movs	r0, #150	@ 0x96
 8000cde:	f000 fda1 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(170,250,two);
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	21fa      	movs	r1, #250	@ 0xfa
 8000ce8:	20aa      	movs	r0, #170	@ 0xaa
 8000cea:	f000 fd9b 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(190,250,three);
 8000cee:	78bb      	ldrb	r3, [r7, #2]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	21fa      	movs	r1, #250	@ 0xfa
 8000cf4:	20be      	movs	r0, #190	@ 0xbe
 8000cf6:	f000 fd95 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(210,250,'S');
 8000cfa:	2253      	movs	r2, #83	@ 0x53
 8000cfc:	21fa      	movs	r1, #250	@ 0xfa
 8000cfe:	20d2      	movs	r0, #210	@ 0xd2
 8000d00:	f000 fd90 	bl	8001824 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000d04:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8000d08:	f000 fcfe 	bl	8001708 <LCD_SetTextColor>
	LCD_DisplayChar(40,150,'Y');
 8000d0c:	2259      	movs	r2, #89	@ 0x59
 8000d0e:	2196      	movs	r1, #150	@ 0x96
 8000d10:	2028      	movs	r0, #40	@ 0x28
 8000d12:	f000 fd87 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(60,150,'E');
 8000d16:	2245      	movs	r2, #69	@ 0x45
 8000d18:	2196      	movs	r1, #150	@ 0x96
 8000d1a:	203c      	movs	r0, #60	@ 0x3c
 8000d1c:	f000 fd82 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(80,150,'L');
 8000d20:	224c      	movs	r2, #76	@ 0x4c
 8000d22:	2196      	movs	r1, #150	@ 0x96
 8000d24:	2050      	movs	r0, #80	@ 0x50
 8000d26:	f000 fd7d 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(110,150,'W');
 8000d2a:	2257      	movs	r2, #87	@ 0x57
 8000d2c:	2196      	movs	r1, #150	@ 0x96
 8000d2e:	206e      	movs	r0, #110	@ 0x6e
 8000d30:	f000 fd78 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(130,150,'I');
 8000d34:	2249      	movs	r2, #73	@ 0x49
 8000d36:	2196      	movs	r1, #150	@ 0x96
 8000d38:	2082      	movs	r0, #130	@ 0x82
 8000d3a:	f000 fd73 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(150,150,'N');
 8000d3e:	224e      	movs	r2, #78	@ 0x4e
 8000d40:	2196      	movs	r1, #150	@ 0x96
 8000d42:	2096      	movs	r0, #150	@ 0x96
 8000d44:	f000 fd6e 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(170,150,'S');
 8000d48:	2253      	movs	r2, #83	@ 0x53
 8000d4a:	2196      	movs	r1, #150	@ 0x96
 8000d4c:	20aa      	movs	r0, #170	@ 0xaa
 8000d4e:	f000 fd69 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(200,150,(char)(Yellow + '0'));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	3330      	adds	r3, #48	@ 0x30
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	2196      	movs	r1, #150	@ 0x96
 8000d5c:	20c8      	movs	r0, #200	@ 0xc8
 8000d5e:	f000 fd61 	bl	8001824 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_RED);
 8000d62:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000d66:	f000 fccf 	bl	8001708 <LCD_SetTextColor>
	LCD_DisplayChar(40,200,'R');
 8000d6a:	2252      	movs	r2, #82	@ 0x52
 8000d6c:	21c8      	movs	r1, #200	@ 0xc8
 8000d6e:	2028      	movs	r0, #40	@ 0x28
 8000d70:	f000 fd58 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(60,200,'E');
 8000d74:	2245      	movs	r2, #69	@ 0x45
 8000d76:	21c8      	movs	r1, #200	@ 0xc8
 8000d78:	203c      	movs	r0, #60	@ 0x3c
 8000d7a:	f000 fd53 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(80,200,'D');
 8000d7e:	2244      	movs	r2, #68	@ 0x44
 8000d80:	21c8      	movs	r1, #200	@ 0xc8
 8000d82:	2050      	movs	r0, #80	@ 0x50
 8000d84:	f000 fd4e 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(110,200,'W');
 8000d88:	2257      	movs	r2, #87	@ 0x57
 8000d8a:	21c8      	movs	r1, #200	@ 0xc8
 8000d8c:	206e      	movs	r0, #110	@ 0x6e
 8000d8e:	f000 fd49 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(130,200,'I');
 8000d92:	2249      	movs	r2, #73	@ 0x49
 8000d94:	21c8      	movs	r1, #200	@ 0xc8
 8000d96:	2082      	movs	r0, #130	@ 0x82
 8000d98:	f000 fd44 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(150,200,'N');
 8000d9c:	224e      	movs	r2, #78	@ 0x4e
 8000d9e:	21c8      	movs	r1, #200	@ 0xc8
 8000da0:	2096      	movs	r0, #150	@ 0x96
 8000da2:	f000 fd3f 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(170,200,'S');
 8000da6:	2253      	movs	r2, #83	@ 0x53
 8000da8:	21c8      	movs	r1, #200	@ 0xc8
 8000daa:	20aa      	movs	r0, #170	@ 0xaa
 8000dac:	f000 fd3a 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(200,200,(char)(Red + '0'));
 8000db0:	79bb      	ldrb	r3, [r7, #6]
 8000db2:	3330      	adds	r3, #48	@ 0x30
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	21c8      	movs	r1, #200	@ 0xc8
 8000dba:	20c8      	movs	r0, #200	@ 0xc8
 8000dbc:	f000 fd32 	bl	8001824 <LCD_DisplayChar>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	2000009c 	.word	0x2000009c
 8000dd0:	51eb851f 	.word	0x51eb851f
 8000dd4:	cccccccd 	.word	0xcccccccd

08000dd8 <ConnectFour_DropPiece>:


uint8_t ConnectFour_DropPiece(uint8_t col){
 8000dd8:	b490      	push	{r4, r7}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	for (int rows = BOARD_ROWS - 1; rows >= 0; rows--) {
 8000de2:	2305      	movs	r3, #5
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e01c      	b.n	8000e22 <ConnectFour_DropPiece+0x4a>
		if (Game.board[rows][col] == EMPTY_CELL) {
 8000de8:	79f9      	ldrb	r1, [r7, #7]
 8000dea:	4812      	ldr	r0, [pc, #72]	@ (8000e34 <ConnectFour_DropPiece+0x5c>)
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4613      	mov	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	4403      	add	r3, r0
 8000df6:	440b      	add	r3, r1
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10e      	bne.n	8000e1c <ConnectFour_DropPiece+0x44>
			Game.board[rows][col] = Game.currentPlayer;
 8000dfe:	79f9      	ldrb	r1, [r7, #7]
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <ConnectFour_DropPiece+0x5c>)
 8000e02:	f893 402a 	ldrb.w	r4, [r3, #42]	@ 0x2a
 8000e06:	480b      	ldr	r0, [pc, #44]	@ (8000e34 <ConnectFour_DropPiece+0x5c>)
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	1a9b      	subs	r3, r3, r2
 8000e10:	4403      	add	r3, r0
 8000e12:	440b      	add	r3, r1
 8000e14:	4622      	mov	r2, r4
 8000e16:	701a      	strb	r2, [r3, #0]
			return 1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e006      	b.n	8000e2a <ConnectFour_DropPiece+0x52>
	for (int rows = BOARD_ROWS - 1; rows >= 0; rows--) {
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	dadf      	bge.n	8000de8 <ConnectFour_DropPiece+0x10>
		}
	}
	return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc90      	pop	{r4, r7}
 8000e32:	4770      	bx	lr
 8000e34:	2000009c 	.word	0x2000009c

08000e38 <ConnectFour_ComputerMove>:

void ConnectFour_ComputerMove(void){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0



	uint32_t random;
	uint8_t cols;
	uint8_t valid = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	71bb      	strb	r3, [r7, #6]
	while(!valid) {
 8000e42:	e023      	b.n	8000e8c <ConnectFour_ComputerMove+0x54>
			if(HAL_RNG_GenerateRandomNumber(&hrng, &random) == HAL_OK) {
 8000e44:	463b      	mov	r3, r7
 8000e46:	4619      	mov	r1, r3
 8000e48:	4815      	ldr	r0, [pc, #84]	@ (8000ea0 <ConnectFour_ComputerMove+0x68>)
 8000e4a:	f005 faa1 	bl	8006390 <HAL_RNG_GenerateRandomNumber>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d11b      	bne.n	8000e8c <ConnectFour_ComputerMove+0x54>
				cols = random % BOARD_COLS;
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <ConnectFour_ComputerMove+0x6c>)
 8000e58:	fba3 1302 	umull	r1, r3, r3, r2
 8000e5c:	1ad1      	subs	r1, r2, r3
 8000e5e:	0849      	lsrs	r1, r1, #1
 8000e60:	440b      	add	r3, r1
 8000e62:	0899      	lsrs	r1, r3, #2
 8000e64:	460b      	mov	r3, r1
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	1ad1      	subs	r1, r2, r3
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	71fb      	strb	r3, [r7, #7]
				valid = ConnectFour_DropPiece(cols);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ffb0 	bl	8000dd8 <ConnectFour_DropPiece>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71bb      	strb	r3, [r7, #6]
				if(valid) {
 8000e7c:	79bb      	ldrb	r3, [r7, #6]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d004      	beq.n	8000e8c <ConnectFour_ComputerMove+0x54>
					Game.currentCol = cols;
 8000e82:	4a09      	ldr	r2, [pc, #36]	@ (8000ea8 <ConnectFour_ComputerMove+0x70>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
 8000e8a:	e006      	b.n	8000e9a <ConnectFour_ComputerMove+0x62>
	while(!valid) {
 8000e8c:	79bb      	ldrb	r3, [r7, #6]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0d8      	beq.n	8000e44 <ConnectFour_ComputerMove+0xc>
					return;
				}
			}
		}
		Game.currentCol = cols;
 8000e92:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <ConnectFour_ComputerMove+0x70>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
}
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200000d0 	.word	0x200000d0
 8000ea4:	24924925 	.word	0x24924925
 8000ea8:	2000009c 	.word	0x2000009c

08000eac <ConnectFour_CheckWin>:

uint8_t ConnectFour_CheckWin(void){
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	@ 0x24
 8000eb0:	af00      	add	r7, sp, #0
	// horizontal
	for(int rows = 0; rows < BOARD_ROWS; rows++){
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	e048      	b.n	8000f4a <ConnectFour_CheckWin+0x9e>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
 8000ebc:	e03f      	b.n	8000f3e <ConnectFour_CheckWin+0x92>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows][cols+1] == Game.currentPlayer && Game.board[rows][cols+2] == Game.currentPlayer && Game.board[rows][cols+3] == Game.currentPlayer){
 8000ebe:	49a1      	ldr	r1, [pc, #644]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000ec0:	69fa      	ldr	r2, [r7, #28]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	18ca      	adds	r2, r1, r3
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781a      	ldrb	r2, [r3, #0]
 8000ed0:	4b9c      	ldr	r3, [pc, #624]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000ed2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d12e      	bne.n	8000f38 <ConnectFour_CheckWin+0x8c>
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	1c59      	adds	r1, r3, #1
 8000ede:	4899      	ldr	r0, [pc, #612]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000ee0:	69fa      	ldr	r2, [r7, #28]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	1a9b      	subs	r3, r3, r2
 8000ee8:	4403      	add	r3, r0
 8000eea:	440b      	add	r3, r1
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	4b95      	ldr	r3, [pc, #596]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000ef0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d11f      	bne.n	8000f38 <ConnectFour_CheckWin+0x8c>
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	1c99      	adds	r1, r3, #2
 8000efc:	4891      	ldr	r0, [pc, #580]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000efe:	69fa      	ldr	r2, [r7, #28]
 8000f00:	4613      	mov	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	4403      	add	r3, r0
 8000f08:	440b      	add	r3, r1
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	4b8d      	ldr	r3, [pc, #564]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000f0e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d110      	bne.n	8000f38 <ConnectFour_CheckWin+0x8c>
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	1cd9      	adds	r1, r3, #3
 8000f1a:	488a      	ldr	r0, [pc, #552]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	4403      	add	r3, r0
 8000f26:	440b      	add	r3, r1
 8000f28:	781a      	ldrb	r2, [r3, #0]
 8000f2a:	4b86      	ldr	r3, [pc, #536]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000f2c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d101      	bne.n	8000f38 <ConnectFour_CheckWin+0x8c>
				return 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e0ff      	b.n	8001138 <ConnectFour_CheckWin+0x28c>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	ddbc      	ble.n	8000ebe <ConnectFour_CheckWin+0x12>
	for(int rows = 0; rows < BOARD_ROWS; rows++){
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	3301      	adds	r3, #1
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	ddb3      	ble.n	8000eb8 <ConnectFour_CheckWin+0xc>
			}
		}
	}
	// vertical
	for(int rows = 0; rows < BOARD_ROWS - 3; rows++){
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	e048      	b.n	8000fe8 <ConnectFour_CheckWin+0x13c>
		for(int cols = 0; cols < BOARD_COLS; cols++){
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	e03f      	b.n	8000fdc <ConnectFour_CheckWin+0x130>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows+1][cols] == Game.currentPlayer && Game.board[rows+2][cols] == Game.currentPlayer && Game.board[rows+3][cols] == Game.currentPlayer){
 8000f5c:	4979      	ldr	r1, [pc, #484]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	4613      	mov	r3, r2
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	1a9b      	subs	r3, r3, r2
 8000f66:	18ca      	adds	r2, r1, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	4b75      	ldr	r3, [pc, #468]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000f70:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d12e      	bne.n	8000fd6 <ConnectFour_CheckWin+0x12a>
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	4971      	ldr	r1, [pc, #452]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000f7e:	4613      	mov	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	18ca      	adds	r2, r1, r3
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4413      	add	r3, r2
 8000f8a:	781a      	ldrb	r2, [r3, #0]
 8000f8c:	4b6d      	ldr	r3, [pc, #436]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000f8e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d11f      	bne.n	8000fd6 <ConnectFour_CheckWin+0x12a>
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	1c9a      	adds	r2, r3, #2
 8000f9a:	496a      	ldr	r1, [pc, #424]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	1a9b      	subs	r3, r3, r2
 8000fa2:	18ca      	adds	r2, r1, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	781a      	ldrb	r2, [r3, #0]
 8000faa:	4b66      	ldr	r3, [pc, #408]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000fac:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d110      	bne.n	8000fd6 <ConnectFour_CheckWin+0x12a>
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	1cda      	adds	r2, r3, #3
 8000fb8:	4962      	ldr	r1, [pc, #392]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	18ca      	adds	r2, r1, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000fca:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d101      	bne.n	8000fd6 <ConnectFour_CheckWin+0x12a>
				return 1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e0b0      	b.n	8001138 <ConnectFour_CheckWin+0x28c>
		for(int cols = 0; cols < BOARD_COLS; cols++){
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	ddbc      	ble.n	8000f5c <ConnectFour_CheckWin+0xb0>
	for(int rows = 0; rows < BOARD_ROWS - 3; rows++){
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	ddb3      	ble.n	8000f56 <ConnectFour_CheckWin+0xaa>
			}
		}
	}
	// diagonal upwards to right
	for(int rows = 0; rows < BOARD_ROWS - 3  ; rows++){
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e04b      	b.n	800108c <ConnectFour_CheckWin+0x1e0>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	e042      	b.n	8001080 <ConnectFour_CheckWin+0x1d4>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows+1][cols+1] == Game.currentPlayer && Game.board[rows+2][cols+2] == Game.currentPlayer && Game.board[rows+3][cols+3] == Game.currentPlayer){
 8000ffa:	4952      	ldr	r1, [pc, #328]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	4613      	mov	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	1a9b      	subs	r3, r3, r2
 8001004:	18ca      	adds	r2, r1, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	4413      	add	r3, r2
 800100a:	781a      	ldrb	r2, [r3, #0]
 800100c:	4b4d      	ldr	r3, [pc, #308]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 800100e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001012:	429a      	cmp	r2, r3
 8001014:	d131      	bne.n	800107a <ConnectFour_CheckWin+0x1ce>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1c59      	adds	r1, r3, #1
 800101e:	4849      	ldr	r0, [pc, #292]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	4403      	add	r3, r0
 8001028:	440b      	add	r3, r1
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	4b45      	ldr	r3, [pc, #276]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 800102e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001032:	429a      	cmp	r2, r3
 8001034:	d121      	bne.n	800107a <ConnectFour_CheckWin+0x1ce>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	1c9a      	adds	r2, r3, #2
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1c99      	adds	r1, r3, #2
 800103e:	4841      	ldr	r0, [pc, #260]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8001040:	4613      	mov	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	1a9b      	subs	r3, r3, r2
 8001046:	4403      	add	r3, r0
 8001048:	440b      	add	r3, r1
 800104a:	781a      	ldrb	r2, [r3, #0]
 800104c:	4b3d      	ldr	r3, [pc, #244]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 800104e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001052:	429a      	cmp	r2, r3
 8001054:	d111      	bne.n	800107a <ConnectFour_CheckWin+0x1ce>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1cda      	adds	r2, r3, #3
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1cd9      	adds	r1, r3, #3
 800105e:	4839      	ldr	r0, [pc, #228]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	4403      	add	r3, r0
 8001068:	440b      	add	r3, r1
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	4b35      	ldr	r3, [pc, #212]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 800106e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001072:	429a      	cmp	r2, r3
 8001074:	d101      	bne.n	800107a <ConnectFour_CheckWin+0x1ce>
				return 1;
 8001076:	2301      	movs	r3, #1
 8001078:	e05e      	b.n	8001138 <ConnectFour_CheckWin+0x28c>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3301      	adds	r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b03      	cmp	r3, #3
 8001084:	ddb9      	ble.n	8000ffa <ConnectFour_CheckWin+0x14e>
	for(int rows = 0; rows < BOARD_ROWS - 3  ; rows++){
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3301      	adds	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b02      	cmp	r3, #2
 8001090:	ddb0      	ble.n	8000ff4 <ConnectFour_CheckWin+0x148>
			}
		}
	}
	// diagonal downwards to right
	for(int rows = 3; rows < BOARD_ROWS; rows++){
 8001092:	2303      	movs	r3, #3
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	e04b      	b.n	8001130 <ConnectFour_CheckWin+0x284>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 8001098:	2300      	movs	r3, #0
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	e042      	b.n	8001124 <ConnectFour_CheckWin+0x278>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows-1][cols+1] == Game.currentPlayer && Game.board[rows-2][cols+2] == Game.currentPlayer && Game.board[rows-3][cols+3] == Game.currentPlayer){
 800109e:	4929      	ldr	r1, [pc, #164]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	1a9b      	subs	r3, r3, r2
 80010a8:	18ca      	adds	r2, r1, r3
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	4b24      	ldr	r3, [pc, #144]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 80010b2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d131      	bne.n	800111e <ConnectFour_CheckWin+0x272>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	1e5a      	subs	r2, r3, #1
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	1c59      	adds	r1, r3, #1
 80010c2:	4820      	ldr	r0, [pc, #128]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	4403      	add	r3, r0
 80010cc:	440b      	add	r3, r1
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 80010d2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d121      	bne.n	800111e <ConnectFour_CheckWin+0x272>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	1e9a      	subs	r2, r3, #2
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	1c99      	adds	r1, r3, #2
 80010e2:	4818      	ldr	r0, [pc, #96]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	1a9b      	subs	r3, r3, r2
 80010ea:	4403      	add	r3, r0
 80010ec:	440b      	add	r3, r1
 80010ee:	781a      	ldrb	r2, [r3, #0]
 80010f0:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 80010f2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d111      	bne.n	800111e <ConnectFour_CheckWin+0x272>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	1eda      	subs	r2, r3, #3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	1cd9      	adds	r1, r3, #3
 8001102:	4810      	ldr	r0, [pc, #64]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8001104:	4613      	mov	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	1a9b      	subs	r3, r3, r2
 800110a:	4403      	add	r3, r0
 800110c:	440b      	add	r3, r1
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <ConnectFour_CheckWin+0x298>)
 8001112:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001116:	429a      	cmp	r2, r3
 8001118:	d101      	bne.n	800111e <ConnectFour_CheckWin+0x272>
				return 1;
 800111a:	2301      	movs	r3, #1
 800111c:	e00c      	b.n	8001138 <ConnectFour_CheckWin+0x28c>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2b03      	cmp	r3, #3
 8001128:	ddb9      	ble.n	800109e <ConnectFour_CheckWin+0x1f2>
	for(int rows = 3; rows < BOARD_ROWS; rows++){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3301      	adds	r3, #1
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b05      	cmp	r3, #5
 8001134:	ddb0      	ble.n	8001098 <ConnectFour_CheckWin+0x1ec>
			}
		}
	}
	return 0;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3724      	adds	r7, #36	@ 0x24
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	2000009c 	.word	0x2000009c

08001148 <ConnectFour_CheckDraw>:

uint8_t ConnectFour_CheckDraw(void){
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
	for (int cols = 0; cols < BOARD_COLS; cols++){
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	e018      	b.n	8001186 <ConnectFour_CheckDraw+0x3e>
		for(int rows = 0; rows < BOARD_ROWS; rows++){
 8001154:	2300      	movs	r3, #0
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	e00f      	b.n	800117a <ConnectFour_CheckDraw+0x32>
			if(Game.board[rows][cols] == EMPTY_CELL){
 800115a:	4910      	ldr	r1, [pc, #64]	@ (800119c <ConnectFour_CheckDraw+0x54>)
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	4613      	mov	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	1a9b      	subs	r3, r3, r2
 8001164:	18ca      	adds	r2, r1, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <ConnectFour_CheckDraw+0x2c>
				return 0;
 8001170:	2300      	movs	r3, #0
 8001172:	e00c      	b.n	800118e <ConnectFour_CheckDraw+0x46>
		for(int rows = 0; rows < BOARD_ROWS; rows++){
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b05      	cmp	r3, #5
 800117e:	ddec      	ble.n	800115a <ConnectFour_CheckDraw+0x12>
	for (int cols = 0; cols < BOARD_COLS; cols++){
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3301      	adds	r3, #1
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b06      	cmp	r3, #6
 800118a:	dde3      	ble.n	8001154 <ConnectFour_CheckDraw+0xc>
			}
		}
	}
	return 1;
 800118c:	2301      	movs	r3, #1
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000009c 	.word	0x2000009c

080011a0 <ConnectFour_GetGameTime>:

uint8_t ConnectFour_GetGameTime(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	static uint32_t lastTick = 0;
	uint32_t currentTick = HAL_GetTick();
 80011a6:	f002 facd 	bl	8003744 <HAL_GetTick>
 80011aa:	6038      	str	r0, [r7, #0]
	uint32_t elapsedTicks;
	if (currentTick >= lastTick) {
 80011ac:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <ConnectFour_GetGameTime+0x48>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d305      	bcc.n	80011c2 <ConnectFour_GetGameTime+0x22>
		elapsedTicks = currentTick - lastTick;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <ConnectFour_GetGameTime+0x48>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	e005      	b.n	80011ce <ConnectFour_GetGameTime+0x2e>
	} else {
		elapsedTicks = ((0xFFFFFFFF - lastTick) + currentTick);
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <ConnectFour_GetGameTime+0x48>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	3b01      	subs	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
	}
	lastTick = currentTick;
 80011ce:	4a06      	ldr	r2, [pc, #24]	@ (80011e8 <ConnectFour_GetGameTime+0x48>)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	6013      	str	r3, [r2, #0]
	return (uint8_t)(elapsedTicks / 1000);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <ConnectFour_GetGameTime+0x4c>)
 80011d8:	fba2 2303 	umull	r2, r3, r2, r3
 80011dc:	099b      	lsrs	r3, r3, #6
 80011de:	b2db      	uxtb	r3, r3
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200000e8 	.word	0x200000e8
 80011ec:	10624dd3 	.word	0x10624dd3

080011f0 <enableInterruptIRQ>:
 */


#include "InterruptControl.h"

void enableInterruptIRQ(uint8_t IRQ_num){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	if (IRQ_num < 32){
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b1f      	cmp	r3, #31
 80011fe:	d804      	bhi.n	800120a <enableInterruptIRQ+0x1a>
		// *NVIC_ISER_SETENABLE = (SET << IRQ_num);
		HAL_NVIC_EnableIRQ(IRQ_num);
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f002 fc06 	bl	8003a16 <HAL_NVIC_EnableIRQ>
	}
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <disableInterruptIRQ>:

void disableInterruptIRQ(uint8_t IRQ_num){
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
	if (IRQ_num < 32){
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2b1f      	cmp	r3, #31
 8001220:	d804      	bhi.n	800122c <disableInterruptIRQ+0x1a>
		// *NVIC_ISER_CLEARENABLE = (SET << IRQ_num);
		HAL_NVIC_DisableIRQ(IRQ_num);
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	4618      	mov	r0, r3
 8001228:	f002 fc03 	bl	8003a32 <HAL_NVIC_DisableIRQ>
	}
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <clearInterruptIRQ>:
void setInterruptIRQ(uint8_t IRQ_num){


}

void clearInterruptIRQ(uint8_t IRQ_num){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	if (IRQ_num < 32){
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b1f      	cmp	r3, #31
 8001242:	d804      	bhi.n	800124e <clearInterruptIRQ+0x1a>
		// *NVIC_ISER_CLEARPENDING = (SET << IRQ_num);
		HAL_NVIC_ClearPendingIRQ(IRQ_num);
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f002 fc0c 	bl	8003a66 <HAL_NVIC_ClearPendingIRQ>
	}

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <clearInterruptEXTI>:

void clearInterruptEXTI(uint8_t IRQ_num){
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	// EXTI->PR |= (SET << IRQ_num);
	__HAL_GPIO_EXTI_CLEAR_FLAG(IRQ_num);
 8001262:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <clearInterruptEXTI+0x1c>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	6153      	str	r3, [r2, #20]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	40013c00 	.word	0x40013c00

08001278 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	@ 0x30
 800127c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	4b5a      	ldr	r3, [pc, #360]	@ (80013ec <LCD_GPIO_Init+0x174>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	4a59      	ldr	r2, [pc, #356]	@ (80013ec <LCD_GPIO_Init+0x174>)
 8001288:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800128c:	6453      	str	r3, [r2, #68]	@ 0x44
 800128e:	4b57      	ldr	r3, [pc, #348]	@ (80013ec <LCD_GPIO_Init+0x174>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	4b53      	ldr	r3, [pc, #332]	@ (80013ec <LCD_GPIO_Init+0x174>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a52      	ldr	r2, [pc, #328]	@ (80013ec <LCD_GPIO_Init+0x174>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b50      	ldr	r3, [pc, #320]	@ (80013ec <LCD_GPIO_Init+0x174>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	4b4c      	ldr	r3, [pc, #304]	@ (80013ec <LCD_GPIO_Init+0x174>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a4b      	ldr	r2, [pc, #300]	@ (80013ec <LCD_GPIO_Init+0x174>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b49      	ldr	r3, [pc, #292]	@ (80013ec <LCD_GPIO_Init+0x174>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b45      	ldr	r3, [pc, #276]	@ (80013ec <LCD_GPIO_Init+0x174>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	4a44      	ldr	r2, [pc, #272]	@ (80013ec <LCD_GPIO_Init+0x174>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e2:	4b42      	ldr	r3, [pc, #264]	@ (80013ec <LCD_GPIO_Init+0x174>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b3e      	ldr	r3, [pc, #248]	@ (80013ec <LCD_GPIO_Init+0x174>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a3d      	ldr	r2, [pc, #244]	@ (80013ec <LCD_GPIO_Init+0x174>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b3b      	ldr	r3, [pc, #236]	@ (80013ec <LCD_GPIO_Init+0x174>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b37      	ldr	r3, [pc, #220]	@ (80013ec <LCD_GPIO_Init+0x174>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a36      	ldr	r2, [pc, #216]	@ (80013ec <LCD_GPIO_Init+0x174>)
 8001314:	f043 0320 	orr.w	r3, r3, #32
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <LCD_GPIO_Init+0x174>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0320 	and.w	r3, r3, #32
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4b30      	ldr	r3, [pc, #192]	@ (80013ec <LCD_GPIO_Init+0x174>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a2f      	ldr	r2, [pc, #188]	@ (80013ec <LCD_GPIO_Init+0x174>)
 8001330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b2d      	ldr	r3, [pc, #180]	@ (80013ec <LCD_GPIO_Init+0x174>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001342:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001346:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001350:	2302      	movs	r3, #2
 8001352:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001354:	230e      	movs	r3, #14
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	4619      	mov	r1, r3
 800135e:	4824      	ldr	r0, [pc, #144]	@ (80013f0 <LCD_GPIO_Init+0x178>)
 8001360:	f002 fb90 	bl	8003a84 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001364:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001368:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	4820      	ldr	r0, [pc, #128]	@ (80013f4 <LCD_GPIO_Init+0x17c>)
 8001372:	f002 fb87 	bl	8003a84 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001376:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	481d      	ldr	r0, [pc, #116]	@ (80013f8 <LCD_GPIO_Init+0x180>)
 8001384:	f002 fb7e 	bl	8003a84 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001388:	2348      	movs	r3, #72	@ 0x48
 800138a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	481a      	ldr	r0, [pc, #104]	@ (80013fc <LCD_GPIO_Init+0x184>)
 8001394:	f002 fb76 	bl	8003a84 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001398:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800139c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	4816      	ldr	r0, [pc, #88]	@ (8001400 <LCD_GPIO_Init+0x188>)
 80013a6:	f002 fb6d 	bl	8003a84 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80013aa:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80013ae:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	4619      	mov	r1, r3
 80013b6:	4813      	ldr	r0, [pc, #76]	@ (8001404 <LCD_GPIO_Init+0x18c>)
 80013b8:	f002 fb64 	bl	8003a84 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80013bc:	2303      	movs	r3, #3
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80013c0:	2309      	movs	r3, #9
 80013c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	480a      	ldr	r0, [pc, #40]	@ (80013f4 <LCD_GPIO_Init+0x17c>)
 80013cc:	f002 fb5a 	bl	8003a84 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80013d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	4809      	ldr	r0, [pc, #36]	@ (8001404 <LCD_GPIO_Init+0x18c>)
 80013de:	f002 fb51 	bl	8003a84 <HAL_GPIO_Init>
}
 80013e2:	bf00      	nop
 80013e4:	3730      	adds	r7, #48	@ 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	40021400 	.word	0x40021400
 8001404:	40021800 	.word	0x40021800

08001408 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b090      	sub	sp, #64	@ 0x40
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001416:	23f0      	movs	r3, #240	@ 0xf0
 8001418:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800141e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001422:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001424:	2302      	movs	r3, #2
 8001426:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001428:	23ff      	movs	r3, #255	@ 0xff
 800142a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001430:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001436:	2305      	movs	r3, #5
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <LTCD_Layer_Init+0x78>)
 8001442:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001444:	23f0      	movs	r3, #240	@ 0xf0
 8001446:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001448:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800144c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	4619      	mov	r1, r3
 8001468:	4806      	ldr	r0, [pc, #24]	@ (8001484 <LTCD_Layer_Init+0x7c>)
 800146a:	f003 ff4d 	bl	8005308 <HAL_LTDC_ConfigLayer>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001474:	f000 fb99 	bl	8001baa <LCD_Error_Handler>
	}
}
 8001478:	bf00      	nop
 800147a:	3740      	adds	r7, #64	@ 0x40
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200001c8 	.word	0x200001c8
 8001484:	200000ec 	.word	0x200000ec

08001488 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800148c:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <LTCD__Init+0xb0>)
 800148e:	4a2b      	ldr	r2, [pc, #172]	@ (800153c <LTCD__Init+0xb4>)
 8001490:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001492:	4b29      	ldr	r3, [pc, #164]	@ (8001538 <LTCD__Init+0xb0>)
 8001494:	2209      	movs	r2, #9
 8001496:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001498:	4b27      	ldr	r3, [pc, #156]	@ (8001538 <LTCD__Init+0xb0>)
 800149a:	2201      	movs	r2, #1
 800149c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800149e:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <LTCD__Init+0xb0>)
 80014a0:	221d      	movs	r2, #29
 80014a2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80014a4:	4b24      	ldr	r3, [pc, #144]	@ (8001538 <LTCD__Init+0xb0>)
 80014a6:	2203      	movs	r2, #3
 80014a8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80014aa:	4b23      	ldr	r3, [pc, #140]	@ (8001538 <LTCD__Init+0xb0>)
 80014ac:	f240 120d 	movw	r2, #269	@ 0x10d
 80014b0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80014b2:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <LTCD__Init+0xb0>)
 80014b4:	f240 1243 	movw	r2, #323	@ 0x143
 80014b8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80014ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <LTCD__Init+0xb0>)
 80014bc:	f240 1217 	movw	r2, #279	@ 0x117
 80014c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001538 <LTCD__Init+0xb0>)
 80014c4:	f240 1247 	movw	r2, #327	@ 0x147
 80014c8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80014ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <LTCD__Init+0xb0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80014d2:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <LTCD__Init+0xb0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80014da:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <LTCD__Init+0xb0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <LTCD__Init+0xb8>)
 80014e4:	2208      	movs	r2, #8
 80014e6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <LTCD__Init+0xb8>)
 80014ea:	22c0      	movs	r2, #192	@ 0xc0
 80014ec:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <LTCD__Init+0xb8>)
 80014f0:	2204      	movs	r2, #4
 80014f2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <LTCD__Init+0xb8>)
 80014f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014fa:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80014fc:	4810      	ldr	r0, [pc, #64]	@ (8001540 <LTCD__Init+0xb8>)
 80014fe:	f004 fd5d 	bl	8005fbc <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <LTCD__Init+0xb0>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001508:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <LTCD__Init+0xb0>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800150e:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <LTCD__Init+0xb0>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001514:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <LTCD__Init+0xb0>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800151a:	f7ff fead 	bl	8001278 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800151e:	4806      	ldr	r0, [pc, #24]	@ (8001538 <LTCD__Init+0xb0>)
 8001520:	f003 fe22 	bl	8005168 <HAL_LTDC_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800152a:	f000 fb3e 	bl	8001baa <LCD_Error_Handler>
	 }

	ili9341_Init();
 800152e:	f000 fb59 	bl	8001be4 <ili9341_Init>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200000ec 	.word	0x200000ec
 800153c:	40016800 	.word	0x40016800
 8001540:	20000194 	.word	0x20000194

08001544 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
 800154e:	460b      	mov	r3, r1
 8001550:	80bb      	strh	r3, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001556:	88ba      	ldrh	r2, [r7, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	1a9b      	subs	r3, r3, r2
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	461a      	mov	r2, r3
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	4413      	add	r3, r2
 8001566:	4905      	ldr	r1, [pc, #20]	@ (800157c <LCD_Draw_Pixel+0x38>)
 8001568:	887a      	ldrh	r2, [r7, #2]
 800156a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	200001c8 	.word	0x200001c8

08001580 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	4604      	mov	r4, r0
 8001588:	4608      	mov	r0, r1
 800158a:	4611      	mov	r1, r2
 800158c:	461a      	mov	r2, r3
 800158e:	4623      	mov	r3, r4
 8001590:	80fb      	strh	r3, [r7, #6]
 8001592:	4603      	mov	r3, r0
 8001594:	80bb      	strh	r3, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	807b      	strh	r3, [r7, #2]
 800159a:	4613      	mov	r3, r2
 800159c:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	425b      	negs	r3, r3
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	81fb      	strh	r3, [r7, #14]
 80015a6:	e034      	b.n	8001612 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 80015a8:	887b      	ldrh	r3, [r7, #2]
 80015aa:	425b      	negs	r3, r3
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	81bb      	strh	r3, [r7, #12]
 80015b0:	e024      	b.n	80015fc <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 80015b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80015ba:	fb03 f202 	mul.w	r2, r3, r2
 80015be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015c2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80015c6:	fb01 f303 	mul.w	r3, r1, r3
 80015ca:	441a      	add	r2, r3
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	8879      	ldrh	r1, [r7, #2]
 80015d0:	fb01 f303 	mul.w	r3, r1, r3
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dc0b      	bgt.n	80015f0 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 80015d8:	89ba      	ldrh	r2, [r7, #12]
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	4413      	add	r3, r2
 80015de:	b298      	uxth	r0, r3
 80015e0:	89fa      	ldrh	r2, [r7, #14]
 80015e2:	88bb      	ldrh	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	883a      	ldrh	r2, [r7, #0]
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff ffaa 	bl	8001544 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 80015f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	81bb      	strh	r3, [r7, #12]
 80015fc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001600:	887b      	ldrh	r3, [r7, #2]
 8001602:	429a      	cmp	r2, r3
 8001604:	ddd5      	ble.n	80015b2 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8001606:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800160a:	b29b      	uxth	r3, r3
 800160c:	3301      	adds	r3, #1
 800160e:	b29b      	uxth	r3, r3
 8001610:	81fb      	strh	r3, [r7, #14]
 8001612:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001616:	887b      	ldrh	r3, [r7, #2]
 8001618:	429a      	cmp	r2, r3
 800161a:	ddc5      	ble.n	80015a8 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bd90      	pop	{r4, r7, pc}

08001626 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001626:	b590      	push	{r4, r7, lr}
 8001628:	b085      	sub	sp, #20
 800162a:	af00      	add	r7, sp, #0
 800162c:	4604      	mov	r4, r0
 800162e:	4608      	mov	r0, r1
 8001630:	4611      	mov	r1, r2
 8001632:	461a      	mov	r2, r3
 8001634:	4623      	mov	r3, r4
 8001636:	80fb      	strh	r3, [r7, #6]
 8001638:	4603      	mov	r3, r0
 800163a:	80bb      	strh	r3, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001644:	2300      	movs	r3, #0
 8001646:	81fb      	strh	r3, [r7, #14]
 8001648:	e00b      	b.n	8001662 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 800164a:	89fa      	ldrh	r2, [r7, #14]
 800164c:	88bb      	ldrh	r3, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	b299      	uxth	r1, r3
 8001652:	883a      	ldrh	r2, [r7, #0]
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff74 	bl	8001544 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800165c:	89fb      	ldrh	r3, [r7, #14]
 800165e:	3301      	adds	r3, #1
 8001660:	81fb      	strh	r3, [r7, #14]
 8001662:	89fa      	ldrh	r2, [r7, #14]
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	429a      	cmp	r2, r3
 8001668:	d3ef      	bcc.n	800164a <LCD_Draw_Vertical_Line+0x24>
  }
}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	bd90      	pop	{r4, r7, pc}

08001674 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	4604      	mov	r4, r0
 800167c:	4608      	mov	r0, r1
 800167e:	4611      	mov	r1, r2
 8001680:	461a      	mov	r2, r3
 8001682:	4623      	mov	r3, r4
 8001684:	80fb      	strh	r3, [r7, #6]
 8001686:	4603      	mov	r3, r0
 8001688:	80bb      	strh	r3, [r7, #4]
 800168a:	460b      	mov	r3, r1
 800168c:	807b      	strh	r3, [r7, #2]
 800168e:	4613      	mov	r3, r2
 8001690:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001692:	2300      	movs	r3, #0
 8001694:	81fb      	strh	r3, [r7, #14]
 8001696:	e00b      	b.n	80016b0 <LCD_Draw_Horizontal_Line+0x3c>
  {
      LCD_Draw_Pixel(i+x, y, color);
 8001698:	89fa      	ldrh	r2, [r7, #14]
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	4413      	add	r3, r2
 800169e:	b29b      	uxth	r3, r3
 80016a0:	883a      	ldrh	r2, [r7, #0]
 80016a2:	88b9      	ldrh	r1, [r7, #4]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff4d 	bl	8001544 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80016aa:	89fb      	ldrh	r3, [r7, #14]
 80016ac:	3301      	adds	r3, #1
 80016ae:	81fb      	strh	r3, [r7, #14]
 80016b0:	89fa      	ldrh	r2, [r7, #14]
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d3ef      	bcc.n	8001698 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}
	...

080016c4 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	460a      	mov	r2, r1
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	4613      	mov	r3, r2
 80016d2:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10e      	bne.n	80016f8 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	e007      	b.n	80016f0 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80016e0:	4908      	ldr	r1, [pc, #32]	@ (8001704 <LCD_Clear+0x40>)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	88ba      	ldrh	r2, [r7, #4]
 80016e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3301      	adds	r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80016f6:	d3f3      	bcc.n	80016e0 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	200001c8 	.word	0x200001c8

08001708 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001712:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <LCD_SetTextColor+0x1c>)
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	8013      	strh	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	20000000 	.word	0x20000000

08001728 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001730:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <LCD_SetFont+0x1c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	200001c4 	.word	0x200001c4

08001748 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	603a      	str	r2, [r7, #0]
 8001752:	80fb      	strh	r3, [r7, #6]
 8001754:	460b      	mov	r3, r1
 8001756:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	e04c      	b.n	8001800 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	e03f      	b.n	80017ec <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	4413      	add	r3, r2
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	4619      	mov	r1, r3
 8001778:	4b27      	ldr	r3, [pc, #156]	@ (8001818 <LCD_Draw_Char+0xd0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	889b      	ldrh	r3, [r3, #4]
 800177e:	4a27      	ldr	r2, [pc, #156]	@ (800181c <LCD_Draw_Char+0xd4>)
 8001780:	fba2 2303 	umull	r2, r3, r2, r3
 8001784:	08db      	lsrs	r3, r3, #3
 8001786:	b29b      	uxth	r3, r3
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	2280      	movs	r2, #128	@ 0x80
 800178c:	409a      	lsls	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	fa42 f303 	asr.w	r3, r2, r3
 8001794:	400b      	ands	r3, r1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d104      	bne.n	80017a4 <LCD_Draw_Char+0x5c>
 800179a:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <LCD_Draw_Char+0xd0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	889b      	ldrh	r3, [r3, #4]
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d920      	bls.n	80017e6 <LCD_Draw_Char+0x9e>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	fa42 f303 	asr.w	r3, r2, r3
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d104      	bne.n	80017c8 <LCD_Draw_Char+0x80>
 80017be:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <LCD_Draw_Char+0xd0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	889b      	ldrh	r3, [r3, #4]
 80017c4:	2b0c      	cmp	r3, #12
 80017c6:	d80e      	bhi.n	80017e6 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	4413      	add	r3, r2
 80017d0:	b298      	uxth	r0, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	88bb      	ldrh	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	b29b      	uxth	r3, r3
 80017dc:	4a10      	ldr	r2, [pc, #64]	@ (8001820 <LCD_Draw_Char+0xd8>)
 80017de:	8812      	ldrh	r2, [r2, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff feaf 	bl	8001544 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	3301      	adds	r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <LCD_Draw_Char+0xd0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	889b      	ldrh	r3, [r3, #4]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d3b8      	bcc.n	800176c <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3301      	adds	r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <LCD_Draw_Char+0xd0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	88db      	ldrh	r3, [r3, #6]
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4293      	cmp	r3, r2
 800180c:	d3ab      	bcc.n	8001766 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800180e:	bf00      	nop
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200001c4 	.word	0x200001c4
 800181c:	aaaaaaab 	.word	0xaaaaaaab
 8001820:	20000000 	.word	0x20000000

08001824 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	80fb      	strh	r3, [r7, #6]
 800182e:	460b      	mov	r3, r1
 8001830:	80bb      	strh	r3, [r7, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	3b20      	subs	r3, #32
 800183a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800183c:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <LCD_DisplayChar+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	4907      	ldr	r1, [pc, #28]	@ (8001864 <LCD_DisplayChar+0x40>)
 8001846:	6809      	ldr	r1, [r1, #0]
 8001848:	88c9      	ldrh	r1, [r1, #6]
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	441a      	add	r2, r3
 8001852:	88b9      	ldrh	r1, [r7, #4]
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff76 	bl	8001748 <LCD_Draw_Char>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200001c4 	.word	0x200001c4

08001868 <screen1>:
	LCD_DisplayChar(125,160,'r');
	LCD_DisplayChar(130,160,'l');
	LCD_DisplayChar(140,160,'d');
}

void screen1(void){
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLACK);
 800186c:	2100      	movs	r1, #0
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff ff28 	bl	80016c4 <LCD_Clear>
	// Initial game screen, select game mode
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8001874:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001878:	f7ff ff46 	bl	8001708 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 800187c:	4891      	ldr	r0, [pc, #580]	@ (8001ac4 <screen1+0x25c>)
 800187e:	f7ff ff53 	bl	8001728 <LCD_SetFont>

	LCD_DisplayChar(30, 20, 'C');
 8001882:	2243      	movs	r2, #67	@ 0x43
 8001884:	2114      	movs	r1, #20
 8001886:	201e      	movs	r0, #30
 8001888:	f7ff ffcc 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(50, 20, 'O');
 800188c:	224f      	movs	r2, #79	@ 0x4f
 800188e:	2114      	movs	r1, #20
 8001890:	2032      	movs	r0, #50	@ 0x32
 8001892:	f7ff ffc7 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(70, 20, 'N');
 8001896:	224e      	movs	r2, #78	@ 0x4e
 8001898:	2114      	movs	r1, #20
 800189a:	2046      	movs	r0, #70	@ 0x46
 800189c:	f7ff ffc2 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(90, 20, 'N');
 80018a0:	224e      	movs	r2, #78	@ 0x4e
 80018a2:	2114      	movs	r1, #20
 80018a4:	205a      	movs	r0, #90	@ 0x5a
 80018a6:	f7ff ffbd 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(110, 20, 'E');
 80018aa:	2245      	movs	r2, #69	@ 0x45
 80018ac:	2114      	movs	r1, #20
 80018ae:	206e      	movs	r0, #110	@ 0x6e
 80018b0:	f7ff ffb8 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(130, 20, 'C');
 80018b4:	2243      	movs	r2, #67	@ 0x43
 80018b6:	2114      	movs	r1, #20
 80018b8:	2082      	movs	r0, #130	@ 0x82
 80018ba:	f7ff ffb3 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(150, 20, 'T');
 80018be:	2254      	movs	r2, #84	@ 0x54
 80018c0:	2114      	movs	r1, #20
 80018c2:	2096      	movs	r0, #150	@ 0x96
 80018c4:	f7ff ffae 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(170, 20, ' ');
 80018c8:	2220      	movs	r2, #32
 80018ca:	2114      	movs	r1, #20
 80018cc:	20aa      	movs	r0, #170	@ 0xaa
 80018ce:	f7ff ffa9 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(190, 20, '4');
 80018d2:	2234      	movs	r2, #52	@ 0x34
 80018d4:	2114      	movs	r1, #20
 80018d6:	20be      	movs	r0, #190	@ 0xbe
 80018d8:	f7ff ffa4 	bl	8001824 <LCD_DisplayChar>

	LCD_DisplayChar(20,80,'S');
 80018dc:	2253      	movs	r2, #83	@ 0x53
 80018de:	2150      	movs	r1, #80	@ 0x50
 80018e0:	2014      	movs	r0, #20
 80018e2:	f7ff ff9f 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(35,80,'e');
 80018e6:	2265      	movs	r2, #101	@ 0x65
 80018e8:	2150      	movs	r1, #80	@ 0x50
 80018ea:	2023      	movs	r0, #35	@ 0x23
 80018ec:	f7ff ff9a 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(45,80,'l');
 80018f0:	226c      	movs	r2, #108	@ 0x6c
 80018f2:	2150      	movs	r1, #80	@ 0x50
 80018f4:	202d      	movs	r0, #45	@ 0x2d
 80018f6:	f7ff ff95 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(55,80,'e');
 80018fa:	2265      	movs	r2, #101	@ 0x65
 80018fc:	2150      	movs	r1, #80	@ 0x50
 80018fe:	2037      	movs	r0, #55	@ 0x37
 8001900:	f7ff ff90 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(70,80,'c');
 8001904:	2263      	movs	r2, #99	@ 0x63
 8001906:	2150      	movs	r1, #80	@ 0x50
 8001908:	2046      	movs	r0, #70	@ 0x46
 800190a:	f7ff ff8b 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(80,80,'t');
 800190e:	2274      	movs	r2, #116	@ 0x74
 8001910:	2150      	movs	r1, #80	@ 0x50
 8001912:	2050      	movs	r0, #80	@ 0x50
 8001914:	f7ff ff86 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(100,80,'G');
 8001918:	2247      	movs	r2, #71	@ 0x47
 800191a:	2150      	movs	r1, #80	@ 0x50
 800191c:	2064      	movs	r0, #100	@ 0x64
 800191e:	f7ff ff81 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(118,80,'a');
 8001922:	2261      	movs	r2, #97	@ 0x61
 8001924:	2150      	movs	r1, #80	@ 0x50
 8001926:	2076      	movs	r0, #118	@ 0x76
 8001928:	f7ff ff7c 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(135,80,'m');
 800192c:	226d      	movs	r2, #109	@ 0x6d
 800192e:	2150      	movs	r1, #80	@ 0x50
 8001930:	2087      	movs	r0, #135	@ 0x87
 8001932:	f7ff ff77 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(150,80,'e');
 8001936:	2265      	movs	r2, #101	@ 0x65
 8001938:	2150      	movs	r1, #80	@ 0x50
 800193a:	2096      	movs	r0, #150	@ 0x96
 800193c:	f7ff ff72 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(165,80,'m');
 8001940:	226d      	movs	r2, #109	@ 0x6d
 8001942:	2150      	movs	r1, #80	@ 0x50
 8001944:	20a5      	movs	r0, #165	@ 0xa5
 8001946:	f7ff ff6d 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(180,80,'o');
 800194a:	226f      	movs	r2, #111	@ 0x6f
 800194c:	2150      	movs	r1, #80	@ 0x50
 800194e:	20b4      	movs	r0, #180	@ 0xb4
 8001950:	f7ff ff68 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(192,80,'d');
 8001954:	2264      	movs	r2, #100	@ 0x64
 8001956:	2150      	movs	r1, #80	@ 0x50
 8001958:	20c0      	movs	r0, #192	@ 0xc0
 800195a:	f7ff ff63 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(205,80,'e');
 800195e:	2265      	movs	r2, #101	@ 0x65
 8001960:	2150      	movs	r1, #80	@ 0x50
 8001962:	20cd      	movs	r0, #205	@ 0xcd
 8001964:	f7ff ff5e 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(215,80,':');
 8001968:	223a      	movs	r2, #58	@ 0x3a
 800196a:	2150      	movs	r1, #80	@ 0x50
 800196c:	20d7      	movs	r0, #215	@ 0xd7
 800196e:	f7ff ff59 	bl	8001824 <LCD_DisplayChar>
	// button 1
	LCD_DisplayChar(50,150,'1');
 8001972:	2231      	movs	r2, #49	@ 0x31
 8001974:	2196      	movs	r1, #150	@ 0x96
 8001976:	2032      	movs	r0, #50	@ 0x32
 8001978:	f7ff ff54 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(70,150,'P');
 800197c:	2250      	movs	r2, #80	@ 0x50
 800197e:	2196      	movs	r1, #150	@ 0x96
 8001980:	2046      	movs	r0, #70	@ 0x46
 8001982:	f7ff ff4f 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(80,150,'l');
 8001986:	226c      	movs	r2, #108	@ 0x6c
 8001988:	2196      	movs	r1, #150	@ 0x96
 800198a:	2050      	movs	r0, #80	@ 0x50
 800198c:	f7ff ff4a 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(90,150,'a');
 8001990:	2261      	movs	r2, #97	@ 0x61
 8001992:	2196      	movs	r1, #150	@ 0x96
 8001994:	205a      	movs	r0, #90	@ 0x5a
 8001996:	f7ff ff45 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(100,150,'y');
 800199a:	2279      	movs	r2, #121	@ 0x79
 800199c:	2196      	movs	r1, #150	@ 0x96
 800199e:	2064      	movs	r0, #100	@ 0x64
 80019a0:	f7ff ff40 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(110,150,'e');
 80019a4:	2265      	movs	r2, #101	@ 0x65
 80019a6:	2196      	movs	r1, #150	@ 0x96
 80019a8:	206e      	movs	r0, #110	@ 0x6e
 80019aa:	f7ff ff3b 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(120,150,'r');
 80019ae:	2272      	movs	r2, #114	@ 0x72
 80019b0:	2196      	movs	r1, #150	@ 0x96
 80019b2:	2078      	movs	r0, #120	@ 0x78
 80019b4:	f7ff ff36 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(140,150,'M');
 80019b8:	224d      	movs	r2, #77	@ 0x4d
 80019ba:	2196      	movs	r1, #150	@ 0x96
 80019bc:	208c      	movs	r0, #140	@ 0x8c
 80019be:	f7ff ff31 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(155,150,'o');
 80019c2:	226f      	movs	r2, #111	@ 0x6f
 80019c4:	2196      	movs	r1, #150	@ 0x96
 80019c6:	209b      	movs	r0, #155	@ 0x9b
 80019c8:	f7ff ff2c 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(167,150,'d');
 80019cc:	2264      	movs	r2, #100	@ 0x64
 80019ce:	2196      	movs	r1, #150	@ 0x96
 80019d0:	20a7      	movs	r0, #167	@ 0xa7
 80019d2:	f7ff ff27 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(180,150,'e');
 80019d6:	2265      	movs	r2, #101	@ 0x65
 80019d8:	2196      	movs	r1, #150	@ 0x96
 80019da:	20b4      	movs	r0, #180	@ 0xb4
 80019dc:	f7ff ff22 	bl	8001824 <LCD_DisplayChar>
	LCD_Draw_Vertical_Line(45,145,35,LCD_COLOR_WHITE);
 80019e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019e4:	2223      	movs	r2, #35	@ 0x23
 80019e6:	2191      	movs	r1, #145	@ 0x91
 80019e8:	202d      	movs	r0, #45	@ 0x2d
 80019ea:	f7ff fe1c 	bl	8001626 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(195,145,35,LCD_COLOR_WHITE);
 80019ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019f2:	2223      	movs	r2, #35	@ 0x23
 80019f4:	2191      	movs	r1, #145	@ 0x91
 80019f6:	20c3      	movs	r0, #195	@ 0xc3
 80019f8:	f7ff fe15 	bl	8001626 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(45,145,150,LCD_COLOR_WHITE);
 80019fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a00:	2296      	movs	r2, #150	@ 0x96
 8001a02:	2191      	movs	r1, #145	@ 0x91
 8001a04:	202d      	movs	r0, #45	@ 0x2d
 8001a06:	f7ff fe35 	bl	8001674 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(45,180,150,LCD_COLOR_WHITE);
 8001a0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a0e:	2296      	movs	r2, #150	@ 0x96
 8001a10:	21b4      	movs	r1, #180	@ 0xb4
 8001a12:	202d      	movs	r0, #45	@ 0x2d
 8001a14:	f7ff fe2e 	bl	8001674 <LCD_Draw_Horizontal_Line>

	// button 2
	LCD_DisplayChar(50,220,'2');
 8001a18:	2232      	movs	r2, #50	@ 0x32
 8001a1a:	21dc      	movs	r1, #220	@ 0xdc
 8001a1c:	2032      	movs	r0, #50	@ 0x32
 8001a1e:	f7ff ff01 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(70,220,'P');
 8001a22:	2250      	movs	r2, #80	@ 0x50
 8001a24:	21dc      	movs	r1, #220	@ 0xdc
 8001a26:	2046      	movs	r0, #70	@ 0x46
 8001a28:	f7ff fefc 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(80,220,'l');
 8001a2c:	226c      	movs	r2, #108	@ 0x6c
 8001a2e:	21dc      	movs	r1, #220	@ 0xdc
 8001a30:	2050      	movs	r0, #80	@ 0x50
 8001a32:	f7ff fef7 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(90,220,'a');
 8001a36:	2261      	movs	r2, #97	@ 0x61
 8001a38:	21dc      	movs	r1, #220	@ 0xdc
 8001a3a:	205a      	movs	r0, #90	@ 0x5a
 8001a3c:	f7ff fef2 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(100,220,'y');
 8001a40:	2279      	movs	r2, #121	@ 0x79
 8001a42:	21dc      	movs	r1, #220	@ 0xdc
 8001a44:	2064      	movs	r0, #100	@ 0x64
 8001a46:	f7ff feed 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(110,220,'e');
 8001a4a:	2265      	movs	r2, #101	@ 0x65
 8001a4c:	21dc      	movs	r1, #220	@ 0xdc
 8001a4e:	206e      	movs	r0, #110	@ 0x6e
 8001a50:	f7ff fee8 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(120,220,'r');
 8001a54:	2272      	movs	r2, #114	@ 0x72
 8001a56:	21dc      	movs	r1, #220	@ 0xdc
 8001a58:	2078      	movs	r0, #120	@ 0x78
 8001a5a:	f7ff fee3 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(140,220,'M');
 8001a5e:	224d      	movs	r2, #77	@ 0x4d
 8001a60:	21dc      	movs	r1, #220	@ 0xdc
 8001a62:	208c      	movs	r0, #140	@ 0x8c
 8001a64:	f7ff fede 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(155,220,'o');
 8001a68:	226f      	movs	r2, #111	@ 0x6f
 8001a6a:	21dc      	movs	r1, #220	@ 0xdc
 8001a6c:	209b      	movs	r0, #155	@ 0x9b
 8001a6e:	f7ff fed9 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(167,220,'d');
 8001a72:	2264      	movs	r2, #100	@ 0x64
 8001a74:	21dc      	movs	r1, #220	@ 0xdc
 8001a76:	20a7      	movs	r0, #167	@ 0xa7
 8001a78:	f7ff fed4 	bl	8001824 <LCD_DisplayChar>
	LCD_DisplayChar(180,220,'e');
 8001a7c:	2265      	movs	r2, #101	@ 0x65
 8001a7e:	21dc      	movs	r1, #220	@ 0xdc
 8001a80:	20b4      	movs	r0, #180	@ 0xb4
 8001a82:	f7ff fecf 	bl	8001824 <LCD_DisplayChar>
	LCD_Draw_Vertical_Line(45,215,35,LCD_COLOR_WHITE);
 8001a86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a8a:	2223      	movs	r2, #35	@ 0x23
 8001a8c:	21d7      	movs	r1, #215	@ 0xd7
 8001a8e:	202d      	movs	r0, #45	@ 0x2d
 8001a90:	f7ff fdc9 	bl	8001626 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(195,215,35,LCD_COLOR_WHITE);
 8001a94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a98:	2223      	movs	r2, #35	@ 0x23
 8001a9a:	21d7      	movs	r1, #215	@ 0xd7
 8001a9c:	20c3      	movs	r0, #195	@ 0xc3
 8001a9e:	f7ff fdc2 	bl	8001626 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(45,215,150,LCD_COLOR_WHITE);
 8001aa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001aa6:	2296      	movs	r2, #150	@ 0x96
 8001aa8:	21d7      	movs	r1, #215	@ 0xd7
 8001aaa:	202d      	movs	r0, #45	@ 0x2d
 8001aac:	f7ff fde2 	bl	8001674 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(45,250,150,LCD_COLOR_WHITE);
 8001ab0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ab4:	2296      	movs	r2, #150	@ 0x96
 8001ab6:	21fa      	movs	r1, #250	@ 0xfa
 8001ab8:	202d      	movs	r0, #45	@ 0x2d
 8001aba:	f7ff fddb 	bl	8001674 <LCD_Draw_Horizontal_Line>

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <screen2>:

void screen2(void){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLUE);
 8001acc:	211f      	movs	r1, #31
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff fdf8 	bl	80016c4 <LCD_Clear>
	// Gameplay
	// Draw vertical lines in connect four grid screen is 320 x 240
	LCD_Draw_Vertical_Line(1,50,204, LCD_COLOR_WHITE);
 8001ad4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ad8:	22cc      	movs	r2, #204	@ 0xcc
 8001ada:	2132      	movs	r1, #50	@ 0x32
 8001adc:	2001      	movs	r0, #1
 8001ade:	f7ff fda2 	bl	8001626 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(35,50,204, LCD_COLOR_WHITE);
 8001ae2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ae6:	22cc      	movs	r2, #204	@ 0xcc
 8001ae8:	2132      	movs	r1, #50	@ 0x32
 8001aea:	2023      	movs	r0, #35	@ 0x23
 8001aec:	f7ff fd9b 	bl	8001626 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(69,50,204, LCD_COLOR_WHITE);
 8001af0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001af4:	22cc      	movs	r2, #204	@ 0xcc
 8001af6:	2132      	movs	r1, #50	@ 0x32
 8001af8:	2045      	movs	r0, #69	@ 0x45
 8001afa:	f7ff fd94 	bl	8001626 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(103,50,204, LCD_COLOR_WHITE);
 8001afe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b02:	22cc      	movs	r2, #204	@ 0xcc
 8001b04:	2132      	movs	r1, #50	@ 0x32
 8001b06:	2067      	movs	r0, #103	@ 0x67
 8001b08:	f7ff fd8d 	bl	8001626 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(137,50,204, LCD_COLOR_WHITE);
 8001b0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b10:	22cc      	movs	r2, #204	@ 0xcc
 8001b12:	2132      	movs	r1, #50	@ 0x32
 8001b14:	2089      	movs	r0, #137	@ 0x89
 8001b16:	f7ff fd86 	bl	8001626 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(171,50,204, LCD_COLOR_WHITE);
 8001b1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b1e:	22cc      	movs	r2, #204	@ 0xcc
 8001b20:	2132      	movs	r1, #50	@ 0x32
 8001b22:	20ab      	movs	r0, #171	@ 0xab
 8001b24:	f7ff fd7f 	bl	8001626 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(205,50,204, LCD_COLOR_WHITE);
 8001b28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b2c:	22cc      	movs	r2, #204	@ 0xcc
 8001b2e:	2132      	movs	r1, #50	@ 0x32
 8001b30:	20cd      	movs	r0, #205	@ 0xcd
 8001b32:	f7ff fd78 	bl	8001626 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(239,50,204, LCD_COLOR_WHITE);
 8001b36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b3a:	22cc      	movs	r2, #204	@ 0xcc
 8001b3c:	2132      	movs	r1, #50	@ 0x32
 8001b3e:	20ef      	movs	r0, #239	@ 0xef
 8001b40:	f7ff fd71 	bl	8001626 <LCD_Draw_Vertical_Line>
	// draw horizontal lines in connected four grid
	LCD_Draw_Horizontal_Line(0,50,240,LCD_COLOR_WHITE);
 8001b44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b48:	22f0      	movs	r2, #240	@ 0xf0
 8001b4a:	2132      	movs	r1, #50	@ 0x32
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff fd91 	bl	8001674 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,84,240,LCD_COLOR_WHITE);
 8001b52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b56:	22f0      	movs	r2, #240	@ 0xf0
 8001b58:	2154      	movs	r1, #84	@ 0x54
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f7ff fd8a 	bl	8001674 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,118,240,LCD_COLOR_WHITE);
 8001b60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b64:	22f0      	movs	r2, #240	@ 0xf0
 8001b66:	2176      	movs	r1, #118	@ 0x76
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f7ff fd83 	bl	8001674 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,152,240,LCD_COLOR_WHITE);
 8001b6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b72:	22f0      	movs	r2, #240	@ 0xf0
 8001b74:	2198      	movs	r1, #152	@ 0x98
 8001b76:	2000      	movs	r0, #0
 8001b78:	f7ff fd7c 	bl	8001674 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,186,240,LCD_COLOR_WHITE);
 8001b7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b80:	22f0      	movs	r2, #240	@ 0xf0
 8001b82:	21ba      	movs	r1, #186	@ 0xba
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff fd75 	bl	8001674 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,220,240,LCD_COLOR_WHITE);
 8001b8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b8e:	22f0      	movs	r2, #240	@ 0xf0
 8001b90:	21dc      	movs	r1, #220	@ 0xdc
 8001b92:	2000      	movs	r0, #0
 8001b94:	f7ff fd6e 	bl	8001674 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,254,240,LCD_COLOR_WHITE);
 8001b98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b9c:	22f0      	movs	r2, #240	@ 0xf0
 8001b9e:	21fe      	movs	r1, #254	@ 0xfe
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff fd67 	bl	8001674 <LCD_Draw_Horizontal_Line>
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bae:	b672      	cpsid	i
}
 8001bb0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb2:	bf00      	nop
 8001bb4:	e7fd      	b.n	8001bb2 <LCD_Error_Handler+0x8>

08001bb6 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001bba:	f001 f92e 	bl	8002e1a <STMPE811_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d001      	beq.n	8001bc8 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <InitializeLCDTouch+0xe>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f001 f9d8 	bl	8002f8a <STMPE811_ReadTouch>
 8001bda:	4603      	mov	r3, r0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001be8:	f000 f9fe 	bl	8001fe8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001bec:	20ca      	movs	r0, #202	@ 0xca
 8001bee:	f000 f943 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001bf2:	20c3      	movs	r0, #195	@ 0xc3
 8001bf4:	f000 f94d 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001bf8:	2008      	movs	r0, #8
 8001bfa:	f000 f94a 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001bfe:	2050      	movs	r0, #80	@ 0x50
 8001c00:	f000 f947 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001c04:	20cf      	movs	r0, #207	@ 0xcf
 8001c06:	f000 f937 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f000 f941 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001c10:	20c1      	movs	r0, #193	@ 0xc1
 8001c12:	f000 f93e 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001c16:	2030      	movs	r0, #48	@ 0x30
 8001c18:	f000 f93b 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001c1c:	20ed      	movs	r0, #237	@ 0xed
 8001c1e:	f000 f92b 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001c22:	2064      	movs	r0, #100	@ 0x64
 8001c24:	f000 f935 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 f932 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001c2e:	2012      	movs	r0, #18
 8001c30:	f000 f92f 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001c34:	2081      	movs	r0, #129	@ 0x81
 8001c36:	f000 f92c 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001c3a:	20e8      	movs	r0, #232	@ 0xe8
 8001c3c:	f000 f91c 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001c40:	2085      	movs	r0, #133	@ 0x85
 8001c42:	f000 f926 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f000 f923 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001c4c:	2078      	movs	r0, #120	@ 0x78
 8001c4e:	f000 f920 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001c52:	20cb      	movs	r0, #203	@ 0xcb
 8001c54:	f000 f910 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001c58:	2039      	movs	r0, #57	@ 0x39
 8001c5a:	f000 f91a 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001c5e:	202c      	movs	r0, #44	@ 0x2c
 8001c60:	f000 f917 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c64:	2000      	movs	r0, #0
 8001c66:	f000 f914 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001c6a:	2034      	movs	r0, #52	@ 0x34
 8001c6c:	f000 f911 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001c70:	2002      	movs	r0, #2
 8001c72:	f000 f90e 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001c76:	20f7      	movs	r0, #247	@ 0xf7
 8001c78:	f000 f8fe 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001c7c:	2020      	movs	r0, #32
 8001c7e:	f000 f908 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001c82:	20ea      	movs	r0, #234	@ 0xea
 8001c84:	f000 f8f8 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f000 f902 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 f8ff 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001c94:	20b1      	movs	r0, #177	@ 0xb1
 8001c96:	f000 f8ef 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f000 f8f9 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001ca0:	201b      	movs	r0, #27
 8001ca2:	f000 f8f6 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001ca6:	20b6      	movs	r0, #182	@ 0xb6
 8001ca8:	f000 f8e6 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001cac:	200a      	movs	r0, #10
 8001cae:	f000 f8f0 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001cb2:	20a2      	movs	r0, #162	@ 0xa2
 8001cb4:	f000 f8ed 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001cb8:	20c0      	movs	r0, #192	@ 0xc0
 8001cba:	f000 f8dd 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001cbe:	2010      	movs	r0, #16
 8001cc0:	f000 f8e7 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001cc4:	20c1      	movs	r0, #193	@ 0xc1
 8001cc6:	f000 f8d7 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001cca:	2010      	movs	r0, #16
 8001ccc:	f000 f8e1 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001cd0:	20c5      	movs	r0, #197	@ 0xc5
 8001cd2:	f000 f8d1 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001cd6:	2045      	movs	r0, #69	@ 0x45
 8001cd8:	f000 f8db 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001cdc:	2015      	movs	r0, #21
 8001cde:	f000 f8d8 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001ce2:	20c7      	movs	r0, #199	@ 0xc7
 8001ce4:	f000 f8c8 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001ce8:	2090      	movs	r0, #144	@ 0x90
 8001cea:	f000 f8d2 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001cee:	2036      	movs	r0, #54	@ 0x36
 8001cf0:	f000 f8c2 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001cf4:	20c8      	movs	r0, #200	@ 0xc8
 8001cf6:	f000 f8cc 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001cfa:	20f2      	movs	r0, #242	@ 0xf2
 8001cfc:	f000 f8bc 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f000 f8c6 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001d06:	20b0      	movs	r0, #176	@ 0xb0
 8001d08:	f000 f8b6 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001d0c:	20c2      	movs	r0, #194	@ 0xc2
 8001d0e:	f000 f8c0 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001d12:	20b6      	movs	r0, #182	@ 0xb6
 8001d14:	f000 f8b0 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001d18:	200a      	movs	r0, #10
 8001d1a:	f000 f8ba 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001d1e:	20a7      	movs	r0, #167	@ 0xa7
 8001d20:	f000 f8b7 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001d24:	2027      	movs	r0, #39	@ 0x27
 8001d26:	f000 f8b4 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001d2a:	2004      	movs	r0, #4
 8001d2c:	f000 f8b1 	bl	8001e92 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001d30:	202a      	movs	r0, #42	@ 0x2a
 8001d32:	f000 f8a1 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f000 f8ab 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f000 f8a8 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f000 f8a5 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001d48:	20ef      	movs	r0, #239	@ 0xef
 8001d4a:	f000 f8a2 	bl	8001e92 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001d4e:	202b      	movs	r0, #43	@ 0x2b
 8001d50:	f000 f892 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f000 f89c 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f000 f899 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f000 f896 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001d66:	203f      	movs	r0, #63	@ 0x3f
 8001d68:	f000 f893 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001d6c:	20f6      	movs	r0, #246	@ 0xf6
 8001d6e:	f000 f883 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f000 f88d 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f000 f88a 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001d7e:	2006      	movs	r0, #6
 8001d80:	f000 f887 	bl	8001e92 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001d84:	202c      	movs	r0, #44	@ 0x2c
 8001d86:	f000 f877 	bl	8001e78 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001d8a:	20c8      	movs	r0, #200	@ 0xc8
 8001d8c:	f000 f9e8 	bl	8002160 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001d90:	2026      	movs	r0, #38	@ 0x26
 8001d92:	f000 f871 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001d96:	2001      	movs	r0, #1
 8001d98:	f000 f87b 	bl	8001e92 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001d9c:	20e0      	movs	r0, #224	@ 0xe0
 8001d9e:	f000 f86b 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001da2:	200f      	movs	r0, #15
 8001da4:	f000 f875 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001da8:	2029      	movs	r0, #41	@ 0x29
 8001daa:	f000 f872 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001dae:	2024      	movs	r0, #36	@ 0x24
 8001db0:	f000 f86f 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001db4:	200c      	movs	r0, #12
 8001db6:	f000 f86c 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001dba:	200e      	movs	r0, #14
 8001dbc:	f000 f869 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001dc0:	2009      	movs	r0, #9
 8001dc2:	f000 f866 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001dc6:	204e      	movs	r0, #78	@ 0x4e
 8001dc8:	f000 f863 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001dcc:	2078      	movs	r0, #120	@ 0x78
 8001dce:	f000 f860 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001dd2:	203c      	movs	r0, #60	@ 0x3c
 8001dd4:	f000 f85d 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001dd8:	2009      	movs	r0, #9
 8001dda:	f000 f85a 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001dde:	2013      	movs	r0, #19
 8001de0:	f000 f857 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001de4:	2005      	movs	r0, #5
 8001de6:	f000 f854 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001dea:	2017      	movs	r0, #23
 8001dec:	f000 f851 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001df0:	2011      	movs	r0, #17
 8001df2:	f000 f84e 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f000 f84b 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001dfc:	20e1      	movs	r0, #225	@ 0xe1
 8001dfe:	f000 f83b 	bl	8001e78 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f000 f845 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001e08:	2016      	movs	r0, #22
 8001e0a:	f000 f842 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001e0e:	201b      	movs	r0, #27
 8001e10:	f000 f83f 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001e14:	2004      	movs	r0, #4
 8001e16:	f000 f83c 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001e1a:	2011      	movs	r0, #17
 8001e1c:	f000 f839 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001e20:	2007      	movs	r0, #7
 8001e22:	f000 f836 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001e26:	2031      	movs	r0, #49	@ 0x31
 8001e28:	f000 f833 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001e2c:	2033      	movs	r0, #51	@ 0x33
 8001e2e:	f000 f830 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001e32:	2042      	movs	r0, #66	@ 0x42
 8001e34:	f000 f82d 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001e38:	2005      	movs	r0, #5
 8001e3a:	f000 f82a 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001e3e:	200c      	movs	r0, #12
 8001e40:	f000 f827 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001e44:	200a      	movs	r0, #10
 8001e46:	f000 f824 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001e4a:	2028      	movs	r0, #40	@ 0x28
 8001e4c:	f000 f821 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001e50:	202f      	movs	r0, #47	@ 0x2f
 8001e52:	f000 f81e 	bl	8001e92 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001e56:	200f      	movs	r0, #15
 8001e58:	f000 f81b 	bl	8001e92 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001e5c:	2011      	movs	r0, #17
 8001e5e:	f000 f80b 	bl	8001e78 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001e62:	20c8      	movs	r0, #200	@ 0xc8
 8001e64:	f000 f97c 	bl	8002160 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001e68:	2029      	movs	r0, #41	@ 0x29
 8001e6a:	f000 f805 	bl	8001e78 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001e6e:	202c      	movs	r0, #44	@ 0x2c
 8001e70:	f000 f802 	bl	8001e78 <ili9341_Write_Reg>
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 f949 	bl	800211c <LCD_IO_WriteReg>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f91a 	bl	80020d8 <LCD_IO_WriteData>
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001eb0:	4819      	ldr	r0, [pc, #100]	@ (8001f18 <SPI_Init+0x6c>)
 8001eb2:	f004 fcb8 	bl	8006826 <HAL_SPI_GetState>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d12b      	bne.n	8001f14 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001ebc:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <SPI_Init+0x6c>)
 8001ebe:	4a17      	ldr	r2, [pc, #92]	@ (8001f1c <SPI_Init+0x70>)
 8001ec0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <SPI_Init+0x6c>)
 8001ec4:	2218      	movs	r2, #24
 8001ec6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001ec8:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <SPI_Init+0x6c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001ece:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <SPI_Init+0x6c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001ed4:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <SPI_Init+0x6c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001eda:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <SPI_Init+0x6c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f18 <SPI_Init+0x6c>)
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <SPI_Init+0x6c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001eec:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <SPI_Init+0x6c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <SPI_Init+0x6c>)
 8001ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ef8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001efa:	4b07      	ldr	r3, [pc, #28]	@ (8001f18 <SPI_Init+0x6c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <SPI_Init+0x6c>)
 8001f02:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f06:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001f08:	4803      	ldr	r0, [pc, #12]	@ (8001f18 <SPI_Init+0x6c>)
 8001f0a:	f000 f833 	bl	8001f74 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001f0e:	4802      	ldr	r0, [pc, #8]	@ (8001f18 <SPI_Init+0x6c>)
 8001f10:	f004 fa94 	bl	800643c <HAL_SPI_Init>
  }
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200259c8 	.word	0x200259c8
 8001f1c:	40015000 	.word	0x40015000

08001f20 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <SPI_Write+0x34>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	1db9      	adds	r1, r7, #6
 8001f34:	2201      	movs	r2, #1
 8001f36:	4808      	ldr	r0, [pc, #32]	@ (8001f58 <SPI_Write+0x38>)
 8001f38:	f004 fb31 	bl	800659e <HAL_SPI_Transmit>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001f46:	f000 f809 	bl	8001f5c <SPI_Error>
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	2000000c 	.word	0x2000000c
 8001f58:	200259c8 	.word	0x200259c8

08001f5c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001f60:	4803      	ldr	r0, [pc, #12]	@ (8001f70 <SPI_Error+0x14>)
 8001f62:	f004 faf4 	bl	800654e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001f66:	f7ff ffa1 	bl	8001eac <SPI_Init>
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200259c8 	.word	0x200259c8

08001f74 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	@ 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <SPI_MspInit+0x6c>)
 8001f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f84:	4a16      	ldr	r2, [pc, #88]	@ (8001fe0 <SPI_MspInit+0x6c>)
 8001f86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f8c:	4b14      	ldr	r3, [pc, #80]	@ (8001fe0 <SPI_MspInit+0x6c>)
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <SPI_MspInit+0x6c>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe0 <SPI_MspInit+0x6c>)
 8001fa2:	f043 0320 	orr.w	r3, r3, #32
 8001fa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <SPI_MspInit+0x6c>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001fb4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001fc6:	2305      	movs	r3, #5
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4804      	ldr	r0, [pc, #16]	@ (8001fe4 <SPI_MspInit+0x70>)
 8001fd2:	f001 fd57 	bl	8003a84 <HAL_GPIO_Init>
}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	@ 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40021400 	.word	0x40021400

08001fe8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001fee:	4b36      	ldr	r3, [pc, #216]	@ (80020c8 <LCD_IO_Init+0xe0>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d164      	bne.n	80020c0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001ff6:	4b34      	ldr	r3, [pc, #208]	@ (80020c8 <LCD_IO_Init+0xe0>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	4b32      	ldr	r3, [pc, #200]	@ (80020cc <LCD_IO_Init+0xe4>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002004:	4a31      	ldr	r2, [pc, #196]	@ (80020cc <LCD_IO_Init+0xe4>)
 8002006:	f043 0308 	orr.w	r3, r3, #8
 800200a:	6313      	str	r3, [r2, #48]	@ 0x30
 800200c:	4b2f      	ldr	r3, [pc, #188]	@ (80020cc <LCD_IO_Init+0xe4>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002018:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800201c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800201e:	2301      	movs	r3, #1
 8002020:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002026:	2302      	movs	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	4619      	mov	r1, r3
 8002030:	4827      	ldr	r0, [pc, #156]	@ (80020d0 <LCD_IO_Init+0xe8>)
 8002032:	f001 fd27 	bl	8003a84 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <LCD_IO_Init+0xe4>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	4a23      	ldr	r2, [pc, #140]	@ (80020cc <LCD_IO_Init+0xe4>)
 8002040:	f043 0308 	orr.w	r3, r3, #8
 8002044:	6313      	str	r3, [r2, #48]	@ 0x30
 8002046:	4b21      	ldr	r3, [pc, #132]	@ (80020cc <LCD_IO_Init+0xe4>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002052:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002056:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002058:	2301      	movs	r3, #1
 800205a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002060:	2302      	movs	r3, #2
 8002062:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	4619      	mov	r1, r3
 800206a:	4819      	ldr	r0, [pc, #100]	@ (80020d0 <LCD_IO_Init+0xe8>)
 800206c:	f001 fd0a 	bl	8003a84 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <LCD_IO_Init+0xe4>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	4a14      	ldr	r2, [pc, #80]	@ (80020cc <LCD_IO_Init+0xe4>)
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002080:	4b12      	ldr	r3, [pc, #72]	@ (80020cc <LCD_IO_Init+0xe4>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800208c:	2304      	movs	r3, #4
 800208e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002090:	2301      	movs	r3, #1
 8002092:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002098:	2302      	movs	r3, #2
 800209a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800209c:	f107 030c 	add.w	r3, r7, #12
 80020a0:	4619      	mov	r1, r3
 80020a2:	480c      	ldr	r0, [pc, #48]	@ (80020d4 <LCD_IO_Init+0xec>)
 80020a4:	f001 fcee 	bl	8003a84 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80020a8:	2200      	movs	r2, #0
 80020aa:	2104      	movs	r1, #4
 80020ac:	4809      	ldr	r0, [pc, #36]	@ (80020d4 <LCD_IO_Init+0xec>)
 80020ae:	f001 ffa1 	bl	8003ff4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80020b2:	2201      	movs	r2, #1
 80020b4:	2104      	movs	r1, #4
 80020b6:	4807      	ldr	r0, [pc, #28]	@ (80020d4 <LCD_IO_Init+0xec>)
 80020b8:	f001 ff9c 	bl	8003ff4 <HAL_GPIO_WritePin>

    SPI_Init();
 80020bc:	f7ff fef6 	bl	8001eac <SPI_Init>
  }
}
 80020c0:	bf00      	nop
 80020c2:	3720      	adds	r7, #32
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20025a20 	.word	0x20025a20
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020c00 	.word	0x40020c00
 80020d4:	40020800 	.word	0x40020800

080020d8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80020e2:	2201      	movs	r2, #1
 80020e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020e8:	480a      	ldr	r0, [pc, #40]	@ (8002114 <LCD_IO_WriteData+0x3c>)
 80020ea:	f001 ff83 	bl	8003ff4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80020ee:	2200      	movs	r2, #0
 80020f0:	2104      	movs	r1, #4
 80020f2:	4809      	ldr	r0, [pc, #36]	@ (8002118 <LCD_IO_WriteData+0x40>)
 80020f4:	f001 ff7e 	bl	8003ff4 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff10 	bl	8001f20 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002100:	2201      	movs	r2, #1
 8002102:	2104      	movs	r1, #4
 8002104:	4804      	ldr	r0, [pc, #16]	@ (8002118 <LCD_IO_WriteData+0x40>)
 8002106:	f001 ff75 	bl	8003ff4 <HAL_GPIO_WritePin>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40020c00 	.word	0x40020c00
 8002118:	40020800 	.word	0x40020800

0800211c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002126:	2200      	movs	r2, #0
 8002128:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800212c:	480a      	ldr	r0, [pc, #40]	@ (8002158 <LCD_IO_WriteReg+0x3c>)
 800212e:	f001 ff61 	bl	8003ff4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002132:	2200      	movs	r2, #0
 8002134:	2104      	movs	r1, #4
 8002136:	4809      	ldr	r0, [pc, #36]	@ (800215c <LCD_IO_WriteReg+0x40>)
 8002138:	f001 ff5c 	bl	8003ff4 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	b29b      	uxth	r3, r3
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff feed 	bl	8001f20 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002146:	2201      	movs	r2, #1
 8002148:	2104      	movs	r1, #4
 800214a:	4804      	ldr	r0, [pc, #16]	@ (800215c <LCD_IO_WriteReg+0x40>)
 800214c:	f001 ff52 	bl	8003ff4 <HAL_GPIO_WritePin>
}
 8002150:	bf00      	nop
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40020800 	.word	0x40020800

08002160 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f001 faf7 	bl	800375c <HAL_Delay>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800217a:	f001 fa7d 	bl	8003678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800217e:	f000 f815 	bl	80021ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002182:	f000 fa05 	bl	8002590 <MX_GPIO_Init>
  MX_LTDC_Init();
 8002186:	f000 f8bb 	bl	8002300 <MX_LTDC_Init>
  MX_RNG_Init();
 800218a:	f000 f96b 	bl	8002464 <MX_RNG_Init>
  MX_TIM2_Init();
 800218e:	f000 f9b3 	bl	80024f8 <MX_TIM2_Init>
  MX_SPI5_Init();
 8002192:	f000 f97b 	bl	800248c <MX_SPI5_Init>
  MX_I2C3_Init();
 8002196:	f000 f873 	bl	8002280 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 800219a:	f7fe f9f1 	bl	8000580 <ApplicationInit>
  //LCD_Visual_Demo();
  ConnectFour_GameLoop();
 800219e:	f7fe fb61 	bl	8000864 <ConnectFour_GameLoop>

    /* USER CODE END 2 */
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
  LCD_Touch_Polling_Demo(); // This function Will not return
 80021a2:	f7fe fa07 	bl	80005b4 <LCD_Touch_Polling_Demo>
#endif
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021a6:	bf00      	nop
 80021a8:	e7fd      	b.n	80021a6 <main+0x30>
	...

080021ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b094      	sub	sp, #80	@ 0x50
 80021b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021b2:	f107 0320 	add.w	r3, r7, #32
 80021b6:	2230      	movs	r2, #48	@ 0x30
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f005 f900 	bl	80073c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	4b28      	ldr	r3, [pc, #160]	@ (8002278 <SystemClock_Config+0xcc>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d8:	4a27      	ldr	r2, [pc, #156]	@ (8002278 <SystemClock_Config+0xcc>)
 80021da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021de:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e0:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <SystemClock_Config+0xcc>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ec:	2300      	movs	r3, #0
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	4b22      	ldr	r3, [pc, #136]	@ (800227c <SystemClock_Config+0xd0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a21      	ldr	r2, [pc, #132]	@ (800227c <SystemClock_Config+0xd0>)
 80021f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b1f      	ldr	r3, [pc, #124]	@ (800227c <SystemClock_Config+0xd0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002208:	2301      	movs	r3, #1
 800220a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800220c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002212:	2302      	movs	r3, #2
 8002214:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002216:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800221a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800221c:	2308      	movs	r3, #8
 800221e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002220:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002224:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002226:	2302      	movs	r3, #2
 8002228:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800222a:	2307      	movs	r3, #7
 800222c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800222e:	f107 0320 	add.w	r3, r7, #32
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fa3e 	bl	80056b4 <HAL_RCC_OscConfig>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800223e:	f000 fb55 	bl	80028ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002242:	230f      	movs	r3, #15
 8002244:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002246:	2302      	movs	r3, #2
 8002248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800224e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002252:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002254:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002258:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	2105      	movs	r1, #5
 8002260:	4618      	mov	r0, r3
 8002262:	f003 fc9f 	bl	8005ba4 <HAL_RCC_ClockConfig>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800226c:	f000 fb3e 	bl	80028ec <Error_Handler>
  }
}
 8002270:	bf00      	nop
 8002272:	3750      	adds	r7, #80	@ 0x50
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	40007000 	.word	0x40007000

08002280 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002284:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <MX_I2C3_Init+0x74>)
 8002286:	4a1c      	ldr	r2, [pc, #112]	@ (80022f8 <MX_I2C3_Init+0x78>)
 8002288:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800228a:	4b1a      	ldr	r3, [pc, #104]	@ (80022f4 <MX_I2C3_Init+0x74>)
 800228c:	4a1b      	ldr	r2, [pc, #108]	@ (80022fc <MX_I2C3_Init+0x7c>)
 800228e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002290:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <MX_I2C3_Init+0x74>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002296:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <MX_I2C3_Init+0x74>)
 8002298:	2200      	movs	r2, #0
 800229a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800229c:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <MX_I2C3_Init+0x74>)
 800229e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022a2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022a4:	4b13      	ldr	r3, [pc, #76]	@ (80022f4 <MX_I2C3_Init+0x74>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80022aa:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <MX_I2C3_Init+0x74>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022b0:	4b10      	ldr	r3, [pc, #64]	@ (80022f4 <MX_I2C3_Init+0x74>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022b6:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <MX_I2C3_Init+0x74>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80022bc:	480d      	ldr	r0, [pc, #52]	@ (80022f4 <MX_I2C3_Init+0x74>)
 80022be:	f001 feb3 	bl	8004028 <HAL_I2C_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80022c8:	f000 fb10 	bl	80028ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022cc:	2100      	movs	r1, #0
 80022ce:	4809      	ldr	r0, [pc, #36]	@ (80022f4 <MX_I2C3_Init+0x74>)
 80022d0:	f002 fece 	bl	8005070 <HAL_I2CEx_ConfigAnalogFilter>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80022da:	f000 fb07 	bl	80028ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80022de:	2100      	movs	r1, #0
 80022e0:	4804      	ldr	r0, [pc, #16]	@ (80022f4 <MX_I2C3_Init+0x74>)
 80022e2:	f002 ff01 	bl	80050e8 <HAL_I2CEx_ConfigDigitalFilter>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80022ec:	f000 fafe 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20025a24 	.word	0x20025a24
 80022f8:	40005c00 	.word	0x40005c00
 80022fc:	000186a0 	.word	0x000186a0

08002300 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b09a      	sub	sp, #104	@ 0x68
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002306:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800230a:	2234      	movs	r2, #52	@ 0x34
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f005 f856 	bl	80073c0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002314:	463b      	mov	r3, r7
 8002316:	2234      	movs	r2, #52	@ 0x34
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f005 f850 	bl	80073c0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002320:	4b4e      	ldr	r3, [pc, #312]	@ (800245c <MX_LTDC_Init+0x15c>)
 8002322:	4a4f      	ldr	r2, [pc, #316]	@ (8002460 <MX_LTDC_Init+0x160>)
 8002324:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002326:	4b4d      	ldr	r3, [pc, #308]	@ (800245c <MX_LTDC_Init+0x15c>)
 8002328:	2200      	movs	r2, #0
 800232a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800232c:	4b4b      	ldr	r3, [pc, #300]	@ (800245c <MX_LTDC_Init+0x15c>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002332:	4b4a      	ldr	r3, [pc, #296]	@ (800245c <MX_LTDC_Init+0x15c>)
 8002334:	2200      	movs	r2, #0
 8002336:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002338:	4b48      	ldr	r3, [pc, #288]	@ (800245c <MX_LTDC_Init+0x15c>)
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800233e:	4b47      	ldr	r3, [pc, #284]	@ (800245c <MX_LTDC_Init+0x15c>)
 8002340:	2207      	movs	r2, #7
 8002342:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002344:	4b45      	ldr	r3, [pc, #276]	@ (800245c <MX_LTDC_Init+0x15c>)
 8002346:	2203      	movs	r2, #3
 8002348:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800234a:	4b44      	ldr	r3, [pc, #272]	@ (800245c <MX_LTDC_Init+0x15c>)
 800234c:	220e      	movs	r2, #14
 800234e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8002350:	4b42      	ldr	r3, [pc, #264]	@ (800245c <MX_LTDC_Init+0x15c>)
 8002352:	2205      	movs	r2, #5
 8002354:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8002356:	4b41      	ldr	r3, [pc, #260]	@ (800245c <MX_LTDC_Init+0x15c>)
 8002358:	f240 228e 	movw	r2, #654	@ 0x28e
 800235c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800235e:	4b3f      	ldr	r3, [pc, #252]	@ (800245c <MX_LTDC_Init+0x15c>)
 8002360:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002364:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8002366:	4b3d      	ldr	r3, [pc, #244]	@ (800245c <MX_LTDC_Init+0x15c>)
 8002368:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800236c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800236e:	4b3b      	ldr	r3, [pc, #236]	@ (800245c <MX_LTDC_Init+0x15c>)
 8002370:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002374:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002376:	4b39      	ldr	r3, [pc, #228]	@ (800245c <MX_LTDC_Init+0x15c>)
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800237e:	4b37      	ldr	r3, [pc, #220]	@ (800245c <MX_LTDC_Init+0x15c>)
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002386:	4b35      	ldr	r3, [pc, #212]	@ (800245c <MX_LTDC_Init+0x15c>)
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800238e:	4833      	ldr	r0, [pc, #204]	@ (800245c <MX_LTDC_Init+0x15c>)
 8002390:	f002 feea 	bl	8005168 <HAL_LTDC_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800239a:	f000 faa7 	bl	80028ec <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80023ae:	2300      	movs	r3, #0
 80023b0:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80023ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023be:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80023c0:	2305      	movs	r3, #5
 80023c2:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80023e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023e6:	2200      	movs	r2, #0
 80023e8:	4619      	mov	r1, r3
 80023ea:	481c      	ldr	r0, [pc, #112]	@ (800245c <MX_LTDC_Init+0x15c>)
 80023ec:	f002 ff8c 	bl	8005308 <HAL_LTDC_ConfigLayer>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80023f6:	f000 fa79 	bl	80028ec <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800241a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800241c:	2305      	movs	r3, #5
 800241e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800243e:	463b      	mov	r3, r7
 8002440:	2201      	movs	r2, #1
 8002442:	4619      	mov	r1, r3
 8002444:	4805      	ldr	r0, [pc, #20]	@ (800245c <MX_LTDC_Init+0x15c>)
 8002446:	f002 ff5f 	bl	8005308 <HAL_LTDC_ConfigLayer>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002450:	f000 fa4c 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002454:	bf00      	nop
 8002456:	3768      	adds	r7, #104	@ 0x68
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20025a78 	.word	0x20025a78
 8002460:	40016800 	.word	0x40016800

08002464 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <MX_RNG_Init+0x20>)
 800246a:	4a07      	ldr	r2, [pc, #28]	@ (8002488 <MX_RNG_Init+0x24>)
 800246c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800246e:	4805      	ldr	r0, [pc, #20]	@ (8002484 <MX_RNG_Init+0x20>)
 8002470:	f003 ff64 	bl	800633c <HAL_RNG_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800247a:	f000 fa37 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200000d0 	.word	0x200000d0
 8002488:	50060800 	.word	0x50060800

0800248c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002490:	4b17      	ldr	r3, [pc, #92]	@ (80024f0 <MX_SPI5_Init+0x64>)
 8002492:	4a18      	ldr	r2, [pc, #96]	@ (80024f4 <MX_SPI5_Init+0x68>)
 8002494:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002496:	4b16      	ldr	r3, [pc, #88]	@ (80024f0 <MX_SPI5_Init+0x64>)
 8002498:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800249c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800249e:	4b14      	ldr	r3, [pc, #80]	@ (80024f0 <MX_SPI5_Init+0x64>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80024a4:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <MX_SPI5_Init+0x64>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024aa:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <MX_SPI5_Init+0x64>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	@ (80024f0 <MX_SPI5_Init+0x64>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80024b6:	4b0e      	ldr	r3, [pc, #56]	@ (80024f0 <MX_SPI5_Init+0x64>)
 80024b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024bc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024be:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <MX_SPI5_Init+0x64>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024c4:	4b0a      	ldr	r3, [pc, #40]	@ (80024f0 <MX_SPI5_Init+0x64>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80024ca:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <MX_SPI5_Init+0x64>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d0:	4b07      	ldr	r3, [pc, #28]	@ (80024f0 <MX_SPI5_Init+0x64>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <MX_SPI5_Init+0x64>)
 80024d8:	220a      	movs	r2, #10
 80024da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80024dc:	4804      	ldr	r0, [pc, #16]	@ (80024f0 <MX_SPI5_Init+0x64>)
 80024de:	f003 ffad 	bl	800643c <HAL_SPI_Init>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80024e8:	f000 fa00 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20025b20 	.word	0x20025b20
 80024f4:	40015000 	.word	0x40015000

080024f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024fe:	f107 0308 	add.w	r3, r7, #8
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800250c:	463b      	mov	r3, r7
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002514:	4b1d      	ldr	r3, [pc, #116]	@ (800258c <MX_TIM2_Init+0x94>)
 8002516:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800251a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800251c:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <MX_TIM2_Init+0x94>)
 800251e:	2200      	movs	r2, #0
 8002520:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002522:	4b1a      	ldr	r3, [pc, #104]	@ (800258c <MX_TIM2_Init+0x94>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002528:	4b18      	ldr	r3, [pc, #96]	@ (800258c <MX_TIM2_Init+0x94>)
 800252a:	f04f 32ff 	mov.w	r2, #4294967295
 800252e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002530:	4b16      	ldr	r3, [pc, #88]	@ (800258c <MX_TIM2_Init+0x94>)
 8002532:	2200      	movs	r2, #0
 8002534:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002536:	4b15      	ldr	r3, [pc, #84]	@ (800258c <MX_TIM2_Init+0x94>)
 8002538:	2200      	movs	r2, #0
 800253a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800253c:	4813      	ldr	r0, [pc, #76]	@ (800258c <MX_TIM2_Init+0x94>)
 800253e:	f004 fa5d 	bl	80069fc <HAL_TIM_Base_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002548:	f000 f9d0 	bl	80028ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800254c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002550:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002552:	f107 0308 	add.w	r3, r7, #8
 8002556:	4619      	mov	r1, r3
 8002558:	480c      	ldr	r0, [pc, #48]	@ (800258c <MX_TIM2_Init+0x94>)
 800255a:	f004 fa9e 	bl	8006a9a <HAL_TIM_ConfigClockSource>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002564:	f000 f9c2 	bl	80028ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002568:	2300      	movs	r3, #0
 800256a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002570:	463b      	mov	r3, r7
 8002572:	4619      	mov	r1, r3
 8002574:	4805      	ldr	r0, [pc, #20]	@ (800258c <MX_TIM2_Init+0x94>)
 8002576:	f004 fc9d 	bl	8006eb4 <HAL_TIMEx_MasterConfigSynchronization>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002580:	f000 f9b4 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002584:	bf00      	nop
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20025b78 	.word	0x20025b78

08002590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08e      	sub	sp, #56	@ 0x38
 8002594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
 80025aa:	4bb2      	ldr	r3, [pc, #712]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4ab1      	ldr	r2, [pc, #708]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b6:	4baf      	ldr	r3, [pc, #700]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	623b      	str	r3, [r7, #32]
 80025c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	4bab      	ldr	r3, [pc, #684]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	4aaa      	ldr	r2, [pc, #680]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 80025cc:	f043 0320 	orr.w	r3, r3, #32
 80025d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d2:	4ba8      	ldr	r3, [pc, #672]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	4ba4      	ldr	r3, [pc, #656]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4aa3      	ldr	r2, [pc, #652]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 80025e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4ba1      	ldr	r3, [pc, #644]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	4b9d      	ldr	r3, [pc, #628]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4a9c      	ldr	r2, [pc, #624]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6313      	str	r3, [r2, #48]	@ 0x30
 800260a:	4b9a      	ldr	r3, [pc, #616]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	4b96      	ldr	r3, [pc, #600]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4a95      	ldr	r2, [pc, #596]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	6313      	str	r3, [r2, #48]	@ 0x30
 8002626:	4b93      	ldr	r3, [pc, #588]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b8f      	ldr	r3, [pc, #572]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4a8e      	ldr	r2, [pc, #568]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 800263c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4b8c      	ldr	r3, [pc, #560]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	4b88      	ldr	r3, [pc, #544]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	4a87      	ldr	r2, [pc, #540]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 8002658:	f043 0310 	orr.w	r3, r3, #16
 800265c:	6313      	str	r3, [r2, #48]	@ 0x30
 800265e:	4b85      	ldr	r3, [pc, #532]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	4b81      	ldr	r3, [pc, #516]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	4a80      	ldr	r2, [pc, #512]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 8002674:	f043 0308 	orr.w	r3, r3, #8
 8002678:	6313      	str	r3, [r2, #48]	@ 0x30
 800267a:	4b7e      	ldr	r3, [pc, #504]	@ (8002874 <MX_GPIO_Init+0x2e4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002686:	2200      	movs	r2, #0
 8002688:	2116      	movs	r1, #22
 800268a:	487b      	ldr	r0, [pc, #492]	@ (8002878 <MX_GPIO_Init+0x2e8>)
 800268c:	f001 fcb2 	bl	8003ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	2180      	movs	r1, #128	@ 0x80
 8002694:	4879      	ldr	r0, [pc, #484]	@ (800287c <MX_GPIO_Init+0x2ec>)
 8002696:	f001 fcad 	bl	8003ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800269a:	2200      	movs	r2, #0
 800269c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80026a0:	4877      	ldr	r0, [pc, #476]	@ (8002880 <MX_GPIO_Init+0x2f0>)
 80026a2:	f001 fca7 	bl	8003ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80026a6:	2200      	movs	r2, #0
 80026a8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80026ac:	4875      	ldr	r0, [pc, #468]	@ (8002884 <MX_GPIO_Init+0x2f4>)
 80026ae:	f001 fca1 	bl	8003ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80026b2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026c4:	230c      	movs	r3, #12
 80026c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026cc:	4619      	mov	r1, r3
 80026ce:	486e      	ldr	r0, [pc, #440]	@ (8002888 <MX_GPIO_Init+0x2f8>)
 80026d0:	f001 f9d8 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80026d4:	2301      	movs	r3, #1
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e0:	2303      	movs	r3, #3
 80026e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026e4:	230c      	movs	r3, #12
 80026e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80026e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ec:	4619      	mov	r1, r3
 80026ee:	4862      	ldr	r0, [pc, #392]	@ (8002878 <MX_GPIO_Init+0x2e8>)
 80026f0:	f001 f9c8 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80026f4:	2316      	movs	r3, #22
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f8:	2301      	movs	r3, #1
 80026fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002700:	2300      	movs	r3, #0
 8002702:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002704:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002708:	4619      	mov	r1, r3
 800270a:	485b      	ldr	r0, [pc, #364]	@ (8002878 <MX_GPIO_Init+0x2e8>)
 800270c:	f001 f9ba 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002710:	f248 0307 	movw	r3, #32775	@ 0x8007
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002716:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800271a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002724:	4619      	mov	r1, r3
 8002726:	4855      	ldr	r0, [pc, #340]	@ (800287c <MX_GPIO_Init+0x2ec>)
 8002728:	f001 f9ac 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800272c:	2380      	movs	r3, #128	@ 0x80
 800272e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002730:	2301      	movs	r3, #1
 8002732:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2300      	movs	r3, #0
 800273a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800273c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002740:	4619      	mov	r1, r3
 8002742:	484e      	ldr	r0, [pc, #312]	@ (800287c <MX_GPIO_Init+0x2ec>)
 8002744:	f001 f99e 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002748:	2320      	movs	r3, #32
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800274c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002750:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800275a:	4619      	mov	r1, r3
 800275c:	4846      	ldr	r0, [pc, #280]	@ (8002878 <MX_GPIO_Init+0x2e8>)
 800275e:	f001 f991 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002762:	2304      	movs	r3, #4
 8002764:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002766:	2300      	movs	r3, #0
 8002768:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800276e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002772:	4619      	mov	r1, r3
 8002774:	4845      	ldr	r0, [pc, #276]	@ (800288c <MX_GPIO_Init+0x2fc>)
 8002776:	f001 f985 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800277a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800278c:	230c      	movs	r3, #12
 800278e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002794:	4619      	mov	r1, r3
 8002796:	483b      	ldr	r0, [pc, #236]	@ (8002884 <MX_GPIO_Init+0x2f4>)
 8002798:	f001 f974 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800279c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80027a0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027ae:	230c      	movs	r3, #12
 80027b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b6:	4619      	mov	r1, r3
 80027b8:	4835      	ldr	r0, [pc, #212]	@ (8002890 <MX_GPIO_Init+0x300>)
 80027ba:	f001 f963 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80027be:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80027c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027cc:	2300      	movs	r3, #0
 80027ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80027d0:	230c      	movs	r3, #12
 80027d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d8:	4619      	mov	r1, r3
 80027da:	482c      	ldr	r0, [pc, #176]	@ (800288c <MX_GPIO_Init+0x2fc>)
 80027dc:	f001 f952 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80027e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e6:	2300      	movs	r3, #0
 80027e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80027ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f2:	4619      	mov	r1, r3
 80027f4:	4825      	ldr	r0, [pc, #148]	@ (800288c <MX_GPIO_Init+0x2fc>)
 80027f6:	f001 f945 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80027fa:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002800:	2302      	movs	r3, #2
 8002802:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002808:	2303      	movs	r3, #3
 800280a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800280c:	230c      	movs	r3, #12
 800280e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002814:	4619      	mov	r1, r3
 8002816:	481a      	ldr	r0, [pc, #104]	@ (8002880 <MX_GPIO_Init+0x2f0>)
 8002818:	f001 f934 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800281c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002820:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002822:	2300      	movs	r3, #0
 8002824:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800282a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800282e:	4619      	mov	r1, r3
 8002830:	4813      	ldr	r0, [pc, #76]	@ (8002880 <MX_GPIO_Init+0x2f0>)
 8002832:	f001 f927 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002836:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283c:	2301      	movs	r3, #1
 800283e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800284c:	4619      	mov	r1, r3
 800284e:	480c      	ldr	r0, [pc, #48]	@ (8002880 <MX_GPIO_Init+0x2f0>)
 8002850:	f001 f918 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002854:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002862:	2303      	movs	r3, #3
 8002864:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002866:	2307      	movs	r3, #7
 8002868:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800286e:	4619      	mov	r1, r3
 8002870:	e010      	b.n	8002894 <MX_GPIO_Init+0x304>
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	40020800 	.word	0x40020800
 800287c:	40020000 	.word	0x40020000
 8002880:	40020c00 	.word	0x40020c00
 8002884:	40021800 	.word	0x40021800
 8002888:	40021400 	.word	0x40021400
 800288c:	40020400 	.word	0x40020400
 8002890:	40021000 	.word	0x40021000
 8002894:	4812      	ldr	r0, [pc, #72]	@ (80028e0 <MX_GPIO_Init+0x350>)
 8002896:	f001 f8f5 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800289a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a0:	2301      	movs	r3, #1
 80028a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028b0:	4619      	mov	r1, r3
 80028b2:	480c      	ldr	r0, [pc, #48]	@ (80028e4 <MX_GPIO_Init+0x354>)
 80028b4:	f001 f8e6 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80028b8:	2360      	movs	r3, #96	@ 0x60
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c4:	2303      	movs	r3, #3
 80028c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028c8:	230c      	movs	r3, #12
 80028ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028d0:	4619      	mov	r1, r3
 80028d2:	4805      	ldr	r0, [pc, #20]	@ (80028e8 <MX_GPIO_Init+0x358>)
 80028d4:	f001 f8d6 	bl	8003a84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028d8:	bf00      	nop
 80028da:	3738      	adds	r7, #56	@ 0x38
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40020000 	.word	0x40020000
 80028e4:	40021800 	.word	0x40021800
 80028e8:	40020400 	.word	0x40020400

080028ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028f0:	b672      	cpsid	i
}
 80028f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <Error_Handler+0x8>

080028f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	4b10      	ldr	r3, [pc, #64]	@ (8002944 <HAL_MspInit+0x4c>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	4a0f      	ldr	r2, [pc, #60]	@ (8002944 <HAL_MspInit+0x4c>)
 8002908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800290c:	6453      	str	r3, [r2, #68]	@ 0x44
 800290e:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <HAL_MspInit+0x4c>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	603b      	str	r3, [r7, #0]
 800291e:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <HAL_MspInit+0x4c>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002922:	4a08      	ldr	r2, [pc, #32]	@ (8002944 <HAL_MspInit+0x4c>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002928:	6413      	str	r3, [r2, #64]	@ 0x40
 800292a:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <HAL_MspInit+0x4c>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002936:	2007      	movs	r0, #7
 8002938:	f001 f846 	bl	80039c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800

08002948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	@ 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a29      	ldr	r2, [pc, #164]	@ (8002a0c <HAL_I2C_MspInit+0xc4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d14b      	bne.n	8002a02 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	4b28      	ldr	r3, [pc, #160]	@ (8002a10 <HAL_I2C_MspInit+0xc8>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	4a27      	ldr	r2, [pc, #156]	@ (8002a10 <HAL_I2C_MspInit+0xc8>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	6313      	str	r3, [r2, #48]	@ 0x30
 800297a:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <HAL_I2C_MspInit+0xc8>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b21      	ldr	r3, [pc, #132]	@ (8002a10 <HAL_I2C_MspInit+0xc8>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	4a20      	ldr	r2, [pc, #128]	@ (8002a10 <HAL_I2C_MspInit+0xc8>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6313      	str	r3, [r2, #48]	@ 0x30
 8002996:	4b1e      	ldr	r3, [pc, #120]	@ (8002a10 <HAL_I2C_MspInit+0xc8>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80029a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029a8:	2312      	movs	r3, #18
 80029aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029b4:	2304      	movs	r3, #4
 80029b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	4619      	mov	r1, r3
 80029be:	4815      	ldr	r0, [pc, #84]	@ (8002a14 <HAL_I2C_MspInit+0xcc>)
 80029c0:	f001 f860 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80029c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ca:	2312      	movs	r3, #18
 80029cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029d6:	2304      	movs	r3, #4
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	4619      	mov	r1, r3
 80029e0:	480d      	ldr	r0, [pc, #52]	@ (8002a18 <HAL_I2C_MspInit+0xd0>)
 80029e2:	f001 f84f 	bl	8003a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	4b09      	ldr	r3, [pc, #36]	@ (8002a10 <HAL_I2C_MspInit+0xc8>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	4a08      	ldr	r2, [pc, #32]	@ (8002a10 <HAL_I2C_MspInit+0xc8>)
 80029f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_I2C_MspInit+0xc8>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002a02:	bf00      	nop
 8002a04:	3728      	adds	r7, #40	@ 0x28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40005c00 	.word	0x40005c00
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40020800 	.word	0x40020800
 8002a18:	40020000 	.word	0x40020000

08002a1c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b09a      	sub	sp, #104	@ 0x68
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a38:	2230      	movs	r2, #48	@ 0x30
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f004 fcbf 	bl	80073c0 <memset>
  if(hltdc->Instance==LTDC)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a81      	ldr	r2, [pc, #516]	@ (8002c4c <HAL_LTDC_MspInit+0x230>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	f040 80fb 	bne.w	8002c44 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a4e:	2308      	movs	r3, #8
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002a52:	23c8      	movs	r3, #200	@ 0xc8
 8002a54:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002a56:	2302      	movs	r3, #2
 8002a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002a5a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a64:	4618      	mov	r0, r3
 8002a66:	f003 faa9 	bl	8005fbc <HAL_RCCEx_PeriphCLKConfig>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002a70:	f7ff ff3c 	bl	80028ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a74:	2300      	movs	r3, #0
 8002a76:	623b      	str	r3, [r7, #32]
 8002a78:	4b75      	ldr	r3, [pc, #468]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7c:	4a74      	ldr	r2, [pc, #464]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002a7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a82:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a84:	4b72      	ldr	r3, [pc, #456]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a8c:	623b      	str	r3, [r7, #32]
 8002a8e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	4b6e      	ldr	r3, [pc, #440]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a98:	4a6d      	ldr	r2, [pc, #436]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002a9a:	f043 0320 	orr.w	r3, r3, #32
 8002a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa0:	4b6b      	ldr	r3, [pc, #428]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	4b67      	ldr	r3, [pc, #412]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab4:	4a66      	ldr	r2, [pc, #408]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6313      	str	r3, [r2, #48]	@ 0x30
 8002abc:	4b64      	ldr	r3, [pc, #400]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	4b60      	ldr	r3, [pc, #384]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad0:	4a5f      	ldr	r2, [pc, #380]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002ad2:	f043 0302 	orr.w	r3, r3, #2
 8002ad6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad8:	4b5d      	ldr	r3, [pc, #372]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	4b59      	ldr	r3, [pc, #356]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	4a58      	ldr	r2, [pc, #352]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002af2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af4:	4b56      	ldr	r3, [pc, #344]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	4b52      	ldr	r3, [pc, #328]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b08:	4a51      	ldr	r2, [pc, #324]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002b0a:	f043 0304 	orr.w	r3, r3, #4
 8002b0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b10:	4b4f      	ldr	r3, [pc, #316]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	4b4b      	ldr	r3, [pc, #300]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b24:	4a4a      	ldr	r2, [pc, #296]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002b26:	f043 0308 	orr.w	r3, r3, #8
 8002b2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2c:	4b48      	ldr	r3, [pc, #288]	@ (8002c50 <HAL_LTDC_MspInit+0x234>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002b38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b3c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b4a:	230e      	movs	r3, #14
 8002b4c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b52:	4619      	mov	r1, r3
 8002b54:	483f      	ldr	r0, [pc, #252]	@ (8002c54 <HAL_LTDC_MspInit+0x238>)
 8002b56:	f000 ff95 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002b5a:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002b5e:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b6c:	230e      	movs	r3, #14
 8002b6e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b74:	4619      	mov	r1, r3
 8002b76:	4838      	ldr	r0, [pc, #224]	@ (8002c58 <HAL_LTDC_MspInit+0x23c>)
 8002b78:	f000 ff84 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b80:	2302      	movs	r3, #2
 8002b82:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b8c:	2309      	movs	r3, #9
 8002b8e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b94:	4619      	mov	r1, r3
 8002b96:	4831      	ldr	r0, [pc, #196]	@ (8002c5c <HAL_LTDC_MspInit+0x240>)
 8002b98:	f000 ff74 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002b9c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002ba0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002baa:	2300      	movs	r3, #0
 8002bac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bae:	230e      	movs	r3, #14
 8002bb0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4828      	ldr	r0, [pc, #160]	@ (8002c5c <HAL_LTDC_MspInit+0x240>)
 8002bba:	f000 ff63 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002bbe:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002bc2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bd0:	230e      	movs	r3, #14
 8002bd2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bd4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4821      	ldr	r0, [pc, #132]	@ (8002c60 <HAL_LTDC_MspInit+0x244>)
 8002bdc:	f000 ff52 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002be0:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002be4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bf2:	230e      	movs	r3, #14
 8002bf4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4819      	ldr	r0, [pc, #100]	@ (8002c64 <HAL_LTDC_MspInit+0x248>)
 8002bfe:	f000 ff41 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002c02:	2348      	movs	r3, #72	@ 0x48
 8002c04:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c12:	230e      	movs	r3, #14
 8002c14:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4812      	ldr	r0, [pc, #72]	@ (8002c68 <HAL_LTDC_MspInit+0x24c>)
 8002c1e:	f000 ff31 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002c22:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c26:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	2300      	movs	r3, #0
 8002c32:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c34:	2309      	movs	r3, #9
 8002c36:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4808      	ldr	r0, [pc, #32]	@ (8002c60 <HAL_LTDC_MspInit+0x244>)
 8002c40:	f000 ff20 	bl	8003a84 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002c44:	bf00      	nop
 8002c46:	3768      	adds	r7, #104	@ 0x68
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40016800 	.word	0x40016800
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40021400 	.word	0x40021400
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	40021800 	.word	0x40021800
 8002c64:	40020800 	.word	0x40020800
 8002c68:	40020c00 	.word	0x40020c00

08002c6c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca8 <HAL_RNG_MspInit+0x3c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10d      	bne.n	8002c9a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <HAL_RNG_MspInit+0x40>)
 8002c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c86:	4a09      	ldr	r2, [pc, #36]	@ (8002cac <HAL_RNG_MspInit+0x40>)
 8002c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c8c:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c8e:	4b07      	ldr	r3, [pc, #28]	@ (8002cac <HAL_RNG_MspInit+0x40>)
 8002c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	50060800 	.word	0x50060800
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	@ 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a19      	ldr	r2, [pc, #100]	@ (8002d34 <HAL_SPI_MspInit+0x84>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d12c      	bne.n	8002d2c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	4b18      	ldr	r3, [pc, #96]	@ (8002d38 <HAL_SPI_MspInit+0x88>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	4a17      	ldr	r2, [pc, #92]	@ (8002d38 <HAL_SPI_MspInit+0x88>)
 8002cdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ce2:	4b15      	ldr	r3, [pc, #84]	@ (8002d38 <HAL_SPI_MspInit+0x88>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <HAL_SPI_MspInit+0x88>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	4a10      	ldr	r2, [pc, #64]	@ (8002d38 <HAL_SPI_MspInit+0x88>)
 8002cf8:	f043 0320 	orr.w	r3, r3, #32
 8002cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002d38 <HAL_SPI_MspInit+0x88>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002d0a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d1c:	2305      	movs	r3, #5
 8002d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	4619      	mov	r1, r3
 8002d26:	4805      	ldr	r0, [pc, #20]	@ (8002d3c <HAL_SPI_MspInit+0x8c>)
 8002d28:	f000 feac 	bl	8003a84 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002d2c:	bf00      	nop
 8002d2e:	3728      	adds	r7, #40	@ 0x28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40015000 	.word	0x40015000
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40021400 	.word	0x40021400

08002d40 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a08      	ldr	r2, [pc, #32]	@ (8002d70 <HAL_SPI_MspDeInit+0x30>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d10a      	bne.n	8002d68 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002d52:	4b08      	ldr	r3, [pc, #32]	@ (8002d74 <HAL_SPI_MspDeInit+0x34>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d56:	4a07      	ldr	r2, [pc, #28]	@ (8002d74 <HAL_SPI_MspDeInit+0x34>)
 8002d58:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d5c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002d5e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002d62:	4805      	ldr	r0, [pc, #20]	@ (8002d78 <HAL_SPI_MspDeInit+0x38>)
 8002d64:	f001 f83a 	bl	8003ddc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40015000 	.word	0x40015000
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40021400 	.word	0x40021400

08002d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d8c:	d10d      	bne.n	8002daa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <HAL_TIM_Base_MspInit+0x3c>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	4a08      	ldr	r2, [pc, #32]	@ (8002db8 <HAL_TIM_Base_MspInit+0x3c>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9e:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <HAL_TIM_Base_MspInit+0x3c>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800

08002dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <NMI_Handler+0x4>

08002dc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <HardFault_Handler+0x4>

08002dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd0:	bf00      	nop
 8002dd2:	e7fd      	b.n	8002dd0 <MemManage_Handler+0x4>

08002dd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dd8:	bf00      	nop
 8002dda:	e7fd      	b.n	8002dd8 <BusFault_Handler+0x4>

08002ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de0:	bf00      	nop
 8002de2:	e7fd      	b.n	8002de0 <UsageFault_Handler+0x4>

08002de4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e12:	f000 fc83 	bl	800371c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002e20:	f000 f9ce 	bl	80031c0 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002e24:	f000 f98e 	bl	8003144 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002e28:	2202      	movs	r2, #2
 8002e2a:	2103      	movs	r1, #3
 8002e2c:	2082      	movs	r0, #130	@ 0x82
 8002e2e:	f000 fa1b 	bl	8003268 <I2C3_Write>
    HAL_Delay(5);
 8002e32:	2005      	movs	r0, #5
 8002e34:	f000 fc92 	bl	800375c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2103      	movs	r1, #3
 8002e3c:	2082      	movs	r0, #130	@ 0x82
 8002e3e:	f000 fa13 	bl	8003268 <I2C3_Write>
    HAL_Delay(2);
 8002e42:	2002      	movs	r0, #2
 8002e44:	f000 fc8a 	bl	800375c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002e48:	1cba      	adds	r2, r7, #2
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	2082      	movs	r0, #130	@ 0x82
 8002e50:	f000 fa5a 	bl	8003308 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002e54:	887b      	ldrh	r3, [r7, #2]
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002e5a:	887b      	ldrh	r3, [r7, #2]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	f640 0211 	movw	r2, #2065	@ 0x811
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d001      	beq.n	8002e74 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e075      	b.n	8002f60 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002e74:	2202      	movs	r2, #2
 8002e76:	2103      	movs	r1, #3
 8002e78:	2082      	movs	r0, #130	@ 0x82
 8002e7a:	f000 f9f5 	bl	8003268 <I2C3_Write>
    HAL_Delay(5);
 8002e7e:	2005      	movs	r0, #5
 8002e80:	f000 fc6c 	bl	800375c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002e84:	2200      	movs	r2, #0
 8002e86:	2103      	movs	r1, #3
 8002e88:	2082      	movs	r0, #130	@ 0x82
 8002e8a:	f000 f9ed 	bl	8003268 <I2C3_Write>
    HAL_Delay(2);
 8002e8e:	2002      	movs	r0, #2
 8002e90:	f000 fc64 	bl	800375c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002e94:	2004      	movs	r0, #4
 8002e96:	f000 f867 	bl	8002f68 <STMPE811_Read>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002e9e:	797b      	ldrb	r3, [r7, #5]
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002ea6:	797b      	ldrb	r3, [r7, #5]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2104      	movs	r1, #4
 8002eac:	2082      	movs	r0, #130	@ 0x82
 8002eae:	f000 f9db 	bl	8003268 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002eb2:	2004      	movs	r0, #4
 8002eb4:	f000 f858 	bl	8002f68 <STMPE811_Read>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002ebc:	797b      	ldrb	r3, [r7, #5]
 8002ebe:	f023 0302 	bic.w	r3, r3, #2
 8002ec2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002ec4:	797b      	ldrb	r3, [r7, #5]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2104      	movs	r1, #4
 8002eca:	2082      	movs	r0, #130	@ 0x82
 8002ecc:	f000 f9cc 	bl	8003268 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002ed0:	2249      	movs	r2, #73	@ 0x49
 8002ed2:	2120      	movs	r1, #32
 8002ed4:	2082      	movs	r0, #130	@ 0x82
 8002ed6:	f000 f9c7 	bl	8003268 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002eda:	2002      	movs	r0, #2
 8002edc:	f000 fc3e 	bl	800375c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	2121      	movs	r1, #33	@ 0x21
 8002ee4:	2082      	movs	r0, #130	@ 0x82
 8002ee6:	f000 f9bf 	bl	8003268 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002eea:	2017      	movs	r0, #23
 8002eec:	f000 f83c 	bl	8002f68 <STMPE811_Read>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002ef4:	797b      	ldrb	r3, [r7, #5]
 8002ef6:	f043 031e 	orr.w	r3, r3, #30
 8002efa:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002efc:	797b      	ldrb	r3, [r7, #5]
 8002efe:	461a      	mov	r2, r3
 8002f00:	2117      	movs	r1, #23
 8002f02:	2082      	movs	r0, #130	@ 0x82
 8002f04:	f000 f9b0 	bl	8003268 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002f08:	229a      	movs	r2, #154	@ 0x9a
 8002f0a:	2141      	movs	r1, #65	@ 0x41
 8002f0c:	2082      	movs	r0, #130	@ 0x82
 8002f0e:	f000 f9ab 	bl	8003268 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002f12:	2201      	movs	r2, #1
 8002f14:	214a      	movs	r1, #74	@ 0x4a
 8002f16:	2082      	movs	r0, #130	@ 0x82
 8002f18:	f000 f9a6 	bl	8003268 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	214b      	movs	r1, #75	@ 0x4b
 8002f20:	2082      	movs	r0, #130	@ 0x82
 8002f22:	f000 f9a1 	bl	8003268 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002f26:	2200      	movs	r2, #0
 8002f28:	214b      	movs	r1, #75	@ 0x4b
 8002f2a:	2082      	movs	r0, #130	@ 0x82
 8002f2c:	f000 f99c 	bl	8003268 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002f30:	2201      	movs	r2, #1
 8002f32:	2156      	movs	r1, #86	@ 0x56
 8002f34:	2082      	movs	r0, #130	@ 0x82
 8002f36:	f000 f997 	bl	8003268 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	2158      	movs	r1, #88	@ 0x58
 8002f3e:	2082      	movs	r0, #130	@ 0x82
 8002f40:	f000 f992 	bl	8003268 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002f44:	2203      	movs	r2, #3
 8002f46:	2140      	movs	r1, #64	@ 0x40
 8002f48:	2082      	movs	r0, #130	@ 0x82
 8002f4a:	f000 f98d 	bl	8003268 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002f4e:	22ff      	movs	r2, #255	@ 0xff
 8002f50:	210b      	movs	r1, #11
 8002f52:	2082      	movs	r0, #130	@ 0x82
 8002f54:	f000 f988 	bl	8003268 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002f58:	20c8      	movs	r0, #200	@ 0xc8
 8002f5a:	f000 fbff 	bl	800375c <HAL_Delay>

    return STMPE811_State_Ok;
 8002f5e:	2302      	movs	r3, #2

}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002f72:	f107 020f 	add.w	r2, r7, #15
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	2082      	movs	r0, #130	@ 0x82
 8002f7c:	f000 f99e 	bl	80032bc <I2C3_Read>

    return readData;
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	791a      	ldrb	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002f9a:	2040      	movs	r0, #64	@ 0x40
 8002f9c:	f7ff ffe4 	bl	8002f68 <STMPE811_Read>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	db0e      	blt.n	8002fca <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	214b      	movs	r1, #75	@ 0x4b
 8002fb6:	2082      	movs	r0, #130	@ 0x82
 8002fb8:	f000 f956 	bl	8003268 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	214b      	movs	r1, #75	@ 0x4b
 8002fc0:	2082      	movs	r0, #130	@ 0x82
 8002fc2:	f000 f951 	bl	8003268 <I2C3_Write>

        return STMPE811_State_Released;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e0a7      	b.n	800311a <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	799b      	ldrb	r3, [r3, #6]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d117      	bne.n	8003002 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 f9b8 	bl	800334c <TM_STMPE811_ReadX>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	885b      	ldrh	r3, [r3, #2]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fa0b 	bl	8003408 <TM_STMPE811_ReadY>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	805a      	strh	r2, [r3, #2]
 8003000:	e048      	b.n	8003094 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	799b      	ldrb	r3, [r3, #6]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d112      	bne.n	8003030 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f99c 	bl	800334c <TM_STMPE811_ReadX>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	885b      	ldrh	r3, [r3, #2]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 f9f1 	bl	8003408 <TM_STMPE811_ReadY>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	805a      	strh	r2, [r3, #2]
 800302e:	e031      	b.n	8003094 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	799b      	ldrb	r3, [r3, #6]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d115      	bne.n	8003064 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	885b      	ldrh	r3, [r3, #2]
 800303c:	4618      	mov	r0, r3
 800303e:	f000 f985 	bl	800334c <TM_STMPE811_ReadX>
 8003042:	4603      	mov	r3, r0
 8003044:	461a      	mov	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f000 f9da 	bl	8003408 <TM_STMPE811_ReadY>
 8003054:	4603      	mov	r3, r0
 8003056:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800305a:	3301      	adds	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	801a      	strh	r2, [r3, #0]
 8003062:	e017      	b.n	8003094 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	799b      	ldrb	r3, [r3, #6]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d113      	bne.n	8003094 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f000 f96b 	bl	800334c <TM_STMPE811_ReadX>
 8003076:	4603      	mov	r3, r0
 8003078:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800307c:	b29a      	uxth	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f9be 	bl	8003408 <TM_STMPE811_ReadY>
 800308c:	4603      	mov	r3, r0
 800308e:	461a      	mov	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003094:	2201      	movs	r2, #1
 8003096:	214b      	movs	r1, #75	@ 0x4b
 8003098:	2082      	movs	r0, #130	@ 0x82
 800309a:	f000 f8e5 	bl	8003268 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800309e:	2200      	movs	r2, #0
 80030a0:	214b      	movs	r1, #75	@ 0x4b
 80030a2:	2082      	movs	r0, #130	@ 0x82
 80030a4:	f000 f8e0 	bl	8003268 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	799b      	ldrb	r3, [r3, #6]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <STMPE811_ReadTouch+0x12e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	799b      	ldrb	r3, [r3, #6]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d115      	bne.n	80030e4 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d027      	beq.n	8003110 <STMPE811_ReadTouch+0x186>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	2bee      	cmp	r3, #238	@ 0xee
 80030c6:	d823      	bhi.n	8003110 <STMPE811_ReadTouch+0x186>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	885b      	ldrh	r3, [r3, #2]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01f      	beq.n	8003110 <STMPE811_ReadTouch+0x186>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	885b      	ldrh	r3, [r3, #2]
 80030d4:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80030d8:	d81a      	bhi.n	8003110 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e01a      	b.n	800311a <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d012      	beq.n	8003112 <STMPE811_ReadTouch+0x188>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80030f4:	d80d      	bhi.n	8003112 <STMPE811_ReadTouch+0x188>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	885b      	ldrh	r3, [r3, #2]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <STMPE811_ReadTouch+0x188>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	885b      	ldrh	r3, [r3, #2]
 8003102:	2bee      	cmp	r3, #238	@ 0xee
 8003104:	d805      	bhi.n	8003112 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800310c:	2300      	movs	r3, #0
 800310e:	e004      	b.n	800311a <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003110:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8003118:	2301      	movs	r3, #1
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003128:	4b05      	ldr	r3, [pc, #20]	@ (8003140 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20025c14 	.word	0x20025c14

08003144 <I2C3_Init>:

static void I2C3_Init()
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	4b18      	ldr	r3, [pc, #96]	@ (80031b0 <I2C3_Init+0x6c>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	4a17      	ldr	r2, [pc, #92]	@ (80031b0 <I2C3_Init+0x6c>)
 8003154:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003158:	6413      	str	r3, [r2, #64]	@ 0x40
 800315a:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <I2C3_Init+0x6c>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8003166:	4b13      	ldr	r3, [pc, #76]	@ (80031b4 <I2C3_Init+0x70>)
 8003168:	4a13      	ldr	r2, [pc, #76]	@ (80031b8 <I2C3_Init+0x74>)
 800316a:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 800316c:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <I2C3_Init+0x70>)
 800316e:	4a13      	ldr	r2, [pc, #76]	@ (80031bc <I2C3_Init+0x78>)
 8003170:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003172:	4b10      	ldr	r3, [pc, #64]	@ (80031b4 <I2C3_Init+0x70>)
 8003174:	2200      	movs	r2, #0
 8003176:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003178:	4b0e      	ldr	r3, [pc, #56]	@ (80031b4 <I2C3_Init+0x70>)
 800317a:	2200      	movs	r2, #0
 800317c:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800317e:	4b0d      	ldr	r3, [pc, #52]	@ (80031b4 <I2C3_Init+0x70>)
 8003180:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003184:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8003186:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <I2C3_Init+0x70>)
 8003188:	2200      	movs	r2, #0
 800318a:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800318c:	4b09      	ldr	r3, [pc, #36]	@ (80031b4 <I2C3_Init+0x70>)
 800318e:	2200      	movs	r2, #0
 8003190:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8003192:	4808      	ldr	r0, [pc, #32]	@ (80031b4 <I2C3_Init+0x70>)
 8003194:	f000 ff48 	bl	8004028 <HAL_I2C_Init>
 8003198:	4603      	mov	r3, r0
 800319a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80031a2:	bf00      	nop
 80031a4:	e7fd      	b.n	80031a2 <I2C3_Init+0x5e>
    }
    return;
 80031a6:	bf00      	nop
}
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800
 80031b4:	20025bc0 	.word	0x20025bc0
 80031b8:	40005c00 	.word	0x40005c00
 80031bc:	000186a0 	.word	0x000186a0

080031c0 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c6:	f107 030c 	add.w	r3, r7, #12
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	605a      	str	r2, [r3, #4]
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	60da      	str	r2, [r3, #12]
 80031d4:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	4b20      	ldr	r3, [pc, #128]	@ (800325c <I2C3_MspInit+0x9c>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	4a1f      	ldr	r2, [pc, #124]	@ (800325c <I2C3_MspInit+0x9c>)
 80031e0:	f043 0304 	orr.w	r3, r3, #4
 80031e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e6:	4b1d      	ldr	r3, [pc, #116]	@ (800325c <I2C3_MspInit+0x9c>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	4b19      	ldr	r3, [pc, #100]	@ (800325c <I2C3_MspInit+0x9c>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	4a18      	ldr	r2, [pc, #96]	@ (800325c <I2C3_MspInit+0x9c>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	6313      	str	r3, [r2, #48]	@ 0x30
 8003202:	4b16      	ldr	r3, [pc, #88]	@ (800325c <I2C3_MspInit+0x9c>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800320e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003212:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003214:	2312      	movs	r3, #18
 8003216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321c:	2300      	movs	r3, #0
 800321e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003220:	2304      	movs	r3, #4
 8003222:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003224:	f107 030c 	add.w	r3, r7, #12
 8003228:	4619      	mov	r1, r3
 800322a:	480d      	ldr	r0, [pc, #52]	@ (8003260 <I2C3_MspInit+0xa0>)
 800322c:	f000 fc2a 	bl	8003a84 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003230:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003234:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003236:	2312      	movs	r3, #18
 8003238:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323e:	2300      	movs	r3, #0
 8003240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003242:	2304      	movs	r3, #4
 8003244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003246:	f107 030c 	add.w	r3, r7, #12
 800324a:	4619      	mov	r1, r3
 800324c:	4805      	ldr	r0, [pc, #20]	@ (8003264 <I2C3_MspInit+0xa4>)
 800324e:	f000 fc19 	bl	8003a84 <HAL_GPIO_Init>
    
}
 8003252:	bf00      	nop
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800
 8003260:	40020800 	.word	0x40020800
 8003264:	40020000 	.word	0x40020000

08003268 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af04      	add	r7, sp, #16
 800326e:	4603      	mov	r3, r0
 8003270:	80fb      	strh	r3, [r7, #6]
 8003272:	460b      	mov	r3, r1
 8003274:	717b      	strb	r3, [r7, #5]
 8003276:	4613      	mov	r3, r2
 8003278:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800327a:	793b      	ldrb	r3, [r7, #4]
 800327c:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800327e:	797b      	ldrb	r3, [r7, #5]
 8003280:	b29a      	uxth	r2, r3
 8003282:	88f9      	ldrh	r1, [r7, #6]
 8003284:	4b0a      	ldr	r3, [pc, #40]	@ (80032b0 <I2C3_Write+0x48>)
 8003286:	9302      	str	r3, [sp, #8]
 8003288:	2301      	movs	r3, #1
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	f107 030f 	add.w	r3, r7, #15
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	2301      	movs	r3, #1
 8003294:	4807      	ldr	r0, [pc, #28]	@ (80032b4 <I2C3_Write+0x4c>)
 8003296:	f001 f80b 	bl	80042b0 <HAL_I2C_Mem_Write>
 800329a:	4603      	mov	r3, r0
 800329c:	461a      	mov	r2, r3
 800329e:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <I2C3_Write+0x50>)
 80032a0:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80032a2:	f7ff ff3f 	bl	8003124 <verifyHAL_I2C_IS_OKAY>
}
 80032a6:	bf00      	nop
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	0003d090 	.word	0x0003d090
 80032b4:	20025bc0 	.word	0x20025bc0
 80032b8:	20025c14 	.word	0x20025c14

080032bc <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af04      	add	r7, sp, #16
 80032c2:	4603      	mov	r3, r0
 80032c4:	603a      	str	r2, [r7, #0]
 80032c6:	71fb      	strb	r3, [r7, #7]
 80032c8:	460b      	mov	r3, r1
 80032ca:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	b299      	uxth	r1, r3
 80032d0:	79bb      	ldrb	r3, [r7, #6]
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <I2C3_Read+0x40>)
 80032d6:	9302      	str	r3, [sp, #8]
 80032d8:	2301      	movs	r3, #1
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	2301      	movs	r3, #1
 80032e2:	4807      	ldr	r0, [pc, #28]	@ (8003300 <I2C3_Read+0x44>)
 80032e4:	f001 f8de 	bl	80044a4 <HAL_I2C_Mem_Read>
 80032e8:	4603      	mov	r3, r0
 80032ea:	461a      	mov	r2, r3
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <I2C3_Read+0x48>)
 80032ee:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80032f0:	f7ff ff18 	bl	8003124 <verifyHAL_I2C_IS_OKAY>
}
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	0003d090 	.word	0x0003d090
 8003300:	20025bc0 	.word	0x20025bc0
 8003304:	20025c14 	.word	0x20025c14

08003308 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af04      	add	r7, sp, #16
 800330e:	603a      	str	r2, [r7, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	4603      	mov	r3, r0
 8003314:	71fb      	strb	r3, [r7, #7]
 8003316:	460b      	mov	r3, r1
 8003318:	71bb      	strb	r3, [r7, #6]
 800331a:	4613      	mov	r3, r2
 800331c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	b299      	uxth	r1, r3
 8003322:	79bb      	ldrb	r3, [r7, #6]
 8003324:	b29a      	uxth	r2, r3
 8003326:	4b07      	ldr	r3, [pc, #28]	@ (8003344 <I2C3_MulitByteRead+0x3c>)
 8003328:	9302      	str	r3, [sp, #8]
 800332a:	88bb      	ldrh	r3, [r7, #4]
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	2301      	movs	r3, #1
 8003334:	4804      	ldr	r0, [pc, #16]	@ (8003348 <I2C3_MulitByteRead+0x40>)
 8003336:	f001 f8b5 	bl	80044a4 <HAL_I2C_Mem_Read>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	0003d090 	.word	0x0003d090
 8003348:	20025bc0 	.word	0x20025bc0

0800334c <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8003356:	204d      	movs	r0, #77	@ 0x4d
 8003358:	f7ff fe06 	bl	8002f68 <STMPE811_Read>
 800335c:	4603      	mov	r3, r0
 800335e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003360:	204e      	movs	r0, #78	@ 0x4e
 8003362:	f7ff fe01 	bl	8002f68 <STMPE811_Read>
 8003366:	4603      	mov	r3, r0
 8003368:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800336a:	7a7b      	ldrb	r3, [r7, #9]
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	b21a      	sxth	r2, r3
 8003370:	7a3b      	ldrb	r3, [r7, #8]
 8003372:	b21b      	sxth	r3, r3
 8003374:	4313      	orrs	r3, r2
 8003376:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003378:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800337c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003380:	4293      	cmp	r3, r2
 8003382:	dc06      	bgt.n	8003392 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8003384:	89fb      	ldrh	r3, [r7, #14]
 8003386:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800338a:	330c      	adds	r3, #12
 800338c:	b29b      	uxth	r3, r3
 800338e:	81fb      	strh	r3, [r7, #14]
 8003390:	e005      	b.n	800339e <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8003392:	89fb      	ldrh	r3, [r7, #14]
 8003394:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003398:	3308      	adds	r3, #8
 800339a:	b29b      	uxth	r3, r3
 800339c:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 800339e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033a2:	4a18      	ldr	r2, [pc, #96]	@ (8003404 <TM_STMPE811_ReadX+0xb8>)
 80033a4:	fb82 1203 	smull	r1, r2, r2, r3
 80033a8:	441a      	add	r2, r3
 80033aa:	10d2      	asrs	r2, r2, #3
 80033ac:	17db      	asrs	r3, r3, #31
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80033b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033b6:	2bef      	cmp	r3, #239	@ 0xef
 80033b8:	dd02      	ble.n	80033c0 <TM_STMPE811_ReadX+0x74>
        val = 239;
 80033ba:	23ef      	movs	r3, #239	@ 0xef
 80033bc:	81fb      	strh	r3, [r7, #14]
 80033be:	e005      	b.n	80033cc <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80033c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	da01      	bge.n	80033cc <TM_STMPE811_ReadX+0x80>
        val = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80033cc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	dd05      	ble.n	80033e2 <TM_STMPE811_ReadX+0x96>
 80033d6:	89fa      	ldrh	r2, [r7, #14]
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	b29b      	uxth	r3, r3
 80033de:	b21b      	sxth	r3, r3
 80033e0:	e004      	b.n	80033ec <TM_STMPE811_ReadX+0xa0>
 80033e2:	89fb      	ldrh	r3, [r7, #14]
 80033e4:	88fa      	ldrh	r2, [r7, #6]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	b21b      	sxth	r3, r3
 80033ec:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80033ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	dd01      	ble.n	80033fa <TM_STMPE811_ReadX+0xae>
        return val;
 80033f6:	89fb      	ldrh	r3, [r7, #14]
 80033f8:	e000      	b.n	80033fc <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80033fa:	88fb      	ldrh	r3, [r7, #6]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	88888889 	.word	0x88888889

08003408 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003412:	204f      	movs	r0, #79	@ 0x4f
 8003414:	f7ff fda8 	bl	8002f68 <STMPE811_Read>
 8003418:	4603      	mov	r3, r0
 800341a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 800341c:	2050      	movs	r0, #80	@ 0x50
 800341e:	f7ff fda3 	bl	8002f68 <STMPE811_Read>
 8003422:	4603      	mov	r3, r0
 8003424:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003426:	7a7b      	ldrb	r3, [r7, #9]
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	b21a      	sxth	r2, r3
 800342c:	7a3b      	ldrb	r3, [r7, #8]
 800342e:	b21b      	sxth	r3, r3
 8003430:	4313      	orrs	r3, r2
 8003432:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003434:	89fb      	ldrh	r3, [r7, #14]
 8003436:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800343a:	b29b      	uxth	r3, r3
 800343c:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800343e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003442:	4a19      	ldr	r2, [pc, #100]	@ (80034a8 <TM_STMPE811_ReadY+0xa0>)
 8003444:	fb82 1203 	smull	r1, r2, r2, r3
 8003448:	1052      	asrs	r2, r2, #1
 800344a:	17db      	asrs	r3, r3, #31
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003450:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003454:	2b00      	cmp	r3, #0
 8003456:	dc02      	bgt.n	800345e <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	81fb      	strh	r3, [r7, #14]
 800345c:	e007      	b.n	800346e <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 800345e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003462:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003466:	db02      	blt.n	800346e <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003468:	f240 133f 	movw	r3, #319	@ 0x13f
 800346c:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 800346e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	429a      	cmp	r2, r3
 8003476:	dd05      	ble.n	8003484 <TM_STMPE811_ReadY+0x7c>
 8003478:	89fa      	ldrh	r2, [r7, #14]
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	b29b      	uxth	r3, r3
 8003480:	b21b      	sxth	r3, r3
 8003482:	e004      	b.n	800348e <TM_STMPE811_ReadY+0x86>
 8003484:	89fb      	ldrh	r3, [r7, #14]
 8003486:	88fa      	ldrh	r2, [r7, #6]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	b29b      	uxth	r3, r3
 800348c:	b21b      	sxth	r3, r3
 800348e:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003490:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003494:	2b04      	cmp	r3, #4
 8003496:	dd01      	ble.n	800349c <TM_STMPE811_ReadY+0x94>
        return val;
 8003498:	89fb      	ldrh	r3, [r7, #14]
 800349a:	e000      	b.n	800349e <TM_STMPE811_ReadY+0x96>
    }
    return y;
 800349c:	88fb      	ldrh	r3, [r7, #6]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	2e8ba2e9 	.word	0x2e8ba2e9

080034ac <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b086      	sub	sp, #24
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	e00a      	b.n	80034e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034cc:	f3af 8000 	nop.w
 80034d0:	4601      	mov	r1, r0
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	60ba      	str	r2, [r7, #8]
 80034d8:	b2ca      	uxtb	r2, r1
 80034da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	3301      	adds	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	dbf0      	blt.n	80034cc <_read+0x12>
  }

  return len;
 80034ea:	687b      	ldr	r3, [r7, #4]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e009      	b.n	800351a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	60ba      	str	r2, [r7, #8]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3301      	adds	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	dbf1      	blt.n	8003506 <_write+0x12>
  }
  return len;
 8003522:	687b      	ldr	r3, [r7, #4]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_close>:

int _close(int file)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003534:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003554:	605a      	str	r2, [r3, #4]
  return 0;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <_isatty>:

int _isatty(int file)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800356c:	2301      	movs	r3, #1
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800359c:	4a14      	ldr	r2, [pc, #80]	@ (80035f0 <_sbrk+0x5c>)
 800359e:	4b15      	ldr	r3, [pc, #84]	@ (80035f4 <_sbrk+0x60>)
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035a8:	4b13      	ldr	r3, [pc, #76]	@ (80035f8 <_sbrk+0x64>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d102      	bne.n	80035b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035b0:	4b11      	ldr	r3, [pc, #68]	@ (80035f8 <_sbrk+0x64>)
 80035b2:	4a12      	ldr	r2, [pc, #72]	@ (80035fc <_sbrk+0x68>)
 80035b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035b6:	4b10      	ldr	r3, [pc, #64]	@ (80035f8 <_sbrk+0x64>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d207      	bcs.n	80035d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035c4:	f003 ff4a 	bl	800745c <__errno>
 80035c8:	4603      	mov	r3, r0
 80035ca:	220c      	movs	r2, #12
 80035cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035ce:	f04f 33ff 	mov.w	r3, #4294967295
 80035d2:	e009      	b.n	80035e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035d4:	4b08      	ldr	r3, [pc, #32]	@ (80035f8 <_sbrk+0x64>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035da:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <_sbrk+0x64>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	4a05      	ldr	r2, [pc, #20]	@ (80035f8 <_sbrk+0x64>)
 80035e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035e6:	68fb      	ldr	r3, [r7, #12]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20030000 	.word	0x20030000
 80035f4:	00000400 	.word	0x00000400
 80035f8:	20025c18 	.word	0x20025c18
 80035fc:	20025d70 	.word	0x20025d70

08003600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003604:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <SystemInit+0x20>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360a:	4a05      	ldr	r2, [pc, #20]	@ (8003620 <SystemInit+0x20>)
 800360c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003610:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	e000ed00 	.word	0xe000ed00

08003624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003624:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800365c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003628:	f7ff ffea 	bl	8003600 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800362c:	480c      	ldr	r0, [pc, #48]	@ (8003660 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800362e:	490d      	ldr	r1, [pc, #52]	@ (8003664 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003630:	4a0d      	ldr	r2, [pc, #52]	@ (8003668 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003634:	e002      	b.n	800363c <LoopCopyDataInit>

08003636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800363a:	3304      	adds	r3, #4

0800363c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800363c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800363e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003640:	d3f9      	bcc.n	8003636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003642:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003644:	4c0a      	ldr	r4, [pc, #40]	@ (8003670 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003648:	e001      	b.n	800364e <LoopFillZerobss>

0800364a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800364a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800364c:	3204      	adds	r2, #4

0800364e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800364e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003650:	d3fb      	bcc.n	800364a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003652:	f003 ff09 	bl	8007468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003656:	f7fe fd8e 	bl	8002176 <main>
  bx  lr    
 800365a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800365c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003664:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003668:	08009144 	.word	0x08009144
  ldr r2, =_sbss
 800366c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003670:	20025d6c 	.word	0x20025d6c

08003674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003674:	e7fe      	b.n	8003674 <ADC_IRQHandler>
	...

08003678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800367c:	4b0e      	ldr	r3, [pc, #56]	@ (80036b8 <HAL_Init+0x40>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0d      	ldr	r2, [pc, #52]	@ (80036b8 <HAL_Init+0x40>)
 8003682:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003686:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003688:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <HAL_Init+0x40>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0a      	ldr	r2, [pc, #40]	@ (80036b8 <HAL_Init+0x40>)
 800368e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003692:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003694:	4b08      	ldr	r3, [pc, #32]	@ (80036b8 <HAL_Init+0x40>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a07      	ldr	r2, [pc, #28]	@ (80036b8 <HAL_Init+0x40>)
 800369a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800369e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a0:	2003      	movs	r0, #3
 80036a2:	f000 f991 	bl	80039c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036a6:	2000      	movs	r0, #0
 80036a8:	f000 f808 	bl	80036bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036ac:	f7ff f924 	bl	80028f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40023c00 	.word	0x40023c00

080036bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036c4:	4b12      	ldr	r3, [pc, #72]	@ (8003710 <HAL_InitTick+0x54>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b12      	ldr	r3, [pc, #72]	@ (8003714 <HAL_InitTick+0x58>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	4619      	mov	r1, r3
 80036ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f9b7 	bl	8003a4e <HAL_SYSTICK_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e00e      	b.n	8003708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b0f      	cmp	r3, #15
 80036ee:	d80a      	bhi.n	8003706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036f0:	2200      	movs	r2, #0
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	f000 f971 	bl	80039de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036fc:	4a06      	ldr	r2, [pc, #24]	@ (8003718 <HAL_InitTick+0x5c>)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	e000      	b.n	8003708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000010 	.word	0x20000010
 8003714:	20000018 	.word	0x20000018
 8003718:	20000014 	.word	0x20000014

0800371c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003720:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_IncTick+0x20>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <HAL_IncTick+0x24>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4413      	add	r3, r2
 800372c:	4a04      	ldr	r2, [pc, #16]	@ (8003740 <HAL_IncTick+0x24>)
 800372e:	6013      	str	r3, [r2, #0]
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000018 	.word	0x20000018
 8003740:	20025c1c 	.word	0x20025c1c

08003744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return uwTick;
 8003748:	4b03      	ldr	r3, [pc, #12]	@ (8003758 <HAL_GetTick+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20025c1c 	.word	0x20025c1c

0800375c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003764:	f7ff ffee 	bl	8003744 <HAL_GetTick>
 8003768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d005      	beq.n	8003782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003776:	4b0a      	ldr	r3, [pc, #40]	@ (80037a0 <HAL_Delay+0x44>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003782:	bf00      	nop
 8003784:	f7ff ffde 	bl	8003744 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	429a      	cmp	r2, r3
 8003792:	d8f7      	bhi.n	8003784 <HAL_Delay+0x28>
  {
  }
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000018 	.word	0x20000018

080037a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b4:	4b0c      	ldr	r3, [pc, #48]	@ (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d6:	4a04      	ldr	r2, [pc, #16]	@ (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f0:	4b04      	ldr	r3, [pc, #16]	@ (8003804 <__NVIC_GetPriorityGrouping+0x18>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f003 0307 	and.w	r3, r3, #7
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	2b00      	cmp	r3, #0
 8003818:	db0b      	blt.n	8003832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4907      	ldr	r1, [pc, #28]	@ (8003840 <__NVIC_EnableIRQ+0x38>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2001      	movs	r0, #1
 800382a:	fa00 f202 	lsl.w	r2, r0, r2
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000e100 	.word	0xe000e100

08003844 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	2b00      	cmp	r3, #0
 8003854:	db12      	blt.n	800387c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	f003 021f 	and.w	r2, r3, #31
 800385c:	490a      	ldr	r1, [pc, #40]	@ (8003888 <__NVIC_DisableIRQ+0x44>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2001      	movs	r0, #1
 8003866:	fa00 f202 	lsl.w	r2, r0, r2
 800386a:	3320      	adds	r3, #32
 800386c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003870:	f3bf 8f4f 	dsb	sy
}
 8003874:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003876:	f3bf 8f6f 	isb	sy
}
 800387a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000e100 	.word	0xe000e100

0800388c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	2b00      	cmp	r3, #0
 800389c:	db0c      	blt.n	80038b8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	f003 021f 	and.w	r2, r3, #31
 80038a4:	4907      	ldr	r1, [pc, #28]	@ (80038c4 <__NVIC_ClearPendingIRQ+0x38>)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	2001      	movs	r0, #1
 80038ae:	fa00 f202 	lsl.w	r2, r0, r2
 80038b2:	3360      	adds	r3, #96	@ 0x60
 80038b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000e100 	.word	0xe000e100

080038c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	6039      	str	r1, [r7, #0]
 80038d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	db0a      	blt.n	80038f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	490c      	ldr	r1, [pc, #48]	@ (8003914 <__NVIC_SetPriority+0x4c>)
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	0112      	lsls	r2, r2, #4
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	440b      	add	r3, r1
 80038ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f0:	e00a      	b.n	8003908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	4908      	ldr	r1, [pc, #32]	@ (8003918 <__NVIC_SetPriority+0x50>)
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	3b04      	subs	r3, #4
 8003900:	0112      	lsls	r2, r2, #4
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	440b      	add	r3, r1
 8003906:	761a      	strb	r2, [r3, #24]
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000e100 	.word	0xe000e100
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800391c:	b480      	push	{r7}
 800391e:	b089      	sub	sp, #36	@ 0x24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f1c3 0307 	rsb	r3, r3, #7
 8003936:	2b04      	cmp	r3, #4
 8003938:	bf28      	it	cs
 800393a:	2304      	movcs	r3, #4
 800393c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3304      	adds	r3, #4
 8003942:	2b06      	cmp	r3, #6
 8003944:	d902      	bls.n	800394c <NVIC_EncodePriority+0x30>
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3b03      	subs	r3, #3
 800394a:	e000      	b.n	800394e <NVIC_EncodePriority+0x32>
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	f04f 32ff 	mov.w	r2, #4294967295
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43da      	mvns	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	401a      	ands	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003964:	f04f 31ff 	mov.w	r1, #4294967295
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	43d9      	mvns	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003974:	4313      	orrs	r3, r2
         );
}
 8003976:	4618      	mov	r0, r3
 8003978:	3724      	adds	r7, #36	@ 0x24
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3b01      	subs	r3, #1
 8003990:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003994:	d301      	bcc.n	800399a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003996:	2301      	movs	r3, #1
 8003998:	e00f      	b.n	80039ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800399a:	4a0a      	ldr	r2, [pc, #40]	@ (80039c4 <SysTick_Config+0x40>)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3b01      	subs	r3, #1
 80039a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039a2:	210f      	movs	r1, #15
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	f7ff ff8e 	bl	80038c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039ac:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <SysTick_Config+0x40>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039b2:	4b04      	ldr	r3, [pc, #16]	@ (80039c4 <SysTick_Config+0x40>)
 80039b4:	2207      	movs	r2, #7
 80039b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	e000e010 	.word	0xe000e010

080039c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff fee7 	bl	80037a4 <__NVIC_SetPriorityGrouping>
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	4603      	mov	r3, r0
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039f0:	f7ff fefc 	bl	80037ec <__NVIC_GetPriorityGrouping>
 80039f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	6978      	ldr	r0, [r7, #20]
 80039fc:	f7ff ff8e 	bl	800391c <NVIC_EncodePriority>
 8003a00:	4602      	mov	r2, r0
 8003a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff ff5d 	bl	80038c8 <__NVIC_SetPriority>
}
 8003a0e:	bf00      	nop
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff feef 	bl	8003808 <__NVIC_EnableIRQ>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	4603      	mov	r3, r0
 8003a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff feff 	bl	8003844 <__NVIC_DisableIRQ>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ff94 	bl	8003984 <SysTick_Config>
 8003a5c:	4603      	mov	r3, r0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff ff09 	bl	800388c <__NVIC_ClearPendingIRQ>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	@ 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	e177      	b.n	8003d90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	f040 8166 	bne.w	8003d8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d005      	beq.n	8003ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d130      	bne.n	8003b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4013      	ands	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	f003 0201 	and.w	r2, r3, #1
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d017      	beq.n	8003b74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	2203      	movs	r2, #3
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d123      	bne.n	8003bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	08da      	lsrs	r2, r3, #3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3208      	adds	r2, #8
 8003b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	220f      	movs	r2, #15
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	08da      	lsrs	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3208      	adds	r2, #8
 8003bc2:	69b9      	ldr	r1, [r7, #24]
 8003bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 0203 	and.w	r2, r3, #3
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 80c0 	beq.w	8003d8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	4b66      	ldr	r3, [pc, #408]	@ (8003da8 <HAL_GPIO_Init+0x324>)
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c12:	4a65      	ldr	r2, [pc, #404]	@ (8003da8 <HAL_GPIO_Init+0x324>)
 8003c14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c1a:	4b63      	ldr	r3, [pc, #396]	@ (8003da8 <HAL_GPIO_Init+0x324>)
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c26:	4a61      	ldr	r2, [pc, #388]	@ (8003dac <HAL_GPIO_Init+0x328>)
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	089b      	lsrs	r3, r3, #2
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	220f      	movs	r2, #15
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4013      	ands	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a58      	ldr	r2, [pc, #352]	@ (8003db0 <HAL_GPIO_Init+0x32c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d037      	beq.n	8003cc2 <HAL_GPIO_Init+0x23e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a57      	ldr	r2, [pc, #348]	@ (8003db4 <HAL_GPIO_Init+0x330>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d031      	beq.n	8003cbe <HAL_GPIO_Init+0x23a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a56      	ldr	r2, [pc, #344]	@ (8003db8 <HAL_GPIO_Init+0x334>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d02b      	beq.n	8003cba <HAL_GPIO_Init+0x236>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a55      	ldr	r2, [pc, #340]	@ (8003dbc <HAL_GPIO_Init+0x338>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d025      	beq.n	8003cb6 <HAL_GPIO_Init+0x232>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a54      	ldr	r2, [pc, #336]	@ (8003dc0 <HAL_GPIO_Init+0x33c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01f      	beq.n	8003cb2 <HAL_GPIO_Init+0x22e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a53      	ldr	r2, [pc, #332]	@ (8003dc4 <HAL_GPIO_Init+0x340>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d019      	beq.n	8003cae <HAL_GPIO_Init+0x22a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a52      	ldr	r2, [pc, #328]	@ (8003dc8 <HAL_GPIO_Init+0x344>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <HAL_GPIO_Init+0x226>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a51      	ldr	r2, [pc, #324]	@ (8003dcc <HAL_GPIO_Init+0x348>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00d      	beq.n	8003ca6 <HAL_GPIO_Init+0x222>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a50      	ldr	r2, [pc, #320]	@ (8003dd0 <HAL_GPIO_Init+0x34c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d007      	beq.n	8003ca2 <HAL_GPIO_Init+0x21e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4f      	ldr	r2, [pc, #316]	@ (8003dd4 <HAL_GPIO_Init+0x350>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d101      	bne.n	8003c9e <HAL_GPIO_Init+0x21a>
 8003c9a:	2309      	movs	r3, #9
 8003c9c:	e012      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003c9e:	230a      	movs	r3, #10
 8003ca0:	e010      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	e00e      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003ca6:	2307      	movs	r3, #7
 8003ca8:	e00c      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003caa:	2306      	movs	r3, #6
 8003cac:	e00a      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cae:	2305      	movs	r3, #5
 8003cb0:	e008      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	e006      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e004      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e002      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	f002 0203 	and.w	r2, r2, #3
 8003cca:	0092      	lsls	r2, r2, #2
 8003ccc:	4093      	lsls	r3, r2
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cd4:	4935      	ldr	r1, [pc, #212]	@ (8003dac <HAL_GPIO_Init+0x328>)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	089b      	lsrs	r3, r3, #2
 8003cda:	3302      	adds	r3, #2
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d06:	4a34      	ldr	r2, [pc, #208]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d0c:	4b32      	ldr	r3, [pc, #200]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d30:	4a29      	ldr	r2, [pc, #164]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d36:	4b28      	ldr	r3, [pc, #160]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d60:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d84:	4a14      	ldr	r2, [pc, #80]	@ (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b0f      	cmp	r3, #15
 8003d94:	f67f ae84 	bls.w	8003aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	3724      	adds	r7, #36	@ 0x24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	40013800 	.word	0x40013800
 8003db0:	40020000 	.word	0x40020000
 8003db4:	40020400 	.word	0x40020400
 8003db8:	40020800 	.word	0x40020800
 8003dbc:	40020c00 	.word	0x40020c00
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40021400 	.word	0x40021400
 8003dc8:	40021800 	.word	0x40021800
 8003dcc:	40021c00 	.word	0x40021c00
 8003dd0:	40022000 	.word	0x40022000
 8003dd4:	40022400 	.word	0x40022400
 8003dd8:	40013c00 	.word	0x40013c00

08003ddc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e0d9      	b.n	8003fac <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003df8:	2201      	movs	r2, #1
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	f040 80c9 	bne.w	8003fa6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003e14:	4a6b      	ldr	r2, [pc, #428]	@ (8003fc4 <HAL_GPIO_DeInit+0x1e8>)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	089b      	lsrs	r3, r3, #2
 8003e1a:	3302      	adds	r3, #2
 8003e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e20:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	220f      	movs	r2, #15
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	4013      	ands	r3, r2
 8003e34:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a63      	ldr	r2, [pc, #396]	@ (8003fc8 <HAL_GPIO_DeInit+0x1ec>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d037      	beq.n	8003eae <HAL_GPIO_DeInit+0xd2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a62      	ldr	r2, [pc, #392]	@ (8003fcc <HAL_GPIO_DeInit+0x1f0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d031      	beq.n	8003eaa <HAL_GPIO_DeInit+0xce>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a61      	ldr	r2, [pc, #388]	@ (8003fd0 <HAL_GPIO_DeInit+0x1f4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02b      	beq.n	8003ea6 <HAL_GPIO_DeInit+0xca>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a60      	ldr	r2, [pc, #384]	@ (8003fd4 <HAL_GPIO_DeInit+0x1f8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d025      	beq.n	8003ea2 <HAL_GPIO_DeInit+0xc6>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a5f      	ldr	r2, [pc, #380]	@ (8003fd8 <HAL_GPIO_DeInit+0x1fc>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d01f      	beq.n	8003e9e <HAL_GPIO_DeInit+0xc2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a5e      	ldr	r2, [pc, #376]	@ (8003fdc <HAL_GPIO_DeInit+0x200>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d019      	beq.n	8003e9a <HAL_GPIO_DeInit+0xbe>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a5d      	ldr	r2, [pc, #372]	@ (8003fe0 <HAL_GPIO_DeInit+0x204>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d013      	beq.n	8003e96 <HAL_GPIO_DeInit+0xba>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a5c      	ldr	r2, [pc, #368]	@ (8003fe4 <HAL_GPIO_DeInit+0x208>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00d      	beq.n	8003e92 <HAL_GPIO_DeInit+0xb6>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a5b      	ldr	r2, [pc, #364]	@ (8003fe8 <HAL_GPIO_DeInit+0x20c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d007      	beq.n	8003e8e <HAL_GPIO_DeInit+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a5a      	ldr	r2, [pc, #360]	@ (8003fec <HAL_GPIO_DeInit+0x210>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d101      	bne.n	8003e8a <HAL_GPIO_DeInit+0xae>
 8003e86:	2309      	movs	r3, #9
 8003e88:	e012      	b.n	8003eb0 <HAL_GPIO_DeInit+0xd4>
 8003e8a:	230a      	movs	r3, #10
 8003e8c:	e010      	b.n	8003eb0 <HAL_GPIO_DeInit+0xd4>
 8003e8e:	2308      	movs	r3, #8
 8003e90:	e00e      	b.n	8003eb0 <HAL_GPIO_DeInit+0xd4>
 8003e92:	2307      	movs	r3, #7
 8003e94:	e00c      	b.n	8003eb0 <HAL_GPIO_DeInit+0xd4>
 8003e96:	2306      	movs	r3, #6
 8003e98:	e00a      	b.n	8003eb0 <HAL_GPIO_DeInit+0xd4>
 8003e9a:	2305      	movs	r3, #5
 8003e9c:	e008      	b.n	8003eb0 <HAL_GPIO_DeInit+0xd4>
 8003e9e:	2304      	movs	r3, #4
 8003ea0:	e006      	b.n	8003eb0 <HAL_GPIO_DeInit+0xd4>
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e004      	b.n	8003eb0 <HAL_GPIO_DeInit+0xd4>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e002      	b.n	8003eb0 <HAL_GPIO_DeInit+0xd4>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <HAL_GPIO_DeInit+0xd4>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	f002 0203 	and.w	r2, r2, #3
 8003eb6:	0092      	lsls	r2, r2, #2
 8003eb8:	4093      	lsls	r3, r2
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d132      	bne.n	8003f26 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ec0:	4b4b      	ldr	r3, [pc, #300]	@ (8003ff0 <HAL_GPIO_DeInit+0x214>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	4949      	ldr	r1, [pc, #292]	@ (8003ff0 <HAL_GPIO_DeInit+0x214>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003ece:	4b48      	ldr	r3, [pc, #288]	@ (8003ff0 <HAL_GPIO_DeInit+0x214>)
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	4946      	ldr	r1, [pc, #280]	@ (8003ff0 <HAL_GPIO_DeInit+0x214>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003edc:	4b44      	ldr	r3, [pc, #272]	@ (8003ff0 <HAL_GPIO_DeInit+0x214>)
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	4942      	ldr	r1, [pc, #264]	@ (8003ff0 <HAL_GPIO_DeInit+0x214>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003eea:	4b41      	ldr	r3, [pc, #260]	@ (8003ff0 <HAL_GPIO_DeInit+0x214>)
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	493f      	ldr	r1, [pc, #252]	@ (8003ff0 <HAL_GPIO_DeInit+0x214>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	220f      	movs	r2, #15
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003f08:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc4 <HAL_GPIO_DeInit+0x1e8>)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	089b      	lsrs	r3, r3, #2
 8003f0e:	3302      	adds	r3, #2
 8003f10:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	43da      	mvns	r2, r3
 8003f18:	482a      	ldr	r0, [pc, #168]	@ (8003fc4 <HAL_GPIO_DeInit+0x1e8>)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	400a      	ands	r2, r1
 8003f20:	3302      	adds	r3, #2
 8003f22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	2103      	movs	r1, #3
 8003f30:	fa01 f303 	lsl.w	r3, r1, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	401a      	ands	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	08da      	lsrs	r2, r3, #3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3208      	adds	r2, #8
 8003f44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	220f      	movs	r2, #15
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	08d2      	lsrs	r2, r2, #3
 8003f5c:	4019      	ands	r1, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3208      	adds	r2, #8
 8003f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	2103      	movs	r1, #3
 8003f70:	fa01 f303 	lsl.w	r3, r1, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	401a      	ands	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	2101      	movs	r1, #1
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	fa01 f303 	lsl.w	r3, r1, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	401a      	ands	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	2103      	movs	r1, #3
 8003f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	401a      	ands	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2b0f      	cmp	r3, #15
 8003fb0:	f67f af22 	bls.w	8003df8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40013800 	.word	0x40013800
 8003fc8:	40020000 	.word	0x40020000
 8003fcc:	40020400 	.word	0x40020400
 8003fd0:	40020800 	.word	0x40020800
 8003fd4:	40020c00 	.word	0x40020c00
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40021400 	.word	0x40021400
 8003fe0:	40021800 	.word	0x40021800
 8003fe4:	40021c00 	.word	0x40021c00
 8003fe8:	40022000 	.word	0x40022000
 8003fec:	40022400 	.word	0x40022400
 8003ff0:	40013c00 	.word	0x40013c00

08003ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	807b      	strh	r3, [r7, #2]
 8004000:	4613      	mov	r3, r2
 8004002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004004:	787b      	ldrb	r3, [r7, #1]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004010:	e003      	b.n	800401a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004012:	887b      	ldrh	r3, [r7, #2]
 8004014:	041a      	lsls	r2, r3, #16
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	619a      	str	r2, [r3, #24]
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e12b      	b.n	8004292 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fe fc7a 	bl	8002948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2224      	movs	r2, #36	@ 0x24
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800407a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800408a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800408c:	f001 ff82 	bl	8005f94 <HAL_RCC_GetPCLK1Freq>
 8004090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4a81      	ldr	r2, [pc, #516]	@ (800429c <HAL_I2C_Init+0x274>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d807      	bhi.n	80040ac <HAL_I2C_Init+0x84>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a80      	ldr	r2, [pc, #512]	@ (80042a0 <HAL_I2C_Init+0x278>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	bf94      	ite	ls
 80040a4:	2301      	movls	r3, #1
 80040a6:	2300      	movhi	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e006      	b.n	80040ba <HAL_I2C_Init+0x92>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4a7d      	ldr	r2, [pc, #500]	@ (80042a4 <HAL_I2C_Init+0x27c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	bf94      	ite	ls
 80040b4:	2301      	movls	r3, #1
 80040b6:	2300      	movhi	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e0e7      	b.n	8004292 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4a78      	ldr	r2, [pc, #480]	@ (80042a8 <HAL_I2C_Init+0x280>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	0c9b      	lsrs	r3, r3, #18
 80040cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a6a      	ldr	r2, [pc, #424]	@ (800429c <HAL_I2C_Init+0x274>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d802      	bhi.n	80040fc <HAL_I2C_Init+0xd4>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	3301      	adds	r3, #1
 80040fa:	e009      	b.n	8004110 <HAL_I2C_Init+0xe8>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	4a69      	ldr	r2, [pc, #420]	@ (80042ac <HAL_I2C_Init+0x284>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	099b      	lsrs	r3, r3, #6
 800410e:	3301      	adds	r3, #1
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	430b      	orrs	r3, r1
 8004116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004122:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	495c      	ldr	r1, [pc, #368]	@ (800429c <HAL_I2C_Init+0x274>)
 800412c:	428b      	cmp	r3, r1
 800412e:	d819      	bhi.n	8004164 <HAL_I2C_Init+0x13c>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	1e59      	subs	r1, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	fbb1 f3f3 	udiv	r3, r1, r3
 800413e:	1c59      	adds	r1, r3, #1
 8004140:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004144:	400b      	ands	r3, r1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_I2C_Init+0x138>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1e59      	subs	r1, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	fbb1 f3f3 	udiv	r3, r1, r3
 8004158:	3301      	adds	r3, #1
 800415a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415e:	e051      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 8004160:	2304      	movs	r3, #4
 8004162:	e04f      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d111      	bne.n	8004190 <HAL_I2C_Init+0x168>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	1e58      	subs	r0, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	440b      	add	r3, r1
 800417a:	fbb0 f3f3 	udiv	r3, r0, r3
 800417e:	3301      	adds	r3, #1
 8004180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	e012      	b.n	80041b6 <HAL_I2C_Init+0x18e>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1e58      	subs	r0, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6859      	ldr	r1, [r3, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	0099      	lsls	r1, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a6:	3301      	adds	r3, #1
 80041a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_I2C_Init+0x196>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e022      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10e      	bne.n	80041e4 <HAL_I2C_Init+0x1bc>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1e58      	subs	r0, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6859      	ldr	r1, [r3, #4]
 80041ce:	460b      	mov	r3, r1
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	440b      	add	r3, r1
 80041d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d8:	3301      	adds	r3, #1
 80041da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041e2:	e00f      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1e58      	subs	r0, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6859      	ldr	r1, [r3, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	0099      	lsls	r1, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041fa:	3301      	adds	r3, #1
 80041fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004200:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	6809      	ldr	r1, [r1, #0]
 8004208:	4313      	orrs	r3, r2
 800420a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69da      	ldr	r2, [r3, #28]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004232:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6911      	ldr	r1, [r2, #16]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	68d2      	ldr	r2, [r2, #12]
 800423e:	4311      	orrs	r1, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	430b      	orrs	r3, r1
 8004246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	000186a0 	.word	0x000186a0
 80042a0:	001e847f 	.word	0x001e847f
 80042a4:	003d08ff 	.word	0x003d08ff
 80042a8:	431bde83 	.word	0x431bde83
 80042ac:	10624dd3 	.word	0x10624dd3

080042b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	4608      	mov	r0, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	461a      	mov	r2, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	817b      	strh	r3, [r7, #10]
 80042c2:	460b      	mov	r3, r1
 80042c4:	813b      	strh	r3, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ca:	f7ff fa3b 	bl	8003744 <HAL_GetTick>
 80042ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b20      	cmp	r3, #32
 80042da:	f040 80d9 	bne.w	8004490 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	2319      	movs	r3, #25
 80042e4:	2201      	movs	r2, #1
 80042e6:	496d      	ldr	r1, [pc, #436]	@ (800449c <HAL_I2C_Mem_Write+0x1ec>)
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fc8b 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
 80042f6:	e0cc      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_I2C_Mem_Write+0x56>
 8004302:	2302      	movs	r3, #2
 8004304:	e0c5      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d007      	beq.n	800432c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800433a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2221      	movs	r2, #33	@ 0x21
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2240      	movs	r2, #64	@ 0x40
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a3a      	ldr	r2, [r7, #32]
 8004356:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800435c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4a4d      	ldr	r2, [pc, #308]	@ (80044a0 <HAL_I2C_Mem_Write+0x1f0>)
 800436c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800436e:	88f8      	ldrh	r0, [r7, #6]
 8004370:	893a      	ldrh	r2, [r7, #8]
 8004372:	8979      	ldrh	r1, [r7, #10]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	4603      	mov	r3, r0
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 fac2 	bl	8004908 <I2C_RequestMemoryWrite>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d052      	beq.n	8004430 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e081      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fd50 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d107      	bne.n	80043b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e06b      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	781a      	ldrb	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d11b      	bne.n	8004430 <HAL_I2C_Mem_Write+0x180>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d017      	beq.n	8004430 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	781a      	ldrb	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1aa      	bne.n	800438e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fd43 	bl	8004ec8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00d      	beq.n	8004464 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444c:	2b04      	cmp	r3, #4
 800444e:	d107      	bne.n	8004460 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800445e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e016      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	e000      	b.n	8004492 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004490:	2302      	movs	r3, #2
  }
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	00100002 	.word	0x00100002
 80044a0:	ffff0000 	.word	0xffff0000

080044a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08c      	sub	sp, #48	@ 0x30
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	4608      	mov	r0, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	461a      	mov	r2, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	817b      	strh	r3, [r7, #10]
 80044b6:	460b      	mov	r3, r1
 80044b8:	813b      	strh	r3, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044be:	f7ff f941 	bl	8003744 <HAL_GetTick>
 80044c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	f040 8214 	bne.w	80048fa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	2319      	movs	r3, #25
 80044d8:	2201      	movs	r2, #1
 80044da:	497b      	ldr	r1, [pc, #492]	@ (80046c8 <HAL_I2C_Mem_Read+0x224>)
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fb91 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
 80044ea:	e207      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_I2C_Mem_Read+0x56>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e200      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d007      	beq.n	8004520 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800452e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2222      	movs	r2, #34	@ 0x22
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2240      	movs	r2, #64	@ 0x40
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800454a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004550:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a5b      	ldr	r2, [pc, #364]	@ (80046cc <HAL_I2C_Mem_Read+0x228>)
 8004560:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004562:	88f8      	ldrh	r0, [r7, #6]
 8004564:	893a      	ldrh	r2, [r7, #8]
 8004566:	8979      	ldrh	r1, [r7, #10]
 8004568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456a:	9301      	str	r3, [sp, #4]
 800456c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	4603      	mov	r3, r0
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 fa5e 	bl	8004a34 <I2C_RequestMemoryRead>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e1bc      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004586:	2b00      	cmp	r3, #0
 8004588:	d113      	bne.n	80045b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458a:	2300      	movs	r3, #0
 800458c:	623b      	str	r3, [r7, #32]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	623b      	str	r3, [r7, #32]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	623b      	str	r3, [r7, #32]
 800459e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	e190      	b.n	80048d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d11b      	bne.n	80045f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	61fb      	str	r3, [r7, #28]
 80045de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e170      	b.n	80048d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d11b      	bne.n	8004632 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004608:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004618:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461a:	2300      	movs	r3, #0
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	e150      	b.n	80048d4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004648:	e144      	b.n	80048d4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464e:	2b03      	cmp	r3, #3
 8004650:	f200 80f1 	bhi.w	8004836 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004658:	2b01      	cmp	r3, #1
 800465a:	d123      	bne.n	80046a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800465c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800465e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fc79 	bl	8004f58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e145      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046a2:	e117      	b.n	80048d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d14e      	bne.n	800474a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b2:	2200      	movs	r2, #0
 80046b4:	4906      	ldr	r1, [pc, #24]	@ (80046d0 <HAL_I2C_Mem_Read+0x22c>)
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 faa4 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e11a      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
 80046c6:	bf00      	nop
 80046c8:	00100002 	.word	0x00100002
 80046cc:	ffff0000 	.word	0xffff0000
 80046d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004748:	e0c4      	b.n	80048d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004750:	2200      	movs	r2, #0
 8004752:	496c      	ldr	r1, [pc, #432]	@ (8004904 <HAL_I2C_Mem_Read+0x460>)
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fa55 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0cb      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004772:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ac:	2200      	movs	r2, #0
 80047ae:	4955      	ldr	r1, [pc, #340]	@ (8004904 <HAL_I2C_Mem_Read+0x460>)
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fa27 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e09d      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691a      	ldr	r2, [r3, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004834:	e04e      	b.n	80048d4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004838:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 fb8c 	bl	8004f58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e058      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b04      	cmp	r3, #4
 8004888:	d124      	bne.n	80048d4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488e:	2b03      	cmp	r3, #3
 8004890:	d107      	bne.n	80048a2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048a0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f47f aeb6 	bne.w	800464a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	e000      	b.n	80048fc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80048fa:	2302      	movs	r3, #2
  }
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3728      	adds	r7, #40	@ 0x28
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	00010004 	.word	0x00010004

08004908 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af02      	add	r7, sp, #8
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	4608      	mov	r0, r1
 8004912:	4611      	mov	r1, r2
 8004914:	461a      	mov	r2, r3
 8004916:	4603      	mov	r3, r0
 8004918:	817b      	strh	r3, [r7, #10]
 800491a:	460b      	mov	r3, r1
 800491c:	813b      	strh	r3, [r7, #8]
 800491e:	4613      	mov	r3, r2
 8004920:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004930:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	2200      	movs	r2, #0
 800493a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f960 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00d      	beq.n	8004966 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004954:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004958:	d103      	bne.n	8004962 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004960:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e05f      	b.n	8004a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004966:	897b      	ldrh	r3, [r7, #10]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004974:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004978:	6a3a      	ldr	r2, [r7, #32]
 800497a:	492d      	ldr	r1, [pc, #180]	@ (8004a30 <I2C_RequestMemoryWrite+0x128>)
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f9bb 	bl	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e04c      	b.n	8004a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049a4:	6a39      	ldr	r1, [r7, #32]
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 fa46 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00d      	beq.n	80049ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d107      	bne.n	80049ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e02b      	b.n	8004a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d105      	bne.n	80049e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049d4:	893b      	ldrh	r3, [r7, #8]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	611a      	str	r2, [r3, #16]
 80049de:	e021      	b.n	8004a24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049e0:	893b      	ldrh	r3, [r7, #8]
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f0:	6a39      	ldr	r1, [r7, #32]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fa20 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d107      	bne.n	8004a16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e005      	b.n	8004a26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a1a:	893b      	ldrh	r3, [r7, #8]
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	00010002 	.word	0x00010002

08004a34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	461a      	mov	r2, r3
 8004a42:	4603      	mov	r3, r0
 8004a44:	817b      	strh	r3, [r7, #10]
 8004a46:	460b      	mov	r3, r1
 8004a48:	813b      	strh	r3, [r7, #8]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f8c2 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00d      	beq.n	8004aa2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a94:	d103      	bne.n	8004a9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e0aa      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aa2:	897b      	ldrh	r3, [r7, #10]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ab0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	6a3a      	ldr	r2, [r7, #32]
 8004ab6:	4952      	ldr	r1, [pc, #328]	@ (8004c00 <I2C_RequestMemoryRead+0x1cc>)
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f91d 	bl	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e097      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae0:	6a39      	ldr	r1, [r7, #32]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f9a8 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00d      	beq.n	8004b0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d107      	bne.n	8004b06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e076      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d105      	bne.n	8004b1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b10:	893b      	ldrh	r3, [r7, #8]
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	611a      	str	r2, [r3, #16]
 8004b1a:	e021      	b.n	8004b60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b1c:	893b      	ldrh	r3, [r7, #8]
 8004b1e:	0a1b      	lsrs	r3, r3, #8
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b2c:	6a39      	ldr	r1, [r7, #32]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f982 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d107      	bne.n	8004b52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e050      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b56:	893b      	ldrh	r3, [r7, #8]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b62:	6a39      	ldr	r1, [r7, #32]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f967 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d107      	bne.n	8004b88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e035      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f82b 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc2:	d103      	bne.n	8004bcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e013      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bd0:	897b      	ldrh	r3, [r7, #10]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be2:	6a3a      	ldr	r2, [r7, #32]
 8004be4:	4906      	ldr	r1, [pc, #24]	@ (8004c00 <I2C_RequestMemoryRead+0x1cc>)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f886 	bl	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	00010002 	.word	0x00010002

08004c04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c14:	e048      	b.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d044      	beq.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fe fd91 	bl	8003744 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d302      	bcc.n	8004c34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d139      	bne.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d10d      	bne.n	8004c5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	43da      	mvns	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	e00c      	b.n	8004c74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	43da      	mvns	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	4013      	ands	r3, r2
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2301      	moveq	r3, #1
 8004c6e:	2300      	movne	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d116      	bne.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c94:	f043 0220 	orr.w	r2, r3, #32
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e023      	b.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d10d      	bne.n	8004cce <I2C_WaitOnFlagUntilTimeout+0xca>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	43da      	mvns	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	e00c      	b.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	43da      	mvns	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d093      	beq.n	8004c16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d06:	e071      	b.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d16:	d123      	bne.n	8004d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4c:	f043 0204 	orr.w	r2, r3, #4
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e067      	b.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d041      	beq.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d68:	f7fe fcec 	bl	8003744 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d302      	bcc.n	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d136      	bne.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d10c      	bne.n	8004da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	43da      	mvns	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4013      	ands	r3, r2
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bf14      	ite	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	2300      	moveq	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	e00b      	b.n	8004dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	43da      	mvns	r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	4013      	ands	r3, r2
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	bf14      	ite	ne
 8004db4:	2301      	movne	r3, #1
 8004db6:	2300      	moveq	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d016      	beq.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e021      	b.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	0c1b      	lsrs	r3, r3, #16
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d10c      	bne.n	8004e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	43da      	mvns	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4013      	ands	r3, r2
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e00b      	b.n	8004e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	43da      	mvns	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f47f af6d 	bne.w	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e44:	e034      	b.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f8e3 	bl	8005012 <I2C_IsAcknowledgeFailed>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e034      	b.n	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d028      	beq.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5e:	f7fe fc71 	bl	8003744 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d302      	bcc.n	8004e74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d11d      	bne.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7e:	2b80      	cmp	r3, #128	@ 0x80
 8004e80:	d016      	beq.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	f043 0220 	orr.w	r2, r3, #32
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e007      	b.n	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eba:	2b80      	cmp	r3, #128	@ 0x80
 8004ebc:	d1c3      	bne.n	8004e46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ed4:	e034      	b.n	8004f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f89b 	bl	8005012 <I2C_IsAcknowledgeFailed>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e034      	b.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eec:	d028      	beq.n	8004f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eee:	f7fe fc29 	bl	8003744 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d302      	bcc.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d11d      	bne.n	8004f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d016      	beq.n	8004f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e007      	b.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d1c3      	bne.n	8004ed6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f64:	e049      	b.n	8004ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b10      	cmp	r3, #16
 8004f72:	d119      	bne.n	8004fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0210 	mvn.w	r2, #16
 8004f7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e030      	b.n	800500a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa8:	f7fe fbcc 	bl	8003744 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d302      	bcc.n	8004fbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d11d      	bne.n	8004ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc8:	2b40      	cmp	r3, #64	@ 0x40
 8004fca:	d016      	beq.n	8004ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	f043 0220 	orr.w	r2, r3, #32
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e007      	b.n	800500a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005004:	2b40      	cmp	r3, #64	@ 0x40
 8005006:	d1ae      	bne.n	8004f66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005028:	d11b      	bne.n	8005062 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005032:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	f043 0204 	orr.w	r2, r3, #4
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b20      	cmp	r3, #32
 8005084:	d129      	bne.n	80050da <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2224      	movs	r2, #36	@ 0x24
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0210 	bic.w	r2, r2, #16
 80050ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0201 	orr.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e000      	b.n	80050dc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80050da:	2302      	movs	r3, #2
  }
}
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80050f2:	2300      	movs	r3, #0
 80050f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d12a      	bne.n	8005158 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2224      	movs	r2, #36	@ 0x24
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005120:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005122:	89fb      	ldrh	r3, [r7, #14]
 8005124:	f023 030f 	bic.w	r3, r3, #15
 8005128:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	b29a      	uxth	r2, r3
 800512e:	89fb      	ldrh	r3, [r7, #14]
 8005130:	4313      	orrs	r3, r2
 8005132:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	89fa      	ldrh	r2, [r7, #14]
 800513a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	e000      	b.n	800515a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005158:	2302      	movs	r3, #2
  }
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e0bf      	b.n	80052fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fd fc44 	bl	8002a1c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80051aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6999      	ldr	r1, [r3, #24]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6899      	ldr	r1, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4b4a      	ldr	r3, [pc, #296]	@ (8005304 <HAL_LTDC_Init+0x19c>)
 80051dc:	400b      	ands	r3, r1
 80051de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	041b      	lsls	r3, r3, #16
 80051e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6899      	ldr	r1, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68d9      	ldr	r1, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4b3e      	ldr	r3, [pc, #248]	@ (8005304 <HAL_LTDC_Init+0x19c>)
 800520a:	400b      	ands	r3, r1
 800520c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	041b      	lsls	r3, r3, #16
 8005214:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68d9      	ldr	r1, [r3, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6919      	ldr	r1, [r3, #16]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	4b33      	ldr	r3, [pc, #204]	@ (8005304 <HAL_LTDC_Init+0x19c>)
 8005238:	400b      	ands	r3, r1
 800523a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6919      	ldr	r1, [r3, #16]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6959      	ldr	r1, [r3, #20]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b27      	ldr	r3, [pc, #156]	@ (8005304 <HAL_LTDC_Init+0x19c>)
 8005266:	400b      	ands	r3, r1
 8005268:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526e:	041b      	lsls	r3, r3, #16
 8005270:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6959      	ldr	r1, [r3, #20]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80052aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0206 	orr.w	r2, r2, #6
 80052d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	f000f800 	.word	0xf000f800

08005308 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005308:	b5b0      	push	{r4, r5, r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800531a:	2b01      	cmp	r3, #1
 800531c:	d101      	bne.n	8005322 <HAL_LTDC_ConfigLayer+0x1a>
 800531e:	2302      	movs	r3, #2
 8005320:	e02c      	b.n	800537c <HAL_LTDC_ConfigLayer+0x74>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2134      	movs	r1, #52	@ 0x34
 8005338:	fb01 f303 	mul.w	r3, r1, r3
 800533c:	4413      	add	r3, r2
 800533e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4614      	mov	r4, r2
 8005346:	461d      	mov	r5, r3
 8005348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800534a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800534c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800534e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f811 	bl	8005384 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2201      	movs	r2, #1
 8005368:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bdb0      	pop	{r4, r5, r7, pc}

08005384 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005384:	b480      	push	{r7}
 8005386:	b089      	sub	sp, #36	@ 0x24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	0c1b      	lsrs	r3, r3, #16
 800539c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a0:	4413      	add	r3, r2
 80053a2:	041b      	lsls	r3, r3, #16
 80053a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	01db      	lsls	r3, r3, #7
 80053b0:	4413      	add	r3, r2
 80053b2:	3384      	adds	r3, #132	@ 0x84
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	4611      	mov	r1, r2
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	01d2      	lsls	r2, r2, #7
 80053c0:	440a      	add	r2, r1
 80053c2:	3284      	adds	r2, #132	@ 0x84
 80053c4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80053c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	0c1b      	lsrs	r3, r3, #16
 80053d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053da:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053dc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4619      	mov	r1, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	01db      	lsls	r3, r3, #7
 80053e8:	440b      	add	r3, r1
 80053ea:	3384      	adds	r3, #132	@ 0x84
 80053ec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005402:	4413      	add	r3, r2
 8005404:	041b      	lsls	r3, r3, #16
 8005406:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	01db      	lsls	r3, r3, #7
 8005412:	4413      	add	r3, r2
 8005414:	3384      	adds	r3, #132	@ 0x84
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	4611      	mov	r1, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	01d2      	lsls	r2, r2, #7
 8005422:	440a      	add	r2, r1
 8005424:	3284      	adds	r2, #132	@ 0x84
 8005426:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800542a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800543a:	4413      	add	r3, r2
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4619      	mov	r1, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	01db      	lsls	r3, r3, #7
 8005448:	440b      	add	r3, r1
 800544a:	3384      	adds	r3, #132	@ 0x84
 800544c:	4619      	mov	r1, r3
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4313      	orrs	r3, r2
 8005452:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	01db      	lsls	r3, r3, #7
 800545e:	4413      	add	r3, r2
 8005460:	3384      	adds	r3, #132	@ 0x84
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	6812      	ldr	r2, [r2, #0]
 8005468:	4611      	mov	r1, r2
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	01d2      	lsls	r2, r2, #7
 800546e:	440a      	add	r2, r1
 8005470:	3284      	adds	r2, #132	@ 0x84
 8005472:	f023 0307 	bic.w	r3, r3, #7
 8005476:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	01db      	lsls	r3, r3, #7
 8005482:	4413      	add	r3, r2
 8005484:	3384      	adds	r3, #132	@ 0x84
 8005486:	461a      	mov	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005494:	021b      	lsls	r3, r3, #8
 8005496:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800549e:	041b      	lsls	r3, r3, #16
 80054a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	061b      	lsls	r3, r3, #24
 80054a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	01db      	lsls	r3, r3, #7
 80054b4:	4413      	add	r3, r2
 80054b6:	3384      	adds	r3, #132	@ 0x84
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	01db      	lsls	r3, r3, #7
 80054c4:	4413      	add	r3, r2
 80054c6:	3384      	adds	r3, #132	@ 0x84
 80054c8:	461a      	mov	r2, r3
 80054ca:	2300      	movs	r3, #0
 80054cc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80054d4:	461a      	mov	r2, r3
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	431a      	orrs	r2, r3
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	431a      	orrs	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4619      	mov	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	01db      	lsls	r3, r3, #7
 80054e8:	440b      	add	r3, r1
 80054ea:	3384      	adds	r3, #132	@ 0x84
 80054ec:	4619      	mov	r1, r3
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	01db      	lsls	r3, r3, #7
 80054fe:	4413      	add	r3, r2
 8005500:	3384      	adds	r3, #132	@ 0x84
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	6812      	ldr	r2, [r2, #0]
 8005508:	4611      	mov	r1, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	01d2      	lsls	r2, r2, #7
 800550e:	440a      	add	r2, r1
 8005510:	3284      	adds	r2, #132	@ 0x84
 8005512:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005516:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	01db      	lsls	r3, r3, #7
 8005522:	4413      	add	r3, r2
 8005524:	3384      	adds	r3, #132	@ 0x84
 8005526:	461a      	mov	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	01db      	lsls	r3, r3, #7
 8005538:	4413      	add	r3, r2
 800553a:	3384      	adds	r3, #132	@ 0x84
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	4611      	mov	r1, r2
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	01d2      	lsls	r2, r2, #7
 8005548:	440a      	add	r2, r1
 800554a:	3284      	adds	r2, #132	@ 0x84
 800554c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005550:	f023 0307 	bic.w	r3, r3, #7
 8005554:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	69da      	ldr	r2, [r3, #28]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	6809      	ldr	r1, [r1, #0]
 8005562:	4608      	mov	r0, r1
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	01c9      	lsls	r1, r1, #7
 8005568:	4401      	add	r1, r0
 800556a:	3184      	adds	r1, #132	@ 0x84
 800556c:	4313      	orrs	r3, r2
 800556e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	01db      	lsls	r3, r3, #7
 800557a:	4413      	add	r3, r2
 800557c:	3384      	adds	r3, #132	@ 0x84
 800557e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	01db      	lsls	r3, r3, #7
 800558a:	4413      	add	r3, r2
 800558c:	3384      	adds	r3, #132	@ 0x84
 800558e:	461a      	mov	r2, r3
 8005590:	2300      	movs	r3, #0
 8005592:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	461a      	mov	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	01db      	lsls	r3, r3, #7
 800559e:	4413      	add	r3, r2
 80055a0:	3384      	adds	r3, #132	@ 0x84
 80055a2:	461a      	mov	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d102      	bne.n	80055b8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80055b2:	2304      	movs	r3, #4
 80055b4:	61fb      	str	r3, [r7, #28]
 80055b6:	e01b      	b.n	80055f0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d102      	bne.n	80055c6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80055c0:	2303      	movs	r3, #3
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	e014      	b.n	80055f0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d00b      	beq.n	80055e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d007      	beq.n	80055e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d003      	beq.n	80055e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80055e2:	2b07      	cmp	r3, #7
 80055e4:	d102      	bne.n	80055ec <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80055e6:	2302      	movs	r3, #2
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	e001      	b.n	80055f0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80055ec:	2301      	movs	r3, #1
 80055ee:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	01db      	lsls	r3, r3, #7
 80055fa:	4413      	add	r3, r2
 80055fc:	3384      	adds	r3, #132	@ 0x84
 80055fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	4611      	mov	r1, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	01d2      	lsls	r2, r2, #7
 800560a:	440a      	add	r2, r1
 800560c:	3284      	adds	r2, #132	@ 0x84
 800560e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005612:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	fb02 f303 	mul.w	r3, r2, r3
 800561e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	6859      	ldr	r1, [r3, #4]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	1acb      	subs	r3, r1, r3
 800562a:	69f9      	ldr	r1, [r7, #28]
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005632:	68f9      	ldr	r1, [r7, #12]
 8005634:	6809      	ldr	r1, [r1, #0]
 8005636:	4608      	mov	r0, r1
 8005638:	6879      	ldr	r1, [r7, #4]
 800563a:	01c9      	lsls	r1, r1, #7
 800563c:	4401      	add	r1, r0
 800563e:	3184      	adds	r1, #132	@ 0x84
 8005640:	4313      	orrs	r3, r2
 8005642:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	01db      	lsls	r3, r3, #7
 800564e:	4413      	add	r3, r2
 8005650:	3384      	adds	r3, #132	@ 0x84
 8005652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	4611      	mov	r1, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	01d2      	lsls	r2, r2, #7
 800565e:	440a      	add	r2, r1
 8005660:	3284      	adds	r2, #132	@ 0x84
 8005662:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005666:	f023 0307 	bic.w	r3, r3, #7
 800566a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	01db      	lsls	r3, r3, #7
 8005676:	4413      	add	r3, r2
 8005678:	3384      	adds	r3, #132	@ 0x84
 800567a:	461a      	mov	r2, r3
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005680:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	01db      	lsls	r3, r3, #7
 800568c:	4413      	add	r3, r2
 800568e:	3384      	adds	r3, #132	@ 0x84
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	4611      	mov	r1, r2
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	01d2      	lsls	r2, r2, #7
 800569c:	440a      	add	r2, r1
 800569e:	3284      	adds	r2, #132	@ 0x84
 80056a0:	f043 0301 	orr.w	r3, r3, #1
 80056a4:	6013      	str	r3, [r2, #0]
}
 80056a6:	bf00      	nop
 80056a8:	3724      	adds	r7, #36	@ 0x24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e267      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d075      	beq.n	80057be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80056d2:	4b88      	ldr	r3, [pc, #544]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 030c 	and.w	r3, r3, #12
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d00c      	beq.n	80056f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056de:	4b85      	ldr	r3, [pc, #532]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d112      	bne.n	8005710 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ea:	4b82      	ldr	r3, [pc, #520]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056f6:	d10b      	bne.n	8005710 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f8:	4b7e      	ldr	r3, [pc, #504]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d05b      	beq.n	80057bc <HAL_RCC_OscConfig+0x108>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d157      	bne.n	80057bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e242      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005718:	d106      	bne.n	8005728 <HAL_RCC_OscConfig+0x74>
 800571a:	4b76      	ldr	r3, [pc, #472]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a75      	ldr	r2, [pc, #468]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	e01d      	b.n	8005764 <HAL_RCC_OscConfig+0xb0>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005730:	d10c      	bne.n	800574c <HAL_RCC_OscConfig+0x98>
 8005732:	4b70      	ldr	r3, [pc, #448]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a6f      	ldr	r2, [pc, #444]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	4b6d      	ldr	r3, [pc, #436]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a6c      	ldr	r2, [pc, #432]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	e00b      	b.n	8005764 <HAL_RCC_OscConfig+0xb0>
 800574c:	4b69      	ldr	r3, [pc, #420]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a68      	ldr	r2, [pc, #416]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	4b66      	ldr	r3, [pc, #408]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a65      	ldr	r2, [pc, #404]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 800575e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d013      	beq.n	8005794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576c:	f7fd ffea 	bl	8003744 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005774:	f7fd ffe6 	bl	8003744 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b64      	cmp	r3, #100	@ 0x64
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e207      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005786:	4b5b      	ldr	r3, [pc, #364]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0f0      	beq.n	8005774 <HAL_RCC_OscConfig+0xc0>
 8005792:	e014      	b.n	80057be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005794:	f7fd ffd6 	bl	8003744 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800579c:	f7fd ffd2 	bl	8003744 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b64      	cmp	r3, #100	@ 0x64
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e1f3      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ae:	4b51      	ldr	r3, [pc, #324]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1f0      	bne.n	800579c <HAL_RCC_OscConfig+0xe8>
 80057ba:	e000      	b.n	80057be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d063      	beq.n	8005892 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80057ca:	4b4a      	ldr	r3, [pc, #296]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 030c 	and.w	r3, r3, #12
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00b      	beq.n	80057ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057d6:	4b47      	ldr	r3, [pc, #284]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80057de:	2b08      	cmp	r3, #8
 80057e0:	d11c      	bne.n	800581c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057e2:	4b44      	ldr	r3, [pc, #272]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d116      	bne.n	800581c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ee:	4b41      	ldr	r3, [pc, #260]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <HAL_RCC_OscConfig+0x152>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d001      	beq.n	8005806 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e1c7      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005806:	4b3b      	ldr	r3, [pc, #236]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4937      	ldr	r1, [pc, #220]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005816:	4313      	orrs	r3, r2
 8005818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800581a:	e03a      	b.n	8005892 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d020      	beq.n	8005866 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005824:	4b34      	ldr	r3, [pc, #208]	@ (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005826:	2201      	movs	r2, #1
 8005828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582a:	f7fd ff8b 	bl	8003744 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005832:	f7fd ff87 	bl	8003744 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e1a8      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005844:	4b2b      	ldr	r3, [pc, #172]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0f0      	beq.n	8005832 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005850:	4b28      	ldr	r3, [pc, #160]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	4925      	ldr	r1, [pc, #148]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005860:	4313      	orrs	r3, r2
 8005862:	600b      	str	r3, [r1, #0]
 8005864:	e015      	b.n	8005892 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005866:	4b24      	ldr	r3, [pc, #144]	@ (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586c:	f7fd ff6a 	bl	8003744 <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005874:	f7fd ff66 	bl	8003744 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e187      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005886:	4b1b      	ldr	r3, [pc, #108]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f0      	bne.n	8005874 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d036      	beq.n	800590c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d016      	beq.n	80058d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058a6:	4b15      	ldr	r3, [pc, #84]	@ (80058fc <HAL_RCC_OscConfig+0x248>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ac:	f7fd ff4a 	bl	8003744 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058b4:	f7fd ff46 	bl	8003744 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e167      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058c6:	4b0b      	ldr	r3, [pc, #44]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80058c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0f0      	beq.n	80058b4 <HAL_RCC_OscConfig+0x200>
 80058d2:	e01b      	b.n	800590c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d4:	4b09      	ldr	r3, [pc, #36]	@ (80058fc <HAL_RCC_OscConfig+0x248>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058da:	f7fd ff33 	bl	8003744 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058e0:	e00e      	b.n	8005900 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058e2:	f7fd ff2f 	bl	8003744 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d907      	bls.n	8005900 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e150      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
 80058f4:	40023800 	.word	0x40023800
 80058f8:	42470000 	.word	0x42470000
 80058fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005900:	4b88      	ldr	r3, [pc, #544]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1ea      	bne.n	80058e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8097 	beq.w	8005a48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800591a:	2300      	movs	r3, #0
 800591c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800591e:	4b81      	ldr	r3, [pc, #516]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10f      	bne.n	800594a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800592a:	2300      	movs	r3, #0
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	4b7d      	ldr	r3, [pc, #500]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005932:	4a7c      	ldr	r2, [pc, #496]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005938:	6413      	str	r3, [r2, #64]	@ 0x40
 800593a:	4b7a      	ldr	r3, [pc, #488]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 800593c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005942:	60bb      	str	r3, [r7, #8]
 8005944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005946:	2301      	movs	r3, #1
 8005948:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594a:	4b77      	ldr	r3, [pc, #476]	@ (8005b28 <HAL_RCC_OscConfig+0x474>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005952:	2b00      	cmp	r3, #0
 8005954:	d118      	bne.n	8005988 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005956:	4b74      	ldr	r3, [pc, #464]	@ (8005b28 <HAL_RCC_OscConfig+0x474>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a73      	ldr	r2, [pc, #460]	@ (8005b28 <HAL_RCC_OscConfig+0x474>)
 800595c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005962:	f7fd feef 	bl	8003744 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596a:	f7fd feeb 	bl	8003744 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e10c      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597c:	4b6a      	ldr	r3, [pc, #424]	@ (8005b28 <HAL_RCC_OscConfig+0x474>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f0      	beq.n	800596a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d106      	bne.n	800599e <HAL_RCC_OscConfig+0x2ea>
 8005990:	4b64      	ldr	r3, [pc, #400]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005994:	4a63      	ldr	r2, [pc, #396]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005996:	f043 0301 	orr.w	r3, r3, #1
 800599a:	6713      	str	r3, [r2, #112]	@ 0x70
 800599c:	e01c      	b.n	80059d8 <HAL_RCC_OscConfig+0x324>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2b05      	cmp	r3, #5
 80059a4:	d10c      	bne.n	80059c0 <HAL_RCC_OscConfig+0x30c>
 80059a6:	4b5f      	ldr	r3, [pc, #380]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059aa:	4a5e      	ldr	r2, [pc, #376]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059ac:	f043 0304 	orr.w	r3, r3, #4
 80059b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80059b2:	4b5c      	ldr	r3, [pc, #368]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b6:	4a5b      	ldr	r2, [pc, #364]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059b8:	f043 0301 	orr.w	r3, r3, #1
 80059bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80059be:	e00b      	b.n	80059d8 <HAL_RCC_OscConfig+0x324>
 80059c0:	4b58      	ldr	r3, [pc, #352]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c4:	4a57      	ldr	r2, [pc, #348]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80059cc:	4b55      	ldr	r3, [pc, #340]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d0:	4a54      	ldr	r2, [pc, #336]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059d2:	f023 0304 	bic.w	r3, r3, #4
 80059d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d015      	beq.n	8005a0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e0:	f7fd feb0 	bl	8003744 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e6:	e00a      	b.n	80059fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e8:	f7fd feac 	bl	8003744 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e0cb      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059fe:	4b49      	ldr	r3, [pc, #292]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0ee      	beq.n	80059e8 <HAL_RCC_OscConfig+0x334>
 8005a0a:	e014      	b.n	8005a36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a0c:	f7fd fe9a 	bl	8003744 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a12:	e00a      	b.n	8005a2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a14:	f7fd fe96 	bl	8003744 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e0b5      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1ee      	bne.n	8005a14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a36:	7dfb      	ldrb	r3, [r7, #23]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d105      	bne.n	8005a48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a3c:	4b39      	ldr	r3, [pc, #228]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a40:	4a38      	ldr	r2, [pc, #224]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005a42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80a1 	beq.w	8005b94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a52:	4b34      	ldr	r3, [pc, #208]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 030c 	and.w	r3, r3, #12
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d05c      	beq.n	8005b18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d141      	bne.n	8005aea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a66:	4b31      	ldr	r3, [pc, #196]	@ (8005b2c <HAL_RCC_OscConfig+0x478>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a6c:	f7fd fe6a 	bl	8003744 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a74:	f7fd fe66 	bl	8003744 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e087      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a86:	4b27      	ldr	r3, [pc, #156]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	69da      	ldr	r2, [r3, #28]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa0:	019b      	lsls	r3, r3, #6
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	041b      	lsls	r3, r3, #16
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab4:	061b      	lsls	r3, r3, #24
 8005ab6:	491b      	ldr	r1, [pc, #108]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005abc:	4b1b      	ldr	r3, [pc, #108]	@ (8005b2c <HAL_RCC_OscConfig+0x478>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac2:	f7fd fe3f 	bl	8003744 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aca:	f7fd fe3b 	bl	8003744 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e05c      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005adc:	4b11      	ldr	r3, [pc, #68]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f0      	beq.n	8005aca <HAL_RCC_OscConfig+0x416>
 8005ae8:	e054      	b.n	8005b94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aea:	4b10      	ldr	r3, [pc, #64]	@ (8005b2c <HAL_RCC_OscConfig+0x478>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af0:	f7fd fe28 	bl	8003744 <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af8:	f7fd fe24 	bl	8003744 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e045      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b0a:	4b06      	ldr	r3, [pc, #24]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0x444>
 8005b16:	e03d      	b.n	8005b94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d107      	bne.n	8005b30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e038      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
 8005b24:	40023800 	.word	0x40023800
 8005b28:	40007000 	.word	0x40007000
 8005b2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b30:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba0 <HAL_RCC_OscConfig+0x4ec>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d028      	beq.n	8005b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d121      	bne.n	8005b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d11a      	bne.n	8005b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b60:	4013      	ands	r3, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d111      	bne.n	8005b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d107      	bne.n	8005b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d001      	beq.n	8005b94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e000      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40023800 	.word	0x40023800

08005ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e0cc      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bb8:	4b68      	ldr	r3, [pc, #416]	@ (8005d5c <HAL_RCC_ClockConfig+0x1b8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d90c      	bls.n	8005be0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc6:	4b65      	ldr	r3, [pc, #404]	@ (8005d5c <HAL_RCC_ClockConfig+0x1b8>)
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bce:	4b63      	ldr	r3, [pc, #396]	@ (8005d5c <HAL_RCC_ClockConfig+0x1b8>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d001      	beq.n	8005be0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0b8      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d020      	beq.n	8005c2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bf8:	4b59      	ldr	r3, [pc, #356]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	4a58      	ldr	r2, [pc, #352]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d005      	beq.n	8005c1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c10:	4b53      	ldr	r3, [pc, #332]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	4a52      	ldr	r2, [pc, #328]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c1c:	4b50      	ldr	r3, [pc, #320]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	494d      	ldr	r1, [pc, #308]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d044      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d107      	bne.n	8005c52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c42:	4b47      	ldr	r3, [pc, #284]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d119      	bne.n	8005c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e07f      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d003      	beq.n	8005c62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d107      	bne.n	8005c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c62:	4b3f      	ldr	r3, [pc, #252]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d109      	bne.n	8005c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e06f      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c72:	4b3b      	ldr	r3, [pc, #236]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e067      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c82:	4b37      	ldr	r3, [pc, #220]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f023 0203 	bic.w	r2, r3, #3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	4934      	ldr	r1, [pc, #208]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c94:	f7fd fd56 	bl	8003744 <HAL_GetTick>
 8005c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9a:	e00a      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c9c:	f7fd fd52 	bl	8003744 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e04f      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 020c 	and.w	r2, r3, #12
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d1eb      	bne.n	8005c9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cc4:	4b25      	ldr	r3, [pc, #148]	@ (8005d5c <HAL_RCC_ClockConfig+0x1b8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 030f 	and.w	r3, r3, #15
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d20c      	bcs.n	8005cec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd2:	4b22      	ldr	r3, [pc, #136]	@ (8005d5c <HAL_RCC_ClockConfig+0x1b8>)
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cda:	4b20      	ldr	r3, [pc, #128]	@ (8005d5c <HAL_RCC_ClockConfig+0x1b8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d001      	beq.n	8005cec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e032      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cf8:	4b19      	ldr	r3, [pc, #100]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	4916      	ldr	r1, [pc, #88]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d009      	beq.n	8005d2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d16:	4b12      	ldr	r3, [pc, #72]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	490e      	ldr	r1, [pc, #56]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d2a:	f000 f821 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	4b0b      	ldr	r3, [pc, #44]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	091b      	lsrs	r3, r3, #4
 8005d36:	f003 030f 	and.w	r3, r3, #15
 8005d3a:	490a      	ldr	r1, [pc, #40]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c0>)
 8005d3c:	5ccb      	ldrb	r3, [r1, r3]
 8005d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d42:	4a09      	ldr	r2, [pc, #36]	@ (8005d68 <HAL_RCC_ClockConfig+0x1c4>)
 8005d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005d46:	4b09      	ldr	r3, [pc, #36]	@ (8005d6c <HAL_RCC_ClockConfig+0x1c8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fd fcb6 	bl	80036bc <HAL_InitTick>

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40023c00 	.word	0x40023c00
 8005d60:	40023800 	.word	0x40023800
 8005d64:	080090e8 	.word	0x080090e8
 8005d68:	20000010 	.word	0x20000010
 8005d6c:	20000014 	.word	0x20000014

08005d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d74:	b094      	sub	sp, #80	@ 0x50
 8005d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d88:	4b79      	ldr	r3, [pc, #484]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 030c 	and.w	r3, r3, #12
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d00d      	beq.n	8005db0 <HAL_RCC_GetSysClockFreq+0x40>
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	f200 80e1 	bhi.w	8005f5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <HAL_RCC_GetSysClockFreq+0x34>
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d003      	beq.n	8005daa <HAL_RCC_GetSysClockFreq+0x3a>
 8005da2:	e0db      	b.n	8005f5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005da4:	4b73      	ldr	r3, [pc, #460]	@ (8005f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8005da6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005da8:	e0db      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005daa:	4b73      	ldr	r3, [pc, #460]	@ (8005f78 <HAL_RCC_GetSysClockFreq+0x208>)
 8005dac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dae:	e0d8      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005db0:	4b6f      	ldr	r3, [pc, #444]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005db8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dba:	4b6d      	ldr	r3, [pc, #436]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d063      	beq.n	8005e8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	099b      	lsrs	r3, r3, #6
 8005dcc:	2200      	movs	r2, #0
 8005dce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dda:	2300      	movs	r3, #0
 8005ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005de2:	4622      	mov	r2, r4
 8005de4:	462b      	mov	r3, r5
 8005de6:	f04f 0000 	mov.w	r0, #0
 8005dea:	f04f 0100 	mov.w	r1, #0
 8005dee:	0159      	lsls	r1, r3, #5
 8005df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005df4:	0150      	lsls	r0, r2, #5
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4621      	mov	r1, r4
 8005dfc:	1a51      	subs	r1, r2, r1
 8005dfe:	6139      	str	r1, [r7, #16]
 8005e00:	4629      	mov	r1, r5
 8005e02:	eb63 0301 	sbc.w	r3, r3, r1
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	f04f 0300 	mov.w	r3, #0
 8005e10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e14:	4659      	mov	r1, fp
 8005e16:	018b      	lsls	r3, r1, #6
 8005e18:	4651      	mov	r1, sl
 8005e1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e1e:	4651      	mov	r1, sl
 8005e20:	018a      	lsls	r2, r1, #6
 8005e22:	4651      	mov	r1, sl
 8005e24:	ebb2 0801 	subs.w	r8, r2, r1
 8005e28:	4659      	mov	r1, fp
 8005e2a:	eb63 0901 	sbc.w	r9, r3, r1
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e42:	4690      	mov	r8, r2
 8005e44:	4699      	mov	r9, r3
 8005e46:	4623      	mov	r3, r4
 8005e48:	eb18 0303 	adds.w	r3, r8, r3
 8005e4c:	60bb      	str	r3, [r7, #8]
 8005e4e:	462b      	mov	r3, r5
 8005e50:	eb49 0303 	adc.w	r3, r9, r3
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	f04f 0300 	mov.w	r3, #0
 8005e5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e62:	4629      	mov	r1, r5
 8005e64:	024b      	lsls	r3, r1, #9
 8005e66:	4621      	mov	r1, r4
 8005e68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	024a      	lsls	r2, r1, #9
 8005e70:	4610      	mov	r0, r2
 8005e72:	4619      	mov	r1, r3
 8005e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e76:	2200      	movs	r2, #0
 8005e78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e80:	f7fa fa06 	bl	8000290 <__aeabi_uldivmod>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4613      	mov	r3, r2
 8005e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e8c:	e058      	b.n	8005f40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e8e:	4b38      	ldr	r3, [pc, #224]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	099b      	lsrs	r3, r3, #6
 8005e94:	2200      	movs	r2, #0
 8005e96:	4618      	mov	r0, r3
 8005e98:	4611      	mov	r1, r2
 8005e9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e9e:	623b      	str	r3, [r7, #32]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	464b      	mov	r3, r9
 8005eac:	f04f 0000 	mov.w	r0, #0
 8005eb0:	f04f 0100 	mov.w	r1, #0
 8005eb4:	0159      	lsls	r1, r3, #5
 8005eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005eba:	0150      	lsls	r0, r2, #5
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4641      	mov	r1, r8
 8005ec2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ed8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005edc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ee0:	ebb2 040a 	subs.w	r4, r2, sl
 8005ee4:	eb63 050b 	sbc.w	r5, r3, fp
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	00eb      	lsls	r3, r5, #3
 8005ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ef6:	00e2      	lsls	r2, r4, #3
 8005ef8:	4614      	mov	r4, r2
 8005efa:	461d      	mov	r5, r3
 8005efc:	4643      	mov	r3, r8
 8005efe:	18e3      	adds	r3, r4, r3
 8005f00:	603b      	str	r3, [r7, #0]
 8005f02:	464b      	mov	r3, r9
 8005f04:	eb45 0303 	adc.w	r3, r5, r3
 8005f08:	607b      	str	r3, [r7, #4]
 8005f0a:	f04f 0200 	mov.w	r2, #0
 8005f0e:	f04f 0300 	mov.w	r3, #0
 8005f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f16:	4629      	mov	r1, r5
 8005f18:	028b      	lsls	r3, r1, #10
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f20:	4621      	mov	r1, r4
 8005f22:	028a      	lsls	r2, r1, #10
 8005f24:	4610      	mov	r0, r2
 8005f26:	4619      	mov	r1, r3
 8005f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	61fa      	str	r2, [r7, #28]
 8005f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f34:	f7fa f9ac 	bl	8000290 <__aeabi_uldivmod>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005f40:	4b0b      	ldr	r3, [pc, #44]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	0c1b      	lsrs	r3, r3, #16
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005f50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f5a:	e002      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f5c:	4b05      	ldr	r3, [pc, #20]	@ (8005f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3750      	adds	r7, #80	@ 0x50
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f6e:	bf00      	nop
 8005f70:	40023800 	.word	0x40023800
 8005f74:	00f42400 	.word	0x00f42400
 8005f78:	007a1200 	.word	0x007a1200

08005f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f80:	4b03      	ldr	r3, [pc, #12]	@ (8005f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f82:	681b      	ldr	r3, [r3, #0]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	20000010 	.word	0x20000010

08005f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f98:	f7ff fff0 	bl	8005f7c <HAL_RCC_GetHCLKFreq>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	4b05      	ldr	r3, [pc, #20]	@ (8005fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	0a9b      	lsrs	r3, r3, #10
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	4903      	ldr	r1, [pc, #12]	@ (8005fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005faa:	5ccb      	ldrb	r3, [r1, r3]
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	080090f8 	.word	0x080090f8

08005fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10b      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d105      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d075      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ff0:	4b91      	ldr	r3, [pc, #580]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ff6:	f7fd fba5 	bl	8003744 <HAL_GetTick>
 8005ffa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ffc:	e008      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ffe:	f7fd fba1 	bl	8003744 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d901      	bls.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e189      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006010:	4b8a      	ldr	r3, [pc, #552]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1f0      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d009      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	019a      	lsls	r2, r3, #6
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	071b      	lsls	r3, r3, #28
 8006034:	4981      	ldr	r1, [pc, #516]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006036:	4313      	orrs	r3, r2
 8006038:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d01f      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006048:	4b7c      	ldr	r3, [pc, #496]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800604a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800604e:	0f1b      	lsrs	r3, r3, #28
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	019a      	lsls	r2, r3, #6
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	061b      	lsls	r3, r3, #24
 8006062:	431a      	orrs	r2, r3
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	071b      	lsls	r3, r3, #28
 8006068:	4974      	ldr	r1, [pc, #464]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006070:	4b72      	ldr	r3, [pc, #456]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006072:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006076:	f023 021f 	bic.w	r2, r3, #31
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	3b01      	subs	r3, #1
 8006080:	496e      	ldr	r1, [pc, #440]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006082:	4313      	orrs	r3, r2
 8006084:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00d      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	019a      	lsls	r2, r3, #6
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	061b      	lsls	r3, r3, #24
 80060a0:	431a      	orrs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	071b      	lsls	r3, r3, #28
 80060a8:	4964      	ldr	r1, [pc, #400]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060b0:	4b61      	ldr	r3, [pc, #388]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060b6:	f7fd fb45 	bl	8003744 <HAL_GetTick>
 80060ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060bc:	e008      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060be:	f7fd fb41 	bl	8003744 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e129      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060d0:	4b5a      	ldr	r3, [pc, #360]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0f0      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d105      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d079      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80060f4:	4b52      	ldr	r3, [pc, #328]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060fa:	f7fd fb23 	bl	8003744 <HAL_GetTick>
 80060fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006100:	e008      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006102:	f7fd fb1f 	bl	8003744 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d901      	bls.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e107      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006114:	4b49      	ldr	r3, [pc, #292]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800611c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006120:	d0ef      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d020      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800612e:	4b43      	ldr	r3, [pc, #268]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006134:	0f1b      	lsrs	r3, r3, #28
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	019a      	lsls	r2, r3, #6
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	061b      	lsls	r3, r3, #24
 8006148:	431a      	orrs	r2, r3
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	071b      	lsls	r3, r3, #28
 800614e:	493b      	ldr	r1, [pc, #236]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006150:	4313      	orrs	r3, r2
 8006152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006156:	4b39      	ldr	r3, [pc, #228]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800615c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	3b01      	subs	r3, #1
 8006166:	021b      	lsls	r3, r3, #8
 8006168:	4934      	ldr	r1, [pc, #208]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01e      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800617c:	4b2f      	ldr	r3, [pc, #188]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006182:	0e1b      	lsrs	r3, r3, #24
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	019a      	lsls	r2, r3, #6
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	061b      	lsls	r3, r3, #24
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	071b      	lsls	r3, r3, #28
 800619c:	4927      	ldr	r1, [pc, #156]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80061a4:	4b25      	ldr	r3, [pc, #148]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	4922      	ldr	r1, [pc, #136]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80061ba:	4b21      	ldr	r3, [pc, #132]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80061bc:	2201      	movs	r2, #1
 80061be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061c0:	f7fd fac0 	bl	8003744 <HAL_GetTick>
 80061c4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061c6:	e008      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80061c8:	f7fd fabc 	bl	8003744 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d901      	bls.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e0a4      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061da:	4b18      	ldr	r3, [pc, #96]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061e6:	d1ef      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 808b 	beq.w	800630c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	4b10      	ldr	r3, [pc, #64]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fe:	4a0f      	ldr	r2, [pc, #60]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006204:	6413      	str	r3, [r2, #64]	@ 0x40
 8006206:	4b0d      	ldr	r3, [pc, #52]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006212:	4b0c      	ldr	r3, [pc, #48]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a0b      	ldr	r2, [pc, #44]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800621c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800621e:	f7fd fa91 	bl	8003744 <HAL_GetTick>
 8006222:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006224:	e010      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006226:	f7fd fa8d 	bl	8003744 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d909      	bls.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e075      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006238:	42470068 	.word	0x42470068
 800623c:	40023800 	.word	0x40023800
 8006240:	42470070 	.word	0x42470070
 8006244:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006248:	4b38      	ldr	r3, [pc, #224]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0e8      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006254:	4b36      	ldr	r3, [pc, #216]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006258:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800625c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d02f      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006268:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	429a      	cmp	r2, r3
 8006270:	d028      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006272:	4b2f      	ldr	r3, [pc, #188]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006276:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800627a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800627c:	4b2d      	ldr	r3, [pc, #180]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800627e:	2201      	movs	r2, #1
 8006280:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006282:	4b2c      	ldr	r3, [pc, #176]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006288:	4a29      	ldr	r2, [pc, #164]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800628e:	4b28      	ldr	r3, [pc, #160]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b01      	cmp	r3, #1
 8006298:	d114      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800629a:	f7fd fa53 	bl	8003744 <HAL_GetTick>
 800629e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a0:	e00a      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a2:	f7fd fa4f 	bl	8003744 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e035      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0ee      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062d0:	d10d      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x332>
 80062d2:	4b17      	ldr	r3, [pc, #92]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80062e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062e6:	4912      	ldr	r1, [pc, #72]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	608b      	str	r3, [r1, #8]
 80062ec:	e005      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80062ee:	4b10      	ldr	r3, [pc, #64]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	4a0f      	ldr	r2, [pc, #60]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062f4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80062f8:	6093      	str	r3, [r2, #8]
 80062fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006306:	490a      	ldr	r1, [pc, #40]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006308:	4313      	orrs	r3, r2
 800630a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800631e:	4b06      	ldr	r3, [pc, #24]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006320:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	40007000 	.word	0x40007000
 8006330:	40023800 	.word	0x40023800
 8006334:	42470e40 	.word	0x42470e40
 8006338:	424711e0 	.word	0x424711e0

0800633c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e01c      	b.n	8006388 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	795b      	ldrb	r3, [r3, #5]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d105      	bne.n	8006364 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fc fc84 	bl	8002c6c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f042 0204 	orr.w	r2, r2, #4
 8006378:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3708      	adds	r7, #8
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	791b      	ldrb	r3, [r3, #4]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <HAL_RNG_GenerateRandomNumber+0x1a>
 80063a6:	2302      	movs	r3, #2
 80063a8:	e044      	b.n	8006434 <HAL_RNG_GenerateRandomNumber+0xa4>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	795b      	ldrb	r3, [r3, #5]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d133      	bne.n	8006422 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2202      	movs	r2, #2
 80063be:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063c0:	f7fd f9c0 	bl	8003744 <HAL_GetTick>
 80063c4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80063c6:	e018      	b.n	80063fa <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80063c8:	f7fd f9bc 	bl	8003744 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d911      	bls.n	80063fa <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d00a      	beq.n	80063fa <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2202      	movs	r2, #2
 80063ee:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e01c      	b.n	8006434 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b01      	cmp	r3, #1
 8006406:	d1df      	bne.n	80063c8 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	715a      	strb	r2, [r3, #5]
 8006420:	e004      	b.n	800642c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2204      	movs	r2, #4
 8006426:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	711a      	strb	r2, [r3, #4]

  return status;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e07b      	b.n	8006546 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006452:	2b00      	cmp	r3, #0
 8006454:	d108      	bne.n	8006468 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800645e:	d009      	beq.n	8006474 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	61da      	str	r2, [r3, #28]
 8006466:	e005      	b.n	8006474 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d106      	bne.n	8006494 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7fc fc0e 	bl	8002cb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064c6:	431a      	orrs	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f8:	ea42 0103 	orr.w	r1, r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006500:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	f003 0104 	and.w	r1, r3, #4
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651a:	f003 0210 	and.w	r2, r3, #16
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69da      	ldr	r2, [r3, #28]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006534:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b082      	sub	sp, #8
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e01a      	b.n	8006596 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006576:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7fc fbe1 	bl	8002d40 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b088      	sub	sp, #32
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	603b      	str	r3, [r7, #0]
 80065aa:	4613      	mov	r3, r2
 80065ac:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ae:	f7fd f8c9 	bl	8003744 <HAL_GetTick>
 80065b2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80065b4:	88fb      	ldrh	r3, [r7, #6]
 80065b6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d001      	beq.n	80065c8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80065c4:	2302      	movs	r3, #2
 80065c6:	e12a      	b.n	800681e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <HAL_SPI_Transmit+0x36>
 80065ce:	88fb      	ldrh	r3, [r7, #6]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e122      	b.n	800681e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d101      	bne.n	80065e6 <HAL_SPI_Transmit+0x48>
 80065e2:	2302      	movs	r3, #2
 80065e4:	e11b      	b.n	800681e <HAL_SPI_Transmit+0x280>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2203      	movs	r2, #3
 80065f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	88fa      	ldrh	r2, [r7, #6]
 8006606:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	88fa      	ldrh	r2, [r7, #6]
 800660c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006634:	d10f      	bne.n	8006656 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006644:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006654:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006660:	2b40      	cmp	r3, #64	@ 0x40
 8006662:	d007      	beq.n	8006674 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006672:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800667c:	d152      	bne.n	8006724 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <HAL_SPI_Transmit+0xee>
 8006686:	8b7b      	ldrh	r3, [r7, #26]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d145      	bne.n	8006718 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006690:	881a      	ldrh	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800669c:	1c9a      	adds	r2, r3, #2
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80066b0:	e032      	b.n	8006718 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d112      	bne.n	80066e6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c4:	881a      	ldrh	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d0:	1c9a      	adds	r2, r3, #2
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066da:	b29b      	uxth	r3, r3
 80066dc:	3b01      	subs	r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80066e4:	e018      	b.n	8006718 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066e6:	f7fd f82d 	bl	8003744 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d803      	bhi.n	80066fe <HAL_SPI_Transmit+0x160>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fc:	d102      	bne.n	8006704 <HAL_SPI_Transmit+0x166>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d109      	bne.n	8006718 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e082      	b.n	800681e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800671c:	b29b      	uxth	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1c7      	bne.n	80066b2 <HAL_SPI_Transmit+0x114>
 8006722:	e053      	b.n	80067cc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <HAL_SPI_Transmit+0x194>
 800672c:	8b7b      	ldrh	r3, [r7, #26]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d147      	bne.n	80067c2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	330c      	adds	r3, #12
 800673c:	7812      	ldrb	r2, [r2, #0]
 800673e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006758:	e033      	b.n	80067c2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b02      	cmp	r3, #2
 8006766:	d113      	bne.n	8006790 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	330c      	adds	r3, #12
 8006772:	7812      	ldrb	r2, [r2, #0]
 8006774:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006784:	b29b      	uxth	r3, r3
 8006786:	3b01      	subs	r3, #1
 8006788:	b29a      	uxth	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800678e:	e018      	b.n	80067c2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006790:	f7fc ffd8 	bl	8003744 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	429a      	cmp	r2, r3
 800679e:	d803      	bhi.n	80067a8 <HAL_SPI_Transmit+0x20a>
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a6:	d102      	bne.n	80067ae <HAL_SPI_Transmit+0x210>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d109      	bne.n	80067c2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e02d      	b.n	800681e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1c6      	bne.n	800675a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 f8bf 	bl	8006954 <SPI_EndRxTxTransaction>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10a      	bne.n	8006800 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800681c:	2300      	movs	r3, #0
  }
}
 800681e:	4618      	mov	r0, r3
 8006820:	3720      	adds	r7, #32
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006834:	b2db      	uxtb	r3, r3
}
 8006836:	4618      	mov	r0, r3
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
	...

08006844 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	603b      	str	r3, [r7, #0]
 8006850:	4613      	mov	r3, r2
 8006852:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006854:	f7fc ff76 	bl	8003744 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685c:	1a9b      	subs	r3, r3, r2
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	4413      	add	r3, r2
 8006862:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006864:	f7fc ff6e 	bl	8003744 <HAL_GetTick>
 8006868:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800686a:	4b39      	ldr	r3, [pc, #228]	@ (8006950 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	015b      	lsls	r3, r3, #5
 8006870:	0d1b      	lsrs	r3, r3, #20
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	fb02 f303 	mul.w	r3, r2, r3
 8006878:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800687a:	e054      	b.n	8006926 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006882:	d050      	beq.n	8006926 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006884:	f7fc ff5e 	bl	8003744 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	429a      	cmp	r2, r3
 8006892:	d902      	bls.n	800689a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d13d      	bne.n	8006916 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80068a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068b2:	d111      	bne.n	80068d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068bc:	d004      	beq.n	80068c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068c6:	d107      	bne.n	80068d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068e0:	d10f      	bne.n	8006902 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006900:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e017      	b.n	8006946 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	3b01      	subs	r3, #1
 8006924:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4013      	ands	r3, r2
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	429a      	cmp	r2, r3
 8006934:	bf0c      	ite	eq
 8006936:	2301      	moveq	r3, #1
 8006938:	2300      	movne	r3, #0
 800693a:	b2db      	uxtb	r3, r3
 800693c:	461a      	mov	r2, r3
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	429a      	cmp	r2, r3
 8006942:	d19b      	bne.n	800687c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3720      	adds	r7, #32
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20000010 	.word	0x20000010

08006954 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af02      	add	r7, sp, #8
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2201      	movs	r2, #1
 8006968:	2102      	movs	r1, #2
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f7ff ff6a 	bl	8006844 <SPI_WaitFlagStateUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d007      	beq.n	8006986 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800697a:	f043 0220 	orr.w	r2, r3, #32
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e032      	b.n	80069ec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006986:	4b1b      	ldr	r3, [pc, #108]	@ (80069f4 <SPI_EndRxTxTransaction+0xa0>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1b      	ldr	r2, [pc, #108]	@ (80069f8 <SPI_EndRxTxTransaction+0xa4>)
 800698c:	fba2 2303 	umull	r2, r3, r2, r3
 8006990:	0d5b      	lsrs	r3, r3, #21
 8006992:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006996:	fb02 f303 	mul.w	r3, r2, r3
 800699a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069a4:	d112      	bne.n	80069cc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2200      	movs	r2, #0
 80069ae:	2180      	movs	r1, #128	@ 0x80
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f7ff ff47 	bl	8006844 <SPI_WaitFlagStateUntilTimeout>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d016      	beq.n	80069ea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c0:	f043 0220 	orr.w	r2, r3, #32
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e00f      	b.n	80069ec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069e2:	2b80      	cmp	r3, #128	@ 0x80
 80069e4:	d0f2      	beq.n	80069cc <SPI_EndRxTxTransaction+0x78>
 80069e6:	e000      	b.n	80069ea <SPI_EndRxTxTransaction+0x96>
        break;
 80069e8:	bf00      	nop
  }

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20000010 	.word	0x20000010
 80069f8:	165e9f81 	.word	0x165e9f81

080069fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e041      	b.n	8006a92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fc f9aa 	bl	8002d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	f000 f8f4 	bl	8006c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d101      	bne.n	8006ab6 <HAL_TIM_ConfigClockSource+0x1c>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	e0b4      	b.n	8006c20 <HAL_TIM_ConfigClockSource+0x186>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ad4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006adc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aee:	d03e      	beq.n	8006b6e <HAL_TIM_ConfigClockSource+0xd4>
 8006af0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006af4:	f200 8087 	bhi.w	8006c06 <HAL_TIM_ConfigClockSource+0x16c>
 8006af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006afc:	f000 8086 	beq.w	8006c0c <HAL_TIM_ConfigClockSource+0x172>
 8006b00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b04:	d87f      	bhi.n	8006c06 <HAL_TIM_ConfigClockSource+0x16c>
 8006b06:	2b70      	cmp	r3, #112	@ 0x70
 8006b08:	d01a      	beq.n	8006b40 <HAL_TIM_ConfigClockSource+0xa6>
 8006b0a:	2b70      	cmp	r3, #112	@ 0x70
 8006b0c:	d87b      	bhi.n	8006c06 <HAL_TIM_ConfigClockSource+0x16c>
 8006b0e:	2b60      	cmp	r3, #96	@ 0x60
 8006b10:	d050      	beq.n	8006bb4 <HAL_TIM_ConfigClockSource+0x11a>
 8006b12:	2b60      	cmp	r3, #96	@ 0x60
 8006b14:	d877      	bhi.n	8006c06 <HAL_TIM_ConfigClockSource+0x16c>
 8006b16:	2b50      	cmp	r3, #80	@ 0x50
 8006b18:	d03c      	beq.n	8006b94 <HAL_TIM_ConfigClockSource+0xfa>
 8006b1a:	2b50      	cmp	r3, #80	@ 0x50
 8006b1c:	d873      	bhi.n	8006c06 <HAL_TIM_ConfigClockSource+0x16c>
 8006b1e:	2b40      	cmp	r3, #64	@ 0x40
 8006b20:	d058      	beq.n	8006bd4 <HAL_TIM_ConfigClockSource+0x13a>
 8006b22:	2b40      	cmp	r3, #64	@ 0x40
 8006b24:	d86f      	bhi.n	8006c06 <HAL_TIM_ConfigClockSource+0x16c>
 8006b26:	2b30      	cmp	r3, #48	@ 0x30
 8006b28:	d064      	beq.n	8006bf4 <HAL_TIM_ConfigClockSource+0x15a>
 8006b2a:	2b30      	cmp	r3, #48	@ 0x30
 8006b2c:	d86b      	bhi.n	8006c06 <HAL_TIM_ConfigClockSource+0x16c>
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	d060      	beq.n	8006bf4 <HAL_TIM_ConfigClockSource+0x15a>
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	d867      	bhi.n	8006c06 <HAL_TIM_ConfigClockSource+0x16c>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d05c      	beq.n	8006bf4 <HAL_TIM_ConfigClockSource+0x15a>
 8006b3a:	2b10      	cmp	r3, #16
 8006b3c:	d05a      	beq.n	8006bf4 <HAL_TIM_ConfigClockSource+0x15a>
 8006b3e:	e062      	b.n	8006c06 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b50:	f000 f990 	bl	8006e74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b62:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	609a      	str	r2, [r3, #8]
      break;
 8006b6c:	e04f      	b.n	8006c0e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b7e:	f000 f979 	bl	8006e74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b90:	609a      	str	r2, [r3, #8]
      break;
 8006b92:	e03c      	b.n	8006c0e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f000 f8ed 	bl	8006d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2150      	movs	r1, #80	@ 0x50
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 f946 	bl	8006e3e <TIM_ITRx_SetConfig>
      break;
 8006bb2:	e02c      	b.n	8006c0e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	f000 f90c 	bl	8006dde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2160      	movs	r1, #96	@ 0x60
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 f936 	bl	8006e3e <TIM_ITRx_SetConfig>
      break;
 8006bd2:	e01c      	b.n	8006c0e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006be0:	461a      	mov	r2, r3
 8006be2:	f000 f8cd 	bl	8006d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2140      	movs	r1, #64	@ 0x40
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 f926 	bl	8006e3e <TIM_ITRx_SetConfig>
      break;
 8006bf2:	e00c      	b.n	8006c0e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	f000 f91d 	bl	8006e3e <TIM_ITRx_SetConfig>
      break;
 8006c04:	e003      	b.n	8006c0e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	73fb      	strb	r3, [r7, #15]
      break;
 8006c0a:	e000      	b.n	8006c0e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a46      	ldr	r2, [pc, #280]	@ (8006d54 <TIM_Base_SetConfig+0x12c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d013      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c46:	d00f      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a43      	ldr	r2, [pc, #268]	@ (8006d58 <TIM_Base_SetConfig+0x130>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00b      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a42      	ldr	r2, [pc, #264]	@ (8006d5c <TIM_Base_SetConfig+0x134>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d007      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a41      	ldr	r2, [pc, #260]	@ (8006d60 <TIM_Base_SetConfig+0x138>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d003      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a40      	ldr	r2, [pc, #256]	@ (8006d64 <TIM_Base_SetConfig+0x13c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d108      	bne.n	8006c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a35      	ldr	r2, [pc, #212]	@ (8006d54 <TIM_Base_SetConfig+0x12c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d02b      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c88:	d027      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a32      	ldr	r2, [pc, #200]	@ (8006d58 <TIM_Base_SetConfig+0x130>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d023      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a31      	ldr	r2, [pc, #196]	@ (8006d5c <TIM_Base_SetConfig+0x134>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d01f      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a30      	ldr	r2, [pc, #192]	@ (8006d60 <TIM_Base_SetConfig+0x138>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d01b      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8006d64 <TIM_Base_SetConfig+0x13c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d017      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a2e      	ldr	r2, [pc, #184]	@ (8006d68 <TIM_Base_SetConfig+0x140>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d013      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a2d      	ldr	r2, [pc, #180]	@ (8006d6c <TIM_Base_SetConfig+0x144>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00f      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8006d70 <TIM_Base_SetConfig+0x148>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00b      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8006d74 <TIM_Base_SetConfig+0x14c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d007      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8006d78 <TIM_Base_SetConfig+0x150>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d003      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a29      	ldr	r2, [pc, #164]	@ (8006d7c <TIM_Base_SetConfig+0x154>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d108      	bne.n	8006cec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a10      	ldr	r2, [pc, #64]	@ (8006d54 <TIM_Base_SetConfig+0x12c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d003      	beq.n	8006d20 <TIM_Base_SetConfig+0xf8>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a12      	ldr	r2, [pc, #72]	@ (8006d64 <TIM_Base_SetConfig+0x13c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d103      	bne.n	8006d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d105      	bne.n	8006d46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	f023 0201 	bic.w	r2, r3, #1
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	611a      	str	r2, [r3, #16]
  }
}
 8006d46:	bf00      	nop
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	40010000 	.word	0x40010000
 8006d58:	40000400 	.word	0x40000400
 8006d5c:	40000800 	.word	0x40000800
 8006d60:	40000c00 	.word	0x40000c00
 8006d64:	40010400 	.word	0x40010400
 8006d68:	40014000 	.word	0x40014000
 8006d6c:	40014400 	.word	0x40014400
 8006d70:	40014800 	.word	0x40014800
 8006d74:	40001800 	.word	0x40001800
 8006d78:	40001c00 	.word	0x40001c00
 8006d7c:	40002000 	.word	0x40002000

08006d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f023 0201 	bic.w	r2, r3, #1
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	011b      	lsls	r3, r3, #4
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f023 030a 	bic.w	r3, r3, #10
 8006dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	621a      	str	r2, [r3, #32]
}
 8006dd2:	bf00      	nop
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b087      	sub	sp, #28
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	f023 0210 	bic.w	r2, r3, #16
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	031b      	lsls	r3, r3, #12
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	011b      	lsls	r3, r3, #4
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	621a      	str	r2, [r3, #32]
}
 8006e32:	bf00      	nop
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b085      	sub	sp, #20
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	f043 0307 	orr.w	r3, r3, #7
 8006e60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	609a      	str	r2, [r3, #8]
}
 8006e68:	bf00      	nop
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	021a      	lsls	r2, r3, #8
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	431a      	orrs	r2, r3
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	609a      	str	r2, [r3, #8]
}
 8006ea8:	bf00      	nop
 8006eaa:	371c      	adds	r7, #28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d101      	bne.n	8006ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e05a      	b.n	8006f82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a21      	ldr	r2, [pc, #132]	@ (8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d022      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f18:	d01d      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8006f94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d018      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a1b      	ldr	r2, [pc, #108]	@ (8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d013      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a1a      	ldr	r2, [pc, #104]	@ (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d00e      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a18      	ldr	r2, [pc, #96]	@ (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d009      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a17      	ldr	r2, [pc, #92]	@ (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d004      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a15      	ldr	r2, [pc, #84]	@ (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d10c      	bne.n	8006f70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	40010000 	.word	0x40010000
 8006f94:	40000400 	.word	0x40000400
 8006f98:	40000800 	.word	0x40000800
 8006f9c:	40000c00 	.word	0x40000c00
 8006fa0:	40010400 	.word	0x40010400
 8006fa4:	40014000 	.word	0x40014000
 8006fa8:	40001800 	.word	0x40001800

08006fac <std>:
 8006fac:	2300      	movs	r3, #0
 8006fae:	b510      	push	{r4, lr}
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	e9c0 3300 	strd	r3, r3, [r0]
 8006fb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fba:	6083      	str	r3, [r0, #8]
 8006fbc:	8181      	strh	r1, [r0, #12]
 8006fbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006fc0:	81c2      	strh	r2, [r0, #14]
 8006fc2:	6183      	str	r3, [r0, #24]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	2208      	movs	r2, #8
 8006fc8:	305c      	adds	r0, #92	@ 0x5c
 8006fca:	f000 f9f9 	bl	80073c0 <memset>
 8006fce:	4b0d      	ldr	r3, [pc, #52]	@ (8007004 <std+0x58>)
 8006fd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007008 <std+0x5c>)
 8006fd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800700c <std+0x60>)
 8006fd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006fda:	4b0d      	ldr	r3, [pc, #52]	@ (8007010 <std+0x64>)
 8006fdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006fde:	4b0d      	ldr	r3, [pc, #52]	@ (8007014 <std+0x68>)
 8006fe0:	6224      	str	r4, [r4, #32]
 8006fe2:	429c      	cmp	r4, r3
 8006fe4:	d006      	beq.n	8006ff4 <std+0x48>
 8006fe6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006fea:	4294      	cmp	r4, r2
 8006fec:	d002      	beq.n	8006ff4 <std+0x48>
 8006fee:	33d0      	adds	r3, #208	@ 0xd0
 8006ff0:	429c      	cmp	r4, r3
 8006ff2:	d105      	bne.n	8007000 <std+0x54>
 8006ff4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ffc:	f000 ba58 	b.w	80074b0 <__retarget_lock_init_recursive>
 8007000:	bd10      	pop	{r4, pc}
 8007002:	bf00      	nop
 8007004:	08007211 	.word	0x08007211
 8007008:	08007233 	.word	0x08007233
 800700c:	0800726b 	.word	0x0800726b
 8007010:	0800728f 	.word	0x0800728f
 8007014:	20025c20 	.word	0x20025c20

08007018 <stdio_exit_handler>:
 8007018:	4a02      	ldr	r2, [pc, #8]	@ (8007024 <stdio_exit_handler+0xc>)
 800701a:	4903      	ldr	r1, [pc, #12]	@ (8007028 <stdio_exit_handler+0x10>)
 800701c:	4803      	ldr	r0, [pc, #12]	@ (800702c <stdio_exit_handler+0x14>)
 800701e:	f000 b869 	b.w	80070f4 <_fwalk_sglue>
 8007022:	bf00      	nop
 8007024:	2000001c 	.word	0x2000001c
 8007028:	08007d51 	.word	0x08007d51
 800702c:	2000002c 	.word	0x2000002c

08007030 <cleanup_stdio>:
 8007030:	6841      	ldr	r1, [r0, #4]
 8007032:	4b0c      	ldr	r3, [pc, #48]	@ (8007064 <cleanup_stdio+0x34>)
 8007034:	4299      	cmp	r1, r3
 8007036:	b510      	push	{r4, lr}
 8007038:	4604      	mov	r4, r0
 800703a:	d001      	beq.n	8007040 <cleanup_stdio+0x10>
 800703c:	f000 fe88 	bl	8007d50 <_fflush_r>
 8007040:	68a1      	ldr	r1, [r4, #8]
 8007042:	4b09      	ldr	r3, [pc, #36]	@ (8007068 <cleanup_stdio+0x38>)
 8007044:	4299      	cmp	r1, r3
 8007046:	d002      	beq.n	800704e <cleanup_stdio+0x1e>
 8007048:	4620      	mov	r0, r4
 800704a:	f000 fe81 	bl	8007d50 <_fflush_r>
 800704e:	68e1      	ldr	r1, [r4, #12]
 8007050:	4b06      	ldr	r3, [pc, #24]	@ (800706c <cleanup_stdio+0x3c>)
 8007052:	4299      	cmp	r1, r3
 8007054:	d004      	beq.n	8007060 <cleanup_stdio+0x30>
 8007056:	4620      	mov	r0, r4
 8007058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800705c:	f000 be78 	b.w	8007d50 <_fflush_r>
 8007060:	bd10      	pop	{r4, pc}
 8007062:	bf00      	nop
 8007064:	20025c20 	.word	0x20025c20
 8007068:	20025c88 	.word	0x20025c88
 800706c:	20025cf0 	.word	0x20025cf0

08007070 <global_stdio_init.part.0>:
 8007070:	b510      	push	{r4, lr}
 8007072:	4b0b      	ldr	r3, [pc, #44]	@ (80070a0 <global_stdio_init.part.0+0x30>)
 8007074:	4c0b      	ldr	r4, [pc, #44]	@ (80070a4 <global_stdio_init.part.0+0x34>)
 8007076:	4a0c      	ldr	r2, [pc, #48]	@ (80070a8 <global_stdio_init.part.0+0x38>)
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	4620      	mov	r0, r4
 800707c:	2200      	movs	r2, #0
 800707e:	2104      	movs	r1, #4
 8007080:	f7ff ff94 	bl	8006fac <std>
 8007084:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007088:	2201      	movs	r2, #1
 800708a:	2109      	movs	r1, #9
 800708c:	f7ff ff8e 	bl	8006fac <std>
 8007090:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007094:	2202      	movs	r2, #2
 8007096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800709a:	2112      	movs	r1, #18
 800709c:	f7ff bf86 	b.w	8006fac <std>
 80070a0:	20025d58 	.word	0x20025d58
 80070a4:	20025c20 	.word	0x20025c20
 80070a8:	08007019 	.word	0x08007019

080070ac <__sfp_lock_acquire>:
 80070ac:	4801      	ldr	r0, [pc, #4]	@ (80070b4 <__sfp_lock_acquire+0x8>)
 80070ae:	f000 ba00 	b.w	80074b2 <__retarget_lock_acquire_recursive>
 80070b2:	bf00      	nop
 80070b4:	20025d61 	.word	0x20025d61

080070b8 <__sfp_lock_release>:
 80070b8:	4801      	ldr	r0, [pc, #4]	@ (80070c0 <__sfp_lock_release+0x8>)
 80070ba:	f000 b9fb 	b.w	80074b4 <__retarget_lock_release_recursive>
 80070be:	bf00      	nop
 80070c0:	20025d61 	.word	0x20025d61

080070c4 <__sinit>:
 80070c4:	b510      	push	{r4, lr}
 80070c6:	4604      	mov	r4, r0
 80070c8:	f7ff fff0 	bl	80070ac <__sfp_lock_acquire>
 80070cc:	6a23      	ldr	r3, [r4, #32]
 80070ce:	b11b      	cbz	r3, 80070d8 <__sinit+0x14>
 80070d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070d4:	f7ff bff0 	b.w	80070b8 <__sfp_lock_release>
 80070d8:	4b04      	ldr	r3, [pc, #16]	@ (80070ec <__sinit+0x28>)
 80070da:	6223      	str	r3, [r4, #32]
 80070dc:	4b04      	ldr	r3, [pc, #16]	@ (80070f0 <__sinit+0x2c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1f5      	bne.n	80070d0 <__sinit+0xc>
 80070e4:	f7ff ffc4 	bl	8007070 <global_stdio_init.part.0>
 80070e8:	e7f2      	b.n	80070d0 <__sinit+0xc>
 80070ea:	bf00      	nop
 80070ec:	08007031 	.word	0x08007031
 80070f0:	20025d58 	.word	0x20025d58

080070f4 <_fwalk_sglue>:
 80070f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f8:	4607      	mov	r7, r0
 80070fa:	4688      	mov	r8, r1
 80070fc:	4614      	mov	r4, r2
 80070fe:	2600      	movs	r6, #0
 8007100:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007104:	f1b9 0901 	subs.w	r9, r9, #1
 8007108:	d505      	bpl.n	8007116 <_fwalk_sglue+0x22>
 800710a:	6824      	ldr	r4, [r4, #0]
 800710c:	2c00      	cmp	r4, #0
 800710e:	d1f7      	bne.n	8007100 <_fwalk_sglue+0xc>
 8007110:	4630      	mov	r0, r6
 8007112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007116:	89ab      	ldrh	r3, [r5, #12]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d907      	bls.n	800712c <_fwalk_sglue+0x38>
 800711c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007120:	3301      	adds	r3, #1
 8007122:	d003      	beq.n	800712c <_fwalk_sglue+0x38>
 8007124:	4629      	mov	r1, r5
 8007126:	4638      	mov	r0, r7
 8007128:	47c0      	blx	r8
 800712a:	4306      	orrs	r6, r0
 800712c:	3568      	adds	r5, #104	@ 0x68
 800712e:	e7e9      	b.n	8007104 <_fwalk_sglue+0x10>

08007130 <iprintf>:
 8007130:	b40f      	push	{r0, r1, r2, r3}
 8007132:	b507      	push	{r0, r1, r2, lr}
 8007134:	4906      	ldr	r1, [pc, #24]	@ (8007150 <iprintf+0x20>)
 8007136:	ab04      	add	r3, sp, #16
 8007138:	6808      	ldr	r0, [r1, #0]
 800713a:	f853 2b04 	ldr.w	r2, [r3], #4
 800713e:	6881      	ldr	r1, [r0, #8]
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	f000 fadb 	bl	80076fc <_vfiprintf_r>
 8007146:	b003      	add	sp, #12
 8007148:	f85d eb04 	ldr.w	lr, [sp], #4
 800714c:	b004      	add	sp, #16
 800714e:	4770      	bx	lr
 8007150:	20000028 	.word	0x20000028

08007154 <_puts_r>:
 8007154:	6a03      	ldr	r3, [r0, #32]
 8007156:	b570      	push	{r4, r5, r6, lr}
 8007158:	6884      	ldr	r4, [r0, #8]
 800715a:	4605      	mov	r5, r0
 800715c:	460e      	mov	r6, r1
 800715e:	b90b      	cbnz	r3, 8007164 <_puts_r+0x10>
 8007160:	f7ff ffb0 	bl	80070c4 <__sinit>
 8007164:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007166:	07db      	lsls	r3, r3, #31
 8007168:	d405      	bmi.n	8007176 <_puts_r+0x22>
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	0598      	lsls	r0, r3, #22
 800716e:	d402      	bmi.n	8007176 <_puts_r+0x22>
 8007170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007172:	f000 f99e 	bl	80074b2 <__retarget_lock_acquire_recursive>
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	0719      	lsls	r1, r3, #28
 800717a:	d502      	bpl.n	8007182 <_puts_r+0x2e>
 800717c:	6923      	ldr	r3, [r4, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d135      	bne.n	80071ee <_puts_r+0x9a>
 8007182:	4621      	mov	r1, r4
 8007184:	4628      	mov	r0, r5
 8007186:	f000 f8c5 	bl	8007314 <__swsetup_r>
 800718a:	b380      	cbz	r0, 80071ee <_puts_r+0x9a>
 800718c:	f04f 35ff 	mov.w	r5, #4294967295
 8007190:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007192:	07da      	lsls	r2, r3, #31
 8007194:	d405      	bmi.n	80071a2 <_puts_r+0x4e>
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	059b      	lsls	r3, r3, #22
 800719a:	d402      	bmi.n	80071a2 <_puts_r+0x4e>
 800719c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800719e:	f000 f989 	bl	80074b4 <__retarget_lock_release_recursive>
 80071a2:	4628      	mov	r0, r5
 80071a4:	bd70      	pop	{r4, r5, r6, pc}
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	da04      	bge.n	80071b4 <_puts_r+0x60>
 80071aa:	69a2      	ldr	r2, [r4, #24]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	dc17      	bgt.n	80071e0 <_puts_r+0x8c>
 80071b0:	290a      	cmp	r1, #10
 80071b2:	d015      	beq.n	80071e0 <_puts_r+0x8c>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	6022      	str	r2, [r4, #0]
 80071ba:	7019      	strb	r1, [r3, #0]
 80071bc:	68a3      	ldr	r3, [r4, #8]
 80071be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80071c2:	3b01      	subs	r3, #1
 80071c4:	60a3      	str	r3, [r4, #8]
 80071c6:	2900      	cmp	r1, #0
 80071c8:	d1ed      	bne.n	80071a6 <_puts_r+0x52>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	da11      	bge.n	80071f2 <_puts_r+0x9e>
 80071ce:	4622      	mov	r2, r4
 80071d0:	210a      	movs	r1, #10
 80071d2:	4628      	mov	r0, r5
 80071d4:	f000 f85f 	bl	8007296 <__swbuf_r>
 80071d8:	3001      	adds	r0, #1
 80071da:	d0d7      	beq.n	800718c <_puts_r+0x38>
 80071dc:	250a      	movs	r5, #10
 80071de:	e7d7      	b.n	8007190 <_puts_r+0x3c>
 80071e0:	4622      	mov	r2, r4
 80071e2:	4628      	mov	r0, r5
 80071e4:	f000 f857 	bl	8007296 <__swbuf_r>
 80071e8:	3001      	adds	r0, #1
 80071ea:	d1e7      	bne.n	80071bc <_puts_r+0x68>
 80071ec:	e7ce      	b.n	800718c <_puts_r+0x38>
 80071ee:	3e01      	subs	r6, #1
 80071f0:	e7e4      	b.n	80071bc <_puts_r+0x68>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	6022      	str	r2, [r4, #0]
 80071f8:	220a      	movs	r2, #10
 80071fa:	701a      	strb	r2, [r3, #0]
 80071fc:	e7ee      	b.n	80071dc <_puts_r+0x88>
	...

08007200 <puts>:
 8007200:	4b02      	ldr	r3, [pc, #8]	@ (800720c <puts+0xc>)
 8007202:	4601      	mov	r1, r0
 8007204:	6818      	ldr	r0, [r3, #0]
 8007206:	f7ff bfa5 	b.w	8007154 <_puts_r>
 800720a:	bf00      	nop
 800720c:	20000028 	.word	0x20000028

08007210 <__sread>:
 8007210:	b510      	push	{r4, lr}
 8007212:	460c      	mov	r4, r1
 8007214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007218:	f000 f8fc 	bl	8007414 <_read_r>
 800721c:	2800      	cmp	r0, #0
 800721e:	bfab      	itete	ge
 8007220:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007222:	89a3      	ldrhlt	r3, [r4, #12]
 8007224:	181b      	addge	r3, r3, r0
 8007226:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800722a:	bfac      	ite	ge
 800722c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800722e:	81a3      	strhlt	r3, [r4, #12]
 8007230:	bd10      	pop	{r4, pc}

08007232 <__swrite>:
 8007232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007236:	461f      	mov	r7, r3
 8007238:	898b      	ldrh	r3, [r1, #12]
 800723a:	05db      	lsls	r3, r3, #23
 800723c:	4605      	mov	r5, r0
 800723e:	460c      	mov	r4, r1
 8007240:	4616      	mov	r6, r2
 8007242:	d505      	bpl.n	8007250 <__swrite+0x1e>
 8007244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007248:	2302      	movs	r3, #2
 800724a:	2200      	movs	r2, #0
 800724c:	f000 f8d0 	bl	80073f0 <_lseek_r>
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007256:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800725a:	81a3      	strh	r3, [r4, #12]
 800725c:	4632      	mov	r2, r6
 800725e:	463b      	mov	r3, r7
 8007260:	4628      	mov	r0, r5
 8007262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007266:	f000 b8e7 	b.w	8007438 <_write_r>

0800726a <__sseek>:
 800726a:	b510      	push	{r4, lr}
 800726c:	460c      	mov	r4, r1
 800726e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007272:	f000 f8bd 	bl	80073f0 <_lseek_r>
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	bf15      	itete	ne
 800727c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800727e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007282:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007286:	81a3      	strheq	r3, [r4, #12]
 8007288:	bf18      	it	ne
 800728a:	81a3      	strhne	r3, [r4, #12]
 800728c:	bd10      	pop	{r4, pc}

0800728e <__sclose>:
 800728e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007292:	f000 b89d 	b.w	80073d0 <_close_r>

08007296 <__swbuf_r>:
 8007296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007298:	460e      	mov	r6, r1
 800729a:	4614      	mov	r4, r2
 800729c:	4605      	mov	r5, r0
 800729e:	b118      	cbz	r0, 80072a8 <__swbuf_r+0x12>
 80072a0:	6a03      	ldr	r3, [r0, #32]
 80072a2:	b90b      	cbnz	r3, 80072a8 <__swbuf_r+0x12>
 80072a4:	f7ff ff0e 	bl	80070c4 <__sinit>
 80072a8:	69a3      	ldr	r3, [r4, #24]
 80072aa:	60a3      	str	r3, [r4, #8]
 80072ac:	89a3      	ldrh	r3, [r4, #12]
 80072ae:	071a      	lsls	r2, r3, #28
 80072b0:	d501      	bpl.n	80072b6 <__swbuf_r+0x20>
 80072b2:	6923      	ldr	r3, [r4, #16]
 80072b4:	b943      	cbnz	r3, 80072c8 <__swbuf_r+0x32>
 80072b6:	4621      	mov	r1, r4
 80072b8:	4628      	mov	r0, r5
 80072ba:	f000 f82b 	bl	8007314 <__swsetup_r>
 80072be:	b118      	cbz	r0, 80072c8 <__swbuf_r+0x32>
 80072c0:	f04f 37ff 	mov.w	r7, #4294967295
 80072c4:	4638      	mov	r0, r7
 80072c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	6922      	ldr	r2, [r4, #16]
 80072cc:	1a98      	subs	r0, r3, r2
 80072ce:	6963      	ldr	r3, [r4, #20]
 80072d0:	b2f6      	uxtb	r6, r6
 80072d2:	4283      	cmp	r3, r0
 80072d4:	4637      	mov	r7, r6
 80072d6:	dc05      	bgt.n	80072e4 <__swbuf_r+0x4e>
 80072d8:	4621      	mov	r1, r4
 80072da:	4628      	mov	r0, r5
 80072dc:	f000 fd38 	bl	8007d50 <_fflush_r>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d1ed      	bne.n	80072c0 <__swbuf_r+0x2a>
 80072e4:	68a3      	ldr	r3, [r4, #8]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	60a3      	str	r3, [r4, #8]
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	6022      	str	r2, [r4, #0]
 80072f0:	701e      	strb	r6, [r3, #0]
 80072f2:	6962      	ldr	r2, [r4, #20]
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d004      	beq.n	8007304 <__swbuf_r+0x6e>
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	07db      	lsls	r3, r3, #31
 80072fe:	d5e1      	bpl.n	80072c4 <__swbuf_r+0x2e>
 8007300:	2e0a      	cmp	r6, #10
 8007302:	d1df      	bne.n	80072c4 <__swbuf_r+0x2e>
 8007304:	4621      	mov	r1, r4
 8007306:	4628      	mov	r0, r5
 8007308:	f000 fd22 	bl	8007d50 <_fflush_r>
 800730c:	2800      	cmp	r0, #0
 800730e:	d0d9      	beq.n	80072c4 <__swbuf_r+0x2e>
 8007310:	e7d6      	b.n	80072c0 <__swbuf_r+0x2a>
	...

08007314 <__swsetup_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	4b29      	ldr	r3, [pc, #164]	@ (80073bc <__swsetup_r+0xa8>)
 8007318:	4605      	mov	r5, r0
 800731a:	6818      	ldr	r0, [r3, #0]
 800731c:	460c      	mov	r4, r1
 800731e:	b118      	cbz	r0, 8007328 <__swsetup_r+0x14>
 8007320:	6a03      	ldr	r3, [r0, #32]
 8007322:	b90b      	cbnz	r3, 8007328 <__swsetup_r+0x14>
 8007324:	f7ff fece 	bl	80070c4 <__sinit>
 8007328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800732c:	0719      	lsls	r1, r3, #28
 800732e:	d422      	bmi.n	8007376 <__swsetup_r+0x62>
 8007330:	06da      	lsls	r2, r3, #27
 8007332:	d407      	bmi.n	8007344 <__swsetup_r+0x30>
 8007334:	2209      	movs	r2, #9
 8007336:	602a      	str	r2, [r5, #0]
 8007338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800733c:	81a3      	strh	r3, [r4, #12]
 800733e:	f04f 30ff 	mov.w	r0, #4294967295
 8007342:	e033      	b.n	80073ac <__swsetup_r+0x98>
 8007344:	0758      	lsls	r0, r3, #29
 8007346:	d512      	bpl.n	800736e <__swsetup_r+0x5a>
 8007348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800734a:	b141      	cbz	r1, 800735e <__swsetup_r+0x4a>
 800734c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007350:	4299      	cmp	r1, r3
 8007352:	d002      	beq.n	800735a <__swsetup_r+0x46>
 8007354:	4628      	mov	r0, r5
 8007356:	f000 f8af 	bl	80074b8 <_free_r>
 800735a:	2300      	movs	r3, #0
 800735c:	6363      	str	r3, [r4, #52]	@ 0x34
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007364:	81a3      	strh	r3, [r4, #12]
 8007366:	2300      	movs	r3, #0
 8007368:	6063      	str	r3, [r4, #4]
 800736a:	6923      	ldr	r3, [r4, #16]
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f043 0308 	orr.w	r3, r3, #8
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	b94b      	cbnz	r3, 800738e <__swsetup_r+0x7a>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007384:	d003      	beq.n	800738e <__swsetup_r+0x7a>
 8007386:	4621      	mov	r1, r4
 8007388:	4628      	mov	r0, r5
 800738a:	f000 fd2f 	bl	8007dec <__smakebuf_r>
 800738e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007392:	f013 0201 	ands.w	r2, r3, #1
 8007396:	d00a      	beq.n	80073ae <__swsetup_r+0x9a>
 8007398:	2200      	movs	r2, #0
 800739a:	60a2      	str	r2, [r4, #8]
 800739c:	6962      	ldr	r2, [r4, #20]
 800739e:	4252      	negs	r2, r2
 80073a0:	61a2      	str	r2, [r4, #24]
 80073a2:	6922      	ldr	r2, [r4, #16]
 80073a4:	b942      	cbnz	r2, 80073b8 <__swsetup_r+0xa4>
 80073a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80073aa:	d1c5      	bne.n	8007338 <__swsetup_r+0x24>
 80073ac:	bd38      	pop	{r3, r4, r5, pc}
 80073ae:	0799      	lsls	r1, r3, #30
 80073b0:	bf58      	it	pl
 80073b2:	6962      	ldrpl	r2, [r4, #20]
 80073b4:	60a2      	str	r2, [r4, #8]
 80073b6:	e7f4      	b.n	80073a2 <__swsetup_r+0x8e>
 80073b8:	2000      	movs	r0, #0
 80073ba:	e7f7      	b.n	80073ac <__swsetup_r+0x98>
 80073bc:	20000028 	.word	0x20000028

080073c0 <memset>:
 80073c0:	4402      	add	r2, r0
 80073c2:	4603      	mov	r3, r0
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d100      	bne.n	80073ca <memset+0xa>
 80073c8:	4770      	bx	lr
 80073ca:	f803 1b01 	strb.w	r1, [r3], #1
 80073ce:	e7f9      	b.n	80073c4 <memset+0x4>

080073d0 <_close_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4d06      	ldr	r5, [pc, #24]	@ (80073ec <_close_r+0x1c>)
 80073d4:	2300      	movs	r3, #0
 80073d6:	4604      	mov	r4, r0
 80073d8:	4608      	mov	r0, r1
 80073da:	602b      	str	r3, [r5, #0]
 80073dc:	f7fc f8a6 	bl	800352c <_close>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_close_r+0x1a>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_close_r+0x1a>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	20025d5c 	.word	0x20025d5c

080073f0 <_lseek_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	4d07      	ldr	r5, [pc, #28]	@ (8007410 <_lseek_r+0x20>)
 80073f4:	4604      	mov	r4, r0
 80073f6:	4608      	mov	r0, r1
 80073f8:	4611      	mov	r1, r2
 80073fa:	2200      	movs	r2, #0
 80073fc:	602a      	str	r2, [r5, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	f7fc f8bb 	bl	800357a <_lseek>
 8007404:	1c43      	adds	r3, r0, #1
 8007406:	d102      	bne.n	800740e <_lseek_r+0x1e>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	b103      	cbz	r3, 800740e <_lseek_r+0x1e>
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	bd38      	pop	{r3, r4, r5, pc}
 8007410:	20025d5c 	.word	0x20025d5c

08007414 <_read_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4d07      	ldr	r5, [pc, #28]	@ (8007434 <_read_r+0x20>)
 8007418:	4604      	mov	r4, r0
 800741a:	4608      	mov	r0, r1
 800741c:	4611      	mov	r1, r2
 800741e:	2200      	movs	r2, #0
 8007420:	602a      	str	r2, [r5, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	f7fc f849 	bl	80034ba <_read>
 8007428:	1c43      	adds	r3, r0, #1
 800742a:	d102      	bne.n	8007432 <_read_r+0x1e>
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	b103      	cbz	r3, 8007432 <_read_r+0x1e>
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	bd38      	pop	{r3, r4, r5, pc}
 8007434:	20025d5c 	.word	0x20025d5c

08007438 <_write_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	4d07      	ldr	r5, [pc, #28]	@ (8007458 <_write_r+0x20>)
 800743c:	4604      	mov	r4, r0
 800743e:	4608      	mov	r0, r1
 8007440:	4611      	mov	r1, r2
 8007442:	2200      	movs	r2, #0
 8007444:	602a      	str	r2, [r5, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	f7fc f854 	bl	80034f4 <_write>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_write_r+0x1e>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_write_r+0x1e>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	20025d5c 	.word	0x20025d5c

0800745c <__errno>:
 800745c:	4b01      	ldr	r3, [pc, #4]	@ (8007464 <__errno+0x8>)
 800745e:	6818      	ldr	r0, [r3, #0]
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	20000028 	.word	0x20000028

08007468 <__libc_init_array>:
 8007468:	b570      	push	{r4, r5, r6, lr}
 800746a:	4d0d      	ldr	r5, [pc, #52]	@ (80074a0 <__libc_init_array+0x38>)
 800746c:	4c0d      	ldr	r4, [pc, #52]	@ (80074a4 <__libc_init_array+0x3c>)
 800746e:	1b64      	subs	r4, r4, r5
 8007470:	10a4      	asrs	r4, r4, #2
 8007472:	2600      	movs	r6, #0
 8007474:	42a6      	cmp	r6, r4
 8007476:	d109      	bne.n	800748c <__libc_init_array+0x24>
 8007478:	4d0b      	ldr	r5, [pc, #44]	@ (80074a8 <__libc_init_array+0x40>)
 800747a:	4c0c      	ldr	r4, [pc, #48]	@ (80074ac <__libc_init_array+0x44>)
 800747c:	f000 fd24 	bl	8007ec8 <_init>
 8007480:	1b64      	subs	r4, r4, r5
 8007482:	10a4      	asrs	r4, r4, #2
 8007484:	2600      	movs	r6, #0
 8007486:	42a6      	cmp	r6, r4
 8007488:	d105      	bne.n	8007496 <__libc_init_array+0x2e>
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007490:	4798      	blx	r3
 8007492:	3601      	adds	r6, #1
 8007494:	e7ee      	b.n	8007474 <__libc_init_array+0xc>
 8007496:	f855 3b04 	ldr.w	r3, [r5], #4
 800749a:	4798      	blx	r3
 800749c:	3601      	adds	r6, #1
 800749e:	e7f2      	b.n	8007486 <__libc_init_array+0x1e>
 80074a0:	0800913c 	.word	0x0800913c
 80074a4:	0800913c 	.word	0x0800913c
 80074a8:	0800913c 	.word	0x0800913c
 80074ac:	08009140 	.word	0x08009140

080074b0 <__retarget_lock_init_recursive>:
 80074b0:	4770      	bx	lr

080074b2 <__retarget_lock_acquire_recursive>:
 80074b2:	4770      	bx	lr

080074b4 <__retarget_lock_release_recursive>:
 80074b4:	4770      	bx	lr
	...

080074b8 <_free_r>:
 80074b8:	b538      	push	{r3, r4, r5, lr}
 80074ba:	4605      	mov	r5, r0
 80074bc:	2900      	cmp	r1, #0
 80074be:	d041      	beq.n	8007544 <_free_r+0x8c>
 80074c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074c4:	1f0c      	subs	r4, r1, #4
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	bfb8      	it	lt
 80074ca:	18e4      	addlt	r4, r4, r3
 80074cc:	f000 f8e0 	bl	8007690 <__malloc_lock>
 80074d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007548 <_free_r+0x90>)
 80074d2:	6813      	ldr	r3, [r2, #0]
 80074d4:	b933      	cbnz	r3, 80074e4 <_free_r+0x2c>
 80074d6:	6063      	str	r3, [r4, #4]
 80074d8:	6014      	str	r4, [r2, #0]
 80074da:	4628      	mov	r0, r5
 80074dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074e0:	f000 b8dc 	b.w	800769c <__malloc_unlock>
 80074e4:	42a3      	cmp	r3, r4
 80074e6:	d908      	bls.n	80074fa <_free_r+0x42>
 80074e8:	6820      	ldr	r0, [r4, #0]
 80074ea:	1821      	adds	r1, r4, r0
 80074ec:	428b      	cmp	r3, r1
 80074ee:	bf01      	itttt	eq
 80074f0:	6819      	ldreq	r1, [r3, #0]
 80074f2:	685b      	ldreq	r3, [r3, #4]
 80074f4:	1809      	addeq	r1, r1, r0
 80074f6:	6021      	streq	r1, [r4, #0]
 80074f8:	e7ed      	b.n	80074d6 <_free_r+0x1e>
 80074fa:	461a      	mov	r2, r3
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	b10b      	cbz	r3, 8007504 <_free_r+0x4c>
 8007500:	42a3      	cmp	r3, r4
 8007502:	d9fa      	bls.n	80074fa <_free_r+0x42>
 8007504:	6811      	ldr	r1, [r2, #0]
 8007506:	1850      	adds	r0, r2, r1
 8007508:	42a0      	cmp	r0, r4
 800750a:	d10b      	bne.n	8007524 <_free_r+0x6c>
 800750c:	6820      	ldr	r0, [r4, #0]
 800750e:	4401      	add	r1, r0
 8007510:	1850      	adds	r0, r2, r1
 8007512:	4283      	cmp	r3, r0
 8007514:	6011      	str	r1, [r2, #0]
 8007516:	d1e0      	bne.n	80074da <_free_r+0x22>
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	6053      	str	r3, [r2, #4]
 800751e:	4408      	add	r0, r1
 8007520:	6010      	str	r0, [r2, #0]
 8007522:	e7da      	b.n	80074da <_free_r+0x22>
 8007524:	d902      	bls.n	800752c <_free_r+0x74>
 8007526:	230c      	movs	r3, #12
 8007528:	602b      	str	r3, [r5, #0]
 800752a:	e7d6      	b.n	80074da <_free_r+0x22>
 800752c:	6820      	ldr	r0, [r4, #0]
 800752e:	1821      	adds	r1, r4, r0
 8007530:	428b      	cmp	r3, r1
 8007532:	bf04      	itt	eq
 8007534:	6819      	ldreq	r1, [r3, #0]
 8007536:	685b      	ldreq	r3, [r3, #4]
 8007538:	6063      	str	r3, [r4, #4]
 800753a:	bf04      	itt	eq
 800753c:	1809      	addeq	r1, r1, r0
 800753e:	6021      	streq	r1, [r4, #0]
 8007540:	6054      	str	r4, [r2, #4]
 8007542:	e7ca      	b.n	80074da <_free_r+0x22>
 8007544:	bd38      	pop	{r3, r4, r5, pc}
 8007546:	bf00      	nop
 8007548:	20025d68 	.word	0x20025d68

0800754c <sbrk_aligned>:
 800754c:	b570      	push	{r4, r5, r6, lr}
 800754e:	4e0f      	ldr	r6, [pc, #60]	@ (800758c <sbrk_aligned+0x40>)
 8007550:	460c      	mov	r4, r1
 8007552:	6831      	ldr	r1, [r6, #0]
 8007554:	4605      	mov	r5, r0
 8007556:	b911      	cbnz	r1, 800755e <sbrk_aligned+0x12>
 8007558:	f000 fca6 	bl	8007ea8 <_sbrk_r>
 800755c:	6030      	str	r0, [r6, #0]
 800755e:	4621      	mov	r1, r4
 8007560:	4628      	mov	r0, r5
 8007562:	f000 fca1 	bl	8007ea8 <_sbrk_r>
 8007566:	1c43      	adds	r3, r0, #1
 8007568:	d103      	bne.n	8007572 <sbrk_aligned+0x26>
 800756a:	f04f 34ff 	mov.w	r4, #4294967295
 800756e:	4620      	mov	r0, r4
 8007570:	bd70      	pop	{r4, r5, r6, pc}
 8007572:	1cc4      	adds	r4, r0, #3
 8007574:	f024 0403 	bic.w	r4, r4, #3
 8007578:	42a0      	cmp	r0, r4
 800757a:	d0f8      	beq.n	800756e <sbrk_aligned+0x22>
 800757c:	1a21      	subs	r1, r4, r0
 800757e:	4628      	mov	r0, r5
 8007580:	f000 fc92 	bl	8007ea8 <_sbrk_r>
 8007584:	3001      	adds	r0, #1
 8007586:	d1f2      	bne.n	800756e <sbrk_aligned+0x22>
 8007588:	e7ef      	b.n	800756a <sbrk_aligned+0x1e>
 800758a:	bf00      	nop
 800758c:	20025d64 	.word	0x20025d64

08007590 <_malloc_r>:
 8007590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007594:	1ccd      	adds	r5, r1, #3
 8007596:	f025 0503 	bic.w	r5, r5, #3
 800759a:	3508      	adds	r5, #8
 800759c:	2d0c      	cmp	r5, #12
 800759e:	bf38      	it	cc
 80075a0:	250c      	movcc	r5, #12
 80075a2:	2d00      	cmp	r5, #0
 80075a4:	4606      	mov	r6, r0
 80075a6:	db01      	blt.n	80075ac <_malloc_r+0x1c>
 80075a8:	42a9      	cmp	r1, r5
 80075aa:	d904      	bls.n	80075b6 <_malloc_r+0x26>
 80075ac:	230c      	movs	r3, #12
 80075ae:	6033      	str	r3, [r6, #0]
 80075b0:	2000      	movs	r0, #0
 80075b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800768c <_malloc_r+0xfc>
 80075ba:	f000 f869 	bl	8007690 <__malloc_lock>
 80075be:	f8d8 3000 	ldr.w	r3, [r8]
 80075c2:	461c      	mov	r4, r3
 80075c4:	bb44      	cbnz	r4, 8007618 <_malloc_r+0x88>
 80075c6:	4629      	mov	r1, r5
 80075c8:	4630      	mov	r0, r6
 80075ca:	f7ff ffbf 	bl	800754c <sbrk_aligned>
 80075ce:	1c43      	adds	r3, r0, #1
 80075d0:	4604      	mov	r4, r0
 80075d2:	d158      	bne.n	8007686 <_malloc_r+0xf6>
 80075d4:	f8d8 4000 	ldr.w	r4, [r8]
 80075d8:	4627      	mov	r7, r4
 80075da:	2f00      	cmp	r7, #0
 80075dc:	d143      	bne.n	8007666 <_malloc_r+0xd6>
 80075de:	2c00      	cmp	r4, #0
 80075e0:	d04b      	beq.n	800767a <_malloc_r+0xea>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	4639      	mov	r1, r7
 80075e6:	4630      	mov	r0, r6
 80075e8:	eb04 0903 	add.w	r9, r4, r3
 80075ec:	f000 fc5c 	bl	8007ea8 <_sbrk_r>
 80075f0:	4581      	cmp	r9, r0
 80075f2:	d142      	bne.n	800767a <_malloc_r+0xea>
 80075f4:	6821      	ldr	r1, [r4, #0]
 80075f6:	1a6d      	subs	r5, r5, r1
 80075f8:	4629      	mov	r1, r5
 80075fa:	4630      	mov	r0, r6
 80075fc:	f7ff ffa6 	bl	800754c <sbrk_aligned>
 8007600:	3001      	adds	r0, #1
 8007602:	d03a      	beq.n	800767a <_malloc_r+0xea>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	442b      	add	r3, r5
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	f8d8 3000 	ldr.w	r3, [r8]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	bb62      	cbnz	r2, 800766c <_malloc_r+0xdc>
 8007612:	f8c8 7000 	str.w	r7, [r8]
 8007616:	e00f      	b.n	8007638 <_malloc_r+0xa8>
 8007618:	6822      	ldr	r2, [r4, #0]
 800761a:	1b52      	subs	r2, r2, r5
 800761c:	d420      	bmi.n	8007660 <_malloc_r+0xd0>
 800761e:	2a0b      	cmp	r2, #11
 8007620:	d917      	bls.n	8007652 <_malloc_r+0xc2>
 8007622:	1961      	adds	r1, r4, r5
 8007624:	42a3      	cmp	r3, r4
 8007626:	6025      	str	r5, [r4, #0]
 8007628:	bf18      	it	ne
 800762a:	6059      	strne	r1, [r3, #4]
 800762c:	6863      	ldr	r3, [r4, #4]
 800762e:	bf08      	it	eq
 8007630:	f8c8 1000 	streq.w	r1, [r8]
 8007634:	5162      	str	r2, [r4, r5]
 8007636:	604b      	str	r3, [r1, #4]
 8007638:	4630      	mov	r0, r6
 800763a:	f000 f82f 	bl	800769c <__malloc_unlock>
 800763e:	f104 000b 	add.w	r0, r4, #11
 8007642:	1d23      	adds	r3, r4, #4
 8007644:	f020 0007 	bic.w	r0, r0, #7
 8007648:	1ac2      	subs	r2, r0, r3
 800764a:	bf1c      	itt	ne
 800764c:	1a1b      	subne	r3, r3, r0
 800764e:	50a3      	strne	r3, [r4, r2]
 8007650:	e7af      	b.n	80075b2 <_malloc_r+0x22>
 8007652:	6862      	ldr	r2, [r4, #4]
 8007654:	42a3      	cmp	r3, r4
 8007656:	bf0c      	ite	eq
 8007658:	f8c8 2000 	streq.w	r2, [r8]
 800765c:	605a      	strne	r2, [r3, #4]
 800765e:	e7eb      	b.n	8007638 <_malloc_r+0xa8>
 8007660:	4623      	mov	r3, r4
 8007662:	6864      	ldr	r4, [r4, #4]
 8007664:	e7ae      	b.n	80075c4 <_malloc_r+0x34>
 8007666:	463c      	mov	r4, r7
 8007668:	687f      	ldr	r7, [r7, #4]
 800766a:	e7b6      	b.n	80075da <_malloc_r+0x4a>
 800766c:	461a      	mov	r2, r3
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	42a3      	cmp	r3, r4
 8007672:	d1fb      	bne.n	800766c <_malloc_r+0xdc>
 8007674:	2300      	movs	r3, #0
 8007676:	6053      	str	r3, [r2, #4]
 8007678:	e7de      	b.n	8007638 <_malloc_r+0xa8>
 800767a:	230c      	movs	r3, #12
 800767c:	6033      	str	r3, [r6, #0]
 800767e:	4630      	mov	r0, r6
 8007680:	f000 f80c 	bl	800769c <__malloc_unlock>
 8007684:	e794      	b.n	80075b0 <_malloc_r+0x20>
 8007686:	6005      	str	r5, [r0, #0]
 8007688:	e7d6      	b.n	8007638 <_malloc_r+0xa8>
 800768a:	bf00      	nop
 800768c:	20025d68 	.word	0x20025d68

08007690 <__malloc_lock>:
 8007690:	4801      	ldr	r0, [pc, #4]	@ (8007698 <__malloc_lock+0x8>)
 8007692:	f7ff bf0e 	b.w	80074b2 <__retarget_lock_acquire_recursive>
 8007696:	bf00      	nop
 8007698:	20025d60 	.word	0x20025d60

0800769c <__malloc_unlock>:
 800769c:	4801      	ldr	r0, [pc, #4]	@ (80076a4 <__malloc_unlock+0x8>)
 800769e:	f7ff bf09 	b.w	80074b4 <__retarget_lock_release_recursive>
 80076a2:	bf00      	nop
 80076a4:	20025d60 	.word	0x20025d60

080076a8 <__sfputc_r>:
 80076a8:	6893      	ldr	r3, [r2, #8]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	b410      	push	{r4}
 80076b0:	6093      	str	r3, [r2, #8]
 80076b2:	da08      	bge.n	80076c6 <__sfputc_r+0x1e>
 80076b4:	6994      	ldr	r4, [r2, #24]
 80076b6:	42a3      	cmp	r3, r4
 80076b8:	db01      	blt.n	80076be <__sfputc_r+0x16>
 80076ba:	290a      	cmp	r1, #10
 80076bc:	d103      	bne.n	80076c6 <__sfputc_r+0x1e>
 80076be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076c2:	f7ff bde8 	b.w	8007296 <__swbuf_r>
 80076c6:	6813      	ldr	r3, [r2, #0]
 80076c8:	1c58      	adds	r0, r3, #1
 80076ca:	6010      	str	r0, [r2, #0]
 80076cc:	7019      	strb	r1, [r3, #0]
 80076ce:	4608      	mov	r0, r1
 80076d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <__sfputs_r>:
 80076d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d8:	4606      	mov	r6, r0
 80076da:	460f      	mov	r7, r1
 80076dc:	4614      	mov	r4, r2
 80076de:	18d5      	adds	r5, r2, r3
 80076e0:	42ac      	cmp	r4, r5
 80076e2:	d101      	bne.n	80076e8 <__sfputs_r+0x12>
 80076e4:	2000      	movs	r0, #0
 80076e6:	e007      	b.n	80076f8 <__sfputs_r+0x22>
 80076e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ec:	463a      	mov	r2, r7
 80076ee:	4630      	mov	r0, r6
 80076f0:	f7ff ffda 	bl	80076a8 <__sfputc_r>
 80076f4:	1c43      	adds	r3, r0, #1
 80076f6:	d1f3      	bne.n	80076e0 <__sfputs_r+0xa>
 80076f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076fc <_vfiprintf_r>:
 80076fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007700:	460d      	mov	r5, r1
 8007702:	b09d      	sub	sp, #116	@ 0x74
 8007704:	4614      	mov	r4, r2
 8007706:	4698      	mov	r8, r3
 8007708:	4606      	mov	r6, r0
 800770a:	b118      	cbz	r0, 8007714 <_vfiprintf_r+0x18>
 800770c:	6a03      	ldr	r3, [r0, #32]
 800770e:	b90b      	cbnz	r3, 8007714 <_vfiprintf_r+0x18>
 8007710:	f7ff fcd8 	bl	80070c4 <__sinit>
 8007714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007716:	07d9      	lsls	r1, r3, #31
 8007718:	d405      	bmi.n	8007726 <_vfiprintf_r+0x2a>
 800771a:	89ab      	ldrh	r3, [r5, #12]
 800771c:	059a      	lsls	r2, r3, #22
 800771e:	d402      	bmi.n	8007726 <_vfiprintf_r+0x2a>
 8007720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007722:	f7ff fec6 	bl	80074b2 <__retarget_lock_acquire_recursive>
 8007726:	89ab      	ldrh	r3, [r5, #12]
 8007728:	071b      	lsls	r3, r3, #28
 800772a:	d501      	bpl.n	8007730 <_vfiprintf_r+0x34>
 800772c:	692b      	ldr	r3, [r5, #16]
 800772e:	b99b      	cbnz	r3, 8007758 <_vfiprintf_r+0x5c>
 8007730:	4629      	mov	r1, r5
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff fdee 	bl	8007314 <__swsetup_r>
 8007738:	b170      	cbz	r0, 8007758 <_vfiprintf_r+0x5c>
 800773a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800773c:	07dc      	lsls	r4, r3, #31
 800773e:	d504      	bpl.n	800774a <_vfiprintf_r+0x4e>
 8007740:	f04f 30ff 	mov.w	r0, #4294967295
 8007744:	b01d      	add	sp, #116	@ 0x74
 8007746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774a:	89ab      	ldrh	r3, [r5, #12]
 800774c:	0598      	lsls	r0, r3, #22
 800774e:	d4f7      	bmi.n	8007740 <_vfiprintf_r+0x44>
 8007750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007752:	f7ff feaf 	bl	80074b4 <__retarget_lock_release_recursive>
 8007756:	e7f3      	b.n	8007740 <_vfiprintf_r+0x44>
 8007758:	2300      	movs	r3, #0
 800775a:	9309      	str	r3, [sp, #36]	@ 0x24
 800775c:	2320      	movs	r3, #32
 800775e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007762:	f8cd 800c 	str.w	r8, [sp, #12]
 8007766:	2330      	movs	r3, #48	@ 0x30
 8007768:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007918 <_vfiprintf_r+0x21c>
 800776c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007770:	f04f 0901 	mov.w	r9, #1
 8007774:	4623      	mov	r3, r4
 8007776:	469a      	mov	sl, r3
 8007778:	f813 2b01 	ldrb.w	r2, [r3], #1
 800777c:	b10a      	cbz	r2, 8007782 <_vfiprintf_r+0x86>
 800777e:	2a25      	cmp	r2, #37	@ 0x25
 8007780:	d1f9      	bne.n	8007776 <_vfiprintf_r+0x7a>
 8007782:	ebba 0b04 	subs.w	fp, sl, r4
 8007786:	d00b      	beq.n	80077a0 <_vfiprintf_r+0xa4>
 8007788:	465b      	mov	r3, fp
 800778a:	4622      	mov	r2, r4
 800778c:	4629      	mov	r1, r5
 800778e:	4630      	mov	r0, r6
 8007790:	f7ff ffa1 	bl	80076d6 <__sfputs_r>
 8007794:	3001      	adds	r0, #1
 8007796:	f000 80a7 	beq.w	80078e8 <_vfiprintf_r+0x1ec>
 800779a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800779c:	445a      	add	r2, fp
 800779e:	9209      	str	r2, [sp, #36]	@ 0x24
 80077a0:	f89a 3000 	ldrb.w	r3, [sl]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 809f 	beq.w	80078e8 <_vfiprintf_r+0x1ec>
 80077aa:	2300      	movs	r3, #0
 80077ac:	f04f 32ff 	mov.w	r2, #4294967295
 80077b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077b4:	f10a 0a01 	add.w	sl, sl, #1
 80077b8:	9304      	str	r3, [sp, #16]
 80077ba:	9307      	str	r3, [sp, #28]
 80077bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80077c2:	4654      	mov	r4, sl
 80077c4:	2205      	movs	r2, #5
 80077c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ca:	4853      	ldr	r0, [pc, #332]	@ (8007918 <_vfiprintf_r+0x21c>)
 80077cc:	f7f8 fd10 	bl	80001f0 <memchr>
 80077d0:	9a04      	ldr	r2, [sp, #16]
 80077d2:	b9d8      	cbnz	r0, 800780c <_vfiprintf_r+0x110>
 80077d4:	06d1      	lsls	r1, r2, #27
 80077d6:	bf44      	itt	mi
 80077d8:	2320      	movmi	r3, #32
 80077da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077de:	0713      	lsls	r3, r2, #28
 80077e0:	bf44      	itt	mi
 80077e2:	232b      	movmi	r3, #43	@ 0x2b
 80077e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077e8:	f89a 3000 	ldrb.w	r3, [sl]
 80077ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80077ee:	d015      	beq.n	800781c <_vfiprintf_r+0x120>
 80077f0:	9a07      	ldr	r2, [sp, #28]
 80077f2:	4654      	mov	r4, sl
 80077f4:	2000      	movs	r0, #0
 80077f6:	f04f 0c0a 	mov.w	ip, #10
 80077fa:	4621      	mov	r1, r4
 80077fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007800:	3b30      	subs	r3, #48	@ 0x30
 8007802:	2b09      	cmp	r3, #9
 8007804:	d94b      	bls.n	800789e <_vfiprintf_r+0x1a2>
 8007806:	b1b0      	cbz	r0, 8007836 <_vfiprintf_r+0x13a>
 8007808:	9207      	str	r2, [sp, #28]
 800780a:	e014      	b.n	8007836 <_vfiprintf_r+0x13a>
 800780c:	eba0 0308 	sub.w	r3, r0, r8
 8007810:	fa09 f303 	lsl.w	r3, r9, r3
 8007814:	4313      	orrs	r3, r2
 8007816:	9304      	str	r3, [sp, #16]
 8007818:	46a2      	mov	sl, r4
 800781a:	e7d2      	b.n	80077c2 <_vfiprintf_r+0xc6>
 800781c:	9b03      	ldr	r3, [sp, #12]
 800781e:	1d19      	adds	r1, r3, #4
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	9103      	str	r1, [sp, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	bfbb      	ittet	lt
 8007828:	425b      	neglt	r3, r3
 800782a:	f042 0202 	orrlt.w	r2, r2, #2
 800782e:	9307      	strge	r3, [sp, #28]
 8007830:	9307      	strlt	r3, [sp, #28]
 8007832:	bfb8      	it	lt
 8007834:	9204      	strlt	r2, [sp, #16]
 8007836:	7823      	ldrb	r3, [r4, #0]
 8007838:	2b2e      	cmp	r3, #46	@ 0x2e
 800783a:	d10a      	bne.n	8007852 <_vfiprintf_r+0x156>
 800783c:	7863      	ldrb	r3, [r4, #1]
 800783e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007840:	d132      	bne.n	80078a8 <_vfiprintf_r+0x1ac>
 8007842:	9b03      	ldr	r3, [sp, #12]
 8007844:	1d1a      	adds	r2, r3, #4
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	9203      	str	r2, [sp, #12]
 800784a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800784e:	3402      	adds	r4, #2
 8007850:	9305      	str	r3, [sp, #20]
 8007852:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007928 <_vfiprintf_r+0x22c>
 8007856:	7821      	ldrb	r1, [r4, #0]
 8007858:	2203      	movs	r2, #3
 800785a:	4650      	mov	r0, sl
 800785c:	f7f8 fcc8 	bl	80001f0 <memchr>
 8007860:	b138      	cbz	r0, 8007872 <_vfiprintf_r+0x176>
 8007862:	9b04      	ldr	r3, [sp, #16]
 8007864:	eba0 000a 	sub.w	r0, r0, sl
 8007868:	2240      	movs	r2, #64	@ 0x40
 800786a:	4082      	lsls	r2, r0
 800786c:	4313      	orrs	r3, r2
 800786e:	3401      	adds	r4, #1
 8007870:	9304      	str	r3, [sp, #16]
 8007872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007876:	4829      	ldr	r0, [pc, #164]	@ (800791c <_vfiprintf_r+0x220>)
 8007878:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800787c:	2206      	movs	r2, #6
 800787e:	f7f8 fcb7 	bl	80001f0 <memchr>
 8007882:	2800      	cmp	r0, #0
 8007884:	d03f      	beq.n	8007906 <_vfiprintf_r+0x20a>
 8007886:	4b26      	ldr	r3, [pc, #152]	@ (8007920 <_vfiprintf_r+0x224>)
 8007888:	bb1b      	cbnz	r3, 80078d2 <_vfiprintf_r+0x1d6>
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	3307      	adds	r3, #7
 800788e:	f023 0307 	bic.w	r3, r3, #7
 8007892:	3308      	adds	r3, #8
 8007894:	9303      	str	r3, [sp, #12]
 8007896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007898:	443b      	add	r3, r7
 800789a:	9309      	str	r3, [sp, #36]	@ 0x24
 800789c:	e76a      	b.n	8007774 <_vfiprintf_r+0x78>
 800789e:	fb0c 3202 	mla	r2, ip, r2, r3
 80078a2:	460c      	mov	r4, r1
 80078a4:	2001      	movs	r0, #1
 80078a6:	e7a8      	b.n	80077fa <_vfiprintf_r+0xfe>
 80078a8:	2300      	movs	r3, #0
 80078aa:	3401      	adds	r4, #1
 80078ac:	9305      	str	r3, [sp, #20]
 80078ae:	4619      	mov	r1, r3
 80078b0:	f04f 0c0a 	mov.w	ip, #10
 80078b4:	4620      	mov	r0, r4
 80078b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ba:	3a30      	subs	r2, #48	@ 0x30
 80078bc:	2a09      	cmp	r2, #9
 80078be:	d903      	bls.n	80078c8 <_vfiprintf_r+0x1cc>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0c6      	beq.n	8007852 <_vfiprintf_r+0x156>
 80078c4:	9105      	str	r1, [sp, #20]
 80078c6:	e7c4      	b.n	8007852 <_vfiprintf_r+0x156>
 80078c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80078cc:	4604      	mov	r4, r0
 80078ce:	2301      	movs	r3, #1
 80078d0:	e7f0      	b.n	80078b4 <_vfiprintf_r+0x1b8>
 80078d2:	ab03      	add	r3, sp, #12
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	462a      	mov	r2, r5
 80078d8:	4b12      	ldr	r3, [pc, #72]	@ (8007924 <_vfiprintf_r+0x228>)
 80078da:	a904      	add	r1, sp, #16
 80078dc:	4630      	mov	r0, r6
 80078de:	f3af 8000 	nop.w
 80078e2:	4607      	mov	r7, r0
 80078e4:	1c78      	adds	r0, r7, #1
 80078e6:	d1d6      	bne.n	8007896 <_vfiprintf_r+0x19a>
 80078e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078ea:	07d9      	lsls	r1, r3, #31
 80078ec:	d405      	bmi.n	80078fa <_vfiprintf_r+0x1fe>
 80078ee:	89ab      	ldrh	r3, [r5, #12]
 80078f0:	059a      	lsls	r2, r3, #22
 80078f2:	d402      	bmi.n	80078fa <_vfiprintf_r+0x1fe>
 80078f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078f6:	f7ff fddd 	bl	80074b4 <__retarget_lock_release_recursive>
 80078fa:	89ab      	ldrh	r3, [r5, #12]
 80078fc:	065b      	lsls	r3, r3, #25
 80078fe:	f53f af1f 	bmi.w	8007740 <_vfiprintf_r+0x44>
 8007902:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007904:	e71e      	b.n	8007744 <_vfiprintf_r+0x48>
 8007906:	ab03      	add	r3, sp, #12
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	462a      	mov	r2, r5
 800790c:	4b05      	ldr	r3, [pc, #20]	@ (8007924 <_vfiprintf_r+0x228>)
 800790e:	a904      	add	r1, sp, #16
 8007910:	4630      	mov	r0, r6
 8007912:	f000 f879 	bl	8007a08 <_printf_i>
 8007916:	e7e4      	b.n	80078e2 <_vfiprintf_r+0x1e6>
 8007918:	08009100 	.word	0x08009100
 800791c:	0800910a 	.word	0x0800910a
 8007920:	00000000 	.word	0x00000000
 8007924:	080076d7 	.word	0x080076d7
 8007928:	08009106 	.word	0x08009106

0800792c <_printf_common>:
 800792c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007930:	4616      	mov	r6, r2
 8007932:	4698      	mov	r8, r3
 8007934:	688a      	ldr	r2, [r1, #8]
 8007936:	690b      	ldr	r3, [r1, #16]
 8007938:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800793c:	4293      	cmp	r3, r2
 800793e:	bfb8      	it	lt
 8007940:	4613      	movlt	r3, r2
 8007942:	6033      	str	r3, [r6, #0]
 8007944:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007948:	4607      	mov	r7, r0
 800794a:	460c      	mov	r4, r1
 800794c:	b10a      	cbz	r2, 8007952 <_printf_common+0x26>
 800794e:	3301      	adds	r3, #1
 8007950:	6033      	str	r3, [r6, #0]
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	0699      	lsls	r1, r3, #26
 8007956:	bf42      	ittt	mi
 8007958:	6833      	ldrmi	r3, [r6, #0]
 800795a:	3302      	addmi	r3, #2
 800795c:	6033      	strmi	r3, [r6, #0]
 800795e:	6825      	ldr	r5, [r4, #0]
 8007960:	f015 0506 	ands.w	r5, r5, #6
 8007964:	d106      	bne.n	8007974 <_printf_common+0x48>
 8007966:	f104 0a19 	add.w	sl, r4, #25
 800796a:	68e3      	ldr	r3, [r4, #12]
 800796c:	6832      	ldr	r2, [r6, #0]
 800796e:	1a9b      	subs	r3, r3, r2
 8007970:	42ab      	cmp	r3, r5
 8007972:	dc26      	bgt.n	80079c2 <_printf_common+0x96>
 8007974:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007978:	6822      	ldr	r2, [r4, #0]
 800797a:	3b00      	subs	r3, #0
 800797c:	bf18      	it	ne
 800797e:	2301      	movne	r3, #1
 8007980:	0692      	lsls	r2, r2, #26
 8007982:	d42b      	bmi.n	80079dc <_printf_common+0xb0>
 8007984:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007988:	4641      	mov	r1, r8
 800798a:	4638      	mov	r0, r7
 800798c:	47c8      	blx	r9
 800798e:	3001      	adds	r0, #1
 8007990:	d01e      	beq.n	80079d0 <_printf_common+0xa4>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	6922      	ldr	r2, [r4, #16]
 8007996:	f003 0306 	and.w	r3, r3, #6
 800799a:	2b04      	cmp	r3, #4
 800799c:	bf02      	ittt	eq
 800799e:	68e5      	ldreq	r5, [r4, #12]
 80079a0:	6833      	ldreq	r3, [r6, #0]
 80079a2:	1aed      	subeq	r5, r5, r3
 80079a4:	68a3      	ldr	r3, [r4, #8]
 80079a6:	bf0c      	ite	eq
 80079a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079ac:	2500      	movne	r5, #0
 80079ae:	4293      	cmp	r3, r2
 80079b0:	bfc4      	itt	gt
 80079b2:	1a9b      	subgt	r3, r3, r2
 80079b4:	18ed      	addgt	r5, r5, r3
 80079b6:	2600      	movs	r6, #0
 80079b8:	341a      	adds	r4, #26
 80079ba:	42b5      	cmp	r5, r6
 80079bc:	d11a      	bne.n	80079f4 <_printf_common+0xc8>
 80079be:	2000      	movs	r0, #0
 80079c0:	e008      	b.n	80079d4 <_printf_common+0xa8>
 80079c2:	2301      	movs	r3, #1
 80079c4:	4652      	mov	r2, sl
 80079c6:	4641      	mov	r1, r8
 80079c8:	4638      	mov	r0, r7
 80079ca:	47c8      	blx	r9
 80079cc:	3001      	adds	r0, #1
 80079ce:	d103      	bne.n	80079d8 <_printf_common+0xac>
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d8:	3501      	adds	r5, #1
 80079da:	e7c6      	b.n	800796a <_printf_common+0x3e>
 80079dc:	18e1      	adds	r1, r4, r3
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	2030      	movs	r0, #48	@ 0x30
 80079e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80079e6:	4422      	add	r2, r4
 80079e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079f0:	3302      	adds	r3, #2
 80079f2:	e7c7      	b.n	8007984 <_printf_common+0x58>
 80079f4:	2301      	movs	r3, #1
 80079f6:	4622      	mov	r2, r4
 80079f8:	4641      	mov	r1, r8
 80079fa:	4638      	mov	r0, r7
 80079fc:	47c8      	blx	r9
 80079fe:	3001      	adds	r0, #1
 8007a00:	d0e6      	beq.n	80079d0 <_printf_common+0xa4>
 8007a02:	3601      	adds	r6, #1
 8007a04:	e7d9      	b.n	80079ba <_printf_common+0x8e>
	...

08007a08 <_printf_i>:
 8007a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	7e0f      	ldrb	r7, [r1, #24]
 8007a0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a10:	2f78      	cmp	r7, #120	@ 0x78
 8007a12:	4691      	mov	r9, r2
 8007a14:	4680      	mov	r8, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	469a      	mov	sl, r3
 8007a1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a1e:	d807      	bhi.n	8007a30 <_printf_i+0x28>
 8007a20:	2f62      	cmp	r7, #98	@ 0x62
 8007a22:	d80a      	bhi.n	8007a3a <_printf_i+0x32>
 8007a24:	2f00      	cmp	r7, #0
 8007a26:	f000 80d2 	beq.w	8007bce <_printf_i+0x1c6>
 8007a2a:	2f58      	cmp	r7, #88	@ 0x58
 8007a2c:	f000 80b9 	beq.w	8007ba2 <_printf_i+0x19a>
 8007a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a38:	e03a      	b.n	8007ab0 <_printf_i+0xa8>
 8007a3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a3e:	2b15      	cmp	r3, #21
 8007a40:	d8f6      	bhi.n	8007a30 <_printf_i+0x28>
 8007a42:	a101      	add	r1, pc, #4	@ (adr r1, 8007a48 <_printf_i+0x40>)
 8007a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a48:	08007aa1 	.word	0x08007aa1
 8007a4c:	08007ab5 	.word	0x08007ab5
 8007a50:	08007a31 	.word	0x08007a31
 8007a54:	08007a31 	.word	0x08007a31
 8007a58:	08007a31 	.word	0x08007a31
 8007a5c:	08007a31 	.word	0x08007a31
 8007a60:	08007ab5 	.word	0x08007ab5
 8007a64:	08007a31 	.word	0x08007a31
 8007a68:	08007a31 	.word	0x08007a31
 8007a6c:	08007a31 	.word	0x08007a31
 8007a70:	08007a31 	.word	0x08007a31
 8007a74:	08007bb5 	.word	0x08007bb5
 8007a78:	08007adf 	.word	0x08007adf
 8007a7c:	08007b6f 	.word	0x08007b6f
 8007a80:	08007a31 	.word	0x08007a31
 8007a84:	08007a31 	.word	0x08007a31
 8007a88:	08007bd7 	.word	0x08007bd7
 8007a8c:	08007a31 	.word	0x08007a31
 8007a90:	08007adf 	.word	0x08007adf
 8007a94:	08007a31 	.word	0x08007a31
 8007a98:	08007a31 	.word	0x08007a31
 8007a9c:	08007b77 	.word	0x08007b77
 8007aa0:	6833      	ldr	r3, [r6, #0]
 8007aa2:	1d1a      	adds	r2, r3, #4
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6032      	str	r2, [r6, #0]
 8007aa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007aac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e09d      	b.n	8007bf0 <_printf_i+0x1e8>
 8007ab4:	6833      	ldr	r3, [r6, #0]
 8007ab6:	6820      	ldr	r0, [r4, #0]
 8007ab8:	1d19      	adds	r1, r3, #4
 8007aba:	6031      	str	r1, [r6, #0]
 8007abc:	0606      	lsls	r6, r0, #24
 8007abe:	d501      	bpl.n	8007ac4 <_printf_i+0xbc>
 8007ac0:	681d      	ldr	r5, [r3, #0]
 8007ac2:	e003      	b.n	8007acc <_printf_i+0xc4>
 8007ac4:	0645      	lsls	r5, r0, #25
 8007ac6:	d5fb      	bpl.n	8007ac0 <_printf_i+0xb8>
 8007ac8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007acc:	2d00      	cmp	r5, #0
 8007ace:	da03      	bge.n	8007ad8 <_printf_i+0xd0>
 8007ad0:	232d      	movs	r3, #45	@ 0x2d
 8007ad2:	426d      	negs	r5, r5
 8007ad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ad8:	4859      	ldr	r0, [pc, #356]	@ (8007c40 <_printf_i+0x238>)
 8007ada:	230a      	movs	r3, #10
 8007adc:	e011      	b.n	8007b02 <_printf_i+0xfa>
 8007ade:	6821      	ldr	r1, [r4, #0]
 8007ae0:	6833      	ldr	r3, [r6, #0]
 8007ae2:	0608      	lsls	r0, r1, #24
 8007ae4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ae8:	d402      	bmi.n	8007af0 <_printf_i+0xe8>
 8007aea:	0649      	lsls	r1, r1, #25
 8007aec:	bf48      	it	mi
 8007aee:	b2ad      	uxthmi	r5, r5
 8007af0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007af2:	4853      	ldr	r0, [pc, #332]	@ (8007c40 <_printf_i+0x238>)
 8007af4:	6033      	str	r3, [r6, #0]
 8007af6:	bf14      	ite	ne
 8007af8:	230a      	movne	r3, #10
 8007afa:	2308      	moveq	r3, #8
 8007afc:	2100      	movs	r1, #0
 8007afe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b02:	6866      	ldr	r6, [r4, #4]
 8007b04:	60a6      	str	r6, [r4, #8]
 8007b06:	2e00      	cmp	r6, #0
 8007b08:	bfa2      	ittt	ge
 8007b0a:	6821      	ldrge	r1, [r4, #0]
 8007b0c:	f021 0104 	bicge.w	r1, r1, #4
 8007b10:	6021      	strge	r1, [r4, #0]
 8007b12:	b90d      	cbnz	r5, 8007b18 <_printf_i+0x110>
 8007b14:	2e00      	cmp	r6, #0
 8007b16:	d04b      	beq.n	8007bb0 <_printf_i+0x1a8>
 8007b18:	4616      	mov	r6, r2
 8007b1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b1e:	fb03 5711 	mls	r7, r3, r1, r5
 8007b22:	5dc7      	ldrb	r7, [r0, r7]
 8007b24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b28:	462f      	mov	r7, r5
 8007b2a:	42bb      	cmp	r3, r7
 8007b2c:	460d      	mov	r5, r1
 8007b2e:	d9f4      	bls.n	8007b1a <_printf_i+0x112>
 8007b30:	2b08      	cmp	r3, #8
 8007b32:	d10b      	bne.n	8007b4c <_printf_i+0x144>
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	07df      	lsls	r7, r3, #31
 8007b38:	d508      	bpl.n	8007b4c <_printf_i+0x144>
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	6861      	ldr	r1, [r4, #4]
 8007b3e:	4299      	cmp	r1, r3
 8007b40:	bfde      	ittt	le
 8007b42:	2330      	movle	r3, #48	@ 0x30
 8007b44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b4c:	1b92      	subs	r2, r2, r6
 8007b4e:	6122      	str	r2, [r4, #16]
 8007b50:	f8cd a000 	str.w	sl, [sp]
 8007b54:	464b      	mov	r3, r9
 8007b56:	aa03      	add	r2, sp, #12
 8007b58:	4621      	mov	r1, r4
 8007b5a:	4640      	mov	r0, r8
 8007b5c:	f7ff fee6 	bl	800792c <_printf_common>
 8007b60:	3001      	adds	r0, #1
 8007b62:	d14a      	bne.n	8007bfa <_printf_i+0x1f2>
 8007b64:	f04f 30ff 	mov.w	r0, #4294967295
 8007b68:	b004      	add	sp, #16
 8007b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	f043 0320 	orr.w	r3, r3, #32
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	4833      	ldr	r0, [pc, #204]	@ (8007c44 <_printf_i+0x23c>)
 8007b78:	2778      	movs	r7, #120	@ 0x78
 8007b7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	6831      	ldr	r1, [r6, #0]
 8007b82:	061f      	lsls	r7, r3, #24
 8007b84:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b88:	d402      	bmi.n	8007b90 <_printf_i+0x188>
 8007b8a:	065f      	lsls	r7, r3, #25
 8007b8c:	bf48      	it	mi
 8007b8e:	b2ad      	uxthmi	r5, r5
 8007b90:	6031      	str	r1, [r6, #0]
 8007b92:	07d9      	lsls	r1, r3, #31
 8007b94:	bf44      	itt	mi
 8007b96:	f043 0320 	orrmi.w	r3, r3, #32
 8007b9a:	6023      	strmi	r3, [r4, #0]
 8007b9c:	b11d      	cbz	r5, 8007ba6 <_printf_i+0x19e>
 8007b9e:	2310      	movs	r3, #16
 8007ba0:	e7ac      	b.n	8007afc <_printf_i+0xf4>
 8007ba2:	4827      	ldr	r0, [pc, #156]	@ (8007c40 <_printf_i+0x238>)
 8007ba4:	e7e9      	b.n	8007b7a <_printf_i+0x172>
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	f023 0320 	bic.w	r3, r3, #32
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	e7f6      	b.n	8007b9e <_printf_i+0x196>
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	e7bd      	b.n	8007b30 <_printf_i+0x128>
 8007bb4:	6833      	ldr	r3, [r6, #0]
 8007bb6:	6825      	ldr	r5, [r4, #0]
 8007bb8:	6961      	ldr	r1, [r4, #20]
 8007bba:	1d18      	adds	r0, r3, #4
 8007bbc:	6030      	str	r0, [r6, #0]
 8007bbe:	062e      	lsls	r6, r5, #24
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	d501      	bpl.n	8007bc8 <_printf_i+0x1c0>
 8007bc4:	6019      	str	r1, [r3, #0]
 8007bc6:	e002      	b.n	8007bce <_printf_i+0x1c6>
 8007bc8:	0668      	lsls	r0, r5, #25
 8007bca:	d5fb      	bpl.n	8007bc4 <_printf_i+0x1bc>
 8007bcc:	8019      	strh	r1, [r3, #0]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	6123      	str	r3, [r4, #16]
 8007bd2:	4616      	mov	r6, r2
 8007bd4:	e7bc      	b.n	8007b50 <_printf_i+0x148>
 8007bd6:	6833      	ldr	r3, [r6, #0]
 8007bd8:	1d1a      	adds	r2, r3, #4
 8007bda:	6032      	str	r2, [r6, #0]
 8007bdc:	681e      	ldr	r6, [r3, #0]
 8007bde:	6862      	ldr	r2, [r4, #4]
 8007be0:	2100      	movs	r1, #0
 8007be2:	4630      	mov	r0, r6
 8007be4:	f7f8 fb04 	bl	80001f0 <memchr>
 8007be8:	b108      	cbz	r0, 8007bee <_printf_i+0x1e6>
 8007bea:	1b80      	subs	r0, r0, r6
 8007bec:	6060      	str	r0, [r4, #4]
 8007bee:	6863      	ldr	r3, [r4, #4]
 8007bf0:	6123      	str	r3, [r4, #16]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bf8:	e7aa      	b.n	8007b50 <_printf_i+0x148>
 8007bfa:	6923      	ldr	r3, [r4, #16]
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	4649      	mov	r1, r9
 8007c00:	4640      	mov	r0, r8
 8007c02:	47d0      	blx	sl
 8007c04:	3001      	adds	r0, #1
 8007c06:	d0ad      	beq.n	8007b64 <_printf_i+0x15c>
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	079b      	lsls	r3, r3, #30
 8007c0c:	d413      	bmi.n	8007c36 <_printf_i+0x22e>
 8007c0e:	68e0      	ldr	r0, [r4, #12]
 8007c10:	9b03      	ldr	r3, [sp, #12]
 8007c12:	4298      	cmp	r0, r3
 8007c14:	bfb8      	it	lt
 8007c16:	4618      	movlt	r0, r3
 8007c18:	e7a6      	b.n	8007b68 <_printf_i+0x160>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	4632      	mov	r2, r6
 8007c1e:	4649      	mov	r1, r9
 8007c20:	4640      	mov	r0, r8
 8007c22:	47d0      	blx	sl
 8007c24:	3001      	adds	r0, #1
 8007c26:	d09d      	beq.n	8007b64 <_printf_i+0x15c>
 8007c28:	3501      	adds	r5, #1
 8007c2a:	68e3      	ldr	r3, [r4, #12]
 8007c2c:	9903      	ldr	r1, [sp, #12]
 8007c2e:	1a5b      	subs	r3, r3, r1
 8007c30:	42ab      	cmp	r3, r5
 8007c32:	dcf2      	bgt.n	8007c1a <_printf_i+0x212>
 8007c34:	e7eb      	b.n	8007c0e <_printf_i+0x206>
 8007c36:	2500      	movs	r5, #0
 8007c38:	f104 0619 	add.w	r6, r4, #25
 8007c3c:	e7f5      	b.n	8007c2a <_printf_i+0x222>
 8007c3e:	bf00      	nop
 8007c40:	08009111 	.word	0x08009111
 8007c44:	08009122 	.word	0x08009122

08007c48 <__sflush_r>:
 8007c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c50:	0716      	lsls	r6, r2, #28
 8007c52:	4605      	mov	r5, r0
 8007c54:	460c      	mov	r4, r1
 8007c56:	d454      	bmi.n	8007d02 <__sflush_r+0xba>
 8007c58:	684b      	ldr	r3, [r1, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	dc02      	bgt.n	8007c64 <__sflush_r+0x1c>
 8007c5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	dd48      	ble.n	8007cf6 <__sflush_r+0xae>
 8007c64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c66:	2e00      	cmp	r6, #0
 8007c68:	d045      	beq.n	8007cf6 <__sflush_r+0xae>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c70:	682f      	ldr	r7, [r5, #0]
 8007c72:	6a21      	ldr	r1, [r4, #32]
 8007c74:	602b      	str	r3, [r5, #0]
 8007c76:	d030      	beq.n	8007cda <__sflush_r+0x92>
 8007c78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	0759      	lsls	r1, r3, #29
 8007c7e:	d505      	bpl.n	8007c8c <__sflush_r+0x44>
 8007c80:	6863      	ldr	r3, [r4, #4]
 8007c82:	1ad2      	subs	r2, r2, r3
 8007c84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c86:	b10b      	cbz	r3, 8007c8c <__sflush_r+0x44>
 8007c88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c8a:	1ad2      	subs	r2, r2, r3
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c90:	6a21      	ldr	r1, [r4, #32]
 8007c92:	4628      	mov	r0, r5
 8007c94:	47b0      	blx	r6
 8007c96:	1c43      	adds	r3, r0, #1
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	d106      	bne.n	8007caa <__sflush_r+0x62>
 8007c9c:	6829      	ldr	r1, [r5, #0]
 8007c9e:	291d      	cmp	r1, #29
 8007ca0:	d82b      	bhi.n	8007cfa <__sflush_r+0xb2>
 8007ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8007d4c <__sflush_r+0x104>)
 8007ca4:	410a      	asrs	r2, r1
 8007ca6:	07d6      	lsls	r6, r2, #31
 8007ca8:	d427      	bmi.n	8007cfa <__sflush_r+0xb2>
 8007caa:	2200      	movs	r2, #0
 8007cac:	6062      	str	r2, [r4, #4]
 8007cae:	04d9      	lsls	r1, r3, #19
 8007cb0:	6922      	ldr	r2, [r4, #16]
 8007cb2:	6022      	str	r2, [r4, #0]
 8007cb4:	d504      	bpl.n	8007cc0 <__sflush_r+0x78>
 8007cb6:	1c42      	adds	r2, r0, #1
 8007cb8:	d101      	bne.n	8007cbe <__sflush_r+0x76>
 8007cba:	682b      	ldr	r3, [r5, #0]
 8007cbc:	b903      	cbnz	r3, 8007cc0 <__sflush_r+0x78>
 8007cbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8007cc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cc2:	602f      	str	r7, [r5, #0]
 8007cc4:	b1b9      	cbz	r1, 8007cf6 <__sflush_r+0xae>
 8007cc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cca:	4299      	cmp	r1, r3
 8007ccc:	d002      	beq.n	8007cd4 <__sflush_r+0x8c>
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f7ff fbf2 	bl	80074b8 <_free_r>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cd8:	e00d      	b.n	8007cf6 <__sflush_r+0xae>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	4628      	mov	r0, r5
 8007cde:	47b0      	blx	r6
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	1c50      	adds	r0, r2, #1
 8007ce4:	d1c9      	bne.n	8007c7a <__sflush_r+0x32>
 8007ce6:	682b      	ldr	r3, [r5, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0c6      	beq.n	8007c7a <__sflush_r+0x32>
 8007cec:	2b1d      	cmp	r3, #29
 8007cee:	d001      	beq.n	8007cf4 <__sflush_r+0xac>
 8007cf0:	2b16      	cmp	r3, #22
 8007cf2:	d11e      	bne.n	8007d32 <__sflush_r+0xea>
 8007cf4:	602f      	str	r7, [r5, #0]
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	e022      	b.n	8007d40 <__sflush_r+0xf8>
 8007cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cfe:	b21b      	sxth	r3, r3
 8007d00:	e01b      	b.n	8007d3a <__sflush_r+0xf2>
 8007d02:	690f      	ldr	r7, [r1, #16]
 8007d04:	2f00      	cmp	r7, #0
 8007d06:	d0f6      	beq.n	8007cf6 <__sflush_r+0xae>
 8007d08:	0793      	lsls	r3, r2, #30
 8007d0a:	680e      	ldr	r6, [r1, #0]
 8007d0c:	bf08      	it	eq
 8007d0e:	694b      	ldreq	r3, [r1, #20]
 8007d10:	600f      	str	r7, [r1, #0]
 8007d12:	bf18      	it	ne
 8007d14:	2300      	movne	r3, #0
 8007d16:	eba6 0807 	sub.w	r8, r6, r7
 8007d1a:	608b      	str	r3, [r1, #8]
 8007d1c:	f1b8 0f00 	cmp.w	r8, #0
 8007d20:	dde9      	ble.n	8007cf6 <__sflush_r+0xae>
 8007d22:	6a21      	ldr	r1, [r4, #32]
 8007d24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d26:	4643      	mov	r3, r8
 8007d28:	463a      	mov	r2, r7
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	47b0      	blx	r6
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	dc08      	bgt.n	8007d44 <__sflush_r+0xfc>
 8007d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d3a:	81a3      	strh	r3, [r4, #12]
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d44:	4407      	add	r7, r0
 8007d46:	eba8 0800 	sub.w	r8, r8, r0
 8007d4a:	e7e7      	b.n	8007d1c <__sflush_r+0xd4>
 8007d4c:	dfbffffe 	.word	0xdfbffffe

08007d50 <_fflush_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	690b      	ldr	r3, [r1, #16]
 8007d54:	4605      	mov	r5, r0
 8007d56:	460c      	mov	r4, r1
 8007d58:	b913      	cbnz	r3, 8007d60 <_fflush_r+0x10>
 8007d5a:	2500      	movs	r5, #0
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	bd38      	pop	{r3, r4, r5, pc}
 8007d60:	b118      	cbz	r0, 8007d6a <_fflush_r+0x1a>
 8007d62:	6a03      	ldr	r3, [r0, #32]
 8007d64:	b90b      	cbnz	r3, 8007d6a <_fflush_r+0x1a>
 8007d66:	f7ff f9ad 	bl	80070c4 <__sinit>
 8007d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0f3      	beq.n	8007d5a <_fflush_r+0xa>
 8007d72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d74:	07d0      	lsls	r0, r2, #31
 8007d76:	d404      	bmi.n	8007d82 <_fflush_r+0x32>
 8007d78:	0599      	lsls	r1, r3, #22
 8007d7a:	d402      	bmi.n	8007d82 <_fflush_r+0x32>
 8007d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d7e:	f7ff fb98 	bl	80074b2 <__retarget_lock_acquire_recursive>
 8007d82:	4628      	mov	r0, r5
 8007d84:	4621      	mov	r1, r4
 8007d86:	f7ff ff5f 	bl	8007c48 <__sflush_r>
 8007d8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d8c:	07da      	lsls	r2, r3, #31
 8007d8e:	4605      	mov	r5, r0
 8007d90:	d4e4      	bmi.n	8007d5c <_fflush_r+0xc>
 8007d92:	89a3      	ldrh	r3, [r4, #12]
 8007d94:	059b      	lsls	r3, r3, #22
 8007d96:	d4e1      	bmi.n	8007d5c <_fflush_r+0xc>
 8007d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d9a:	f7ff fb8b 	bl	80074b4 <__retarget_lock_release_recursive>
 8007d9e:	e7dd      	b.n	8007d5c <_fflush_r+0xc>

08007da0 <__swhatbuf_r>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	460c      	mov	r4, r1
 8007da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da8:	2900      	cmp	r1, #0
 8007daa:	b096      	sub	sp, #88	@ 0x58
 8007dac:	4615      	mov	r5, r2
 8007dae:	461e      	mov	r6, r3
 8007db0:	da0d      	bge.n	8007dce <__swhatbuf_r+0x2e>
 8007db2:	89a3      	ldrh	r3, [r4, #12]
 8007db4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007db8:	f04f 0100 	mov.w	r1, #0
 8007dbc:	bf14      	ite	ne
 8007dbe:	2340      	movne	r3, #64	@ 0x40
 8007dc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	6031      	str	r1, [r6, #0]
 8007dc8:	602b      	str	r3, [r5, #0]
 8007dca:	b016      	add	sp, #88	@ 0x58
 8007dcc:	bd70      	pop	{r4, r5, r6, pc}
 8007dce:	466a      	mov	r2, sp
 8007dd0:	f000 f848 	bl	8007e64 <_fstat_r>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	dbec      	blt.n	8007db2 <__swhatbuf_r+0x12>
 8007dd8:	9901      	ldr	r1, [sp, #4]
 8007dda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007dde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007de2:	4259      	negs	r1, r3
 8007de4:	4159      	adcs	r1, r3
 8007de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007dea:	e7eb      	b.n	8007dc4 <__swhatbuf_r+0x24>

08007dec <__smakebuf_r>:
 8007dec:	898b      	ldrh	r3, [r1, #12]
 8007dee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007df0:	079d      	lsls	r5, r3, #30
 8007df2:	4606      	mov	r6, r0
 8007df4:	460c      	mov	r4, r1
 8007df6:	d507      	bpl.n	8007e08 <__smakebuf_r+0x1c>
 8007df8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	6123      	str	r3, [r4, #16]
 8007e00:	2301      	movs	r3, #1
 8007e02:	6163      	str	r3, [r4, #20]
 8007e04:	b003      	add	sp, #12
 8007e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e08:	ab01      	add	r3, sp, #4
 8007e0a:	466a      	mov	r2, sp
 8007e0c:	f7ff ffc8 	bl	8007da0 <__swhatbuf_r>
 8007e10:	9f00      	ldr	r7, [sp, #0]
 8007e12:	4605      	mov	r5, r0
 8007e14:	4639      	mov	r1, r7
 8007e16:	4630      	mov	r0, r6
 8007e18:	f7ff fbba 	bl	8007590 <_malloc_r>
 8007e1c:	b948      	cbnz	r0, 8007e32 <__smakebuf_r+0x46>
 8007e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e22:	059a      	lsls	r2, r3, #22
 8007e24:	d4ee      	bmi.n	8007e04 <__smakebuf_r+0x18>
 8007e26:	f023 0303 	bic.w	r3, r3, #3
 8007e2a:	f043 0302 	orr.w	r3, r3, #2
 8007e2e:	81a3      	strh	r3, [r4, #12]
 8007e30:	e7e2      	b.n	8007df8 <__smakebuf_r+0xc>
 8007e32:	89a3      	ldrh	r3, [r4, #12]
 8007e34:	6020      	str	r0, [r4, #0]
 8007e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e3a:	81a3      	strh	r3, [r4, #12]
 8007e3c:	9b01      	ldr	r3, [sp, #4]
 8007e3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007e42:	b15b      	cbz	r3, 8007e5c <__smakebuf_r+0x70>
 8007e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f000 f81d 	bl	8007e88 <_isatty_r>
 8007e4e:	b128      	cbz	r0, 8007e5c <__smakebuf_r+0x70>
 8007e50:	89a3      	ldrh	r3, [r4, #12]
 8007e52:	f023 0303 	bic.w	r3, r3, #3
 8007e56:	f043 0301 	orr.w	r3, r3, #1
 8007e5a:	81a3      	strh	r3, [r4, #12]
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	431d      	orrs	r5, r3
 8007e60:	81a5      	strh	r5, [r4, #12]
 8007e62:	e7cf      	b.n	8007e04 <__smakebuf_r+0x18>

08007e64 <_fstat_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	4d07      	ldr	r5, [pc, #28]	@ (8007e84 <_fstat_r+0x20>)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	4611      	mov	r1, r2
 8007e70:	602b      	str	r3, [r5, #0]
 8007e72:	f7fb fb67 	bl	8003544 <_fstat>
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	d102      	bne.n	8007e80 <_fstat_r+0x1c>
 8007e7a:	682b      	ldr	r3, [r5, #0]
 8007e7c:	b103      	cbz	r3, 8007e80 <_fstat_r+0x1c>
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	bd38      	pop	{r3, r4, r5, pc}
 8007e82:	bf00      	nop
 8007e84:	20025d5c 	.word	0x20025d5c

08007e88 <_isatty_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4d06      	ldr	r5, [pc, #24]	@ (8007ea4 <_isatty_r+0x1c>)
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4604      	mov	r4, r0
 8007e90:	4608      	mov	r0, r1
 8007e92:	602b      	str	r3, [r5, #0]
 8007e94:	f7fb fb66 	bl	8003564 <_isatty>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	d102      	bne.n	8007ea2 <_isatty_r+0x1a>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	b103      	cbz	r3, 8007ea2 <_isatty_r+0x1a>
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}
 8007ea4:	20025d5c 	.word	0x20025d5c

08007ea8 <_sbrk_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	4d06      	ldr	r5, [pc, #24]	@ (8007ec4 <_sbrk_r+0x1c>)
 8007eac:	2300      	movs	r3, #0
 8007eae:	4604      	mov	r4, r0
 8007eb0:	4608      	mov	r0, r1
 8007eb2:	602b      	str	r3, [r5, #0]
 8007eb4:	f7fb fb6e 	bl	8003594 <_sbrk>
 8007eb8:	1c43      	adds	r3, r0, #1
 8007eba:	d102      	bne.n	8007ec2 <_sbrk_r+0x1a>
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	b103      	cbz	r3, 8007ec2 <_sbrk_r+0x1a>
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	bd38      	pop	{r3, r4, r5, pc}
 8007ec4:	20025d5c 	.word	0x20025d5c

08007ec8 <_init>:
 8007ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eca:	bf00      	nop
 8007ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ece:	bc08      	pop	{r3}
 8007ed0:	469e      	mov	lr, r3
 8007ed2:	4770      	bx	lr

08007ed4 <_fini>:
 8007ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed6:	bf00      	nop
 8007ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eda:	bc08      	pop	{r3}
 8007edc:	469e      	mov	lr, r3
 8007ede:	4770      	bx	lr
