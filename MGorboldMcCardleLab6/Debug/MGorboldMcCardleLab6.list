
MGorboldMcCardleLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e6c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001240  0800701c  0800701c  0000801c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800825c  0800825c  0000a078  2**0
                  CONTENTS
  4 .ARM          00000008  0800825c  0800825c  0000925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008264  08008264  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008264  08008264  00009264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008268  08008268  00009268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800826c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a078  2**0
                  CONTENTS
 10 .bss          00025cb4  20000078  20000078  0000a078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025d2c  20025d2c  0000a078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012dc5  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ec4  00000000  00000000  0001ce6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  0001fd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f1e  00000000  00000000  000210d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bfd  00000000  00000000  00021fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017cf9  00000000  00000000  00048beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2916  00000000  00000000  000608e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001431fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059ac  00000000  00000000  00143240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00148bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007004 	.word	0x08007004

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007004 	.word	0x08007004

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 f910 	bl	80027a8 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 f946 	bl	8000818 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f903 	bl	8000798 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fa08 	bl	80009ac <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f000 fc7f 	bl	8000e9e <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b02      	ldr	r3, [pc, #8]	@ (80005ac <ApplicationInit+0x2c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000094 	.word	0x20000094

080005b0 <LCD_Touch_Polling_Demo>:
	visualDemo();
}

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_GREEN);
 80005b4:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 f9f7 	bl	80009ac <LCD_Clear>
	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005be:	480f      	ldr	r0, [pc, #60]	@ (80005fc <LCD_Touch_Polling_Demo+0x4c>)
 80005c0:	f000 fc78 	bl	8000eb4 <returnTouchStateAndLocation>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d10e      	bne.n	80005e8 <LCD_Touch_Polling_Demo+0x38>
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 80005ca:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <LCD_Touch_Polling_Demo+0x4c>)
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	4619      	mov	r1, r3
 80005d0:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <LCD_Touch_Polling_Demo+0x4c>)
 80005d2:	885b      	ldrh	r3, [r3, #2]
 80005d4:	461a      	mov	r2, r3
 80005d6:	480a      	ldr	r0, [pc, #40]	@ (8000600 <LCD_Touch_Polling_Demo+0x50>)
 80005d8:	f005 fe48 	bl	800626c <iprintf>
			LCD_Clear(0, LCD_COLOR_RED);
 80005dc:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 f9e3 	bl	80009ac <LCD_Clear>
 80005e6:	e7ea      	b.n	80005be <LCD_Touch_Polling_Demo+0xe>
		} else {
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 80005e8:	4806      	ldr	r0, [pc, #24]	@ (8000604 <LCD_Touch_Polling_Demo+0x54>)
 80005ea:	f005 fea7 	bl	800633c <puts>
			LCD_Clear(0, LCD_COLOR_GREEN);
 80005ee:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 f9da 	bl	80009ac <LCD_Clear>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005f8:	e7e1      	b.n	80005be <LCD_Touch_Polling_Demo+0xe>
 80005fa:	bf00      	nop
 80005fc:	20000094 	.word	0x20000094
 8000600:	0800701c 	.word	0x0800701c
 8000604:	08007030 	.word	0x08007030

08000608 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08c      	sub	sp, #48	@ 0x30
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
 8000612:	4b5a      	ldr	r3, [pc, #360]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000616:	4a59      	ldr	r2, [pc, #356]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000618:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800061c:	6453      	str	r3, [r2, #68]	@ 0x44
 800061e:	4b57      	ldr	r3, [pc, #348]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000622:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000626:	61bb      	str	r3, [r7, #24]
 8000628:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	4b53      	ldr	r3, [pc, #332]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a52      	ldr	r2, [pc, #328]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b50      	ldr	r3, [pc, #320]	@ (800077c <LCD_GPIO_Init+0x174>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	4b4c      	ldr	r3, [pc, #304]	@ (800077c <LCD_GPIO_Init+0x174>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a4b      	ldr	r2, [pc, #300]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b49      	ldr	r3, [pc, #292]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	4b45      	ldr	r3, [pc, #276]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a44      	ldr	r2, [pc, #272]	@ (800077c <LCD_GPIO_Init+0x174>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b42      	ldr	r3, [pc, #264]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b3e      	ldr	r3, [pc, #248]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a3d      	ldr	r2, [pc, #244]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b3b      	ldr	r3, [pc, #236]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0308 	and.w	r3, r3, #8
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b37      	ldr	r3, [pc, #220]	@ (800077c <LCD_GPIO_Init+0x174>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a36      	ldr	r2, [pc, #216]	@ (800077c <LCD_GPIO_Init+0x174>)
 80006a4:	f043 0320 	orr.w	r3, r3, #32
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b34      	ldr	r3, [pc, #208]	@ (800077c <LCD_GPIO_Init+0x174>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0320 	and.w	r3, r3, #32
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b30      	ldr	r3, [pc, #192]	@ (800077c <LCD_GPIO_Init+0x174>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a2f      	ldr	r2, [pc, #188]	@ (800077c <LCD_GPIO_Init+0x174>)
 80006c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b2d      	ldr	r3, [pc, #180]	@ (800077c <LCD_GPIO_Init+0x174>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80006d2:	f641 0358 	movw	r3, #6232	@ 0x1858
 80006d6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80006e0:	2302      	movs	r3, #2
 80006e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80006e4:	230e      	movs	r3, #14
 80006e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	4824      	ldr	r0, [pc, #144]	@ (8000780 <LCD_GPIO_Init+0x178>)
 80006f0:	f002 fabc 	bl	8002c6c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80006f4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80006f8:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	4820      	ldr	r0, [pc, #128]	@ (8000784 <LCD_GPIO_Init+0x17c>)
 8000702:	f002 fab3 	bl	8002c6c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000706:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800070a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	481d      	ldr	r0, [pc, #116]	@ (8000788 <LCD_GPIO_Init+0x180>)
 8000714:	f002 faaa 	bl	8002c6c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000718:	2348      	movs	r3, #72	@ 0x48
 800071a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	481a      	ldr	r0, [pc, #104]	@ (800078c <LCD_GPIO_Init+0x184>)
 8000724:	f002 faa2 	bl	8002c6c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800072c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	4816      	ldr	r0, [pc, #88]	@ (8000790 <LCD_GPIO_Init+0x188>)
 8000736:	f002 fa99 	bl	8002c6c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800073a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800073e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4813      	ldr	r0, [pc, #76]	@ (8000794 <LCD_GPIO_Init+0x18c>)
 8000748:	f002 fa90 	bl	8002c6c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800074c:	2303      	movs	r3, #3
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000750:	2309      	movs	r3, #9
 8000752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	480a      	ldr	r0, [pc, #40]	@ (8000784 <LCD_GPIO_Init+0x17c>)
 800075c:	f002 fa86 	bl	8002c6c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000760:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <LCD_GPIO_Init+0x18c>)
 800076e:	f002 fa7d 	bl	8002c6c <HAL_GPIO_Init>
}
 8000772:	bf00      	nop
 8000774:	3730      	adds	r7, #48	@ 0x30
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000
 8000784:	40020400 	.word	0x40020400
 8000788:	40020800 	.word	0x40020800
 800078c:	40020c00 	.word	0x40020c00
 8000790:	40021400 	.word	0x40021400
 8000794:	40021800 	.word	0x40021800

08000798 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b090      	sub	sp, #64	@ 0x40
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80007a6:	23f0      	movs	r3, #240	@ 0xf0
 80007a8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80007ae:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007b2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80007b4:	2302      	movs	r3, #2
 80007b6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80007b8:	23ff      	movs	r3, #255	@ 0xff
 80007ba:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007c6:	2305      	movs	r3, #5
 80007c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d101      	bne.n	80007d4 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <LTCD_Layer_Init+0x78>)
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80007d4:	23f0      	movs	r3, #240	@ 0xf0
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80007d8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80007f0:	79fa      	ldrb	r2, [r7, #7]
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4619      	mov	r1, r3
 80007f8:	4806      	ldr	r0, [pc, #24]	@ (8000814 <LTCD_Layer_Init+0x7c>)
 80007fa:	f003 fe79 	bl	80044f0 <HAL_LTDC_ConfigLayer>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000804:	f000 fb45 	bl	8000e92 <LCD_Error_Handler>
	}
}
 8000808:	bf00      	nop
 800080a:	3740      	adds	r7, #64	@ 0x40
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000178 	.word	0x20000178
 8000814:	2000009c 	.word	0x2000009c

08000818 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800081c:	4b2a      	ldr	r3, [pc, #168]	@ (80008c8 <LTCD__Init+0xb0>)
 800081e:	4a2b      	ldr	r2, [pc, #172]	@ (80008cc <LTCD__Init+0xb4>)
 8000820:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000822:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <LTCD__Init+0xb0>)
 8000824:	2209      	movs	r2, #9
 8000826:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000828:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <LTCD__Init+0xb0>)
 800082a:	2201      	movs	r2, #1
 800082c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800082e:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <LTCD__Init+0xb0>)
 8000830:	221d      	movs	r2, #29
 8000832:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000834:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <LTCD__Init+0xb0>)
 8000836:	2203      	movs	r2, #3
 8000838:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800083a:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <LTCD__Init+0xb0>)
 800083c:	f240 120d 	movw	r2, #269	@ 0x10d
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000842:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <LTCD__Init+0xb0>)
 8000844:	f240 1243 	movw	r2, #323	@ 0x143
 8000848:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800084a:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <LTCD__Init+0xb0>)
 800084c:	f240 1217 	movw	r2, #279	@ 0x117
 8000850:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000852:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <LTCD__Init+0xb0>)
 8000854:	f240 1247 	movw	r2, #327	@ 0x147
 8000858:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800085a:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <LTCD__Init+0xb0>)
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000862:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <LTCD__Init+0xb0>)
 8000864:	2200      	movs	r2, #0
 8000866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800086a:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <LTCD__Init+0xb0>)
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000872:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <LTCD__Init+0xb8>)
 8000874:	2208      	movs	r2, #8
 8000876:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000878:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <LTCD__Init+0xb8>)
 800087a:	22c0      	movs	r2, #192	@ 0xc0
 800087c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800087e:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <LTCD__Init+0xb8>)
 8000880:	2204      	movs	r2, #4
 8000882:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <LTCD__Init+0xb8>)
 8000886:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800088a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800088c:	4810      	ldr	r0, [pc, #64]	@ (80008d0 <LTCD__Init+0xb8>)
 800088e:	f004 fc89 	bl	80051a4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <LTCD__Init+0xb0>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000898:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <LTCD__Init+0xb0>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <LTCD__Init+0xb0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008a4:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <LTCD__Init+0xb0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80008aa:	f7ff fead 	bl	8000608 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008ae:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <LTCD__Init+0xb0>)
 80008b0:	f003 fd4e 	bl	8004350 <HAL_LTDC_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80008ba:	f000 faea 	bl	8000e92 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80008be:	f000 fb05 	bl	8000ecc <ili9341_Init>
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000009c 	.word	0x2000009c
 80008cc:	40016800 	.word	0x40016800
 80008d0:	20000144 	.word	0x20000144

080008d4 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
 80008de:	460b      	mov	r3, r1
 80008e0:	80bb      	strh	r3, [r7, #4]
 80008e2:	4613      	mov	r3, r2
 80008e4:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80008e6:	88ba      	ldrh	r2, [r7, #4]
 80008e8:	4613      	mov	r3, r2
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	1a9b      	subs	r3, r3, r2
 80008ee:	011b      	lsls	r3, r3, #4
 80008f0:	461a      	mov	r2, r3
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	4413      	add	r3, r2
 80008f6:	4905      	ldr	r1, [pc, #20]	@ (800090c <LCD_Draw_Pixel+0x38>)
 80008f8:	887a      	ldrh	r2, [r7, #2]
 80008fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000178 	.word	0x20000178

08000910 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	4604      	mov	r4, r0
 8000918:	4608      	mov	r0, r1
 800091a:	4611      	mov	r1, r2
 800091c:	461a      	mov	r2, r3
 800091e:	4623      	mov	r3, r4
 8000920:	80fb      	strh	r3, [r7, #6]
 8000922:	4603      	mov	r3, r0
 8000924:	80bb      	strh	r3, [r7, #4]
 8000926:	460b      	mov	r3, r1
 8000928:	807b      	strh	r3, [r7, #2]
 800092a:	4613      	mov	r3, r2
 800092c:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 800092e:	2300      	movs	r3, #0
 8000930:	81fb      	strh	r3, [r7, #14]
 8000932:	e00b      	b.n	800094c <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000934:	89fa      	ldrh	r2, [r7, #14]
 8000936:	88bb      	ldrh	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	b299      	uxth	r1, r3
 800093c:	883a      	ldrh	r2, [r7, #0]
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ffc7 	bl	80008d4 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000946:	89fb      	ldrh	r3, [r7, #14]
 8000948:	3301      	adds	r3, #1
 800094a:	81fb      	strh	r3, [r7, #14]
 800094c:	89fa      	ldrh	r2, [r7, #14]
 800094e:	887b      	ldrh	r3, [r7, #2]
 8000950:	429a      	cmp	r2, r3
 8000952:	d3ef      	bcc.n	8000934 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	bd90      	pop	{r4, r7, pc}

0800095e <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800095e:	b590      	push	{r4, r7, lr}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	4604      	mov	r4, r0
 8000966:	4608      	mov	r0, r1
 8000968:	4611      	mov	r1, r2
 800096a:	461a      	mov	r2, r3
 800096c:	4623      	mov	r3, r4
 800096e:	80fb      	strh	r3, [r7, #6]
 8000970:	4603      	mov	r3, r0
 8000972:	80bb      	strh	r3, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	807b      	strh	r3, [r7, #2]
 8000978:	4613      	mov	r3, r2
 800097a:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 800097c:	2300      	movs	r3, #0
 800097e:	81fb      	strh	r3, [r7, #14]
 8000980:	e00b      	b.n	800099a <LCD_Draw_Horizontal_Line+0x3c>
  {
      LCD_Draw_Pixel(i+x, y, color);
 8000982:	89fa      	ldrh	r2, [r7, #14]
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	4413      	add	r3, r2
 8000988:	b29b      	uxth	r3, r3
 800098a:	883a      	ldrh	r2, [r7, #0]
 800098c:	88b9      	ldrh	r1, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ffa0 	bl	80008d4 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000994:	89fb      	ldrh	r3, [r7, #14]
 8000996:	3301      	adds	r3, #1
 8000998:	81fb      	strh	r3, [r7, #14]
 800099a:	89fa      	ldrh	r2, [r7, #14]
 800099c:	887b      	ldrh	r3, [r7, #2]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d3ef      	bcc.n	8000982 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 80009a2:	bf00      	nop
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd90      	pop	{r4, r7, pc}

080009ac <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	460a      	mov	r2, r1
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	4613      	mov	r3, r2
 80009ba:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10e      	bne.n	80009e0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e007      	b.n	80009d8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80009c8:	4908      	ldr	r1, [pc, #32]	@ (80009ec <LCD_Clear+0x40>)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	88ba      	ldrh	r2, [r7, #4]
 80009ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	3301      	adds	r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80009de:	d3f3      	bcc.n	80009c8 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	20000178 	.word	0x20000178

080009f0 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80009fa:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <LCD_SetTextColor+0x1c>)
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	8013      	strh	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	20000000 	.word	0x20000000

08000a10 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000a18:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <LCD_SetFont+0x1c>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000174 	.word	0x20000174

08000a30 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	603a      	str	r2, [r7, #0]
 8000a3a:	80fb      	strh	r3, [r7, #6]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	e04c      	b.n	8000ae8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	e03f      	b.n	8000ad4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <LCD_Draw_Char+0xd0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	889b      	ldrh	r3, [r3, #4]
 8000a66:	4a27      	ldr	r2, [pc, #156]	@ (8000b04 <LCD_Draw_Char+0xd4>)
 8000a68:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6c:	08db      	lsrs	r3, r3, #3
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	2280      	movs	r2, #128	@ 0x80
 8000a74:	409a      	lsls	r2, r3
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	fa42 f303 	asr.w	r3, r2, r3
 8000a7c:	400b      	ands	r3, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d104      	bne.n	8000a8c <LCD_Draw_Char+0x5c>
 8000a82:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <LCD_Draw_Char+0xd0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	889b      	ldrh	r3, [r3, #4]
 8000a88:	2b0c      	cmp	r3, #12
 8000a8a:	d920      	bls.n	8000ace <LCD_Draw_Char+0x9e>
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	fa42 f303 	asr.w	r3, r2, r3
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d104      	bne.n	8000ab0 <LCD_Draw_Char+0x80>
 8000aa6:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <LCD_Draw_Char+0xd0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	889b      	ldrh	r3, [r3, #4]
 8000aac:	2b0c      	cmp	r3, #12
 8000aae:	d80e      	bhi.n	8000ace <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b298      	uxth	r0, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	88bb      	ldrh	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	4a10      	ldr	r2, [pc, #64]	@ (8000b08 <LCD_Draw_Char+0xd8>)
 8000ac6:	8812      	ldrh	r2, [r2, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f7ff ff03 	bl	80008d4 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <LCD_Draw_Char+0xd0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	889b      	ldrh	r3, [r3, #4]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d3b8      	bcc.n	8000a54 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <LCD_Draw_Char+0xd0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	88db      	ldrh	r3, [r3, #6]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d3ab      	bcc.n	8000a4e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000af6:	bf00      	nop
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000174 	.word	0x20000174
 8000b04:	aaaaaaab 	.word	0xaaaaaaab
 8000b08:	20000000 	.word	0x20000000

08000b0c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	80fb      	strh	r3, [r7, #6]
 8000b16:	460b      	mov	r3, r1
 8000b18:	80bb      	strh	r3, [r7, #4]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000b1e:	78fb      	ldrb	r3, [r7, #3]
 8000b20:	3b20      	subs	r3, #32
 8000b22:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <LCD_DisplayChar+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	78fb      	ldrb	r3, [r7, #3]
 8000b2c:	4907      	ldr	r1, [pc, #28]	@ (8000b4c <LCD_DisplayChar+0x40>)
 8000b2e:	6809      	ldr	r1, [r1, #0]
 8000b30:	88c9      	ldrh	r1, [r1, #6]
 8000b32:	fb01 f303 	mul.w	r3, r1, r3
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	441a      	add	r2, r3
 8000b3a:	88b9      	ldrh	r1, [r7, #4]
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff76 	bl	8000a30 <LCD_Draw_Char>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000174 	.word	0x20000174

08000b50 <screen1>:
	LCD_DisplayChar(125,160,'r');
	LCD_DisplayChar(130,160,'l');
	LCD_DisplayChar(140,160,'d');
}

void screen1(void){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLACK);
 8000b54:	2100      	movs	r1, #0
 8000b56:	2000      	movs	r0, #0
 8000b58:	f7ff ff28 	bl	80009ac <LCD_Clear>
	// Initial game screen, select game mode
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000b5c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000b60:	f7ff ff46 	bl	80009f0 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000b64:	4891      	ldr	r0, [pc, #580]	@ (8000dac <screen1+0x25c>)
 8000b66:	f7ff ff53 	bl	8000a10 <LCD_SetFont>

	LCD_DisplayChar(30, 20, 'C');
 8000b6a:	2243      	movs	r2, #67	@ 0x43
 8000b6c:	2114      	movs	r1, #20
 8000b6e:	201e      	movs	r0, #30
 8000b70:	f7ff ffcc 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(50, 20, 'O');
 8000b74:	224f      	movs	r2, #79	@ 0x4f
 8000b76:	2114      	movs	r1, #20
 8000b78:	2032      	movs	r0, #50	@ 0x32
 8000b7a:	f7ff ffc7 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(70, 20, 'N');
 8000b7e:	224e      	movs	r2, #78	@ 0x4e
 8000b80:	2114      	movs	r1, #20
 8000b82:	2046      	movs	r0, #70	@ 0x46
 8000b84:	f7ff ffc2 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(90, 20, 'N');
 8000b88:	224e      	movs	r2, #78	@ 0x4e
 8000b8a:	2114      	movs	r1, #20
 8000b8c:	205a      	movs	r0, #90	@ 0x5a
 8000b8e:	f7ff ffbd 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(110, 20, 'E');
 8000b92:	2245      	movs	r2, #69	@ 0x45
 8000b94:	2114      	movs	r1, #20
 8000b96:	206e      	movs	r0, #110	@ 0x6e
 8000b98:	f7ff ffb8 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(130, 20, 'C');
 8000b9c:	2243      	movs	r2, #67	@ 0x43
 8000b9e:	2114      	movs	r1, #20
 8000ba0:	2082      	movs	r0, #130	@ 0x82
 8000ba2:	f7ff ffb3 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(150, 20, 'T');
 8000ba6:	2254      	movs	r2, #84	@ 0x54
 8000ba8:	2114      	movs	r1, #20
 8000baa:	2096      	movs	r0, #150	@ 0x96
 8000bac:	f7ff ffae 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(170, 20, ' ');
 8000bb0:	2220      	movs	r2, #32
 8000bb2:	2114      	movs	r1, #20
 8000bb4:	20aa      	movs	r0, #170	@ 0xaa
 8000bb6:	f7ff ffa9 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(190, 20, '4');
 8000bba:	2234      	movs	r2, #52	@ 0x34
 8000bbc:	2114      	movs	r1, #20
 8000bbe:	20be      	movs	r0, #190	@ 0xbe
 8000bc0:	f7ff ffa4 	bl	8000b0c <LCD_DisplayChar>

	LCD_DisplayChar(20,80,'S');
 8000bc4:	2253      	movs	r2, #83	@ 0x53
 8000bc6:	2150      	movs	r1, #80	@ 0x50
 8000bc8:	2014      	movs	r0, #20
 8000bca:	f7ff ff9f 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(35,80,'e');
 8000bce:	2265      	movs	r2, #101	@ 0x65
 8000bd0:	2150      	movs	r1, #80	@ 0x50
 8000bd2:	2023      	movs	r0, #35	@ 0x23
 8000bd4:	f7ff ff9a 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(45,80,'l');
 8000bd8:	226c      	movs	r2, #108	@ 0x6c
 8000bda:	2150      	movs	r1, #80	@ 0x50
 8000bdc:	202d      	movs	r0, #45	@ 0x2d
 8000bde:	f7ff ff95 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(55,80,'e');
 8000be2:	2265      	movs	r2, #101	@ 0x65
 8000be4:	2150      	movs	r1, #80	@ 0x50
 8000be6:	2037      	movs	r0, #55	@ 0x37
 8000be8:	f7ff ff90 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(70,80,'c');
 8000bec:	2263      	movs	r2, #99	@ 0x63
 8000bee:	2150      	movs	r1, #80	@ 0x50
 8000bf0:	2046      	movs	r0, #70	@ 0x46
 8000bf2:	f7ff ff8b 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(80,80,'t');
 8000bf6:	2274      	movs	r2, #116	@ 0x74
 8000bf8:	2150      	movs	r1, #80	@ 0x50
 8000bfa:	2050      	movs	r0, #80	@ 0x50
 8000bfc:	f7ff ff86 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(100,80,'G');
 8000c00:	2247      	movs	r2, #71	@ 0x47
 8000c02:	2150      	movs	r1, #80	@ 0x50
 8000c04:	2064      	movs	r0, #100	@ 0x64
 8000c06:	f7ff ff81 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(118,80,'a');
 8000c0a:	2261      	movs	r2, #97	@ 0x61
 8000c0c:	2150      	movs	r1, #80	@ 0x50
 8000c0e:	2076      	movs	r0, #118	@ 0x76
 8000c10:	f7ff ff7c 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(135,80,'m');
 8000c14:	226d      	movs	r2, #109	@ 0x6d
 8000c16:	2150      	movs	r1, #80	@ 0x50
 8000c18:	2087      	movs	r0, #135	@ 0x87
 8000c1a:	f7ff ff77 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(150,80,'e');
 8000c1e:	2265      	movs	r2, #101	@ 0x65
 8000c20:	2150      	movs	r1, #80	@ 0x50
 8000c22:	2096      	movs	r0, #150	@ 0x96
 8000c24:	f7ff ff72 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(165,80,'m');
 8000c28:	226d      	movs	r2, #109	@ 0x6d
 8000c2a:	2150      	movs	r1, #80	@ 0x50
 8000c2c:	20a5      	movs	r0, #165	@ 0xa5
 8000c2e:	f7ff ff6d 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(180,80,'o');
 8000c32:	226f      	movs	r2, #111	@ 0x6f
 8000c34:	2150      	movs	r1, #80	@ 0x50
 8000c36:	20b4      	movs	r0, #180	@ 0xb4
 8000c38:	f7ff ff68 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(192,80,'d');
 8000c3c:	2264      	movs	r2, #100	@ 0x64
 8000c3e:	2150      	movs	r1, #80	@ 0x50
 8000c40:	20c0      	movs	r0, #192	@ 0xc0
 8000c42:	f7ff ff63 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(205,80,'e');
 8000c46:	2265      	movs	r2, #101	@ 0x65
 8000c48:	2150      	movs	r1, #80	@ 0x50
 8000c4a:	20cd      	movs	r0, #205	@ 0xcd
 8000c4c:	f7ff ff5e 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(215,80,':');
 8000c50:	223a      	movs	r2, #58	@ 0x3a
 8000c52:	2150      	movs	r1, #80	@ 0x50
 8000c54:	20d7      	movs	r0, #215	@ 0xd7
 8000c56:	f7ff ff59 	bl	8000b0c <LCD_DisplayChar>
	// button 1
	LCD_DisplayChar(50,150,'1');
 8000c5a:	2231      	movs	r2, #49	@ 0x31
 8000c5c:	2196      	movs	r1, #150	@ 0x96
 8000c5e:	2032      	movs	r0, #50	@ 0x32
 8000c60:	f7ff ff54 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(70,150,'P');
 8000c64:	2250      	movs	r2, #80	@ 0x50
 8000c66:	2196      	movs	r1, #150	@ 0x96
 8000c68:	2046      	movs	r0, #70	@ 0x46
 8000c6a:	f7ff ff4f 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(80,150,'l');
 8000c6e:	226c      	movs	r2, #108	@ 0x6c
 8000c70:	2196      	movs	r1, #150	@ 0x96
 8000c72:	2050      	movs	r0, #80	@ 0x50
 8000c74:	f7ff ff4a 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(90,150,'a');
 8000c78:	2261      	movs	r2, #97	@ 0x61
 8000c7a:	2196      	movs	r1, #150	@ 0x96
 8000c7c:	205a      	movs	r0, #90	@ 0x5a
 8000c7e:	f7ff ff45 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(100,150,'y');
 8000c82:	2279      	movs	r2, #121	@ 0x79
 8000c84:	2196      	movs	r1, #150	@ 0x96
 8000c86:	2064      	movs	r0, #100	@ 0x64
 8000c88:	f7ff ff40 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(110,150,'e');
 8000c8c:	2265      	movs	r2, #101	@ 0x65
 8000c8e:	2196      	movs	r1, #150	@ 0x96
 8000c90:	206e      	movs	r0, #110	@ 0x6e
 8000c92:	f7ff ff3b 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(120,150,'r');
 8000c96:	2272      	movs	r2, #114	@ 0x72
 8000c98:	2196      	movs	r1, #150	@ 0x96
 8000c9a:	2078      	movs	r0, #120	@ 0x78
 8000c9c:	f7ff ff36 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(140,150,'M');
 8000ca0:	224d      	movs	r2, #77	@ 0x4d
 8000ca2:	2196      	movs	r1, #150	@ 0x96
 8000ca4:	208c      	movs	r0, #140	@ 0x8c
 8000ca6:	f7ff ff31 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(155,150,'o');
 8000caa:	226f      	movs	r2, #111	@ 0x6f
 8000cac:	2196      	movs	r1, #150	@ 0x96
 8000cae:	209b      	movs	r0, #155	@ 0x9b
 8000cb0:	f7ff ff2c 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(167,150,'d');
 8000cb4:	2264      	movs	r2, #100	@ 0x64
 8000cb6:	2196      	movs	r1, #150	@ 0x96
 8000cb8:	20a7      	movs	r0, #167	@ 0xa7
 8000cba:	f7ff ff27 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(180,150,'e');
 8000cbe:	2265      	movs	r2, #101	@ 0x65
 8000cc0:	2196      	movs	r1, #150	@ 0x96
 8000cc2:	20b4      	movs	r0, #180	@ 0xb4
 8000cc4:	f7ff ff22 	bl	8000b0c <LCD_DisplayChar>
	LCD_Draw_Vertical_Line(45,145,35,LCD_COLOR_WHITE);
 8000cc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ccc:	2223      	movs	r2, #35	@ 0x23
 8000cce:	2191      	movs	r1, #145	@ 0x91
 8000cd0:	202d      	movs	r0, #45	@ 0x2d
 8000cd2:	f7ff fe1d 	bl	8000910 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(195,145,35,LCD_COLOR_WHITE);
 8000cd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cda:	2223      	movs	r2, #35	@ 0x23
 8000cdc:	2191      	movs	r1, #145	@ 0x91
 8000cde:	20c3      	movs	r0, #195	@ 0xc3
 8000ce0:	f7ff fe16 	bl	8000910 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(45,145,150,LCD_COLOR_WHITE);
 8000ce4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ce8:	2296      	movs	r2, #150	@ 0x96
 8000cea:	2191      	movs	r1, #145	@ 0x91
 8000cec:	202d      	movs	r0, #45	@ 0x2d
 8000cee:	f7ff fe36 	bl	800095e <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(45,180,150,LCD_COLOR_WHITE);
 8000cf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cf6:	2296      	movs	r2, #150	@ 0x96
 8000cf8:	21b4      	movs	r1, #180	@ 0xb4
 8000cfa:	202d      	movs	r0, #45	@ 0x2d
 8000cfc:	f7ff fe2f 	bl	800095e <LCD_Draw_Horizontal_Line>

	// button 2
	LCD_DisplayChar(50,220,'2');
 8000d00:	2232      	movs	r2, #50	@ 0x32
 8000d02:	21dc      	movs	r1, #220	@ 0xdc
 8000d04:	2032      	movs	r0, #50	@ 0x32
 8000d06:	f7ff ff01 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(70,220,'P');
 8000d0a:	2250      	movs	r2, #80	@ 0x50
 8000d0c:	21dc      	movs	r1, #220	@ 0xdc
 8000d0e:	2046      	movs	r0, #70	@ 0x46
 8000d10:	f7ff fefc 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(80,220,'l');
 8000d14:	226c      	movs	r2, #108	@ 0x6c
 8000d16:	21dc      	movs	r1, #220	@ 0xdc
 8000d18:	2050      	movs	r0, #80	@ 0x50
 8000d1a:	f7ff fef7 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(90,220,'a');
 8000d1e:	2261      	movs	r2, #97	@ 0x61
 8000d20:	21dc      	movs	r1, #220	@ 0xdc
 8000d22:	205a      	movs	r0, #90	@ 0x5a
 8000d24:	f7ff fef2 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(100,220,'y');
 8000d28:	2279      	movs	r2, #121	@ 0x79
 8000d2a:	21dc      	movs	r1, #220	@ 0xdc
 8000d2c:	2064      	movs	r0, #100	@ 0x64
 8000d2e:	f7ff feed 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(110,220,'e');
 8000d32:	2265      	movs	r2, #101	@ 0x65
 8000d34:	21dc      	movs	r1, #220	@ 0xdc
 8000d36:	206e      	movs	r0, #110	@ 0x6e
 8000d38:	f7ff fee8 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(120,220,'r');
 8000d3c:	2272      	movs	r2, #114	@ 0x72
 8000d3e:	21dc      	movs	r1, #220	@ 0xdc
 8000d40:	2078      	movs	r0, #120	@ 0x78
 8000d42:	f7ff fee3 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(140,220,'M');
 8000d46:	224d      	movs	r2, #77	@ 0x4d
 8000d48:	21dc      	movs	r1, #220	@ 0xdc
 8000d4a:	208c      	movs	r0, #140	@ 0x8c
 8000d4c:	f7ff fede 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(155,220,'o');
 8000d50:	226f      	movs	r2, #111	@ 0x6f
 8000d52:	21dc      	movs	r1, #220	@ 0xdc
 8000d54:	209b      	movs	r0, #155	@ 0x9b
 8000d56:	f7ff fed9 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(167,220,'d');
 8000d5a:	2264      	movs	r2, #100	@ 0x64
 8000d5c:	21dc      	movs	r1, #220	@ 0xdc
 8000d5e:	20a7      	movs	r0, #167	@ 0xa7
 8000d60:	f7ff fed4 	bl	8000b0c <LCD_DisplayChar>
	LCD_DisplayChar(180,220,'e');
 8000d64:	2265      	movs	r2, #101	@ 0x65
 8000d66:	21dc      	movs	r1, #220	@ 0xdc
 8000d68:	20b4      	movs	r0, #180	@ 0xb4
 8000d6a:	f7ff fecf 	bl	8000b0c <LCD_DisplayChar>
	LCD_Draw_Vertical_Line(45,215,35,LCD_COLOR_WHITE);
 8000d6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d72:	2223      	movs	r2, #35	@ 0x23
 8000d74:	21d7      	movs	r1, #215	@ 0xd7
 8000d76:	202d      	movs	r0, #45	@ 0x2d
 8000d78:	f7ff fdca 	bl	8000910 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(195,215,35,LCD_COLOR_WHITE);
 8000d7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d80:	2223      	movs	r2, #35	@ 0x23
 8000d82:	21d7      	movs	r1, #215	@ 0xd7
 8000d84:	20c3      	movs	r0, #195	@ 0xc3
 8000d86:	f7ff fdc3 	bl	8000910 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(45,215,150,LCD_COLOR_WHITE);
 8000d8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d8e:	2296      	movs	r2, #150	@ 0x96
 8000d90:	21d7      	movs	r1, #215	@ 0xd7
 8000d92:	202d      	movs	r0, #45	@ 0x2d
 8000d94:	f7ff fde3 	bl	800095e <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(45,250,150,LCD_COLOR_WHITE);
 8000d98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d9c:	2296      	movs	r2, #150	@ 0x96
 8000d9e:	21fa      	movs	r1, #250	@ 0xfa
 8000da0:	202d      	movs	r0, #45	@ 0x2d
 8000da2:	f7ff fddc 	bl	800095e <LCD_Draw_Horizontal_Line>

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000004 	.word	0x20000004

08000db0 <screen2>:

void screen2(void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLUE);
 8000db4:	211f      	movs	r1, #31
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff fdf8 	bl	80009ac <LCD_Clear>
	// Gameplay
	// Draw vertical lines in connect four grid screen is 320 x 240
	LCD_Draw_Vertical_Line(1,50,204, LCD_COLOR_WHITE);
 8000dbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dc0:	22cc      	movs	r2, #204	@ 0xcc
 8000dc2:	2132      	movs	r1, #50	@ 0x32
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff fda3 	bl	8000910 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(35,50,204, LCD_COLOR_WHITE);
 8000dca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dce:	22cc      	movs	r2, #204	@ 0xcc
 8000dd0:	2132      	movs	r1, #50	@ 0x32
 8000dd2:	2023      	movs	r0, #35	@ 0x23
 8000dd4:	f7ff fd9c 	bl	8000910 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(69,50,204, LCD_COLOR_WHITE);
 8000dd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ddc:	22cc      	movs	r2, #204	@ 0xcc
 8000dde:	2132      	movs	r1, #50	@ 0x32
 8000de0:	2045      	movs	r0, #69	@ 0x45
 8000de2:	f7ff fd95 	bl	8000910 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(103,50,204, LCD_COLOR_WHITE);
 8000de6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dea:	22cc      	movs	r2, #204	@ 0xcc
 8000dec:	2132      	movs	r1, #50	@ 0x32
 8000dee:	2067      	movs	r0, #103	@ 0x67
 8000df0:	f7ff fd8e 	bl	8000910 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(137,50,204, LCD_COLOR_WHITE);
 8000df4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000df8:	22cc      	movs	r2, #204	@ 0xcc
 8000dfa:	2132      	movs	r1, #50	@ 0x32
 8000dfc:	2089      	movs	r0, #137	@ 0x89
 8000dfe:	f7ff fd87 	bl	8000910 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(171,50,204, LCD_COLOR_WHITE);
 8000e02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e06:	22cc      	movs	r2, #204	@ 0xcc
 8000e08:	2132      	movs	r1, #50	@ 0x32
 8000e0a:	20ab      	movs	r0, #171	@ 0xab
 8000e0c:	f7ff fd80 	bl	8000910 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(205,50,204, LCD_COLOR_WHITE);
 8000e10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e14:	22cc      	movs	r2, #204	@ 0xcc
 8000e16:	2132      	movs	r1, #50	@ 0x32
 8000e18:	20cd      	movs	r0, #205	@ 0xcd
 8000e1a:	f7ff fd79 	bl	8000910 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(239,50,204, LCD_COLOR_WHITE);
 8000e1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e22:	22cc      	movs	r2, #204	@ 0xcc
 8000e24:	2132      	movs	r1, #50	@ 0x32
 8000e26:	20ef      	movs	r0, #239	@ 0xef
 8000e28:	f7ff fd72 	bl	8000910 <LCD_Draw_Vertical_Line>
	// draw horizontal lines in connected four grid
	LCD_Draw_Horizontal_Line(0,50,240,LCD_COLOR_WHITE);
 8000e2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e30:	22f0      	movs	r2, #240	@ 0xf0
 8000e32:	2132      	movs	r1, #50	@ 0x32
 8000e34:	2000      	movs	r0, #0
 8000e36:	f7ff fd92 	bl	800095e <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,84,240,LCD_COLOR_WHITE);
 8000e3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e3e:	22f0      	movs	r2, #240	@ 0xf0
 8000e40:	2154      	movs	r1, #84	@ 0x54
 8000e42:	2000      	movs	r0, #0
 8000e44:	f7ff fd8b 	bl	800095e <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,118,240,LCD_COLOR_WHITE);
 8000e48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e4c:	22f0      	movs	r2, #240	@ 0xf0
 8000e4e:	2176      	movs	r1, #118	@ 0x76
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fd84 	bl	800095e <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,152,240,LCD_COLOR_WHITE);
 8000e56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e5a:	22f0      	movs	r2, #240	@ 0xf0
 8000e5c:	2198      	movs	r1, #152	@ 0x98
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff fd7d 	bl	800095e <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,186,240,LCD_COLOR_WHITE);
 8000e64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e68:	22f0      	movs	r2, #240	@ 0xf0
 8000e6a:	21ba      	movs	r1, #186	@ 0xba
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fd76 	bl	800095e <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,220,240,LCD_COLOR_WHITE);
 8000e72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e76:	22f0      	movs	r2, #240	@ 0xf0
 8000e78:	21dc      	movs	r1, #220	@ 0xdc
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff fd6f 	bl	800095e <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,254,240,LCD_COLOR_WHITE);
 8000e80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e84:	22f0      	movs	r2, #240	@ 0xf0
 8000e86:	21fe      	movs	r1, #254	@ 0xfe
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff fd68 	bl	800095e <LCD_Draw_Horizontal_Line>


}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e96:	b672      	cpsid	i
}
 8000e98:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9a:	bf00      	nop
 8000e9c:	e7fd      	b.n	8000e9a <LCD_Error_Handler+0x8>

08000e9e <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000ea2:	f001 f938 	bl	8002116 <STMPE811_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d001      	beq.n	8000eb0 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <InitializeLCDTouch+0xe>
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f001 f9e2 	bl	8002286 <STMPE811_ReadTouch>
 8000ec2:	4603      	mov	r3, r0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000ed0:	f000 f9fe 	bl	80012d0 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000ed4:	20ca      	movs	r0, #202	@ 0xca
 8000ed6:	f000 f943 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000eda:	20c3      	movs	r0, #195	@ 0xc3
 8000edc:	f000 f94d 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000ee0:	2008      	movs	r0, #8
 8000ee2:	f000 f94a 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000ee6:	2050      	movs	r0, #80	@ 0x50
 8000ee8:	f000 f947 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000eec:	20cf      	movs	r0, #207	@ 0xcf
 8000eee:	f000 f937 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f941 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000ef8:	20c1      	movs	r0, #193	@ 0xc1
 8000efa:	f000 f93e 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000efe:	2030      	movs	r0, #48	@ 0x30
 8000f00:	f000 f93b 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000f04:	20ed      	movs	r0, #237	@ 0xed
 8000f06:	f000 f92b 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000f0a:	2064      	movs	r0, #100	@ 0x64
 8000f0c:	f000 f935 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 f932 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000f16:	2012      	movs	r0, #18
 8000f18:	f000 f92f 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000f1c:	2081      	movs	r0, #129	@ 0x81
 8000f1e:	f000 f92c 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000f22:	20e8      	movs	r0, #232	@ 0xe8
 8000f24:	f000 f91c 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000f28:	2085      	movs	r0, #133	@ 0x85
 8000f2a:	f000 f926 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f923 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000f34:	2078      	movs	r0, #120	@ 0x78
 8000f36:	f000 f920 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000f3a:	20cb      	movs	r0, #203	@ 0xcb
 8000f3c:	f000 f910 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000f40:	2039      	movs	r0, #57	@ 0x39
 8000f42:	f000 f91a 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000f46:	202c      	movs	r0, #44	@ 0x2c
 8000f48:	f000 f917 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f000 f914 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000f52:	2034      	movs	r0, #52	@ 0x34
 8000f54:	f000 f911 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f000 f90e 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000f5e:	20f7      	movs	r0, #247	@ 0xf7
 8000f60:	f000 f8fe 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000f64:	2020      	movs	r0, #32
 8000f66:	f000 f908 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000f6a:	20ea      	movs	r0, #234	@ 0xea
 8000f6c:	f000 f8f8 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f000 f902 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f8ff 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000f7c:	20b1      	movs	r0, #177	@ 0xb1
 8000f7e:	f000 f8ef 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f8f9 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000f88:	201b      	movs	r0, #27
 8000f8a:	f000 f8f6 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000f8e:	20b6      	movs	r0, #182	@ 0xb6
 8000f90:	f000 f8e6 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000f94:	200a      	movs	r0, #10
 8000f96:	f000 f8f0 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000f9a:	20a2      	movs	r0, #162	@ 0xa2
 8000f9c:	f000 f8ed 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000fa0:	20c0      	movs	r0, #192	@ 0xc0
 8000fa2:	f000 f8dd 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000fa6:	2010      	movs	r0, #16
 8000fa8:	f000 f8e7 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000fac:	20c1      	movs	r0, #193	@ 0xc1
 8000fae:	f000 f8d7 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000fb2:	2010      	movs	r0, #16
 8000fb4:	f000 f8e1 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000fb8:	20c5      	movs	r0, #197	@ 0xc5
 8000fba:	f000 f8d1 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000fbe:	2045      	movs	r0, #69	@ 0x45
 8000fc0:	f000 f8db 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000fc4:	2015      	movs	r0, #21
 8000fc6:	f000 f8d8 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000fca:	20c7      	movs	r0, #199	@ 0xc7
 8000fcc:	f000 f8c8 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000fd0:	2090      	movs	r0, #144	@ 0x90
 8000fd2:	f000 f8d2 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000fd6:	2036      	movs	r0, #54	@ 0x36
 8000fd8:	f000 f8c2 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000fdc:	20c8      	movs	r0, #200	@ 0xc8
 8000fde:	f000 f8cc 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000fe2:	20f2      	movs	r0, #242	@ 0xf2
 8000fe4:	f000 f8bc 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f000 f8c6 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000fee:	20b0      	movs	r0, #176	@ 0xb0
 8000ff0:	f000 f8b6 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000ff4:	20c2      	movs	r0, #194	@ 0xc2
 8000ff6:	f000 f8c0 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000ffa:	20b6      	movs	r0, #182	@ 0xb6
 8000ffc:	f000 f8b0 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001000:	200a      	movs	r0, #10
 8001002:	f000 f8ba 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001006:	20a7      	movs	r0, #167	@ 0xa7
 8001008:	f000 f8b7 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 800100c:	2027      	movs	r0, #39	@ 0x27
 800100e:	f000 f8b4 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001012:	2004      	movs	r0, #4
 8001014:	f000 f8b1 	bl	800117a <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001018:	202a      	movs	r0, #42	@ 0x2a
 800101a:	f000 f8a1 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f8ab 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001024:	2000      	movs	r0, #0
 8001026:	f000 f8a8 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800102a:	2000      	movs	r0, #0
 800102c:	f000 f8a5 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001030:	20ef      	movs	r0, #239	@ 0xef
 8001032:	f000 f8a2 	bl	800117a <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001036:	202b      	movs	r0, #43	@ 0x2b
 8001038:	f000 f892 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800103c:	2000      	movs	r0, #0
 800103e:	f000 f89c 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f899 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001048:	2001      	movs	r0, #1
 800104a:	f000 f896 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800104e:	203f      	movs	r0, #63	@ 0x3f
 8001050:	f000 f893 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001054:	20f6      	movs	r0, #246	@ 0xf6
 8001056:	f000 f883 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800105a:	2001      	movs	r0, #1
 800105c:	f000 f88d 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001060:	2000      	movs	r0, #0
 8001062:	f000 f88a 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001066:	2006      	movs	r0, #6
 8001068:	f000 f887 	bl	800117a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 800106c:	202c      	movs	r0, #44	@ 0x2c
 800106e:	f000 f877 	bl	8001160 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001072:	20c8      	movs	r0, #200	@ 0xc8
 8001074:	f000 f9e8 	bl	8001448 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001078:	2026      	movs	r0, #38	@ 0x26
 800107a:	f000 f871 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800107e:	2001      	movs	r0, #1
 8001080:	f000 f87b 	bl	800117a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001084:	20e0      	movs	r0, #224	@ 0xe0
 8001086:	f000 f86b 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800108a:	200f      	movs	r0, #15
 800108c:	f000 f875 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001090:	2029      	movs	r0, #41	@ 0x29
 8001092:	f000 f872 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001096:	2024      	movs	r0, #36	@ 0x24
 8001098:	f000 f86f 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800109c:	200c      	movs	r0, #12
 800109e:	f000 f86c 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80010a2:	200e      	movs	r0, #14
 80010a4:	f000 f869 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80010a8:	2009      	movs	r0, #9
 80010aa:	f000 f866 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80010ae:	204e      	movs	r0, #78	@ 0x4e
 80010b0:	f000 f863 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80010b4:	2078      	movs	r0, #120	@ 0x78
 80010b6:	f000 f860 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80010ba:	203c      	movs	r0, #60	@ 0x3c
 80010bc:	f000 f85d 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80010c0:	2009      	movs	r0, #9
 80010c2:	f000 f85a 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80010c6:	2013      	movs	r0, #19
 80010c8:	f000 f857 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80010cc:	2005      	movs	r0, #5
 80010ce:	f000 f854 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80010d2:	2017      	movs	r0, #23
 80010d4:	f000 f851 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80010d8:	2011      	movs	r0, #17
 80010da:	f000 f84e 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f84b 	bl	800117a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80010e4:	20e1      	movs	r0, #225	@ 0xe1
 80010e6:	f000 f83b 	bl	8001160 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f845 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80010f0:	2016      	movs	r0, #22
 80010f2:	f000 f842 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80010f6:	201b      	movs	r0, #27
 80010f8:	f000 f83f 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80010fc:	2004      	movs	r0, #4
 80010fe:	f000 f83c 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001102:	2011      	movs	r0, #17
 8001104:	f000 f839 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001108:	2007      	movs	r0, #7
 800110a:	f000 f836 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800110e:	2031      	movs	r0, #49	@ 0x31
 8001110:	f000 f833 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001114:	2033      	movs	r0, #51	@ 0x33
 8001116:	f000 f830 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800111a:	2042      	movs	r0, #66	@ 0x42
 800111c:	f000 f82d 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001120:	2005      	movs	r0, #5
 8001122:	f000 f82a 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001126:	200c      	movs	r0, #12
 8001128:	f000 f827 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 800112c:	200a      	movs	r0, #10
 800112e:	f000 f824 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001132:	2028      	movs	r0, #40	@ 0x28
 8001134:	f000 f821 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001138:	202f      	movs	r0, #47	@ 0x2f
 800113a:	f000 f81e 	bl	800117a <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800113e:	200f      	movs	r0, #15
 8001140:	f000 f81b 	bl	800117a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001144:	2011      	movs	r0, #17
 8001146:	f000 f80b 	bl	8001160 <ili9341_Write_Reg>
  LCD_Delay(200);
 800114a:	20c8      	movs	r0, #200	@ 0xc8
 800114c:	f000 f97c 	bl	8001448 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001150:	2029      	movs	r0, #41	@ 0x29
 8001152:	f000 f805 	bl	8001160 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001156:	202c      	movs	r0, #44	@ 0x2c
 8001158:	f000 f802 	bl	8001160 <ili9341_Write_Reg>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f949 	bl	8001404 <LCD_IO_WriteReg>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f91a 	bl	80013c0 <LCD_IO_WriteData>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001198:	4819      	ldr	r0, [pc, #100]	@ (8001200 <SPI_Init+0x6c>)
 800119a:	f004 fbe2 	bl	8005962 <HAL_SPI_GetState>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d12b      	bne.n	80011fc <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80011a4:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <SPI_Init+0x6c>)
 80011a6:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <SPI_Init+0x70>)
 80011a8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <SPI_Init+0x6c>)
 80011ac:	2218      	movs	r2, #24
 80011ae:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80011b0:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <SPI_Init+0x6c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80011b6:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <SPI_Init+0x6c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80011bc:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <SPI_Init+0x6c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <SPI_Init+0x6c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80011c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001200 <SPI_Init+0x6c>)
 80011ca:	2207      	movs	r2, #7
 80011cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <SPI_Init+0x6c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <SPI_Init+0x6c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80011da:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <SPI_Init+0x6c>)
 80011dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80011e2:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <SPI_Init+0x6c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <SPI_Init+0x6c>)
 80011ea:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011ee:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80011f0:	4803      	ldr	r0, [pc, #12]	@ (8001200 <SPI_Init+0x6c>)
 80011f2:	f000 f833 	bl	800125c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80011f6:	4802      	ldr	r0, [pc, #8]	@ (8001200 <SPI_Init+0x6c>)
 80011f8:	f004 f9be 	bl	8005578 <HAL_SPI_Init>
  }
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20025978 	.word	0x20025978
 8001204:	40015000 	.word	0x40015000

08001208 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <SPI_Write+0x34>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	1db9      	adds	r1, r7, #6
 800121c:	2201      	movs	r2, #1
 800121e:	4808      	ldr	r0, [pc, #32]	@ (8001240 <SPI_Write+0x38>)
 8001220:	f004 fa5b 	bl	80056da <HAL_SPI_Transmit>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800122e:	f000 f809 	bl	8001244 <SPI_Error>
  }
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000000c 	.word	0x2000000c
 8001240:	20025978 	.word	0x20025978

08001244 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001248:	4803      	ldr	r0, [pc, #12]	@ (8001258 <SPI_Error+0x14>)
 800124a:	f004 fa1e 	bl	800568a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800124e:	f7ff ffa1 	bl	8001194 <SPI_Init>
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20025978 	.word	0x20025978

0800125c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	@ 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <SPI_MspInit+0x6c>)
 800126a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126c:	4a16      	ldr	r2, [pc, #88]	@ (80012c8 <SPI_MspInit+0x6c>)
 800126e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001272:	6453      	str	r3, [r2, #68]	@ 0x44
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <SPI_MspInit+0x6c>)
 8001276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001278:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <SPI_MspInit+0x6c>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001288:	4a0f      	ldr	r2, [pc, #60]	@ (80012c8 <SPI_MspInit+0x6c>)
 800128a:	f043 0320 	orr.w	r3, r3, #32
 800128e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001290:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <SPI_MspInit+0x6c>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001294:	f003 0320 	and.w	r3, r3, #32
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 800129c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80012a6:	2302      	movs	r3, #2
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80012aa:	2301      	movs	r3, #1
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80012ae:	2305      	movs	r3, #5
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4804      	ldr	r0, [pc, #16]	@ (80012cc <SPI_MspInit+0x70>)
 80012ba:	f001 fcd7 	bl	8002c6c <HAL_GPIO_Init>
}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	@ 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40021400 	.word	0x40021400

080012d0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80012d6:	4b36      	ldr	r3, [pc, #216]	@ (80013b0 <LCD_IO_Init+0xe0>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d164      	bne.n	80013a8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80012de:	4b34      	ldr	r3, [pc, #208]	@ (80013b0 <LCD_IO_Init+0xe0>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	4b32      	ldr	r3, [pc, #200]	@ (80013b4 <LCD_IO_Init+0xe4>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ec:	4a31      	ldr	r2, [pc, #196]	@ (80013b4 <LCD_IO_Init+0xe4>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f4:	4b2f      	ldr	r3, [pc, #188]	@ (80013b4 <LCD_IO_Init+0xe4>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001304:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001306:	2301      	movs	r3, #1
 8001308:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800130e:	2302      	movs	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4619      	mov	r1, r3
 8001318:	4827      	ldr	r0, [pc, #156]	@ (80013b8 <LCD_IO_Init+0xe8>)
 800131a:	f001 fca7 	bl	8002c6c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b24      	ldr	r3, [pc, #144]	@ (80013b4 <LCD_IO_Init+0xe4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a23      	ldr	r2, [pc, #140]	@ (80013b4 <LCD_IO_Init+0xe4>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b21      	ldr	r3, [pc, #132]	@ (80013b4 <LCD_IO_Init+0xe4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800133a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800133e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001348:	2302      	movs	r3, #2
 800134a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	4619      	mov	r1, r3
 8001352:	4819      	ldr	r0, [pc, #100]	@ (80013b8 <LCD_IO_Init+0xe8>)
 8001354:	f001 fc8a 	bl	8002c6c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <LCD_IO_Init+0xe4>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001360:	4a14      	ldr	r2, [pc, #80]	@ (80013b4 <LCD_IO_Init+0xe4>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6313      	str	r3, [r2, #48]	@ 0x30
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <LCD_IO_Init+0xe4>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001374:	2304      	movs	r3, #4
 8001376:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001380:	2302      	movs	r3, #2
 8001382:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	4619      	mov	r1, r3
 800138a:	480c      	ldr	r0, [pc, #48]	@ (80013bc <LCD_IO_Init+0xec>)
 800138c:	f001 fc6e 	bl	8002c6c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001390:	2200      	movs	r2, #0
 8001392:	2104      	movs	r1, #4
 8001394:	4809      	ldr	r0, [pc, #36]	@ (80013bc <LCD_IO_Init+0xec>)
 8001396:	f001 ff21 	bl	80031dc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800139a:	2201      	movs	r2, #1
 800139c:	2104      	movs	r1, #4
 800139e:	4807      	ldr	r0, [pc, #28]	@ (80013bc <LCD_IO_Init+0xec>)
 80013a0:	f001 ff1c 	bl	80031dc <HAL_GPIO_WritePin>

    SPI_Init();
 80013a4:	f7ff fef6 	bl	8001194 <SPI_Init>
  }
}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200259d0 	.word	0x200259d0
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40020800 	.word	0x40020800

080013c0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013d0:	480a      	ldr	r0, [pc, #40]	@ (80013fc <LCD_IO_WriteData+0x3c>)
 80013d2:	f001 ff03 	bl	80031dc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80013d6:	2200      	movs	r2, #0
 80013d8:	2104      	movs	r1, #4
 80013da:	4809      	ldr	r0, [pc, #36]	@ (8001400 <LCD_IO_WriteData+0x40>)
 80013dc:	f001 fefe 	bl	80031dc <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff10 	bl	8001208 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80013e8:	2201      	movs	r2, #1
 80013ea:	2104      	movs	r1, #4
 80013ec:	4804      	ldr	r0, [pc, #16]	@ (8001400 <LCD_IO_WriteData+0x40>)
 80013ee:	f001 fef5 	bl	80031dc <HAL_GPIO_WritePin>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	40020800 	.word	0x40020800

08001404 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001414:	480a      	ldr	r0, [pc, #40]	@ (8001440 <LCD_IO_WriteReg+0x3c>)
 8001416:	f001 fee1 	bl	80031dc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800141a:	2200      	movs	r2, #0
 800141c:	2104      	movs	r1, #4
 800141e:	4809      	ldr	r0, [pc, #36]	@ (8001444 <LCD_IO_WriteReg+0x40>)
 8001420:	f001 fedc 	bl	80031dc <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	b29b      	uxth	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff feed 	bl	8001208 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800142e:	2201      	movs	r2, #1
 8001430:	2104      	movs	r1, #4
 8001432:	4804      	ldr	r0, [pc, #16]	@ (8001444 <LCD_IO_WriteReg+0x40>)
 8001434:	f001 fed2 	bl	80031dc <HAL_GPIO_WritePin>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40020c00 	.word	0x40020c00
 8001444:	40020800 	.word	0x40020800

08001448 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f001 fb01 	bl	8002a58 <HAL_Delay>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001462:	f001 fa87 	bl	8002974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001466:	f000 f81f 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146a:	f000 fa0f 	bl	800188c <MX_GPIO_Init>
  MX_LTDC_Init();
 800146e:	f000 f8c5 	bl	80015fc <MX_LTDC_Init>
  MX_RNG_Init();
 8001472:	f000 f975 	bl	8001760 <MX_RNG_Init>
  MX_TIM2_Init();
 8001476:	f000 f9bd 	bl	80017f4 <MX_TIM2_Init>
  MX_SPI5_Init();
 800147a:	f000 f985 	bl	8001788 <MX_SPI5_Init>
  MX_I2C3_Init();
 800147e:	f000 f87d 	bl	800157c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001482:	f7ff f87d 	bl	8000580 <ApplicationInit>
  //LCD_Visual_Demo();
  screen1();
 8001486:	f7ff fb63 	bl	8000b50 <screen1>
  HAL_Delay(5000);
 800148a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800148e:	f001 fae3 	bl	8002a58 <HAL_Delay>
  screen2();
 8001492:	f7ff fc8d 	bl	8000db0 <screen2>
  HAL_Delay(10000);
 8001496:	f242 7010 	movw	r0, #10000	@ 0x2710
 800149a:	f001 fadd 	bl	8002a58 <HAL_Delay>
  /* USER CODE END 2 */
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
  LCD_Touch_Polling_Demo(); // This function Will not return
 800149e:	f7ff f887 	bl	80005b0 <LCD_Touch_Polling_Demo>
#endif
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014a2:	bf00      	nop
 80014a4:	e7fd      	b.n	80014a2 <main+0x44>
	...

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b094      	sub	sp, #80	@ 0x50
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	2230      	movs	r2, #48	@ 0x30
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f005 f820 	bl	80064fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	4b28      	ldr	r3, [pc, #160]	@ (8001574 <SystemClock_Config+0xcc>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	4a27      	ldr	r2, [pc, #156]	@ (8001574 <SystemClock_Config+0xcc>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014da:	6413      	str	r3, [r2, #64]	@ 0x40
 80014dc:	4b25      	ldr	r3, [pc, #148]	@ (8001574 <SystemClock_Config+0xcc>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <SystemClock_Config+0xd0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a21      	ldr	r2, [pc, #132]	@ (8001578 <SystemClock_Config+0xd0>)
 80014f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <SystemClock_Config+0xd0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001504:	2301      	movs	r3, #1
 8001506:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001508:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150e:	2302      	movs	r3, #2
 8001510:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001512:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001518:	2308      	movs	r3, #8
 800151a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800151c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001520:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001522:	2302      	movs	r3, #2
 8001524:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001526:	2307      	movs	r3, #7
 8001528:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152a:	f107 0320 	add.w	r3, r7, #32
 800152e:	4618      	mov	r0, r3
 8001530:	f003 f9b4 	bl	800489c <HAL_RCC_OscConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800153a:	f000 fb55 	bl	8001be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153e:	230f      	movs	r3, #15
 8001540:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001542:	2302      	movs	r3, #2
 8001544:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800154a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800154e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001554:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2105      	movs	r1, #5
 800155c:	4618      	mov	r0, r3
 800155e:	f003 fc15 	bl	8004d8c <HAL_RCC_ClockConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001568:	f000 fb3e 	bl	8001be8 <Error_Handler>
  }
}
 800156c:	bf00      	nop
 800156e:	3750      	adds	r7, #80	@ 0x50
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000

0800157c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001580:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <MX_I2C3_Init+0x74>)
 8001582:	4a1c      	ldr	r2, [pc, #112]	@ (80015f4 <MX_I2C3_Init+0x78>)
 8001584:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001586:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <MX_I2C3_Init+0x74>)
 8001588:	4a1b      	ldr	r2, [pc, #108]	@ (80015f8 <MX_I2C3_Init+0x7c>)
 800158a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800158c:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <MX_I2C3_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001592:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <MX_I2C3_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001598:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <MX_I2C3_Init+0x74>)
 800159a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800159e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <MX_I2C3_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80015a6:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <MX_I2C3_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ac:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <MX_I2C3_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <MX_I2C3_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015b8:	480d      	ldr	r0, [pc, #52]	@ (80015f0 <MX_I2C3_Init+0x74>)
 80015ba:	f001 fe29 	bl	8003210 <HAL_I2C_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80015c4:	f000 fb10 	bl	8001be8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015c8:	2100      	movs	r1, #0
 80015ca:	4809      	ldr	r0, [pc, #36]	@ (80015f0 <MX_I2C3_Init+0x74>)
 80015cc:	f002 fe44 	bl	8004258 <HAL_I2CEx_ConfigAnalogFilter>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80015d6:	f000 fb07 	bl	8001be8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015da:	2100      	movs	r1, #0
 80015dc:	4804      	ldr	r0, [pc, #16]	@ (80015f0 <MX_I2C3_Init+0x74>)
 80015de:	f002 fe77 	bl	80042d0 <HAL_I2CEx_ConfigDigitalFilter>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80015e8:	f000 fafe 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200259d4 	.word	0x200259d4
 80015f4:	40005c00 	.word	0x40005c00
 80015f8:	000186a0 	.word	0x000186a0

080015fc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b09a      	sub	sp, #104	@ 0x68
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001602:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001606:	2234      	movs	r2, #52	@ 0x34
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f004 ff76 	bl	80064fc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2234      	movs	r2, #52	@ 0x34
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f004 ff70 	bl	80064fc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800161c:	4b4e      	ldr	r3, [pc, #312]	@ (8001758 <MX_LTDC_Init+0x15c>)
 800161e:	4a4f      	ldr	r2, [pc, #316]	@ (800175c <MX_LTDC_Init+0x160>)
 8001620:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001622:	4b4d      	ldr	r3, [pc, #308]	@ (8001758 <MX_LTDC_Init+0x15c>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001628:	4b4b      	ldr	r3, [pc, #300]	@ (8001758 <MX_LTDC_Init+0x15c>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800162e:	4b4a      	ldr	r3, [pc, #296]	@ (8001758 <MX_LTDC_Init+0x15c>)
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001634:	4b48      	ldr	r3, [pc, #288]	@ (8001758 <MX_LTDC_Init+0x15c>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800163a:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <MX_LTDC_Init+0x15c>)
 800163c:	2207      	movs	r2, #7
 800163e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001640:	4b45      	ldr	r3, [pc, #276]	@ (8001758 <MX_LTDC_Init+0x15c>)
 8001642:	2203      	movs	r2, #3
 8001644:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001646:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <MX_LTDC_Init+0x15c>)
 8001648:	220e      	movs	r2, #14
 800164a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800164c:	4b42      	ldr	r3, [pc, #264]	@ (8001758 <MX_LTDC_Init+0x15c>)
 800164e:	2205      	movs	r2, #5
 8001650:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001652:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <MX_LTDC_Init+0x15c>)
 8001654:	f240 228e 	movw	r2, #654	@ 0x28e
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800165a:	4b3f      	ldr	r3, [pc, #252]	@ (8001758 <MX_LTDC_Init+0x15c>)
 800165c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001660:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001662:	4b3d      	ldr	r3, [pc, #244]	@ (8001758 <MX_LTDC_Init+0x15c>)
 8001664:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001668:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800166a:	4b3b      	ldr	r3, [pc, #236]	@ (8001758 <MX_LTDC_Init+0x15c>)
 800166c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001670:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001672:	4b39      	ldr	r3, [pc, #228]	@ (8001758 <MX_LTDC_Init+0x15c>)
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800167a:	4b37      	ldr	r3, [pc, #220]	@ (8001758 <MX_LTDC_Init+0x15c>)
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001682:	4b35      	ldr	r3, [pc, #212]	@ (8001758 <MX_LTDC_Init+0x15c>)
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800168a:	4833      	ldr	r0, [pc, #204]	@ (8001758 <MX_LTDC_Init+0x15c>)
 800168c:	f002 fe60 	bl	8004350 <HAL_LTDC_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001696:	f000 faa7 	bl	8001be8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80016aa:	2300      	movs	r3, #0
 80016ac:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80016b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016ba:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80016bc:	2305      	movs	r3, #5
 80016be:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80016de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	481c      	ldr	r0, [pc, #112]	@ (8001758 <MX_LTDC_Init+0x15c>)
 80016e8:	f002 ff02 	bl	80044f0 <HAL_LTDC_ConfigLayer>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80016f2:	f000 fa79 	bl	8001be8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001712:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001716:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001718:	2305      	movs	r3, #5
 800171a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	2201      	movs	r2, #1
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	@ (8001758 <MX_LTDC_Init+0x15c>)
 8001742:	f002 fed5 	bl	80044f0 <HAL_LTDC_ConfigLayer>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800174c:	f000 fa4c 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	3768      	adds	r7, #104	@ 0x68
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20025a28 	.word	0x20025a28
 800175c:	40016800 	.word	0x40016800

08001760 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <MX_RNG_Init+0x20>)
 8001766:	4a07      	ldr	r2, [pc, #28]	@ (8001784 <MX_RNG_Init+0x24>)
 8001768:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	@ (8001780 <MX_RNG_Init+0x20>)
 800176c:	f003 feda 	bl	8005524 <HAL_RNG_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001776:	f000 fa37 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20025ad0 	.word	0x20025ad0
 8001784:	50060800 	.word	0x50060800

08001788 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800178c:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <MX_SPI5_Init+0x64>)
 800178e:	4a18      	ldr	r2, [pc, #96]	@ (80017f0 <MX_SPI5_Init+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001792:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <MX_SPI5_Init+0x64>)
 8001794:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001798:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800179a:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <MX_SPI5_Init+0x64>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <MX_SPI5_Init+0x64>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <MX_SPI5_Init+0x64>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <MX_SPI5_Init+0x64>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <MX_SPI5_Init+0x64>)
 80017b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017b8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ba:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <MX_SPI5_Init+0x64>)
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <MX_SPI5_Init+0x64>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c6:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <MX_SPI5_Init+0x64>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017cc:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <MX_SPI5_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <MX_SPI5_Init+0x64>)
 80017d4:	220a      	movs	r2, #10
 80017d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	@ (80017ec <MX_SPI5_Init+0x64>)
 80017da:	f003 fecd 	bl	8005578 <HAL_SPI_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80017e4:	f000 fa00 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20025ae0 	.word	0x20025ae0
 80017f0:	40015000 	.word	0x40015000

080017f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001808:	463b      	mov	r3, r7
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001810:	4b1d      	ldr	r3, [pc, #116]	@ (8001888 <MX_TIM2_Init+0x94>)
 8001812:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001816:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001818:	4b1b      	ldr	r3, [pc, #108]	@ (8001888 <MX_TIM2_Init+0x94>)
 800181a:	2200      	movs	r2, #0
 800181c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <MX_TIM2_Init+0x94>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001824:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <MX_TIM2_Init+0x94>)
 8001826:	f04f 32ff 	mov.w	r2, #4294967295
 800182a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182c:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <MX_TIM2_Init+0x94>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <MX_TIM2_Init+0x94>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001838:	4813      	ldr	r0, [pc, #76]	@ (8001888 <MX_TIM2_Init+0x94>)
 800183a:	f004 f97d 	bl	8005b38 <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001844:	f000 f9d0 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800184c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	4619      	mov	r1, r3
 8001854:	480c      	ldr	r0, [pc, #48]	@ (8001888 <MX_TIM2_Init+0x94>)
 8001856:	f004 f9be 	bl	8005bd6 <HAL_TIM_ConfigClockSource>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001860:	f000 f9c2 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800186c:	463b      	mov	r3, r7
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	@ (8001888 <MX_TIM2_Init+0x94>)
 8001872:	f004 fbbd 	bl	8005ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800187c:	f000 f9b4 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20025b38 	.word	0x20025b38

0800188c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08e      	sub	sp, #56	@ 0x38
 8001890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
 80018a6:	4bb2      	ldr	r3, [pc, #712]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4ab1      	ldr	r2, [pc, #708]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4baf      	ldr	r3, [pc, #700]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	623b      	str	r3, [r7, #32]
 80018bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	4bab      	ldr	r3, [pc, #684]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	4aaa      	ldr	r2, [pc, #680]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 80018c8:	f043 0320 	orr.w	r3, r3, #32
 80018cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ce:	4ba8      	ldr	r3, [pc, #672]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	f003 0320 	and.w	r3, r3, #32
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	4ba4      	ldr	r3, [pc, #656]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4aa3      	ldr	r2, [pc, #652]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 80018e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4ba1      	ldr	r3, [pc, #644]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	4b9d      	ldr	r3, [pc, #628]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a9c      	ldr	r2, [pc, #624]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b9a      	ldr	r3, [pc, #616]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b96      	ldr	r3, [pc, #600]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a95      	ldr	r2, [pc, #596]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b93      	ldr	r3, [pc, #588]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b8f      	ldr	r3, [pc, #572]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a8e      	ldr	r2, [pc, #568]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 8001938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b8c      	ldr	r3, [pc, #560]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	4b88      	ldr	r3, [pc, #544]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	4a87      	ldr	r2, [pc, #540]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 8001954:	f043 0310 	orr.w	r3, r3, #16
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	4b85      	ldr	r3, [pc, #532]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	4b81      	ldr	r3, [pc, #516]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a80      	ldr	r2, [pc, #512]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 8001970:	f043 0308 	orr.w	r3, r3, #8
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b7e      	ldr	r3, [pc, #504]	@ (8001b70 <MX_GPIO_Init+0x2e4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	2116      	movs	r1, #22
 8001986:	487b      	ldr	r0, [pc, #492]	@ (8001b74 <MX_GPIO_Init+0x2e8>)
 8001988:	f001 fc28 	bl	80031dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	2180      	movs	r1, #128	@ 0x80
 8001990:	4879      	ldr	r0, [pc, #484]	@ (8001b78 <MX_GPIO_Init+0x2ec>)
 8001992:	f001 fc23 	bl	80031dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800199c:	4877      	ldr	r0, [pc, #476]	@ (8001b7c <MX_GPIO_Init+0x2f0>)
 800199e:	f001 fc1d 	bl	80031dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80019a2:	2200      	movs	r2, #0
 80019a4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80019a8:	4875      	ldr	r0, [pc, #468]	@ (8001b80 <MX_GPIO_Init+0x2f4>)
 80019aa:	f001 fc17 	bl	80031dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80019ae:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019c0:	230c      	movs	r3, #12
 80019c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c8:	4619      	mov	r1, r3
 80019ca:	486e      	ldr	r0, [pc, #440]	@ (8001b84 <MX_GPIO_Init+0x2f8>)
 80019cc:	f001 f94e 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80019d0:	2301      	movs	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019e0:	230c      	movs	r3, #12
 80019e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e8:	4619      	mov	r1, r3
 80019ea:	4862      	ldr	r0, [pc, #392]	@ (8001b74 <MX_GPIO_Init+0x2e8>)
 80019ec:	f001 f93e 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80019f0:	2316      	movs	r3, #22
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a04:	4619      	mov	r1, r3
 8001a06:	485b      	ldr	r0, [pc, #364]	@ (8001b74 <MX_GPIO_Init+0x2e8>)
 8001a08:	f001 f930 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001a0c:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a12:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	4855      	ldr	r0, [pc, #340]	@ (8001b78 <MX_GPIO_Init+0x2ec>)
 8001a24:	f001 f922 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001a28:	2380      	movs	r3, #128	@ 0x80
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	484e      	ldr	r0, [pc, #312]	@ (8001b78 <MX_GPIO_Init+0x2ec>)
 8001a40:	f001 f914 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001a44:	2320      	movs	r3, #32
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a48:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a56:	4619      	mov	r1, r3
 8001a58:	4846      	ldr	r0, [pc, #280]	@ (8001b74 <MX_GPIO_Init+0x2e8>)
 8001a5a:	f001 f907 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a5e:	2304      	movs	r3, #4
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4845      	ldr	r0, [pc, #276]	@ (8001b88 <MX_GPIO_Init+0x2fc>)
 8001a72:	f001 f8fb 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001a76:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a88:	230c      	movs	r3, #12
 8001a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a90:	4619      	mov	r1, r3
 8001a92:	483b      	ldr	r0, [pc, #236]	@ (8001b80 <MX_GPIO_Init+0x2f4>)
 8001a94:	f001 f8ea 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001a98:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aaa:	230c      	movs	r3, #12
 8001aac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4835      	ldr	r0, [pc, #212]	@ (8001b8c <MX_GPIO_Init+0x300>)
 8001ab6:	f001 f8d9 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001aba:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001acc:	230c      	movs	r3, #12
 8001ace:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	482c      	ldr	r0, [pc, #176]	@ (8001b88 <MX_GPIO_Init+0x2fc>)
 8001ad8:	f001 f8c8 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001adc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aee:	4619      	mov	r1, r3
 8001af0:	4825      	ldr	r0, [pc, #148]	@ (8001b88 <MX_GPIO_Init+0x2fc>)
 8001af2:	f001 f8bb 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001af6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b08:	230c      	movs	r3, #12
 8001b0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b10:	4619      	mov	r1, r3
 8001b12:	481a      	ldr	r0, [pc, #104]	@ (8001b7c <MX_GPIO_Init+0x2f0>)
 8001b14:	f001 f8aa 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001b18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4813      	ldr	r0, [pc, #76]	@ (8001b7c <MX_GPIO_Init+0x2f0>)
 8001b2e:	f001 f89d 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001b32:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <MX_GPIO_Init+0x2f0>)
 8001b4c:	f001 f88e 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b50:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b62:	2307      	movs	r3, #7
 8001b64:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	e010      	b.n	8001b90 <MX_GPIO_Init+0x304>
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020800 	.word	0x40020800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020c00 	.word	0x40020c00
 8001b80:	40021800 	.word	0x40021800
 8001b84:	40021400 	.word	0x40021400
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	4812      	ldr	r0, [pc, #72]	@ (8001bdc <MX_GPIO_Init+0x350>)
 8001b92:	f001 f86b 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001b96:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bac:	4619      	mov	r1, r3
 8001bae:	480c      	ldr	r0, [pc, #48]	@ (8001be0 <MX_GPIO_Init+0x354>)
 8001bb0:	f001 f85c 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001bb4:	2360      	movs	r3, #96	@ 0x60
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <MX_GPIO_Init+0x358>)
 8001bd0:	f001 f84c 	bl	8002c6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bd4:	bf00      	nop
 8001bd6:	3738      	adds	r7, #56	@ 0x38
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40021800 	.word	0x40021800
 8001be4:	40020400 	.word	0x40020400

08001be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bec:	b672      	cpsid	i
}
 8001bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <Error_Handler+0x8>

08001bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	4b10      	ldr	r3, [pc, #64]	@ (8001c40 <HAL_MspInit+0x4c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c02:	4a0f      	ldr	r2, [pc, #60]	@ (8001c40 <HAL_MspInit+0x4c>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c40 <HAL_MspInit+0x4c>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <HAL_MspInit+0x4c>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <HAL_MspInit+0x4c>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_MspInit+0x4c>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c32:	2007      	movs	r0, #7
 8001c34:	f000 ffe6 	bl	8002c04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800

08001c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	@ 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a29      	ldr	r2, [pc, #164]	@ (8001d08 <HAL_I2C_MspInit+0xc4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d14b      	bne.n	8001cfe <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b28      	ldr	r3, [pc, #160]	@ (8001d0c <HAL_I2C_MspInit+0xc8>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	4a27      	ldr	r2, [pc, #156]	@ (8001d0c <HAL_I2C_MspInit+0xc8>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c76:	4b25      	ldr	r3, [pc, #148]	@ (8001d0c <HAL_I2C_MspInit+0xc8>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b21      	ldr	r3, [pc, #132]	@ (8001d0c <HAL_I2C_MspInit+0xc8>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	4a20      	ldr	r2, [pc, #128]	@ (8001d0c <HAL_I2C_MspInit+0xc8>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c92:	4b1e      	ldr	r3, [pc, #120]	@ (8001d0c <HAL_I2C_MspInit+0xc8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001c9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca4:	2312      	movs	r3, #18
 8001ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4815      	ldr	r0, [pc, #84]	@ (8001d10 <HAL_I2C_MspInit+0xcc>)
 8001cbc:	f000 ffd6 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001cc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc6:	2312      	movs	r3, #18
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480d      	ldr	r0, [pc, #52]	@ (8001d14 <HAL_I2C_MspInit+0xd0>)
 8001cde:	f000 ffc5 	bl	8002c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HAL_I2C_MspInit+0xc8>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	4a08      	ldr	r2, [pc, #32]	@ (8001d0c <HAL_I2C_MspInit+0xc8>)
 8001cec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_I2C_MspInit+0xc8>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	@ 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40005c00 	.word	0x40005c00
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020800 	.word	0x40020800
 8001d14:	40020000 	.word	0x40020000

08001d18 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b09a      	sub	sp, #104	@ 0x68
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d34:	2230      	movs	r2, #48	@ 0x30
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f004 fbdf 	bl	80064fc <memset>
  if(hltdc->Instance==LTDC)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a81      	ldr	r2, [pc, #516]	@ (8001f48 <HAL_LTDC_MspInit+0x230>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	f040 80fb 	bne.w	8001f40 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8001d4e:	23c8      	movs	r3, #200	@ 0xc8
 8001d50:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001d52:	2302      	movs	r3, #2
 8001d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8001d56:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 fa1f 	bl	80051a4 <HAL_RCCEx_PeriphCLKConfig>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001d6c:	f7ff ff3c 	bl	8001be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
 8001d74:	4b75      	ldr	r3, [pc, #468]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d78:	4a74      	ldr	r2, [pc, #464]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001d7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d80:	4b72      	ldr	r3, [pc, #456]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d88:	623b      	str	r3, [r7, #32]
 8001d8a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	4b6e      	ldr	r3, [pc, #440]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d94:	4a6d      	ldr	r2, [pc, #436]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001d96:	f043 0320 	orr.w	r3, r3, #32
 8001d9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9c:	4b6b      	ldr	r3, [pc, #428]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	4b67      	ldr	r3, [pc, #412]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	4a66      	ldr	r2, [pc, #408]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db8:	4b64      	ldr	r3, [pc, #400]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	4b60      	ldr	r3, [pc, #384]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	4a5f      	ldr	r2, [pc, #380]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001dce:	f043 0302 	orr.w	r3, r3, #2
 8001dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd4:	4b5d      	ldr	r3, [pc, #372]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	4b59      	ldr	r3, [pc, #356]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de8:	4a58      	ldr	r2, [pc, #352]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df0:	4b56      	ldr	r3, [pc, #344]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	4b52      	ldr	r3, [pc, #328]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	4a51      	ldr	r2, [pc, #324]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	4a4a      	ldr	r2, [pc, #296]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e28:	4b48      	ldr	r3, [pc, #288]	@ (8001f4c <HAL_LTDC_MspInit+0x234>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001e34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e38:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e46:	230e      	movs	r3, #14
 8001e48:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e4e:	4619      	mov	r1, r3
 8001e50:	483f      	ldr	r0, [pc, #252]	@ (8001f50 <HAL_LTDC_MspInit+0x238>)
 8001e52:	f000 ff0b 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001e56:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001e5a:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e68:	230e      	movs	r3, #14
 8001e6a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e70:	4619      	mov	r1, r3
 8001e72:	4838      	ldr	r0, [pc, #224]	@ (8001f54 <HAL_LTDC_MspInit+0x23c>)
 8001e74:	f000 fefa 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e88:	2309      	movs	r3, #9
 8001e8a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e90:	4619      	mov	r1, r3
 8001e92:	4831      	ldr	r0, [pc, #196]	@ (8001f58 <HAL_LTDC_MspInit+0x240>)
 8001e94:	f000 feea 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001e98:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001e9c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eaa:	230e      	movs	r3, #14
 8001eac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4828      	ldr	r0, [pc, #160]	@ (8001f58 <HAL_LTDC_MspInit+0x240>)
 8001eb6:	f000 fed9 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001eba:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001ebe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ecc:	230e      	movs	r3, #14
 8001ece:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ed0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4821      	ldr	r0, [pc, #132]	@ (8001f5c <HAL_LTDC_MspInit+0x244>)
 8001ed8:	f000 fec8 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001edc:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001ee0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eee:	230e      	movs	r3, #14
 8001ef0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4819      	ldr	r0, [pc, #100]	@ (8001f60 <HAL_LTDC_MspInit+0x248>)
 8001efa:	f000 feb7 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001efe:	2348      	movs	r3, #72	@ 0x48
 8001f00:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f0e:	230e      	movs	r3, #14
 8001f10:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f16:	4619      	mov	r1, r3
 8001f18:	4812      	ldr	r0, [pc, #72]	@ (8001f64 <HAL_LTDC_MspInit+0x24c>)
 8001f1a:	f000 fea7 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001f1e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f22:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f30:	2309      	movs	r3, #9
 8001f32:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f34:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4808      	ldr	r0, [pc, #32]	@ (8001f5c <HAL_LTDC_MspInit+0x244>)
 8001f3c:	f000 fe96 	bl	8002c6c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001f40:	bf00      	nop
 8001f42:	3768      	adds	r7, #104	@ 0x68
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40016800 	.word	0x40016800
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40021400 	.word	0x40021400
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	40021800 	.word	0x40021800
 8001f60:	40020800 	.word	0x40020800
 8001f64:	40020c00 	.word	0x40020c00

08001f68 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa4 <HAL_RNG_MspInit+0x3c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d10d      	bne.n	8001f96 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <HAL_RNG_MspInit+0x40>)
 8001f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f82:	4a09      	ldr	r2, [pc, #36]	@ (8001fa8 <HAL_RNG_MspInit+0x40>)
 8001f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f88:	6353      	str	r3, [r2, #52]	@ 0x34
 8001f8a:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <HAL_RNG_MspInit+0x40>)
 8001f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	50060800 	.word	0x50060800
 8001fa8:	40023800 	.word	0x40023800

08001fac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	@ 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a19      	ldr	r2, [pc, #100]	@ (8002030 <HAL_SPI_MspInit+0x84>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d12c      	bne.n	8002028 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	4b18      	ldr	r3, [pc, #96]	@ (8002034 <HAL_SPI_MspInit+0x88>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	4a17      	ldr	r2, [pc, #92]	@ (8002034 <HAL_SPI_MspInit+0x88>)
 8001fd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fde:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <HAL_SPI_MspInit+0x88>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <HAL_SPI_MspInit+0x88>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	4a10      	ldr	r2, [pc, #64]	@ (8002034 <HAL_SPI_MspInit+0x88>)
 8001ff4:	f043 0320 	orr.w	r3, r3, #32
 8001ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <HAL_SPI_MspInit+0x88>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002006:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800200a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002018:	2305      	movs	r3, #5
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4619      	mov	r1, r3
 8002022:	4805      	ldr	r0, [pc, #20]	@ (8002038 <HAL_SPI_MspInit+0x8c>)
 8002024:	f000 fe22 	bl	8002c6c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002028:	bf00      	nop
 800202a:	3728      	adds	r7, #40	@ 0x28
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40015000 	.word	0x40015000
 8002034:	40023800 	.word	0x40023800
 8002038:	40021400 	.word	0x40021400

0800203c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a08      	ldr	r2, [pc, #32]	@ (800206c <HAL_SPI_MspDeInit+0x30>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d10a      	bne.n	8002064 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800204e:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <HAL_SPI_MspDeInit+0x34>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	4a07      	ldr	r2, [pc, #28]	@ (8002070 <HAL_SPI_MspDeInit+0x34>)
 8002054:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002058:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800205a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800205e:	4805      	ldr	r0, [pc, #20]	@ (8002074 <HAL_SPI_MspDeInit+0x38>)
 8002060:	f000 ffb0 	bl	8002fc4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40015000 	.word	0x40015000
 8002070:	40023800 	.word	0x40023800
 8002074:	40021400 	.word	0x40021400

08002078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002088:	d10d      	bne.n	80020a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b09      	ldr	r3, [pc, #36]	@ (80020b4 <HAL_TIM_Base_MspInit+0x3c>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	4a08      	ldr	r2, [pc, #32]	@ (80020b4 <HAL_TIM_Base_MspInit+0x3c>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6413      	str	r3, [r2, #64]	@ 0x40
 800209a:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_TIM_Base_MspInit+0x3c>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800

080020b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <NMI_Handler+0x4>

080020c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <HardFault_Handler+0x4>

080020c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <MemManage_Handler+0x4>

080020d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <BusFault_Handler+0x4>

080020d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <UsageFault_Handler+0x4>

080020e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800210e:	f000 fc83 	bl	8002a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}

08002116 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 800211c:	f000 f9ce 	bl	80024bc <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002120:	f000 f98e 	bl	8002440 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002124:	2202      	movs	r2, #2
 8002126:	2103      	movs	r1, #3
 8002128:	2082      	movs	r0, #130	@ 0x82
 800212a:	f000 fa1b 	bl	8002564 <I2C3_Write>
    HAL_Delay(5);
 800212e:	2005      	movs	r0, #5
 8002130:	f000 fc92 	bl	8002a58 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002134:	2200      	movs	r2, #0
 8002136:	2103      	movs	r1, #3
 8002138:	2082      	movs	r0, #130	@ 0x82
 800213a:	f000 fa13 	bl	8002564 <I2C3_Write>
    HAL_Delay(2);
 800213e:	2002      	movs	r0, #2
 8002140:	f000 fc8a 	bl	8002a58 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002144:	1cba      	adds	r2, r7, #2
 8002146:	2302      	movs	r3, #2
 8002148:	2100      	movs	r1, #0
 800214a:	2082      	movs	r0, #130	@ 0x82
 800214c:	f000 fa5a 	bl	8002604 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002150:	887b      	ldrh	r3, [r7, #2]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002156:	887b      	ldrh	r3, [r7, #2]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	b29a      	uxth	r2, r3
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	4313      	orrs	r3, r2
 8002160:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	f640 0211 	movw	r2, #2065	@ 0x811
 8002168:	4293      	cmp	r3, r2
 800216a:	d001      	beq.n	8002170 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800216c:	2303      	movs	r3, #3
 800216e:	e075      	b.n	800225c <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002170:	2202      	movs	r2, #2
 8002172:	2103      	movs	r1, #3
 8002174:	2082      	movs	r0, #130	@ 0x82
 8002176:	f000 f9f5 	bl	8002564 <I2C3_Write>
    HAL_Delay(5);
 800217a:	2005      	movs	r0, #5
 800217c:	f000 fc6c 	bl	8002a58 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002180:	2200      	movs	r2, #0
 8002182:	2103      	movs	r1, #3
 8002184:	2082      	movs	r0, #130	@ 0x82
 8002186:	f000 f9ed 	bl	8002564 <I2C3_Write>
    HAL_Delay(2);
 800218a:	2002      	movs	r0, #2
 800218c:	f000 fc64 	bl	8002a58 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002190:	2004      	movs	r0, #4
 8002192:	f000 f867 	bl	8002264 <STMPE811_Read>
 8002196:	4603      	mov	r3, r0
 8002198:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 800219a:	797b      	ldrb	r3, [r7, #5]
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80021a2:	797b      	ldrb	r3, [r7, #5]
 80021a4:	461a      	mov	r2, r3
 80021a6:	2104      	movs	r1, #4
 80021a8:	2082      	movs	r0, #130	@ 0x82
 80021aa:	f000 f9db 	bl	8002564 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80021ae:	2004      	movs	r0, #4
 80021b0:	f000 f858 	bl	8002264 <STMPE811_Read>
 80021b4:	4603      	mov	r3, r0
 80021b6:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80021b8:	797b      	ldrb	r3, [r7, #5]
 80021ba:	f023 0302 	bic.w	r3, r3, #2
 80021be:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80021c0:	797b      	ldrb	r3, [r7, #5]
 80021c2:	461a      	mov	r2, r3
 80021c4:	2104      	movs	r1, #4
 80021c6:	2082      	movs	r0, #130	@ 0x82
 80021c8:	f000 f9cc 	bl	8002564 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80021cc:	2249      	movs	r2, #73	@ 0x49
 80021ce:	2120      	movs	r1, #32
 80021d0:	2082      	movs	r0, #130	@ 0x82
 80021d2:	f000 f9c7 	bl	8002564 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80021d6:	2002      	movs	r0, #2
 80021d8:	f000 fc3e 	bl	8002a58 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80021dc:	2201      	movs	r2, #1
 80021de:	2121      	movs	r1, #33	@ 0x21
 80021e0:	2082      	movs	r0, #130	@ 0x82
 80021e2:	f000 f9bf 	bl	8002564 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80021e6:	2017      	movs	r0, #23
 80021e8:	f000 f83c 	bl	8002264 <STMPE811_Read>
 80021ec:	4603      	mov	r3, r0
 80021ee:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80021f0:	797b      	ldrb	r3, [r7, #5]
 80021f2:	f043 031e 	orr.w	r3, r3, #30
 80021f6:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80021f8:	797b      	ldrb	r3, [r7, #5]
 80021fa:	461a      	mov	r2, r3
 80021fc:	2117      	movs	r1, #23
 80021fe:	2082      	movs	r0, #130	@ 0x82
 8002200:	f000 f9b0 	bl	8002564 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002204:	229a      	movs	r2, #154	@ 0x9a
 8002206:	2141      	movs	r1, #65	@ 0x41
 8002208:	2082      	movs	r0, #130	@ 0x82
 800220a:	f000 f9ab 	bl	8002564 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 800220e:	2201      	movs	r2, #1
 8002210:	214a      	movs	r1, #74	@ 0x4a
 8002212:	2082      	movs	r0, #130	@ 0x82
 8002214:	f000 f9a6 	bl	8002564 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002218:	2201      	movs	r2, #1
 800221a:	214b      	movs	r1, #75	@ 0x4b
 800221c:	2082      	movs	r0, #130	@ 0x82
 800221e:	f000 f9a1 	bl	8002564 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002222:	2200      	movs	r2, #0
 8002224:	214b      	movs	r1, #75	@ 0x4b
 8002226:	2082      	movs	r0, #130	@ 0x82
 8002228:	f000 f99c 	bl	8002564 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 800222c:	2201      	movs	r2, #1
 800222e:	2156      	movs	r1, #86	@ 0x56
 8002230:	2082      	movs	r0, #130	@ 0x82
 8002232:	f000 f997 	bl	8002564 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002236:	2201      	movs	r2, #1
 8002238:	2158      	movs	r1, #88	@ 0x58
 800223a:	2082      	movs	r0, #130	@ 0x82
 800223c:	f000 f992 	bl	8002564 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002240:	2203      	movs	r2, #3
 8002242:	2140      	movs	r1, #64	@ 0x40
 8002244:	2082      	movs	r0, #130	@ 0x82
 8002246:	f000 f98d 	bl	8002564 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 800224a:	22ff      	movs	r2, #255	@ 0xff
 800224c:	210b      	movs	r1, #11
 800224e:	2082      	movs	r0, #130	@ 0x82
 8002250:	f000 f988 	bl	8002564 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002254:	20c8      	movs	r0, #200	@ 0xc8
 8002256:	f000 fbff 	bl	8002a58 <HAL_Delay>

    return STMPE811_State_Ok;
 800225a:	2302      	movs	r3, #2

}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800226e:	f107 020f 	add.w	r2, r7, #15
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	4619      	mov	r1, r3
 8002276:	2082      	movs	r0, #130	@ 0x82
 8002278:	f000 f99e 	bl	80025b8 <I2C3_Read>

    return readData;
 800227c:	7bfb      	ldrb	r3, [r7, #15]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	791a      	ldrb	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002296:	2040      	movs	r0, #64	@ 0x40
 8002298:	f7ff ffe4 	bl	8002264 <STMPE811_Read>
 800229c:	4603      	mov	r3, r0
 800229e:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 80022a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	db0e      	blt.n	80022c6 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80022ae:	2201      	movs	r2, #1
 80022b0:	214b      	movs	r1, #75	@ 0x4b
 80022b2:	2082      	movs	r0, #130	@ 0x82
 80022b4:	f000 f956 	bl	8002564 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80022b8:	2200      	movs	r2, #0
 80022ba:	214b      	movs	r1, #75	@ 0x4b
 80022bc:	2082      	movs	r0, #130	@ 0x82
 80022be:	f000 f951 	bl	8002564 <I2C3_Write>

        return STMPE811_State_Released;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0a7      	b.n	8002416 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	799b      	ldrb	r3, [r3, #6]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d117      	bne.n	80022fe <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f9b8 	bl	8002648 <TM_STMPE811_ReadX>
 80022d8:	4603      	mov	r3, r0
 80022da:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80022de:	b29a      	uxth	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	885b      	ldrh	r3, [r3, #2]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 fa0b 	bl	8002704 <TM_STMPE811_ReadY>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80022f4:	3301      	adds	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	805a      	strh	r2, [r3, #2]
 80022fc:	e048      	b.n	8002390 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	799b      	ldrb	r3, [r3, #6]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d112      	bne.n	800232c <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f99c 	bl	8002648 <TM_STMPE811_ReadX>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	885b      	ldrh	r3, [r3, #2]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 f9f1 	bl	8002704 <TM_STMPE811_ReadY>
 8002322:	4603      	mov	r3, r0
 8002324:	461a      	mov	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	805a      	strh	r2, [r3, #2]
 800232a:	e031      	b.n	8002390 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	799b      	ldrb	r3, [r3, #6]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d115      	bne.n	8002360 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	885b      	ldrh	r3, [r3, #2]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f985 	bl	8002648 <TM_STMPE811_ReadX>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f9da 	bl	8002704 <TM_STMPE811_ReadY>
 8002350:	4603      	mov	r3, r0
 8002352:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002356:	3301      	adds	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	801a      	strh	r2, [r3, #0]
 800235e:	e017      	b.n	8002390 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	799b      	ldrb	r3, [r3, #6]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d113      	bne.n	8002390 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f96b 	bl	8002648 <TM_STMPE811_ReadX>
 8002372:	4603      	mov	r3, r0
 8002374:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002378:	b29a      	uxth	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f9be 	bl	8002704 <TM_STMPE811_ReadY>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002390:	2201      	movs	r2, #1
 8002392:	214b      	movs	r1, #75	@ 0x4b
 8002394:	2082      	movs	r0, #130	@ 0x82
 8002396:	f000 f8e5 	bl	8002564 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800239a:	2200      	movs	r2, #0
 800239c:	214b      	movs	r1, #75	@ 0x4b
 800239e:	2082      	movs	r0, #130	@ 0x82
 80023a0:	f000 f8e0 	bl	8002564 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	799b      	ldrb	r3, [r3, #6]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <STMPE811_ReadTouch+0x12e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	799b      	ldrb	r3, [r3, #6]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d115      	bne.n	80023e0 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d027      	beq.n	800240c <STMPE811_ReadTouch+0x186>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	2bee      	cmp	r3, #238	@ 0xee
 80023c2:	d823      	bhi.n	800240c <STMPE811_ReadTouch+0x186>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	885b      	ldrh	r3, [r3, #2]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01f      	beq.n	800240c <STMPE811_ReadTouch+0x186>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	885b      	ldrh	r3, [r3, #2]
 80023d0:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80023d4:	d81a      	bhi.n	800240c <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80023dc:	2300      	movs	r3, #0
 80023de:	e01a      	b.n	8002416 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d012      	beq.n	800240e <STMPE811_ReadTouch+0x188>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80023f0:	d80d      	bhi.n	800240e <STMPE811_ReadTouch+0x188>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	885b      	ldrh	r3, [r3, #2]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <STMPE811_ReadTouch+0x188>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	885b      	ldrh	r3, [r3, #2]
 80023fe:	2bee      	cmp	r3, #238	@ 0xee
 8002400:	d805      	bhi.n	800240e <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002408:	2300      	movs	r3, #0
 800240a:	e004      	b.n	8002416 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800240c:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002414:	2301      	movs	r3, #1
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002424:	4b05      	ldr	r3, [pc, #20]	@ (800243c <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20025bd4 	.word	0x20025bd4

08002440 <I2C3_Init>:

static void I2C3_Init()
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	4b18      	ldr	r3, [pc, #96]	@ (80024ac <I2C3_Init+0x6c>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	4a17      	ldr	r2, [pc, #92]	@ (80024ac <I2C3_Init+0x6c>)
 8002450:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002454:	6413      	str	r3, [r2, #64]	@ 0x40
 8002456:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <I2C3_Init+0x6c>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002462:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <I2C3_Init+0x70>)
 8002464:	4a13      	ldr	r2, [pc, #76]	@ (80024b4 <I2C3_Init+0x74>)
 8002466:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002468:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <I2C3_Init+0x70>)
 800246a:	4a13      	ldr	r2, [pc, #76]	@ (80024b8 <I2C3_Init+0x78>)
 800246c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800246e:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <I2C3_Init+0x70>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002474:	4b0e      	ldr	r3, [pc, #56]	@ (80024b0 <I2C3_Init+0x70>)
 8002476:	2200      	movs	r2, #0
 8002478:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800247a:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <I2C3_Init+0x70>)
 800247c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002480:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002482:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <I2C3_Init+0x70>)
 8002484:	2200      	movs	r2, #0
 8002486:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002488:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <I2C3_Init+0x70>)
 800248a:	2200      	movs	r2, #0
 800248c:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800248e:	4808      	ldr	r0, [pc, #32]	@ (80024b0 <I2C3_Init+0x70>)
 8002490:	f000 febe 	bl	8003210 <HAL_I2C_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800249e:	bf00      	nop
 80024a0:	e7fd      	b.n	800249e <I2C3_Init+0x5e>
    }
    return;
 80024a2:	bf00      	nop
}
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	20025b80 	.word	0x20025b80
 80024b4:	40005c00 	.word	0x40005c00
 80024b8:	000186a0 	.word	0x000186a0

080024bc <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
 80024d0:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <I2C3_MspInit+0x9c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	4a1f      	ldr	r2, [pc, #124]	@ (8002558 <I2C3_MspInit+0x9c>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002558 <I2C3_MspInit+0x9c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <I2C3_MspInit+0x9c>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	4a18      	ldr	r2, [pc, #96]	@ (8002558 <I2C3_MspInit+0x9c>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fe:	4b16      	ldr	r3, [pc, #88]	@ (8002558 <I2C3_MspInit+0x9c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800250a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800250e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002510:	2312      	movs	r3, #18
 8002512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002518:	2300      	movs	r3, #0
 800251a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800251c:	2304      	movs	r3, #4
 800251e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	4619      	mov	r1, r3
 8002526:	480d      	ldr	r0, [pc, #52]	@ (800255c <I2C3_MspInit+0xa0>)
 8002528:	f000 fba0 	bl	8002c6c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800252c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002530:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002532:	2312      	movs	r3, #18
 8002534:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800253e:	2304      	movs	r3, #4
 8002540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002542:	f107 030c 	add.w	r3, r7, #12
 8002546:	4619      	mov	r1, r3
 8002548:	4805      	ldr	r0, [pc, #20]	@ (8002560 <I2C3_MspInit+0xa4>)
 800254a:	f000 fb8f 	bl	8002c6c <HAL_GPIO_Init>
    
}
 800254e:	bf00      	nop
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	40020800 	.word	0x40020800
 8002560:	40020000 	.word	0x40020000

08002564 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af04      	add	r7, sp, #16
 800256a:	4603      	mov	r3, r0
 800256c:	80fb      	strh	r3, [r7, #6]
 800256e:	460b      	mov	r3, r1
 8002570:	717b      	strb	r3, [r7, #5]
 8002572:	4613      	mov	r3, r2
 8002574:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002576:	793b      	ldrb	r3, [r7, #4]
 8002578:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800257a:	797b      	ldrb	r3, [r7, #5]
 800257c:	b29a      	uxth	r2, r3
 800257e:	88f9      	ldrh	r1, [r7, #6]
 8002580:	4b0a      	ldr	r3, [pc, #40]	@ (80025ac <I2C3_Write+0x48>)
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	2301      	movs	r3, #1
 8002586:	9301      	str	r3, [sp, #4]
 8002588:	f107 030f 	add.w	r3, r7, #15
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	2301      	movs	r3, #1
 8002590:	4807      	ldr	r0, [pc, #28]	@ (80025b0 <I2C3_Write+0x4c>)
 8002592:	f000 ff81 	bl	8003498 <HAL_I2C_Mem_Write>
 8002596:	4603      	mov	r3, r0
 8002598:	461a      	mov	r2, r3
 800259a:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <I2C3_Write+0x50>)
 800259c:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800259e:	f7ff ff3f 	bl	8002420 <verifyHAL_I2C_IS_OKAY>
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	0003d090 	.word	0x0003d090
 80025b0:	20025b80 	.word	0x20025b80
 80025b4:	20025bd4 	.word	0x20025bd4

080025b8 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af04      	add	r7, sp, #16
 80025be:	4603      	mov	r3, r0
 80025c0:	603a      	str	r2, [r7, #0]
 80025c2:	71fb      	strb	r3, [r7, #7]
 80025c4:	460b      	mov	r3, r1
 80025c6:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	b299      	uxth	r1, r3
 80025cc:	79bb      	ldrb	r3, [r7, #6]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <I2C3_Read+0x40>)
 80025d2:	9302      	str	r3, [sp, #8]
 80025d4:	2301      	movs	r3, #1
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2301      	movs	r3, #1
 80025de:	4807      	ldr	r0, [pc, #28]	@ (80025fc <I2C3_Read+0x44>)
 80025e0:	f001 f854 	bl	800368c <HAL_I2C_Mem_Read>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <I2C3_Read+0x48>)
 80025ea:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80025ec:	f7ff ff18 	bl	8002420 <verifyHAL_I2C_IS_OKAY>
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	0003d090 	.word	0x0003d090
 80025fc:	20025b80 	.word	0x20025b80
 8002600:	20025bd4 	.word	0x20025bd4

08002604 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af04      	add	r7, sp, #16
 800260a:	603a      	str	r2, [r7, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
 8002612:	460b      	mov	r3, r1
 8002614:	71bb      	strb	r3, [r7, #6]
 8002616:	4613      	mov	r3, r2
 8002618:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	b299      	uxth	r1, r3
 800261e:	79bb      	ldrb	r3, [r7, #6]
 8002620:	b29a      	uxth	r2, r3
 8002622:	4b07      	ldr	r3, [pc, #28]	@ (8002640 <I2C3_MulitByteRead+0x3c>)
 8002624:	9302      	str	r3, [sp, #8]
 8002626:	88bb      	ldrh	r3, [r7, #4]
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2301      	movs	r3, #1
 8002630:	4804      	ldr	r0, [pc, #16]	@ (8002644 <I2C3_MulitByteRead+0x40>)
 8002632:	f001 f82b 	bl	800368c <HAL_I2C_Mem_Read>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	0003d090 	.word	0x0003d090
 8002644:	20025b80 	.word	0x20025b80

08002648 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002652:	204d      	movs	r0, #77	@ 0x4d
 8002654:	f7ff fe06 	bl	8002264 <STMPE811_Read>
 8002658:	4603      	mov	r3, r0
 800265a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 800265c:	204e      	movs	r0, #78	@ 0x4e
 800265e:	f7ff fe01 	bl	8002264 <STMPE811_Read>
 8002662:	4603      	mov	r3, r0
 8002664:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002666:	7a7b      	ldrb	r3, [r7, #9]
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	b21a      	sxth	r2, r3
 800266c:	7a3b      	ldrb	r3, [r7, #8]
 800266e:	b21b      	sxth	r3, r3
 8002670:	4313      	orrs	r3, r2
 8002672:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002674:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002678:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800267c:	4293      	cmp	r3, r2
 800267e:	dc06      	bgt.n	800268e <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002680:	89fb      	ldrh	r3, [r7, #14]
 8002682:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002686:	330c      	adds	r3, #12
 8002688:	b29b      	uxth	r3, r3
 800268a:	81fb      	strh	r3, [r7, #14]
 800268c:	e005      	b.n	800269a <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 800268e:	89fb      	ldrh	r3, [r7, #14]
 8002690:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002694:	3308      	adds	r3, #8
 8002696:	b29b      	uxth	r3, r3
 8002698:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 800269a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800269e:	4a18      	ldr	r2, [pc, #96]	@ (8002700 <TM_STMPE811_ReadX+0xb8>)
 80026a0:	fb82 1203 	smull	r1, r2, r2, r3
 80026a4:	441a      	add	r2, r3
 80026a6:	10d2      	asrs	r2, r2, #3
 80026a8:	17db      	asrs	r3, r3, #31
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80026ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026b2:	2bef      	cmp	r3, #239	@ 0xef
 80026b4:	dd02      	ble.n	80026bc <TM_STMPE811_ReadX+0x74>
        val = 239;
 80026b6:	23ef      	movs	r3, #239	@ 0xef
 80026b8:	81fb      	strh	r3, [r7, #14]
 80026ba:	e005      	b.n	80026c8 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80026bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	da01      	bge.n	80026c8 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80026c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	dd05      	ble.n	80026de <TM_STMPE811_ReadX+0x96>
 80026d2:	89fa      	ldrh	r2, [r7, #14]
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	b29b      	uxth	r3, r3
 80026da:	b21b      	sxth	r3, r3
 80026dc:	e004      	b.n	80026e8 <TM_STMPE811_ReadX+0xa0>
 80026de:	89fb      	ldrh	r3, [r7, #14]
 80026e0:	88fa      	ldrh	r2, [r7, #6]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	b21b      	sxth	r3, r3
 80026e8:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80026ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	dd01      	ble.n	80026f6 <TM_STMPE811_ReadX+0xae>
        return val;
 80026f2:	89fb      	ldrh	r3, [r7, #14]
 80026f4:	e000      	b.n	80026f8 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80026f6:	88fb      	ldrh	r3, [r7, #6]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	88888889 	.word	0x88888889

08002704 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800270e:	204f      	movs	r0, #79	@ 0x4f
 8002710:	f7ff fda8 	bl	8002264 <STMPE811_Read>
 8002714:	4603      	mov	r3, r0
 8002716:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002718:	2050      	movs	r0, #80	@ 0x50
 800271a:	f7ff fda3 	bl	8002264 <STMPE811_Read>
 800271e:	4603      	mov	r3, r0
 8002720:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002722:	7a7b      	ldrb	r3, [r7, #9]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	b21a      	sxth	r2, r3
 8002728:	7a3b      	ldrb	r3, [r7, #8]
 800272a:	b21b      	sxth	r3, r3
 800272c:	4313      	orrs	r3, r2
 800272e:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002730:	89fb      	ldrh	r3, [r7, #14]
 8002732:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002736:	b29b      	uxth	r3, r3
 8002738:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800273a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800273e:	4a19      	ldr	r2, [pc, #100]	@ (80027a4 <TM_STMPE811_ReadY+0xa0>)
 8002740:	fb82 1203 	smull	r1, r2, r2, r3
 8002744:	1052      	asrs	r2, r2, #1
 8002746:	17db      	asrs	r3, r3, #31
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 800274c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002750:	2b00      	cmp	r3, #0
 8002752:	dc02      	bgt.n	800275a <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	81fb      	strh	r3, [r7, #14]
 8002758:	e007      	b.n	800276a <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 800275a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800275e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002762:	db02      	blt.n	800276a <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002764:	f240 133f 	movw	r3, #319	@ 0x13f
 8002768:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 800276a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	429a      	cmp	r2, r3
 8002772:	dd05      	ble.n	8002780 <TM_STMPE811_ReadY+0x7c>
 8002774:	89fa      	ldrh	r2, [r7, #14]
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	b29b      	uxth	r3, r3
 800277c:	b21b      	sxth	r3, r3
 800277e:	e004      	b.n	800278a <TM_STMPE811_ReadY+0x86>
 8002780:	89fb      	ldrh	r3, [r7, #14]
 8002782:	88fa      	ldrh	r2, [r7, #6]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	b29b      	uxth	r3, r3
 8002788:	b21b      	sxth	r3, r3
 800278a:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 800278c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002790:	2b04      	cmp	r3, #4
 8002792:	dd01      	ble.n	8002798 <TM_STMPE811_ReadY+0x94>
        return val;
 8002794:	89fb      	ldrh	r3, [r7, #14]
 8002796:	e000      	b.n	800279a <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002798:	88fb      	ldrh	r3, [r7, #6]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	2e8ba2e9 	.word	0x2e8ba2e9

080027a8 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e00a      	b.n	80027de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027c8:	f3af 8000 	nop.w
 80027cc:	4601      	mov	r1, r0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	60ba      	str	r2, [r7, #8]
 80027d4:	b2ca      	uxtb	r2, r1
 80027d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	3301      	adds	r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	dbf0      	blt.n	80027c8 <_read+0x12>
  }

  return len;
 80027e6:	687b      	ldr	r3, [r7, #4]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	e009      	b.n	8002816 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	60ba      	str	r2, [r7, #8]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	429a      	cmp	r2, r3
 800281c:	dbf1      	blt.n	8002802 <_write+0x12>
  }
  return len;
 800281e:	687b      	ldr	r3, [r7, #4]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <_close>:

int _close(int file)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002830:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002850:	605a      	str	r2, [r3, #4]
  return 0;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <_isatty>:

int _isatty(int file)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002868:	2301      	movs	r3, #1
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002876:	b480      	push	{r7}
 8002878:	b085      	sub	sp, #20
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002898:	4a14      	ldr	r2, [pc, #80]	@ (80028ec <_sbrk+0x5c>)
 800289a:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <_sbrk+0x60>)
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a4:	4b13      	ldr	r3, [pc, #76]	@ (80028f4 <_sbrk+0x64>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028ac:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <_sbrk+0x64>)
 80028ae:	4a12      	ldr	r2, [pc, #72]	@ (80028f8 <_sbrk+0x68>)
 80028b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028b2:	4b10      	ldr	r3, [pc, #64]	@ (80028f4 <_sbrk+0x64>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d207      	bcs.n	80028d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c0:	f003 fe6a 	bl	8006598 <__errno>
 80028c4:	4603      	mov	r3, r0
 80028c6:	220c      	movs	r2, #12
 80028c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	e009      	b.n	80028e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d0:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <_sbrk+0x64>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028d6:	4b07      	ldr	r3, [pc, #28]	@ (80028f4 <_sbrk+0x64>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	4a05      	ldr	r2, [pc, #20]	@ (80028f4 <_sbrk+0x64>)
 80028e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028e2:	68fb      	ldr	r3, [r7, #12]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20030000 	.word	0x20030000
 80028f0:	00000400 	.word	0x00000400
 80028f4:	20025bd8 	.word	0x20025bd8
 80028f8:	20025d30 	.word	0x20025d30

080028fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002900:	4b06      	ldr	r3, [pc, #24]	@ (800291c <SystemInit+0x20>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002906:	4a05      	ldr	r2, [pc, #20]	@ (800291c <SystemInit+0x20>)
 8002908:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800290c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002920:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002958 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002924:	f7ff ffea 	bl	80028fc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002928:	480c      	ldr	r0, [pc, #48]	@ (800295c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800292a:	490d      	ldr	r1, [pc, #52]	@ (8002960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002930:	e002      	b.n	8002938 <LoopCopyDataInit>

08002932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002936:	3304      	adds	r3, #4

08002938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800293c:	d3f9      	bcc.n	8002932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002940:	4c0a      	ldr	r4, [pc, #40]	@ (800296c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002944:	e001      	b.n	800294a <LoopFillZerobss>

08002946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002948:	3204      	adds	r2, #4

0800294a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800294c:	d3fb      	bcc.n	8002946 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800294e:	f003 fe29 	bl	80065a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002952:	f7fe fd84 	bl	800145e <main>
  bx  lr    
 8002956:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002958:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800295c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002960:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002964:	0800826c 	.word	0x0800826c
  ldr r2, =_sbss
 8002968:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800296c:	20025d2c 	.word	0x20025d2c

08002970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002970:	e7fe      	b.n	8002970 <ADC_IRQHandler>
	...

08002974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002978:	4b0e      	ldr	r3, [pc, #56]	@ (80029b4 <HAL_Init+0x40>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0d      	ldr	r2, [pc, #52]	@ (80029b4 <HAL_Init+0x40>)
 800297e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002984:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <HAL_Init+0x40>)
 800298a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800298e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002990:	4b08      	ldr	r3, [pc, #32]	@ (80029b4 <HAL_Init+0x40>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a07      	ldr	r2, [pc, #28]	@ (80029b4 <HAL_Init+0x40>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800299a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299c:	2003      	movs	r0, #3
 800299e:	f000 f931 	bl	8002c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f000 f808 	bl	80029b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a8:	f7ff f924 	bl	8001bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023c00 	.word	0x40023c00

080029b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029c0:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <HAL_InitTick+0x54>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <HAL_InitTick+0x58>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	4619      	mov	r1, r3
 80029ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f93b 	bl	8002c52 <HAL_SYSTICK_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00e      	b.n	8002a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b0f      	cmp	r3, #15
 80029ea:	d80a      	bhi.n	8002a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ec:	2200      	movs	r2, #0
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f000 f911 	bl	8002c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f8:	4a06      	ldr	r2, [pc, #24]	@ (8002a14 <HAL_InitTick+0x5c>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000010 	.word	0x20000010
 8002a10:	20000018 	.word	0x20000018
 8002a14:	20000014 	.word	0x20000014

08002a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <HAL_IncTick+0x20>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <HAL_IncTick+0x24>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	4a04      	ldr	r2, [pc, #16]	@ (8002a3c <HAL_IncTick+0x24>)
 8002a2a:	6013      	str	r3, [r2, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000018 	.word	0x20000018
 8002a3c:	20025bdc 	.word	0x20025bdc

08002a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return uwTick;
 8002a44:	4b03      	ldr	r3, [pc, #12]	@ (8002a54 <HAL_GetTick+0x14>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20025bdc 	.word	0x20025bdc

08002a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a60:	f7ff ffee 	bl	8002a40 <HAL_GetTick>
 8002a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a70:	d005      	beq.n	8002a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a72:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <HAL_Delay+0x44>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a7e:	bf00      	nop
 8002a80:	f7ff ffde 	bl	8002a40 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d8f7      	bhi.n	8002a80 <HAL_Delay+0x28>
  {
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000018 	.word	0x20000018

08002aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002abc:	4013      	ands	r3, r2
 8002abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad2:	4a04      	ldr	r2, [pc, #16]	@ (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	60d3      	str	r3, [r2, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aec:	4b04      	ldr	r3, [pc, #16]	@ (8002b00 <__NVIC_GetPriorityGrouping+0x18>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	f003 0307 	and.w	r3, r3, #7
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	6039      	str	r1, [r7, #0]
 8002b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	db0a      	blt.n	8002b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	490c      	ldr	r1, [pc, #48]	@ (8002b50 <__NVIC_SetPriority+0x4c>)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	0112      	lsls	r2, r2, #4
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	440b      	add	r3, r1
 8002b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b2c:	e00a      	b.n	8002b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	4908      	ldr	r1, [pc, #32]	@ (8002b54 <__NVIC_SetPriority+0x50>)
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	3b04      	subs	r3, #4
 8002b3c:	0112      	lsls	r2, r2, #4
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	440b      	add	r3, r1
 8002b42:	761a      	strb	r2, [r3, #24]
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000e100 	.word	0xe000e100
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b089      	sub	sp, #36	@ 0x24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f1c3 0307 	rsb	r3, r3, #7
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	bf28      	it	cs
 8002b76:	2304      	movcs	r3, #4
 8002b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	2b06      	cmp	r3, #6
 8002b80:	d902      	bls.n	8002b88 <NVIC_EncodePriority+0x30>
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3b03      	subs	r3, #3
 8002b86:	e000      	b.n	8002b8a <NVIC_EncodePriority+0x32>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43da      	mvns	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	43d9      	mvns	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb0:	4313      	orrs	r3, r2
         );
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3724      	adds	r7, #36	@ 0x24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bd0:	d301      	bcc.n	8002bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e00f      	b.n	8002bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <SysTick_Config+0x40>)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bde:	210f      	movs	r1, #15
 8002be0:	f04f 30ff 	mov.w	r0, #4294967295
 8002be4:	f7ff ff8e 	bl	8002b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be8:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <SysTick_Config+0x40>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bee:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <SysTick_Config+0x40>)
 8002bf0:	2207      	movs	r2, #7
 8002bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	e000e010 	.word	0xe000e010

08002c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ff47 	bl	8002aa0 <__NVIC_SetPriorityGrouping>
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b086      	sub	sp, #24
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	4603      	mov	r3, r0
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c2c:	f7ff ff5c 	bl	8002ae8 <__NVIC_GetPriorityGrouping>
 8002c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	6978      	ldr	r0, [r7, #20]
 8002c38:	f7ff ff8e 	bl	8002b58 <NVIC_EncodePriority>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c42:	4611      	mov	r1, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff5d 	bl	8002b04 <__NVIC_SetPriority>
}
 8002c4a:	bf00      	nop
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ffb0 	bl	8002bc0 <SysTick_Config>
 8002c60:	4603      	mov	r3, r0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b089      	sub	sp, #36	@ 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	e177      	b.n	8002f78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c88:	2201      	movs	r2, #1
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	f040 8166 	bne.w	8002f72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d005      	beq.n	8002cbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d130      	bne.n	8002d20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	2203      	movs	r2, #3
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 0201 	and.w	r2, r3, #1
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d017      	beq.n	8002d5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	2203      	movs	r2, #3
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d123      	bne.n	8002db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	08da      	lsrs	r2, r3, #3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3208      	adds	r2, #8
 8002d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	220f      	movs	r2, #15
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	08da      	lsrs	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3208      	adds	r2, #8
 8002daa:	69b9      	ldr	r1, [r7, #24]
 8002dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	2203      	movs	r2, #3
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 0203 	and.w	r2, r3, #3
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80c0 	beq.w	8002f72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	4b66      	ldr	r3, [pc, #408]	@ (8002f90 <HAL_GPIO_Init+0x324>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfa:	4a65      	ldr	r2, [pc, #404]	@ (8002f90 <HAL_GPIO_Init+0x324>)
 8002dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e02:	4b63      	ldr	r3, [pc, #396]	@ (8002f90 <HAL_GPIO_Init+0x324>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e0e:	4a61      	ldr	r2, [pc, #388]	@ (8002f94 <HAL_GPIO_Init+0x328>)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	3302      	adds	r3, #2
 8002e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	220f      	movs	r2, #15
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a58      	ldr	r2, [pc, #352]	@ (8002f98 <HAL_GPIO_Init+0x32c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d037      	beq.n	8002eaa <HAL_GPIO_Init+0x23e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a57      	ldr	r2, [pc, #348]	@ (8002f9c <HAL_GPIO_Init+0x330>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d031      	beq.n	8002ea6 <HAL_GPIO_Init+0x23a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a56      	ldr	r2, [pc, #344]	@ (8002fa0 <HAL_GPIO_Init+0x334>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d02b      	beq.n	8002ea2 <HAL_GPIO_Init+0x236>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a55      	ldr	r2, [pc, #340]	@ (8002fa4 <HAL_GPIO_Init+0x338>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d025      	beq.n	8002e9e <HAL_GPIO_Init+0x232>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a54      	ldr	r2, [pc, #336]	@ (8002fa8 <HAL_GPIO_Init+0x33c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d01f      	beq.n	8002e9a <HAL_GPIO_Init+0x22e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a53      	ldr	r2, [pc, #332]	@ (8002fac <HAL_GPIO_Init+0x340>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d019      	beq.n	8002e96 <HAL_GPIO_Init+0x22a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a52      	ldr	r2, [pc, #328]	@ (8002fb0 <HAL_GPIO_Init+0x344>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <HAL_GPIO_Init+0x226>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a51      	ldr	r2, [pc, #324]	@ (8002fb4 <HAL_GPIO_Init+0x348>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00d      	beq.n	8002e8e <HAL_GPIO_Init+0x222>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a50      	ldr	r2, [pc, #320]	@ (8002fb8 <HAL_GPIO_Init+0x34c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d007      	beq.n	8002e8a <HAL_GPIO_Init+0x21e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a4f      	ldr	r2, [pc, #316]	@ (8002fbc <HAL_GPIO_Init+0x350>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d101      	bne.n	8002e86 <HAL_GPIO_Init+0x21a>
 8002e82:	2309      	movs	r3, #9
 8002e84:	e012      	b.n	8002eac <HAL_GPIO_Init+0x240>
 8002e86:	230a      	movs	r3, #10
 8002e88:	e010      	b.n	8002eac <HAL_GPIO_Init+0x240>
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	e00e      	b.n	8002eac <HAL_GPIO_Init+0x240>
 8002e8e:	2307      	movs	r3, #7
 8002e90:	e00c      	b.n	8002eac <HAL_GPIO_Init+0x240>
 8002e92:	2306      	movs	r3, #6
 8002e94:	e00a      	b.n	8002eac <HAL_GPIO_Init+0x240>
 8002e96:	2305      	movs	r3, #5
 8002e98:	e008      	b.n	8002eac <HAL_GPIO_Init+0x240>
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	e006      	b.n	8002eac <HAL_GPIO_Init+0x240>
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e004      	b.n	8002eac <HAL_GPIO_Init+0x240>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e002      	b.n	8002eac <HAL_GPIO_Init+0x240>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_GPIO_Init+0x240>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	f002 0203 	and.w	r2, r2, #3
 8002eb2:	0092      	lsls	r2, r2, #2
 8002eb4:	4093      	lsls	r3, r2
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ebc:	4935      	ldr	r1, [pc, #212]	@ (8002f94 <HAL_GPIO_Init+0x328>)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	089b      	lsrs	r3, r3, #2
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eca:	4b3d      	ldr	r3, [pc, #244]	@ (8002fc0 <HAL_GPIO_Init+0x354>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eee:	4a34      	ldr	r2, [pc, #208]	@ (8002fc0 <HAL_GPIO_Init+0x354>)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef4:	4b32      	ldr	r3, [pc, #200]	@ (8002fc0 <HAL_GPIO_Init+0x354>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f18:	4a29      	ldr	r2, [pc, #164]	@ (8002fc0 <HAL_GPIO_Init+0x354>)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f1e:	4b28      	ldr	r3, [pc, #160]	@ (8002fc0 <HAL_GPIO_Init+0x354>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f42:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc0 <HAL_GPIO_Init+0x354>)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f48:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc0 <HAL_GPIO_Init+0x354>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f6c:	4a14      	ldr	r2, [pc, #80]	@ (8002fc0 <HAL_GPIO_Init+0x354>)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3301      	adds	r3, #1
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	f67f ae84 	bls.w	8002c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f80:	bf00      	nop
 8002f82:	bf00      	nop
 8002f84:	3724      	adds	r7, #36	@ 0x24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40013800 	.word	0x40013800
 8002f98:	40020000 	.word	0x40020000
 8002f9c:	40020400 	.word	0x40020400
 8002fa0:	40020800 	.word	0x40020800
 8002fa4:	40020c00 	.word	0x40020c00
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40021400 	.word	0x40021400
 8002fb0:	40021800 	.word	0x40021800
 8002fb4:	40021c00 	.word	0x40021c00
 8002fb8:	40022000 	.word	0x40022000
 8002fbc:	40022400 	.word	0x40022400
 8002fc0:	40013c00 	.word	0x40013c00

08002fc4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	e0d9      	b.n	8003194 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	f040 80c9 	bne.w	800318e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002ffc:	4a6b      	ldr	r2, [pc, #428]	@ (80031ac <HAL_GPIO_DeInit+0x1e8>)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	089b      	lsrs	r3, r3, #2
 8003002:	3302      	adds	r3, #2
 8003004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003008:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	220f      	movs	r2, #15
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	4013      	ands	r3, r2
 800301c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a63      	ldr	r2, [pc, #396]	@ (80031b0 <HAL_GPIO_DeInit+0x1ec>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d037      	beq.n	8003096 <HAL_GPIO_DeInit+0xd2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a62      	ldr	r2, [pc, #392]	@ (80031b4 <HAL_GPIO_DeInit+0x1f0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d031      	beq.n	8003092 <HAL_GPIO_DeInit+0xce>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a61      	ldr	r2, [pc, #388]	@ (80031b8 <HAL_GPIO_DeInit+0x1f4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d02b      	beq.n	800308e <HAL_GPIO_DeInit+0xca>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a60      	ldr	r2, [pc, #384]	@ (80031bc <HAL_GPIO_DeInit+0x1f8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d025      	beq.n	800308a <HAL_GPIO_DeInit+0xc6>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a5f      	ldr	r2, [pc, #380]	@ (80031c0 <HAL_GPIO_DeInit+0x1fc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d01f      	beq.n	8003086 <HAL_GPIO_DeInit+0xc2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a5e      	ldr	r2, [pc, #376]	@ (80031c4 <HAL_GPIO_DeInit+0x200>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d019      	beq.n	8003082 <HAL_GPIO_DeInit+0xbe>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a5d      	ldr	r2, [pc, #372]	@ (80031c8 <HAL_GPIO_DeInit+0x204>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_GPIO_DeInit+0xba>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a5c      	ldr	r2, [pc, #368]	@ (80031cc <HAL_GPIO_DeInit+0x208>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00d      	beq.n	800307a <HAL_GPIO_DeInit+0xb6>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a5b      	ldr	r2, [pc, #364]	@ (80031d0 <HAL_GPIO_DeInit+0x20c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d007      	beq.n	8003076 <HAL_GPIO_DeInit+0xb2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a5a      	ldr	r2, [pc, #360]	@ (80031d4 <HAL_GPIO_DeInit+0x210>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d101      	bne.n	8003072 <HAL_GPIO_DeInit+0xae>
 800306e:	2309      	movs	r3, #9
 8003070:	e012      	b.n	8003098 <HAL_GPIO_DeInit+0xd4>
 8003072:	230a      	movs	r3, #10
 8003074:	e010      	b.n	8003098 <HAL_GPIO_DeInit+0xd4>
 8003076:	2308      	movs	r3, #8
 8003078:	e00e      	b.n	8003098 <HAL_GPIO_DeInit+0xd4>
 800307a:	2307      	movs	r3, #7
 800307c:	e00c      	b.n	8003098 <HAL_GPIO_DeInit+0xd4>
 800307e:	2306      	movs	r3, #6
 8003080:	e00a      	b.n	8003098 <HAL_GPIO_DeInit+0xd4>
 8003082:	2305      	movs	r3, #5
 8003084:	e008      	b.n	8003098 <HAL_GPIO_DeInit+0xd4>
 8003086:	2304      	movs	r3, #4
 8003088:	e006      	b.n	8003098 <HAL_GPIO_DeInit+0xd4>
 800308a:	2303      	movs	r3, #3
 800308c:	e004      	b.n	8003098 <HAL_GPIO_DeInit+0xd4>
 800308e:	2302      	movs	r3, #2
 8003090:	e002      	b.n	8003098 <HAL_GPIO_DeInit+0xd4>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_GPIO_DeInit+0xd4>
 8003096:	2300      	movs	r3, #0
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	f002 0203 	and.w	r2, r2, #3
 800309e:	0092      	lsls	r2, r2, #2
 80030a0:	4093      	lsls	r3, r2
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d132      	bne.n	800310e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80030a8:	4b4b      	ldr	r3, [pc, #300]	@ (80031d8 <HAL_GPIO_DeInit+0x214>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	4949      	ldr	r1, [pc, #292]	@ (80031d8 <HAL_GPIO_DeInit+0x214>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80030b6:	4b48      	ldr	r3, [pc, #288]	@ (80031d8 <HAL_GPIO_DeInit+0x214>)
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	43db      	mvns	r3, r3
 80030be:	4946      	ldr	r1, [pc, #280]	@ (80031d8 <HAL_GPIO_DeInit+0x214>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80030c4:	4b44      	ldr	r3, [pc, #272]	@ (80031d8 <HAL_GPIO_DeInit+0x214>)
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	4942      	ldr	r1, [pc, #264]	@ (80031d8 <HAL_GPIO_DeInit+0x214>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80030d2:	4b41      	ldr	r3, [pc, #260]	@ (80031d8 <HAL_GPIO_DeInit+0x214>)
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	43db      	mvns	r3, r3
 80030da:	493f      	ldr	r1, [pc, #252]	@ (80031d8 <HAL_GPIO_DeInit+0x214>)
 80030dc:	4013      	ands	r3, r2
 80030de:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	220f      	movs	r2, #15
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80030f0:	4a2e      	ldr	r2, [pc, #184]	@ (80031ac <HAL_GPIO_DeInit+0x1e8>)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	3302      	adds	r3, #2
 80030f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	43da      	mvns	r2, r3
 8003100:	482a      	ldr	r0, [pc, #168]	@ (80031ac <HAL_GPIO_DeInit+0x1e8>)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	400a      	ands	r2, r1
 8003108:	3302      	adds	r3, #2
 800310a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2103      	movs	r1, #3
 8003118:	fa01 f303 	lsl.w	r3, r1, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	401a      	ands	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	08da      	lsrs	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3208      	adds	r2, #8
 800312c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	220f      	movs	r2, #15
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43db      	mvns	r3, r3
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	08d2      	lsrs	r2, r2, #3
 8003144:	4019      	ands	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3208      	adds	r2, #8
 800314a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	2103      	movs	r1, #3
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	401a      	ands	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	2101      	movs	r1, #1
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	fa01 f303 	lsl.w	r3, r1, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	401a      	ands	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	2103      	movs	r1, #3
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	401a      	ands	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	3301      	adds	r3, #1
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2b0f      	cmp	r3, #15
 8003198:	f67f af22 	bls.w	8002fe0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	371c      	adds	r7, #28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40013800 	.word	0x40013800
 80031b0:	40020000 	.word	0x40020000
 80031b4:	40020400 	.word	0x40020400
 80031b8:	40020800 	.word	0x40020800
 80031bc:	40020c00 	.word	0x40020c00
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40021400 	.word	0x40021400
 80031c8:	40021800 	.word	0x40021800
 80031cc:	40021c00 	.word	0x40021c00
 80031d0:	40022000 	.word	0x40022000
 80031d4:	40022400 	.word	0x40022400
 80031d8:	40013c00 	.word	0x40013c00

080031dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
 80031e8:	4613      	mov	r3, r2
 80031ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031ec:	787b      	ldrb	r3, [r7, #1]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031f2:	887a      	ldrh	r2, [r7, #2]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031f8:	e003      	b.n	8003202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031fa:	887b      	ldrh	r3, [r7, #2]
 80031fc:	041a      	lsls	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	619a      	str	r2, [r3, #24]
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e12b      	b.n	800347a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fe fd04 	bl	8001c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2224      	movs	r2, #36	@ 0x24
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003262:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003272:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003274:	f001 ff82 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 8003278:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4a81      	ldr	r2, [pc, #516]	@ (8003484 <HAL_I2C_Init+0x274>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d807      	bhi.n	8003294 <HAL_I2C_Init+0x84>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4a80      	ldr	r2, [pc, #512]	@ (8003488 <HAL_I2C_Init+0x278>)
 8003288:	4293      	cmp	r3, r2
 800328a:	bf94      	ite	ls
 800328c:	2301      	movls	r3, #1
 800328e:	2300      	movhi	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	e006      	b.n	80032a2 <HAL_I2C_Init+0x92>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4a7d      	ldr	r2, [pc, #500]	@ (800348c <HAL_I2C_Init+0x27c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	bf94      	ite	ls
 800329c:	2301      	movls	r3, #1
 800329e:	2300      	movhi	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0e7      	b.n	800347a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4a78      	ldr	r2, [pc, #480]	@ (8003490 <HAL_I2C_Init+0x280>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	0c9b      	lsrs	r3, r3, #18
 80032b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003484 <HAL_I2C_Init+0x274>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d802      	bhi.n	80032e4 <HAL_I2C_Init+0xd4>
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	3301      	adds	r3, #1
 80032e2:	e009      	b.n	80032f8 <HAL_I2C_Init+0xe8>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80032ea:	fb02 f303 	mul.w	r3, r2, r3
 80032ee:	4a69      	ldr	r2, [pc, #420]	@ (8003494 <HAL_I2C_Init+0x284>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	099b      	lsrs	r3, r3, #6
 80032f6:	3301      	adds	r3, #1
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800330a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	495c      	ldr	r1, [pc, #368]	@ (8003484 <HAL_I2C_Init+0x274>)
 8003314:	428b      	cmp	r3, r1
 8003316:	d819      	bhi.n	800334c <HAL_I2C_Init+0x13c>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	1e59      	subs	r1, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	fbb1 f3f3 	udiv	r3, r1, r3
 8003326:	1c59      	adds	r1, r3, #1
 8003328:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800332c:	400b      	ands	r3, r1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_I2C_Init+0x138>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1e59      	subs	r1, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003340:	3301      	adds	r3, #1
 8003342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003346:	e051      	b.n	80033ec <HAL_I2C_Init+0x1dc>
 8003348:	2304      	movs	r3, #4
 800334a:	e04f      	b.n	80033ec <HAL_I2C_Init+0x1dc>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d111      	bne.n	8003378 <HAL_I2C_Init+0x168>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1e58      	subs	r0, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6859      	ldr	r1, [r3, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	440b      	add	r3, r1
 8003362:	fbb0 f3f3 	udiv	r3, r0, r3
 8003366:	3301      	adds	r3, #1
 8003368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	e012      	b.n	800339e <HAL_I2C_Init+0x18e>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1e58      	subs	r0, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6859      	ldr	r1, [r3, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	0099      	lsls	r1, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	fbb0 f3f3 	udiv	r3, r0, r3
 800338e:	3301      	adds	r3, #1
 8003390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Init+0x196>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e022      	b.n	80033ec <HAL_I2C_Init+0x1dc>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10e      	bne.n	80033cc <HAL_I2C_Init+0x1bc>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1e58      	subs	r0, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6859      	ldr	r1, [r3, #4]
 80033b6:	460b      	mov	r3, r1
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	440b      	add	r3, r1
 80033bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c0:	3301      	adds	r3, #1
 80033c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ca:	e00f      	b.n	80033ec <HAL_I2C_Init+0x1dc>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1e58      	subs	r0, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	0099      	lsls	r1, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	6809      	ldr	r1, [r1, #0]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800341a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6911      	ldr	r1, [r2, #16]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	68d2      	ldr	r2, [r2, #12]
 8003426:	4311      	orrs	r1, r2
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	430b      	orrs	r3, r1
 800342e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	000186a0 	.word	0x000186a0
 8003488:	001e847f 	.word	0x001e847f
 800348c:	003d08ff 	.word	0x003d08ff
 8003490:	431bde83 	.word	0x431bde83
 8003494:	10624dd3 	.word	0x10624dd3

08003498 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	4608      	mov	r0, r1
 80034a2:	4611      	mov	r1, r2
 80034a4:	461a      	mov	r2, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	817b      	strh	r3, [r7, #10]
 80034aa:	460b      	mov	r3, r1
 80034ac:	813b      	strh	r3, [r7, #8]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034b2:	f7ff fac5 	bl	8002a40 <HAL_GetTick>
 80034b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	f040 80d9 	bne.w	8003678 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2319      	movs	r3, #25
 80034cc:	2201      	movs	r2, #1
 80034ce:	496d      	ldr	r1, [pc, #436]	@ (8003684 <HAL_I2C_Mem_Write+0x1ec>)
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fc8b 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
 80034de:	e0cc      	b.n	800367a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_I2C_Mem_Write+0x56>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e0c5      	b.n	800367a <HAL_I2C_Mem_Write+0x1e2>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b01      	cmp	r3, #1
 8003502:	d007      	beq.n	8003514 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003522:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2221      	movs	r2, #33	@ 0x21
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2240      	movs	r2, #64	@ 0x40
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a3a      	ldr	r2, [r7, #32]
 800353e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003544:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4a4d      	ldr	r2, [pc, #308]	@ (8003688 <HAL_I2C_Mem_Write+0x1f0>)
 8003554:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003556:	88f8      	ldrh	r0, [r7, #6]
 8003558:	893a      	ldrh	r2, [r7, #8]
 800355a:	8979      	ldrh	r1, [r7, #10]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	4603      	mov	r3, r0
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 fac2 	bl	8003af0 <I2C_RequestMemoryWrite>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d052      	beq.n	8003618 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e081      	b.n	800367a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 fd50 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00d      	beq.n	80035a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	2b04      	cmp	r3, #4
 800358c:	d107      	bne.n	800359e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800359c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e06b      	b.n	800367a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	781a      	ldrb	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d11b      	bne.n	8003618 <HAL_I2C_Mem_Write+0x180>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d017      	beq.n	8003618 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	781a      	ldrb	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1aa      	bne.n	8003576 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 fd43 	bl	80040b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00d      	beq.n	800364c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003634:	2b04      	cmp	r3, #4
 8003636:	d107      	bne.n	8003648 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003646:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e016      	b.n	800367a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800365a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	e000      	b.n	800367a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003678:	2302      	movs	r3, #2
  }
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	00100002 	.word	0x00100002
 8003688:	ffff0000 	.word	0xffff0000

0800368c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08c      	sub	sp, #48	@ 0x30
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	4608      	mov	r0, r1
 8003696:	4611      	mov	r1, r2
 8003698:	461a      	mov	r2, r3
 800369a:	4603      	mov	r3, r0
 800369c:	817b      	strh	r3, [r7, #10]
 800369e:	460b      	mov	r3, r1
 80036a0:	813b      	strh	r3, [r7, #8]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036a6:	f7ff f9cb 	bl	8002a40 <HAL_GetTick>
 80036aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	f040 8214 	bne.w	8003ae2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	2319      	movs	r3, #25
 80036c0:	2201      	movs	r2, #1
 80036c2:	497b      	ldr	r1, [pc, #492]	@ (80038b0 <HAL_I2C_Mem_Read+0x224>)
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fb91 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
 80036d2:	e207      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_I2C_Mem_Read+0x56>
 80036de:	2302      	movs	r3, #2
 80036e0:	e200      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x458>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d007      	beq.n	8003708 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003716:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2222      	movs	r2, #34	@ 0x22
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2240      	movs	r2, #64	@ 0x40
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003732:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003738:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a5b      	ldr	r2, [pc, #364]	@ (80038b4 <HAL_I2C_Mem_Read+0x228>)
 8003748:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800374a:	88f8      	ldrh	r0, [r7, #6]
 800374c:	893a      	ldrh	r2, [r7, #8]
 800374e:	8979      	ldrh	r1, [r7, #10]
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	4603      	mov	r3, r0
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 fa5e 	bl	8003c1c <I2C_RequestMemoryRead>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e1bc      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376e:	2b00      	cmp	r3, #0
 8003770:	d113      	bne.n	800379a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003772:	2300      	movs	r3, #0
 8003774:	623b      	str	r3, [r7, #32]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	623b      	str	r3, [r7, #32]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	623b      	str	r3, [r7, #32]
 8003786:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e190      	b.n	8003abc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d11b      	bne.n	80037da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e170      	b.n	8003abc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d11b      	bne.n	800381a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003800:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003802:	2300      	movs	r3, #0
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	e150      	b.n	8003abc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003830:	e144      	b.n	8003abc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003836:	2b03      	cmp	r3, #3
 8003838:	f200 80f1 	bhi.w	8003a1e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003840:	2b01      	cmp	r3, #1
 8003842:	d123      	bne.n	800388c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003846:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fc79 	bl	8004140 <I2C_WaitOnRXNEFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e145      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800388a:	e117      	b.n	8003abc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003890:	2b02      	cmp	r3, #2
 8003892:	d14e      	bne.n	8003932 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800389a:	2200      	movs	r2, #0
 800389c:	4906      	ldr	r1, [pc, #24]	@ (80038b8 <HAL_I2C_Mem_Read+0x22c>)
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 faa4 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e11a      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x458>
 80038ae:	bf00      	nop
 80038b0:	00100002 	.word	0x00100002
 80038b4:	ffff0000 	.word	0xffff0000
 80038b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003930:	e0c4      	b.n	8003abc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003938:	2200      	movs	r2, #0
 800393a:	496c      	ldr	r1, [pc, #432]	@ (8003aec <HAL_I2C_Mem_Read+0x460>)
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fa55 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0cb      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800395a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003994:	2200      	movs	r2, #0
 8003996:	4955      	ldr	r1, [pc, #340]	@ (8003aec <HAL_I2C_Mem_Read+0x460>)
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fa27 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e09d      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a1c:	e04e      	b.n	8003abc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fb8c 	bl	8004140 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e058      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d124      	bne.n	8003abc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d107      	bne.n	8003a8a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a88:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f47f aeb6 	bne.w	8003832 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e000      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003ae2:	2302      	movs	r3, #2
  }
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3728      	adds	r7, #40	@ 0x28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	00010004 	.word	0x00010004

08003af0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	4608      	mov	r0, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	461a      	mov	r2, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	817b      	strh	r3, [r7, #10]
 8003b02:	460b      	mov	r3, r1
 8003b04:	813b      	strh	r3, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f960 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00d      	beq.n	8003b4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b40:	d103      	bne.n	8003b4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e05f      	b.n	8003c0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b4e:	897b      	ldrh	r3, [r7, #10]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	461a      	mov	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	6a3a      	ldr	r2, [r7, #32]
 8003b62:	492d      	ldr	r1, [pc, #180]	@ (8003c18 <I2C_RequestMemoryWrite+0x128>)
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f9bb 	bl	8003ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e04c      	b.n	8003c0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b8c:	6a39      	ldr	r1, [r7, #32]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fa46 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00d      	beq.n	8003bb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d107      	bne.n	8003bb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e02b      	b.n	8003c0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d105      	bne.n	8003bc8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bbc:	893b      	ldrh	r3, [r7, #8]
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	611a      	str	r2, [r3, #16]
 8003bc6:	e021      	b.n	8003c0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bc8:	893b      	ldrh	r3, [r7, #8]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd8:	6a39      	ldr	r1, [r7, #32]
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fa20 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00d      	beq.n	8003c02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d107      	bne.n	8003bfe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e005      	b.n	8003c0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c02:	893b      	ldrh	r3, [r7, #8]
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	00010002 	.word	0x00010002

08003c1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	4608      	mov	r0, r1
 8003c26:	4611      	mov	r1, r2
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	817b      	strh	r3, [r7, #10]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	813b      	strh	r3, [r7, #8]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f8c2 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00d      	beq.n	8003c8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c7c:	d103      	bne.n	8003c86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e0aa      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c8a:	897b      	ldrh	r3, [r7, #10]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	6a3a      	ldr	r2, [r7, #32]
 8003c9e:	4952      	ldr	r1, [pc, #328]	@ (8003de8 <I2C_RequestMemoryRead+0x1cc>)
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f91d 	bl	8003ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e097      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc8:	6a39      	ldr	r1, [r7, #32]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f9a8 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00d      	beq.n	8003cf2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d107      	bne.n	8003cee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e076      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d105      	bne.n	8003d04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf8:	893b      	ldrh	r3, [r7, #8]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	611a      	str	r2, [r3, #16]
 8003d02:	e021      	b.n	8003d48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d04:	893b      	ldrh	r3, [r7, #8]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d14:	6a39      	ldr	r1, [r7, #32]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f982 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d107      	bne.n	8003d3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e050      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d3e:	893b      	ldrh	r3, [r7, #8]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d4a:	6a39      	ldr	r1, [r7, #32]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f967 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00d      	beq.n	8003d74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d107      	bne.n	8003d70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e035      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f82b 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00d      	beq.n	8003db8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003daa:	d103      	bne.n	8003db4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003db2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e013      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003db8:	897b      	ldrh	r3, [r7, #10]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dca:	6a3a      	ldr	r2, [r7, #32]
 8003dcc:	4906      	ldr	r1, [pc, #24]	@ (8003de8 <I2C_RequestMemoryRead+0x1cc>)
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f886 	bl	8003ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	00010002 	.word	0x00010002

08003dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dfc:	e048      	b.n	8003e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d044      	beq.n	8003e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e06:	f7fe fe1b 	bl	8002a40 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d302      	bcc.n	8003e1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d139      	bne.n	8003e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	0c1b      	lsrs	r3, r3, #16
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d10d      	bne.n	8003e42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	43da      	mvns	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	4013      	ands	r3, r2
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	e00c      	b.n	8003e5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	43da      	mvns	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	bf0c      	ite	eq
 8003e54:	2301      	moveq	r3, #1
 8003e56:	2300      	movne	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d116      	bne.n	8003e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e023      	b.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	0c1b      	lsrs	r3, r3, #16
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d10d      	bne.n	8003eb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	43da      	mvns	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf0c      	ite	eq
 8003eac:	2301      	moveq	r3, #1
 8003eae:	2300      	movne	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	e00c      	b.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	43da      	mvns	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d093      	beq.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003eee:	e071      	b.n	8003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003efe:	d123      	bne.n	8003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	f043 0204 	orr.w	r2, r3, #4
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e067      	b.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4e:	d041      	beq.n	8003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f50:	f7fe fd76 	bl	8002a40 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d302      	bcc.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d136      	bne.n	8003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	0c1b      	lsrs	r3, r3, #16
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d10c      	bne.n	8003f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	43da      	mvns	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bf14      	ite	ne
 8003f82:	2301      	movne	r3, #1
 8003f84:	2300      	moveq	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	e00b      	b.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	43da      	mvns	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4013      	ands	r3, r2
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d016      	beq.n	8003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc0:	f043 0220 	orr.w	r2, r3, #32
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e021      	b.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	0c1b      	lsrs	r3, r3, #16
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d10c      	bne.n	8003ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	43da      	mvns	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bf14      	ite	ne
 8003ff0:	2301      	movne	r3, #1
 8003ff2:	2300      	moveq	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	e00b      	b.n	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	43da      	mvns	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf14      	ite	ne
 800400a:	2301      	movne	r3, #1
 800400c:	2300      	moveq	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	f47f af6d 	bne.w	8003ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800402c:	e034      	b.n	8004098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f8e3 	bl	80041fa <I2C_IsAcknowledgeFailed>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e034      	b.n	80040a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d028      	beq.n	8004098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004046:	f7fe fcfb 	bl	8002a40 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	d302      	bcc.n	800405c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d11d      	bne.n	8004098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004066:	2b80      	cmp	r3, #128	@ 0x80
 8004068:	d016      	beq.n	8004098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	f043 0220 	orr.w	r2, r3, #32
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e007      	b.n	80040a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a2:	2b80      	cmp	r3, #128	@ 0x80
 80040a4:	d1c3      	bne.n	800402e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040bc:	e034      	b.n	8004128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f89b 	bl	80041fa <I2C_IsAcknowledgeFailed>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e034      	b.n	8004138 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d028      	beq.n	8004128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d6:	f7fe fcb3 	bl	8002a40 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d302      	bcc.n	80040ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d11d      	bne.n	8004128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d016      	beq.n	8004128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e007      	b.n	8004138 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b04      	cmp	r3, #4
 8004134:	d1c3      	bne.n	80040be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800414c:	e049      	b.n	80041e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b10      	cmp	r3, #16
 800415a:	d119      	bne.n	8004190 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0210 	mvn.w	r2, #16
 8004164:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e030      	b.n	80041f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004190:	f7fe fc56 	bl	8002a40 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	429a      	cmp	r2, r3
 800419e:	d302      	bcc.n	80041a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d11d      	bne.n	80041e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b0:	2b40      	cmp	r3, #64	@ 0x40
 80041b2:	d016      	beq.n	80041e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ce:	f043 0220 	orr.w	r2, r3, #32
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e007      	b.n	80041f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ec:	2b40      	cmp	r3, #64	@ 0x40
 80041ee:	d1ae      	bne.n	800414e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800420c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004210:	d11b      	bne.n	800424a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800421a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	f043 0204 	orr.w	r2, r3, #4
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b20      	cmp	r3, #32
 800426c:	d129      	bne.n	80042c2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2224      	movs	r2, #36	@ 0x24
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0201 	bic.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0210 	bic.w	r2, r2, #16
 8004294:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	e000      	b.n	80042c4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
  }
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d12a      	bne.n	8004340 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2224      	movs	r2, #36	@ 0x24
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0201 	bic.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800430a:	89fb      	ldrh	r3, [r7, #14]
 800430c:	f023 030f 	bic.w	r3, r3, #15
 8004310:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	b29a      	uxth	r2, r3
 8004316:	89fb      	ldrh	r3, [r7, #14]
 8004318:	4313      	orrs	r3, r2
 800431a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	89fa      	ldrh	r2, [r7, #14]
 8004322:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	e000      	b.n	8004342 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004340:	2302      	movs	r3, #2
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
	...

08004350 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e0bf      	b.n	80044e2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fd fcce 	bl	8001d18 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004392:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6999      	ldr	r1, [r3, #24]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043a8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6899      	ldr	r1, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	4b4a      	ldr	r3, [pc, #296]	@ (80044ec <HAL_LTDC_Init+0x19c>)
 80043c4:	400b      	ands	r3, r1
 80043c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	041b      	lsls	r3, r3, #16
 80043ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6899      	ldr	r1, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68d9      	ldr	r1, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	4b3e      	ldr	r3, [pc, #248]	@ (80044ec <HAL_LTDC_Init+0x19c>)
 80043f2:	400b      	ands	r3, r1
 80043f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	041b      	lsls	r3, r3, #16
 80043fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68d9      	ldr	r1, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1a      	ldr	r2, [r3, #32]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6919      	ldr	r1, [r3, #16]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4b33      	ldr	r3, [pc, #204]	@ (80044ec <HAL_LTDC_Init+0x19c>)
 8004420:	400b      	ands	r3, r1
 8004422:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	041b      	lsls	r3, r3, #16
 800442a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6919      	ldr	r1, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6959      	ldr	r1, [r3, #20]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b27      	ldr	r3, [pc, #156]	@ (80044ec <HAL_LTDC_Init+0x19c>)
 800444e:	400b      	ands	r3, r1
 8004450:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004456:	041b      	lsls	r3, r3, #16
 8004458:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6959      	ldr	r1, [r3, #20]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004480:	041b      	lsls	r3, r3, #16
 8004482:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004492:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0206 	orr.w	r2, r2, #6
 80044be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	f000f800 	.word	0xf000f800

080044f0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80044f0:	b5b0      	push	{r4, r5, r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_LTDC_ConfigLayer+0x1a>
 8004506:	2302      	movs	r3, #2
 8004508:	e02c      	b.n	8004564 <HAL_LTDC_ConfigLayer+0x74>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2202      	movs	r2, #2
 8004516:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2134      	movs	r1, #52	@ 0x34
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	4413      	add	r3, r2
 8004526:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	4614      	mov	r4, r2
 800452e:	461d      	mov	r5, r3
 8004530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800453a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f811 	bl	800456c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2201      	movs	r2, #1
 8004550:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bdb0      	pop	{r4, r5, r7, pc}

0800456c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800456c:	b480      	push	{r7}
 800456e:	b089      	sub	sp, #36	@ 0x24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	0c1b      	lsrs	r3, r3, #16
 8004584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004588:	4413      	add	r3, r2
 800458a:	041b      	lsls	r3, r3, #16
 800458c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	01db      	lsls	r3, r3, #7
 8004598:	4413      	add	r3, r2
 800459a:	3384      	adds	r3, #132	@ 0x84
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	4611      	mov	r1, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	01d2      	lsls	r2, r2, #7
 80045a8:	440a      	add	r2, r1
 80045aa:	3284      	adds	r2, #132	@ 0x84
 80045ac:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80045b0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	0c1b      	lsrs	r3, r3, #16
 80045be:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045c2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045c4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4619      	mov	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	01db      	lsls	r3, r3, #7
 80045d0:	440b      	add	r3, r1
 80045d2:	3384      	adds	r3, #132	@ 0x84
 80045d4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045da:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045ea:	4413      	add	r3, r2
 80045ec:	041b      	lsls	r3, r3, #16
 80045ee:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	01db      	lsls	r3, r3, #7
 80045fa:	4413      	add	r3, r2
 80045fc:	3384      	adds	r3, #132	@ 0x84
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	4611      	mov	r1, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	01d2      	lsls	r2, r2, #7
 800460a:	440a      	add	r2, r1
 800460c:	3284      	adds	r2, #132	@ 0x84
 800460e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004612:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004622:	4413      	add	r3, r2
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4619      	mov	r1, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	01db      	lsls	r3, r3, #7
 8004630:	440b      	add	r3, r1
 8004632:	3384      	adds	r3, #132	@ 0x84
 8004634:	4619      	mov	r1, r3
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4313      	orrs	r3, r2
 800463a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	01db      	lsls	r3, r3, #7
 8004646:	4413      	add	r3, r2
 8004648:	3384      	adds	r3, #132	@ 0x84
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	4611      	mov	r1, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	01d2      	lsls	r2, r2, #7
 8004656:	440a      	add	r2, r1
 8004658:	3284      	adds	r2, #132	@ 0x84
 800465a:	f023 0307 	bic.w	r3, r3, #7
 800465e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	01db      	lsls	r3, r3, #7
 800466a:	4413      	add	r3, r2
 800466c:	3384      	adds	r3, #132	@ 0x84
 800466e:	461a      	mov	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004686:	041b      	lsls	r3, r3, #16
 8004688:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	061b      	lsls	r3, r3, #24
 8004690:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	01db      	lsls	r3, r3, #7
 800469c:	4413      	add	r3, r2
 800469e:	3384      	adds	r3, #132	@ 0x84
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	01db      	lsls	r3, r3, #7
 80046ac:	4413      	add	r3, r2
 80046ae:	3384      	adds	r3, #132	@ 0x84
 80046b0:	461a      	mov	r2, r3
 80046b2:	2300      	movs	r3, #0
 80046b4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046bc:	461a      	mov	r2, r3
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	431a      	orrs	r2, r3
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	431a      	orrs	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4619      	mov	r1, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	01db      	lsls	r3, r3, #7
 80046d0:	440b      	add	r3, r1
 80046d2:	3384      	adds	r3, #132	@ 0x84
 80046d4:	4619      	mov	r1, r3
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	01db      	lsls	r3, r3, #7
 80046e6:	4413      	add	r3, r2
 80046e8:	3384      	adds	r3, #132	@ 0x84
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	6812      	ldr	r2, [r2, #0]
 80046f0:	4611      	mov	r1, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	01d2      	lsls	r2, r2, #7
 80046f6:	440a      	add	r2, r1
 80046f8:	3284      	adds	r2, #132	@ 0x84
 80046fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046fe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	01db      	lsls	r3, r3, #7
 800470a:	4413      	add	r3, r2
 800470c:	3384      	adds	r3, #132	@ 0x84
 800470e:	461a      	mov	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	01db      	lsls	r3, r3, #7
 8004720:	4413      	add	r3, r2
 8004722:	3384      	adds	r3, #132	@ 0x84
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	4611      	mov	r1, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	01d2      	lsls	r2, r2, #7
 8004730:	440a      	add	r2, r1
 8004732:	3284      	adds	r2, #132	@ 0x84
 8004734:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004738:	f023 0307 	bic.w	r3, r3, #7
 800473c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	68f9      	ldr	r1, [r7, #12]
 8004748:	6809      	ldr	r1, [r1, #0]
 800474a:	4608      	mov	r0, r1
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	01c9      	lsls	r1, r1, #7
 8004750:	4401      	add	r1, r0
 8004752:	3184      	adds	r1, #132	@ 0x84
 8004754:	4313      	orrs	r3, r2
 8004756:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	01db      	lsls	r3, r3, #7
 8004762:	4413      	add	r3, r2
 8004764:	3384      	adds	r3, #132	@ 0x84
 8004766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	01db      	lsls	r3, r3, #7
 8004772:	4413      	add	r3, r2
 8004774:	3384      	adds	r3, #132	@ 0x84
 8004776:	461a      	mov	r2, r3
 8004778:	2300      	movs	r3, #0
 800477a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	01db      	lsls	r3, r3, #7
 8004786:	4413      	add	r3, r2
 8004788:	3384      	adds	r3, #132	@ 0x84
 800478a:	461a      	mov	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800479a:	2304      	movs	r3, #4
 800479c:	61fb      	str	r3, [r7, #28]
 800479e:	e01b      	b.n	80047d8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d102      	bne.n	80047ae <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80047a8:	2303      	movs	r3, #3
 80047aa:	61fb      	str	r3, [r7, #28]
 80047ac:	e014      	b.n	80047d8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d00b      	beq.n	80047ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d007      	beq.n	80047ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d003      	beq.n	80047ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047ca:	2b07      	cmp	r3, #7
 80047cc:	d102      	bne.n	80047d4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80047ce:	2302      	movs	r3, #2
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	e001      	b.n	80047d8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80047d4:	2301      	movs	r3, #1
 80047d6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	01db      	lsls	r3, r3, #7
 80047e2:	4413      	add	r3, r2
 80047e4:	3384      	adds	r3, #132	@ 0x84
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	4611      	mov	r1, r2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	01d2      	lsls	r2, r2, #7
 80047f2:	440a      	add	r2, r1
 80047f4:	3284      	adds	r2, #132	@ 0x84
 80047f6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80047fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	fb02 f303 	mul.w	r3, r2, r3
 8004806:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	1acb      	subs	r3, r1, r3
 8004812:	69f9      	ldr	r1, [r7, #28]
 8004814:	fb01 f303 	mul.w	r3, r1, r3
 8004818:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800481a:	68f9      	ldr	r1, [r7, #12]
 800481c:	6809      	ldr	r1, [r1, #0]
 800481e:	4608      	mov	r0, r1
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	01c9      	lsls	r1, r1, #7
 8004824:	4401      	add	r1, r0
 8004826:	3184      	adds	r1, #132	@ 0x84
 8004828:	4313      	orrs	r3, r2
 800482a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	01db      	lsls	r3, r3, #7
 8004836:	4413      	add	r3, r2
 8004838:	3384      	adds	r3, #132	@ 0x84
 800483a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	4611      	mov	r1, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	01d2      	lsls	r2, r2, #7
 8004846:	440a      	add	r2, r1
 8004848:	3284      	adds	r2, #132	@ 0x84
 800484a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800484e:	f023 0307 	bic.w	r3, r3, #7
 8004852:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	01db      	lsls	r3, r3, #7
 800485e:	4413      	add	r3, r2
 8004860:	3384      	adds	r3, #132	@ 0x84
 8004862:	461a      	mov	r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004868:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	01db      	lsls	r3, r3, #7
 8004874:	4413      	add	r3, r2
 8004876:	3384      	adds	r3, #132	@ 0x84
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	6812      	ldr	r2, [r2, #0]
 800487e:	4611      	mov	r1, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	01d2      	lsls	r2, r2, #7
 8004884:	440a      	add	r2, r1
 8004886:	3284      	adds	r2, #132	@ 0x84
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	6013      	str	r3, [r2, #0]
}
 800488e:	bf00      	nop
 8004890:	3724      	adds	r7, #36	@ 0x24
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e267      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d075      	beq.n	80049a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048ba:	4b88      	ldr	r3, [pc, #544]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 030c 	and.w	r3, r3, #12
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d00c      	beq.n	80048e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c6:	4b85      	ldr	r3, [pc, #532]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d112      	bne.n	80048f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d2:	4b82      	ldr	r3, [pc, #520]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048de:	d10b      	bne.n	80048f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e0:	4b7e      	ldr	r3, [pc, #504]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d05b      	beq.n	80049a4 <HAL_RCC_OscConfig+0x108>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d157      	bne.n	80049a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e242      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004900:	d106      	bne.n	8004910 <HAL_RCC_OscConfig+0x74>
 8004902:	4b76      	ldr	r3, [pc, #472]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a75      	ldr	r2, [pc, #468]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 8004908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e01d      	b.n	800494c <HAL_RCC_OscConfig+0xb0>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004918:	d10c      	bne.n	8004934 <HAL_RCC_OscConfig+0x98>
 800491a:	4b70      	ldr	r3, [pc, #448]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a6f      	ldr	r2, [pc, #444]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 8004920:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	4b6d      	ldr	r3, [pc, #436]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a6c      	ldr	r2, [pc, #432]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e00b      	b.n	800494c <HAL_RCC_OscConfig+0xb0>
 8004934:	4b69      	ldr	r3, [pc, #420]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a68      	ldr	r2, [pc, #416]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 800493a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	4b66      	ldr	r3, [pc, #408]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a65      	ldr	r2, [pc, #404]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 8004946:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800494a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d013      	beq.n	800497c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004954:	f7fe f874 	bl	8002a40 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800495c:	f7fe f870 	bl	8002a40 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b64      	cmp	r3, #100	@ 0x64
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e207      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496e:	4b5b      	ldr	r3, [pc, #364]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0xc0>
 800497a:	e014      	b.n	80049a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497c:	f7fe f860 	bl	8002a40 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004984:	f7fe f85c 	bl	8002a40 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	@ 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e1f3      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004996:	4b51      	ldr	r3, [pc, #324]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0xe8>
 80049a2:	e000      	b.n	80049a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d063      	beq.n	8004a7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049b2:	4b4a      	ldr	r3, [pc, #296]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00b      	beq.n	80049d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049be:	4b47      	ldr	r3, [pc, #284]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d11c      	bne.n	8004a04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ca:	4b44      	ldr	r3, [pc, #272]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d116      	bne.n	8004a04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d6:	4b41      	ldr	r3, [pc, #260]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_RCC_OscConfig+0x152>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d001      	beq.n	80049ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e1c7      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ee:	4b3b      	ldr	r3, [pc, #236]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4937      	ldr	r1, [pc, #220]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a02:	e03a      	b.n	8004a7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a0c:	4b34      	ldr	r3, [pc, #208]	@ (8004ae0 <HAL_RCC_OscConfig+0x244>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7fe f815 	bl	8002a40 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a1a:	f7fe f811 	bl	8002a40 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e1a8      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0f0      	beq.n	8004a1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a38:	4b28      	ldr	r3, [pc, #160]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4925      	ldr	r1, [pc, #148]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	600b      	str	r3, [r1, #0]
 8004a4c:	e015      	b.n	8004a7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ae0 <HAL_RCC_OscConfig+0x244>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fd fff4 	bl	8002a40 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a5c:	f7fd fff0 	bl	8002a40 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e187      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d036      	beq.n	8004af4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ae4 <HAL_RCC_OscConfig+0x248>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a94:	f7fd ffd4 	bl	8002a40 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a9c:	f7fd ffd0 	bl	8002a40 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e167      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aae:	4b0b      	ldr	r3, [pc, #44]	@ (8004adc <HAL_RCC_OscConfig+0x240>)
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x200>
 8004aba:	e01b      	b.n	8004af4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004abc:	4b09      	ldr	r3, [pc, #36]	@ (8004ae4 <HAL_RCC_OscConfig+0x248>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac2:	f7fd ffbd 	bl	8002a40 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac8:	e00e      	b.n	8004ae8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aca:	f7fd ffb9 	bl	8002a40 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d907      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e150      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	42470000 	.word	0x42470000
 8004ae4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae8:	4b88      	ldr	r3, [pc, #544]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ea      	bne.n	8004aca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8097 	beq.w	8004c30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b02:	2300      	movs	r3, #0
 8004b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b06:	4b81      	ldr	r3, [pc, #516]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10f      	bne.n	8004b32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	4b7d      	ldr	r3, [pc, #500]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	4a7c      	ldr	r2, [pc, #496]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b22:	4b7a      	ldr	r3, [pc, #488]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b32:	4b77      	ldr	r3, [pc, #476]	@ (8004d10 <HAL_RCC_OscConfig+0x474>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d118      	bne.n	8004b70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b3e:	4b74      	ldr	r3, [pc, #464]	@ (8004d10 <HAL_RCC_OscConfig+0x474>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a73      	ldr	r2, [pc, #460]	@ (8004d10 <HAL_RCC_OscConfig+0x474>)
 8004b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4a:	f7fd ff79 	bl	8002a40 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b52:	f7fd ff75 	bl	8002a40 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e10c      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b64:	4b6a      	ldr	r3, [pc, #424]	@ (8004d10 <HAL_RCC_OscConfig+0x474>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d106      	bne.n	8004b86 <HAL_RCC_OscConfig+0x2ea>
 8004b78:	4b64      	ldr	r3, [pc, #400]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7c:	4a63      	ldr	r2, [pc, #396]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b84:	e01c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x324>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b05      	cmp	r3, #5
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x30c>
 8004b8e:	4b5f      	ldr	r3, [pc, #380]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b92:	4a5e      	ldr	r2, [pc, #376]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b94:	f043 0304 	orr.w	r3, r3, #4
 8004b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b9a:	4b5c      	ldr	r3, [pc, #368]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9e:	4a5b      	ldr	r2, [pc, #364]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba6:	e00b      	b.n	8004bc0 <HAL_RCC_OscConfig+0x324>
 8004ba8:	4b58      	ldr	r3, [pc, #352]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bac:	4a57      	ldr	r2, [pc, #348]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004bae:	f023 0301 	bic.w	r3, r3, #1
 8004bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb4:	4b55      	ldr	r3, [pc, #340]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb8:	4a54      	ldr	r2, [pc, #336]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004bba:	f023 0304 	bic.w	r3, r3, #4
 8004bbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d015      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc8:	f7fd ff3a 	bl	8002a40 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bce:	e00a      	b.n	8004be6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd0:	f7fd ff36 	bl	8002a40 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e0cb      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be6:	4b49      	ldr	r3, [pc, #292]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0ee      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x334>
 8004bf2:	e014      	b.n	8004c1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf4:	f7fd ff24 	bl	8002a40 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfc:	f7fd ff20 	bl	8002a40 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e0b5      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c12:	4b3e      	ldr	r3, [pc, #248]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1ee      	bne.n	8004bfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c1e:	7dfb      	ldrb	r3, [r7, #23]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d105      	bne.n	8004c30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c24:	4b39      	ldr	r3, [pc, #228]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c28:	4a38      	ldr	r2, [pc, #224]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004c2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 80a1 	beq.w	8004d7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c3a:	4b34      	ldr	r3, [pc, #208]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 030c 	and.w	r3, r3, #12
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d05c      	beq.n	8004d00 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d141      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4e:	4b31      	ldr	r3, [pc, #196]	@ (8004d14 <HAL_RCC_OscConfig+0x478>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c54:	f7fd fef4 	bl	8002a40 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5c:	f7fd fef0 	bl	8002a40 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e087      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6e:	4b27      	ldr	r3, [pc, #156]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69da      	ldr	r2, [r3, #28]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c88:	019b      	lsls	r3, r3, #6
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c90:	085b      	lsrs	r3, r3, #1
 8004c92:	3b01      	subs	r3, #1
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	061b      	lsls	r3, r3, #24
 8004c9e:	491b      	ldr	r1, [pc, #108]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d14 <HAL_RCC_OscConfig+0x478>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004caa:	f7fd fec9 	bl	8002a40 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb2:	f7fd fec5 	bl	8002a40 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e05c      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc4:	4b11      	ldr	r3, [pc, #68]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x416>
 8004cd0:	e054      	b.n	8004d7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd2:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <HAL_RCC_OscConfig+0x478>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd8:	f7fd feb2 	bl	8002a40 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7fd feae 	bl	8002a40 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e045      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf2:	4b06      	ldr	r3, [pc, #24]	@ (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x444>
 8004cfe:	e03d      	b.n	8004d7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e038      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	40007000 	.word	0x40007000
 8004d14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d18:	4b1b      	ldr	r3, [pc, #108]	@ (8004d88 <HAL_RCC_OscConfig+0x4ec>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d028      	beq.n	8004d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d121      	bne.n	8004d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d11a      	bne.n	8004d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d48:	4013      	ands	r3, r2
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d111      	bne.n	8004d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5e:	085b      	lsrs	r3, r3, #1
 8004d60:	3b01      	subs	r3, #1
 8004d62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d107      	bne.n	8004d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800

08004d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0cc      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004da0:	4b68      	ldr	r3, [pc, #416]	@ (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d90c      	bls.n	8004dc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b65      	ldr	r3, [pc, #404]	@ (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db6:	4b63      	ldr	r3, [pc, #396]	@ (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0b8      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d020      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004de0:	4b59      	ldr	r3, [pc, #356]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4a58      	ldr	r2, [pc, #352]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004dea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004df8:	4b53      	ldr	r3, [pc, #332]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4a52      	ldr	r2, [pc, #328]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e04:	4b50      	ldr	r3, [pc, #320]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	494d      	ldr	r1, [pc, #308]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d044      	beq.n	8004eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d107      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2a:	4b47      	ldr	r3, [pc, #284]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d119      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e07f      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d003      	beq.n	8004e4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e06f      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e067      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e6a:	4b37      	ldr	r3, [pc, #220]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4934      	ldr	r1, [pc, #208]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e7c:	f7fd fde0 	bl	8002a40 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fd fddc 	bl	8002a40 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e04f      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 020c 	and.w	r2, r3, #12
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d1eb      	bne.n	8004e84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eac:	4b25      	ldr	r3, [pc, #148]	@ (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d20c      	bcs.n	8004ed4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b22      	ldr	r3, [pc, #136]	@ (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec2:	4b20      	ldr	r3, [pc, #128]	@ (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e032      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee0:	4b19      	ldr	r3, [pc, #100]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4916      	ldr	r1, [pc, #88]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004efe:	4b12      	ldr	r3, [pc, #72]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	490e      	ldr	r1, [pc, #56]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f12:	f000 f821 	bl	8004f58 <HAL_RCC_GetSysClockFreq>
 8004f16:	4602      	mov	r2, r0
 8004f18:	4b0b      	ldr	r3, [pc, #44]	@ (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	091b      	lsrs	r3, r3, #4
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	490a      	ldr	r1, [pc, #40]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004f24:	5ccb      	ldrb	r3, [r1, r3]
 8004f26:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2a:	4a09      	ldr	r2, [pc, #36]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f2e:	4b09      	ldr	r3, [pc, #36]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fd fd40 	bl	80029b8 <HAL_InitTick>

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40023c00 	.word	0x40023c00
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	08008210 	.word	0x08008210
 8004f50:	20000010 	.word	0x20000010
 8004f54:	20000014 	.word	0x20000014

08004f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f5c:	b094      	sub	sp, #80	@ 0x50
 8004f5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f70:	4b79      	ldr	r3, [pc, #484]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 030c 	and.w	r3, r3, #12
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d00d      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x40>
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	f200 80e1 	bhi.w	8005144 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_RCC_GetSysClockFreq+0x34>
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d003      	beq.n	8004f92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f8a:	e0db      	b.n	8005144 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f8c:	4b73      	ldr	r3, [pc, #460]	@ (800515c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f90:	e0db      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f92:	4b73      	ldr	r3, [pc, #460]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f96:	e0d8      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f98:	4b6f      	ldr	r3, [pc, #444]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fa0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fa2:	4b6d      	ldr	r3, [pc, #436]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d063      	beq.n	8005076 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fae:	4b6a      	ldr	r3, [pc, #424]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	099b      	lsrs	r3, r3, #6
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fca:	4622      	mov	r2, r4
 8004fcc:	462b      	mov	r3, r5
 8004fce:	f04f 0000 	mov.w	r0, #0
 8004fd2:	f04f 0100 	mov.w	r1, #0
 8004fd6:	0159      	lsls	r1, r3, #5
 8004fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fdc:	0150      	lsls	r0, r2, #5
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	1a51      	subs	r1, r2, r1
 8004fe6:	6139      	str	r1, [r7, #16]
 8004fe8:	4629      	mov	r1, r5
 8004fea:	eb63 0301 	sbc.w	r3, r3, r1
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ffc:	4659      	mov	r1, fp
 8004ffe:	018b      	lsls	r3, r1, #6
 8005000:	4651      	mov	r1, sl
 8005002:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005006:	4651      	mov	r1, sl
 8005008:	018a      	lsls	r2, r1, #6
 800500a:	4651      	mov	r1, sl
 800500c:	ebb2 0801 	subs.w	r8, r2, r1
 8005010:	4659      	mov	r1, fp
 8005012:	eb63 0901 	sbc.w	r9, r3, r1
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005022:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005026:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800502a:	4690      	mov	r8, r2
 800502c:	4699      	mov	r9, r3
 800502e:	4623      	mov	r3, r4
 8005030:	eb18 0303 	adds.w	r3, r8, r3
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	462b      	mov	r3, r5
 8005038:	eb49 0303 	adc.w	r3, r9, r3
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800504a:	4629      	mov	r1, r5
 800504c:	024b      	lsls	r3, r1, #9
 800504e:	4621      	mov	r1, r4
 8005050:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005054:	4621      	mov	r1, r4
 8005056:	024a      	lsls	r2, r1, #9
 8005058:	4610      	mov	r0, r2
 800505a:	4619      	mov	r1, r3
 800505c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800505e:	2200      	movs	r2, #0
 8005060:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005062:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005064:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005068:	f7fb f912 	bl	8000290 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4613      	mov	r3, r2
 8005072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005074:	e058      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005076:	4b38      	ldr	r3, [pc, #224]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x200>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	099b      	lsrs	r3, r3, #6
 800507c:	2200      	movs	r2, #0
 800507e:	4618      	mov	r0, r3
 8005080:	4611      	mov	r1, r2
 8005082:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005086:	623b      	str	r3, [r7, #32]
 8005088:	2300      	movs	r3, #0
 800508a:	627b      	str	r3, [r7, #36]	@ 0x24
 800508c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005090:	4642      	mov	r2, r8
 8005092:	464b      	mov	r3, r9
 8005094:	f04f 0000 	mov.w	r0, #0
 8005098:	f04f 0100 	mov.w	r1, #0
 800509c:	0159      	lsls	r1, r3, #5
 800509e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050a2:	0150      	lsls	r0, r2, #5
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4641      	mov	r1, r8
 80050aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80050ae:	4649      	mov	r1, r9
 80050b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050c8:	ebb2 040a 	subs.w	r4, r2, sl
 80050cc:	eb63 050b 	sbc.w	r5, r3, fp
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	00eb      	lsls	r3, r5, #3
 80050da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050de:	00e2      	lsls	r2, r4, #3
 80050e0:	4614      	mov	r4, r2
 80050e2:	461d      	mov	r5, r3
 80050e4:	4643      	mov	r3, r8
 80050e6:	18e3      	adds	r3, r4, r3
 80050e8:	603b      	str	r3, [r7, #0]
 80050ea:	464b      	mov	r3, r9
 80050ec:	eb45 0303 	adc.w	r3, r5, r3
 80050f0:	607b      	str	r3, [r7, #4]
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050fe:	4629      	mov	r1, r5
 8005100:	028b      	lsls	r3, r1, #10
 8005102:	4621      	mov	r1, r4
 8005104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005108:	4621      	mov	r1, r4
 800510a:	028a      	lsls	r2, r1, #10
 800510c:	4610      	mov	r0, r2
 800510e:	4619      	mov	r1, r3
 8005110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005112:	2200      	movs	r2, #0
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	61fa      	str	r2, [r7, #28]
 8005118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800511c:	f7fb f8b8 	bl	8000290 <__aeabi_uldivmod>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4613      	mov	r3, r2
 8005126:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005128:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x200>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	0c1b      	lsrs	r3, r3, #16
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	3301      	adds	r3, #1
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005138:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800513a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005142:	e002      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005144:	4b05      	ldr	r3, [pc, #20]	@ (800515c <HAL_RCC_GetSysClockFreq+0x204>)
 8005146:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800514a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800514c:	4618      	mov	r0, r3
 800514e:	3750      	adds	r7, #80	@ 0x50
 8005150:	46bd      	mov	sp, r7
 8005152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005156:	bf00      	nop
 8005158:	40023800 	.word	0x40023800
 800515c:	00f42400 	.word	0x00f42400
 8005160:	007a1200 	.word	0x007a1200

08005164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005168:	4b03      	ldr	r3, [pc, #12]	@ (8005178 <HAL_RCC_GetHCLKFreq+0x14>)
 800516a:	681b      	ldr	r3, [r3, #0]
}
 800516c:	4618      	mov	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	20000010 	.word	0x20000010

0800517c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005180:	f7ff fff0 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 8005184:	4602      	mov	r2, r0
 8005186:	4b05      	ldr	r3, [pc, #20]	@ (800519c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	0a9b      	lsrs	r3, r3, #10
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	4903      	ldr	r1, [pc, #12]	@ (80051a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005192:	5ccb      	ldrb	r3, [r1, r3]
 8005194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005198:	4618      	mov	r0, r3
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40023800 	.word	0x40023800
 80051a0:	08008220 	.word	0x08008220

080051a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10b      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d105      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d075      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051d8:	4b91      	ldr	r3, [pc, #580]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051de:	f7fd fc2f 	bl	8002a40 <HAL_GetTick>
 80051e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051e4:	e008      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051e6:	f7fd fc2b 	bl	8002a40 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e189      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051f8:	4b8a      	ldr	r3, [pc, #552]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1f0      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d009      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	019a      	lsls	r2, r3, #6
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	071b      	lsls	r3, r3, #28
 800521c:	4981      	ldr	r1, [pc, #516]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d01f      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005230:	4b7c      	ldr	r3, [pc, #496]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005236:	0f1b      	lsrs	r3, r3, #28
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	019a      	lsls	r2, r3, #6
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	061b      	lsls	r3, r3, #24
 800524a:	431a      	orrs	r2, r3
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	071b      	lsls	r3, r3, #28
 8005250:	4974      	ldr	r1, [pc, #464]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005258:	4b72      	ldr	r3, [pc, #456]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800525a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800525e:	f023 021f 	bic.w	r2, r3, #31
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	3b01      	subs	r3, #1
 8005268:	496e      	ldr	r1, [pc, #440]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00d      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	019a      	lsls	r2, r3, #6
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	061b      	lsls	r3, r3, #24
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	071b      	lsls	r3, r3, #28
 8005290:	4964      	ldr	r1, [pc, #400]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005298:	4b61      	ldr	r3, [pc, #388]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800529e:	f7fd fbcf 	bl	8002a40 <HAL_GetTick>
 80052a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052a4:	e008      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052a6:	f7fd fbcb 	bl	8002a40 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e129      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0f0      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d105      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d079      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052dc:	4b52      	ldr	r3, [pc, #328]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052e2:	f7fd fbad 	bl	8002a40 <HAL_GetTick>
 80052e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052e8:	e008      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052ea:	f7fd fba9 	bl	8002a40 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e107      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052fc:	4b49      	ldr	r3, [pc, #292]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005308:	d0ef      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d020      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005316:	4b43      	ldr	r3, [pc, #268]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531c:	0f1b      	lsrs	r3, r3, #28
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	019a      	lsls	r2, r3, #6
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	061b      	lsls	r3, r3, #24
 8005330:	431a      	orrs	r2, r3
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	071b      	lsls	r3, r3, #28
 8005336:	493b      	ldr	r1, [pc, #236]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800533e:	4b39      	ldr	r3, [pc, #228]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005344:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	3b01      	subs	r3, #1
 800534e:	021b      	lsls	r3, r3, #8
 8005350:	4934      	ldr	r1, [pc, #208]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01e      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005364:	4b2f      	ldr	r3, [pc, #188]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536a:	0e1b      	lsrs	r3, r3, #24
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	019a      	lsls	r2, r3, #6
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	061b      	lsls	r3, r3, #24
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	071b      	lsls	r3, r3, #28
 8005384:	4927      	ldr	r1, [pc, #156]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800538c:	4b25      	ldr	r3, [pc, #148]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800538e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005392:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539a:	4922      	ldr	r1, [pc, #136]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053a2:	4b21      	ldr	r3, [pc, #132]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053a8:	f7fd fb4a 	bl	8002a40 <HAL_GetTick>
 80053ac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053b0:	f7fd fb46 	bl	8002a40 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e0a4      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053c2:	4b18      	ldr	r3, [pc, #96]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053ce:	d1ef      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 808b 	beq.w	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	4b10      	ldr	r3, [pc, #64]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80053ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053fa:	4b0c      	ldr	r3, [pc, #48]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a0b      	ldr	r2, [pc, #44]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005404:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005406:	f7fd fb1b 	bl	8002a40 <HAL_GetTick>
 800540a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800540c:	e010      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800540e:	f7fd fb17 	bl	8002a40 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d909      	bls.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e075      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005420:	42470068 	.word	0x42470068
 8005424:	40023800 	.word	0x40023800
 8005428:	42470070 	.word	0x42470070
 800542c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005430:	4b38      	ldr	r3, [pc, #224]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0e8      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800543c:	4b36      	ldr	r3, [pc, #216]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800543e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005440:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005444:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d02f      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x308>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	429a      	cmp	r2, r3
 8005458:	d028      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800545a:	4b2f      	ldr	r3, [pc, #188]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005462:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005464:	4b2d      	ldr	r3, [pc, #180]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005466:	2201      	movs	r2, #1
 8005468:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800546a:	4b2c      	ldr	r3, [pc, #176]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005470:	4a29      	ldr	r2, [pc, #164]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005476:	4b28      	ldr	r3, [pc, #160]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b01      	cmp	r3, #1
 8005480:	d114      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005482:	f7fd fadd 	bl	8002a40 <HAL_GetTick>
 8005486:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005488:	e00a      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800548a:	f7fd fad9 	bl	8002a40 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005498:	4293      	cmp	r3, r2
 800549a:	d901      	bls.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e035      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0ee      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054b8:	d10d      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80054ba:	4b17      	ldr	r3, [pc, #92]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80054ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ce:	4912      	ldr	r1, [pc, #72]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	608b      	str	r3, [r1, #8]
 80054d4:	e005      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80054d6:	4b10      	ldr	r3, [pc, #64]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	4a0f      	ldr	r2, [pc, #60]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054dc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80054e0:	6093      	str	r3, [r2, #8]
 80054e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ee:	490a      	ldr	r1, [pc, #40]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005506:	4b06      	ldr	r3, [pc, #24]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005508:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40007000 	.word	0x40007000
 8005518:	40023800 	.word	0x40023800
 800551c:	42470e40 	.word	0x42470e40
 8005520:	424711e0 	.word	0x424711e0

08005524 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e01c      	b.n	8005570 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	795b      	ldrb	r3, [r3, #5]
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d105      	bne.n	800554c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7fc fd0e 	bl	8001f68 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0204 	orr.w	r2, r2, #4
 8005560:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e07b      	b.n	8005682 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558e:	2b00      	cmp	r3, #0
 8005590:	d108      	bne.n	80055a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800559a:	d009      	beq.n	80055b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	61da      	str	r2, [r3, #28]
 80055a2:	e005      	b.n	80055b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fc fcee 	bl	8001fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005620:	431a      	orrs	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005634:	ea42 0103 	orr.w	r1, r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	0c1b      	lsrs	r3, r3, #16
 800564e:	f003 0104 	and.w	r1, r3, #4
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005656:	f003 0210 	and.w	r2, r3, #16
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005670:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b082      	sub	sp, #8
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e01a      	b.n	80056d2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056b2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7fc fcc1 	bl	800203c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b088      	sub	sp, #32
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	603b      	str	r3, [r7, #0]
 80056e6:	4613      	mov	r3, r2
 80056e8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ea:	f7fd f9a9 	bl	8002a40 <HAL_GetTick>
 80056ee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80056f0:	88fb      	ldrh	r3, [r7, #6]
 80056f2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d001      	beq.n	8005704 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005700:	2302      	movs	r3, #2
 8005702:	e12a      	b.n	800595a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <HAL_SPI_Transmit+0x36>
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e122      	b.n	800595a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_SPI_Transmit+0x48>
 800571e:	2302      	movs	r3, #2
 8005720:	e11b      	b.n	800595a <HAL_SPI_Transmit+0x280>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2203      	movs	r2, #3
 800572e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	88fa      	ldrh	r2, [r7, #6]
 8005742:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	88fa      	ldrh	r2, [r7, #6]
 8005748:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005770:	d10f      	bne.n	8005792 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005780:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005790:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579c:	2b40      	cmp	r3, #64	@ 0x40
 800579e:	d007      	beq.n	80057b0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057b8:	d152      	bne.n	8005860 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <HAL_SPI_Transmit+0xee>
 80057c2:	8b7b      	ldrh	r3, [r7, #26]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d145      	bne.n	8005854 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057cc:	881a      	ldrh	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d8:	1c9a      	adds	r2, r3, #2
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057ec:	e032      	b.n	8005854 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d112      	bne.n	8005822 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005800:	881a      	ldrh	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580c:	1c9a      	adds	r2, r3, #2
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005820:	e018      	b.n	8005854 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005822:	f7fd f90d 	bl	8002a40 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d803      	bhi.n	800583a <HAL_SPI_Transmit+0x160>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005838:	d102      	bne.n	8005840 <HAL_SPI_Transmit+0x166>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d109      	bne.n	8005854 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e082      	b.n	800595a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1c7      	bne.n	80057ee <HAL_SPI_Transmit+0x114>
 800585e:	e053      	b.n	8005908 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <HAL_SPI_Transmit+0x194>
 8005868:	8b7b      	ldrh	r3, [r7, #26]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d147      	bne.n	80058fe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	330c      	adds	r3, #12
 8005878:	7812      	ldrb	r2, [r2, #0]
 800587a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800588a:	b29b      	uxth	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005894:	e033      	b.n	80058fe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d113      	bne.n	80058cc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	330c      	adds	r3, #12
 80058ae:	7812      	ldrb	r2, [r2, #0]
 80058b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80058ca:	e018      	b.n	80058fe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058cc:	f7fd f8b8 	bl	8002a40 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d803      	bhi.n	80058e4 <HAL_SPI_Transmit+0x20a>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e2:	d102      	bne.n	80058ea <HAL_SPI_Transmit+0x210>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e02d      	b.n	800595a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005902:	b29b      	uxth	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1c6      	bne.n	8005896 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f8bf 	bl	8005a90 <SPI_EndRxTxTransaction>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005958:	2300      	movs	r3, #0
  }
}
 800595a:	4618      	mov	r0, r3
 800595c:	3720      	adds	r7, #32
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005970:	b2db      	uxtb	r3, r3
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	4613      	mov	r3, r2
 800598e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005990:	f7fd f856 	bl	8002a40 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005998:	1a9b      	subs	r3, r3, r2
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	4413      	add	r3, r2
 800599e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059a0:	f7fd f84e 	bl	8002a40 <HAL_GetTick>
 80059a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059a6:	4b39      	ldr	r3, [pc, #228]	@ (8005a8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	015b      	lsls	r3, r3, #5
 80059ac:	0d1b      	lsrs	r3, r3, #20
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	fb02 f303 	mul.w	r3, r2, r3
 80059b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059b6:	e054      	b.n	8005a62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059be:	d050      	beq.n	8005a62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059c0:	f7fd f83e 	bl	8002a40 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	69fa      	ldr	r2, [r7, #28]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d902      	bls.n	80059d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d13d      	bne.n	8005a52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80059e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059ee:	d111      	bne.n	8005a14 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059f8:	d004      	beq.n	8005a04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a02:	d107      	bne.n	8005a14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a1c:	d10f      	bne.n	8005a3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e017      	b.n	8005a82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	bf0c      	ite	eq
 8005a72:	2301      	moveq	r3, #1
 8005a74:	2300      	movne	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d19b      	bne.n	80059b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3720      	adds	r7, #32
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20000010 	.word	0x20000010

08005a90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	2102      	movs	r1, #2
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff ff6a 	bl	8005980 <SPI_WaitFlagStateUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d007      	beq.n	8005ac2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab6:	f043 0220 	orr.w	r2, r3, #32
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e032      	b.n	8005b28 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b30 <SPI_EndRxTxTransaction+0xa0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8005b34 <SPI_EndRxTxTransaction+0xa4>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	0d5b      	lsrs	r3, r3, #21
 8005ace:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ad2:	fb02 f303 	mul.w	r3, r2, r3
 8005ad6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ae0:	d112      	bne.n	8005b08 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2180      	movs	r1, #128	@ 0x80
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f7ff ff47 	bl	8005980 <SPI_WaitFlagStateUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d016      	beq.n	8005b26 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005afc:	f043 0220 	orr.w	r2, r3, #32
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e00f      	b.n	8005b28 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1e:	2b80      	cmp	r3, #128	@ 0x80
 8005b20:	d0f2      	beq.n	8005b08 <SPI_EndRxTxTransaction+0x78>
 8005b22:	e000      	b.n	8005b26 <SPI_EndRxTxTransaction+0x96>
        break;
 8005b24:	bf00      	nop
  }

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	20000010 	.word	0x20000010
 8005b34:	165e9f81 	.word	0x165e9f81

08005b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e041      	b.n	8005bce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fc fa8a 	bl	8002078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3304      	adds	r3, #4
 8005b74:	4619      	mov	r1, r3
 8005b76:	4610      	mov	r0, r2
 8005b78:	f000 f8f4 	bl	8005d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_TIM_ConfigClockSource+0x1c>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e0b4      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x186>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c10:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c18:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c2a:	d03e      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0xd4>
 8005c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c30:	f200 8087 	bhi.w	8005d42 <HAL_TIM_ConfigClockSource+0x16c>
 8005c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c38:	f000 8086 	beq.w	8005d48 <HAL_TIM_ConfigClockSource+0x172>
 8005c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c40:	d87f      	bhi.n	8005d42 <HAL_TIM_ConfigClockSource+0x16c>
 8005c42:	2b70      	cmp	r3, #112	@ 0x70
 8005c44:	d01a      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0xa6>
 8005c46:	2b70      	cmp	r3, #112	@ 0x70
 8005c48:	d87b      	bhi.n	8005d42 <HAL_TIM_ConfigClockSource+0x16c>
 8005c4a:	2b60      	cmp	r3, #96	@ 0x60
 8005c4c:	d050      	beq.n	8005cf0 <HAL_TIM_ConfigClockSource+0x11a>
 8005c4e:	2b60      	cmp	r3, #96	@ 0x60
 8005c50:	d877      	bhi.n	8005d42 <HAL_TIM_ConfigClockSource+0x16c>
 8005c52:	2b50      	cmp	r3, #80	@ 0x50
 8005c54:	d03c      	beq.n	8005cd0 <HAL_TIM_ConfigClockSource+0xfa>
 8005c56:	2b50      	cmp	r3, #80	@ 0x50
 8005c58:	d873      	bhi.n	8005d42 <HAL_TIM_ConfigClockSource+0x16c>
 8005c5a:	2b40      	cmp	r3, #64	@ 0x40
 8005c5c:	d058      	beq.n	8005d10 <HAL_TIM_ConfigClockSource+0x13a>
 8005c5e:	2b40      	cmp	r3, #64	@ 0x40
 8005c60:	d86f      	bhi.n	8005d42 <HAL_TIM_ConfigClockSource+0x16c>
 8005c62:	2b30      	cmp	r3, #48	@ 0x30
 8005c64:	d064      	beq.n	8005d30 <HAL_TIM_ConfigClockSource+0x15a>
 8005c66:	2b30      	cmp	r3, #48	@ 0x30
 8005c68:	d86b      	bhi.n	8005d42 <HAL_TIM_ConfigClockSource+0x16c>
 8005c6a:	2b20      	cmp	r3, #32
 8005c6c:	d060      	beq.n	8005d30 <HAL_TIM_ConfigClockSource+0x15a>
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d867      	bhi.n	8005d42 <HAL_TIM_ConfigClockSource+0x16c>
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d05c      	beq.n	8005d30 <HAL_TIM_ConfigClockSource+0x15a>
 8005c76:	2b10      	cmp	r3, #16
 8005c78:	d05a      	beq.n	8005d30 <HAL_TIM_ConfigClockSource+0x15a>
 8005c7a:	e062      	b.n	8005d42 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c8c:	f000 f990 	bl	8005fb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c9e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	609a      	str	r2, [r3, #8]
      break;
 8005ca8:	e04f      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cba:	f000 f979 	bl	8005fb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ccc:	609a      	str	r2, [r3, #8]
      break;
 8005cce:	e03c      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cdc:	461a      	mov	r2, r3
 8005cde:	f000 f8ed 	bl	8005ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2150      	movs	r1, #80	@ 0x50
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 f946 	bl	8005f7a <TIM_ITRx_SetConfig>
      break;
 8005cee:	e02c      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f000 f90c 	bl	8005f1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2160      	movs	r1, #96	@ 0x60
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 f936 	bl	8005f7a <TIM_ITRx_SetConfig>
      break;
 8005d0e:	e01c      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f000 f8cd 	bl	8005ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2140      	movs	r1, #64	@ 0x40
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 f926 	bl	8005f7a <TIM_ITRx_SetConfig>
      break;
 8005d2e:	e00c      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	f000 f91d 	bl	8005f7a <TIM_ITRx_SetConfig>
      break;
 8005d40:	e003      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	73fb      	strb	r3, [r7, #15]
      break;
 8005d46:	e000      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a46      	ldr	r2, [pc, #280]	@ (8005e90 <TIM_Base_SetConfig+0x12c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d013      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d82:	d00f      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a43      	ldr	r2, [pc, #268]	@ (8005e94 <TIM_Base_SetConfig+0x130>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00b      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a42      	ldr	r2, [pc, #264]	@ (8005e98 <TIM_Base_SetConfig+0x134>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d007      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a41      	ldr	r2, [pc, #260]	@ (8005e9c <TIM_Base_SetConfig+0x138>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a40      	ldr	r2, [pc, #256]	@ (8005ea0 <TIM_Base_SetConfig+0x13c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d108      	bne.n	8005db6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a35      	ldr	r2, [pc, #212]	@ (8005e90 <TIM_Base_SetConfig+0x12c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d02b      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dc4:	d027      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a32      	ldr	r2, [pc, #200]	@ (8005e94 <TIM_Base_SetConfig+0x130>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d023      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a31      	ldr	r2, [pc, #196]	@ (8005e98 <TIM_Base_SetConfig+0x134>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d01f      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a30      	ldr	r2, [pc, #192]	@ (8005e9c <TIM_Base_SetConfig+0x138>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d01b      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a2f      	ldr	r2, [pc, #188]	@ (8005ea0 <TIM_Base_SetConfig+0x13c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d017      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a2e      	ldr	r2, [pc, #184]	@ (8005ea4 <TIM_Base_SetConfig+0x140>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d013      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a2d      	ldr	r2, [pc, #180]	@ (8005ea8 <TIM_Base_SetConfig+0x144>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d00f      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a2c      	ldr	r2, [pc, #176]	@ (8005eac <TIM_Base_SetConfig+0x148>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00b      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a2b      	ldr	r2, [pc, #172]	@ (8005eb0 <TIM_Base_SetConfig+0x14c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d007      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a2a      	ldr	r2, [pc, #168]	@ (8005eb4 <TIM_Base_SetConfig+0x150>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d003      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a29      	ldr	r2, [pc, #164]	@ (8005eb8 <TIM_Base_SetConfig+0x154>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d108      	bne.n	8005e28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a10      	ldr	r2, [pc, #64]	@ (8005e90 <TIM_Base_SetConfig+0x12c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d003      	beq.n	8005e5c <TIM_Base_SetConfig+0xf8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a12      	ldr	r2, [pc, #72]	@ (8005ea0 <TIM_Base_SetConfig+0x13c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d103      	bne.n	8005e64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d105      	bne.n	8005e82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f023 0201 	bic.w	r2, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	611a      	str	r2, [r3, #16]
  }
}
 8005e82:	bf00      	nop
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40010000 	.word	0x40010000
 8005e94:	40000400 	.word	0x40000400
 8005e98:	40000800 	.word	0x40000800
 8005e9c:	40000c00 	.word	0x40000c00
 8005ea0:	40010400 	.word	0x40010400
 8005ea4:	40014000 	.word	0x40014000
 8005ea8:	40014400 	.word	0x40014400
 8005eac:	40014800 	.word	0x40014800
 8005eb0:	40001800 	.word	0x40001800
 8005eb4:	40001c00 	.word	0x40001c00
 8005eb8:	40002000 	.word	0x40002000

08005ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f023 0201 	bic.w	r2, r3, #1
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f023 030a 	bic.w	r3, r3, #10
 8005ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b087      	sub	sp, #28
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	f023 0210 	bic.w	r2, r3, #16
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	031b      	lsls	r3, r3, #12
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	621a      	str	r2, [r3, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f043 0307 	orr.w	r3, r3, #7
 8005f9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	609a      	str	r2, [r3, #8]
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
 8005fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	021a      	lsls	r2, r3, #8
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	609a      	str	r2, [r3, #8]
}
 8005fe4:	bf00      	nop
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006004:	2302      	movs	r3, #2
 8006006:	e05a      	b.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800602e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a21      	ldr	r2, [pc, #132]	@ (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d022      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006054:	d01d      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a1d      	ldr	r2, [pc, #116]	@ (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d018      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1b      	ldr	r2, [pc, #108]	@ (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d013      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1a      	ldr	r2, [pc, #104]	@ (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00e      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a18      	ldr	r2, [pc, #96]	@ (80060dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d009      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a17      	ldr	r2, [pc, #92]	@ (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d004      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a15      	ldr	r2, [pc, #84]	@ (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d10c      	bne.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40010000 	.word	0x40010000
 80060d0:	40000400 	.word	0x40000400
 80060d4:	40000800 	.word	0x40000800
 80060d8:	40000c00 	.word	0x40000c00
 80060dc:	40010400 	.word	0x40010400
 80060e0:	40014000 	.word	0x40014000
 80060e4:	40001800 	.word	0x40001800

080060e8 <std>:
 80060e8:	2300      	movs	r3, #0
 80060ea:	b510      	push	{r4, lr}
 80060ec:	4604      	mov	r4, r0
 80060ee:	e9c0 3300 	strd	r3, r3, [r0]
 80060f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060f6:	6083      	str	r3, [r0, #8]
 80060f8:	8181      	strh	r1, [r0, #12]
 80060fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80060fc:	81c2      	strh	r2, [r0, #14]
 80060fe:	6183      	str	r3, [r0, #24]
 8006100:	4619      	mov	r1, r3
 8006102:	2208      	movs	r2, #8
 8006104:	305c      	adds	r0, #92	@ 0x5c
 8006106:	f000 f9f9 	bl	80064fc <memset>
 800610a:	4b0d      	ldr	r3, [pc, #52]	@ (8006140 <std+0x58>)
 800610c:	6263      	str	r3, [r4, #36]	@ 0x24
 800610e:	4b0d      	ldr	r3, [pc, #52]	@ (8006144 <std+0x5c>)
 8006110:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006112:	4b0d      	ldr	r3, [pc, #52]	@ (8006148 <std+0x60>)
 8006114:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006116:	4b0d      	ldr	r3, [pc, #52]	@ (800614c <std+0x64>)
 8006118:	6323      	str	r3, [r4, #48]	@ 0x30
 800611a:	4b0d      	ldr	r3, [pc, #52]	@ (8006150 <std+0x68>)
 800611c:	6224      	str	r4, [r4, #32]
 800611e:	429c      	cmp	r4, r3
 8006120:	d006      	beq.n	8006130 <std+0x48>
 8006122:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006126:	4294      	cmp	r4, r2
 8006128:	d002      	beq.n	8006130 <std+0x48>
 800612a:	33d0      	adds	r3, #208	@ 0xd0
 800612c:	429c      	cmp	r4, r3
 800612e:	d105      	bne.n	800613c <std+0x54>
 8006130:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006138:	f000 ba58 	b.w	80065ec <__retarget_lock_init_recursive>
 800613c:	bd10      	pop	{r4, pc}
 800613e:	bf00      	nop
 8006140:	0800634d 	.word	0x0800634d
 8006144:	0800636f 	.word	0x0800636f
 8006148:	080063a7 	.word	0x080063a7
 800614c:	080063cb 	.word	0x080063cb
 8006150:	20025be0 	.word	0x20025be0

08006154 <stdio_exit_handler>:
 8006154:	4a02      	ldr	r2, [pc, #8]	@ (8006160 <stdio_exit_handler+0xc>)
 8006156:	4903      	ldr	r1, [pc, #12]	@ (8006164 <stdio_exit_handler+0x10>)
 8006158:	4803      	ldr	r0, [pc, #12]	@ (8006168 <stdio_exit_handler+0x14>)
 800615a:	f000 b869 	b.w	8006230 <_fwalk_sglue>
 800615e:	bf00      	nop
 8006160:	2000001c 	.word	0x2000001c
 8006164:	08006e8d 	.word	0x08006e8d
 8006168:	2000002c 	.word	0x2000002c

0800616c <cleanup_stdio>:
 800616c:	6841      	ldr	r1, [r0, #4]
 800616e:	4b0c      	ldr	r3, [pc, #48]	@ (80061a0 <cleanup_stdio+0x34>)
 8006170:	4299      	cmp	r1, r3
 8006172:	b510      	push	{r4, lr}
 8006174:	4604      	mov	r4, r0
 8006176:	d001      	beq.n	800617c <cleanup_stdio+0x10>
 8006178:	f000 fe88 	bl	8006e8c <_fflush_r>
 800617c:	68a1      	ldr	r1, [r4, #8]
 800617e:	4b09      	ldr	r3, [pc, #36]	@ (80061a4 <cleanup_stdio+0x38>)
 8006180:	4299      	cmp	r1, r3
 8006182:	d002      	beq.n	800618a <cleanup_stdio+0x1e>
 8006184:	4620      	mov	r0, r4
 8006186:	f000 fe81 	bl	8006e8c <_fflush_r>
 800618a:	68e1      	ldr	r1, [r4, #12]
 800618c:	4b06      	ldr	r3, [pc, #24]	@ (80061a8 <cleanup_stdio+0x3c>)
 800618e:	4299      	cmp	r1, r3
 8006190:	d004      	beq.n	800619c <cleanup_stdio+0x30>
 8006192:	4620      	mov	r0, r4
 8006194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006198:	f000 be78 	b.w	8006e8c <_fflush_r>
 800619c:	bd10      	pop	{r4, pc}
 800619e:	bf00      	nop
 80061a0:	20025be0 	.word	0x20025be0
 80061a4:	20025c48 	.word	0x20025c48
 80061a8:	20025cb0 	.word	0x20025cb0

080061ac <global_stdio_init.part.0>:
 80061ac:	b510      	push	{r4, lr}
 80061ae:	4b0b      	ldr	r3, [pc, #44]	@ (80061dc <global_stdio_init.part.0+0x30>)
 80061b0:	4c0b      	ldr	r4, [pc, #44]	@ (80061e0 <global_stdio_init.part.0+0x34>)
 80061b2:	4a0c      	ldr	r2, [pc, #48]	@ (80061e4 <global_stdio_init.part.0+0x38>)
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	4620      	mov	r0, r4
 80061b8:	2200      	movs	r2, #0
 80061ba:	2104      	movs	r1, #4
 80061bc:	f7ff ff94 	bl	80060e8 <std>
 80061c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80061c4:	2201      	movs	r2, #1
 80061c6:	2109      	movs	r1, #9
 80061c8:	f7ff ff8e 	bl	80060e8 <std>
 80061cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061d0:	2202      	movs	r2, #2
 80061d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d6:	2112      	movs	r1, #18
 80061d8:	f7ff bf86 	b.w	80060e8 <std>
 80061dc:	20025d18 	.word	0x20025d18
 80061e0:	20025be0 	.word	0x20025be0
 80061e4:	08006155 	.word	0x08006155

080061e8 <__sfp_lock_acquire>:
 80061e8:	4801      	ldr	r0, [pc, #4]	@ (80061f0 <__sfp_lock_acquire+0x8>)
 80061ea:	f000 ba00 	b.w	80065ee <__retarget_lock_acquire_recursive>
 80061ee:	bf00      	nop
 80061f0:	20025d21 	.word	0x20025d21

080061f4 <__sfp_lock_release>:
 80061f4:	4801      	ldr	r0, [pc, #4]	@ (80061fc <__sfp_lock_release+0x8>)
 80061f6:	f000 b9fb 	b.w	80065f0 <__retarget_lock_release_recursive>
 80061fa:	bf00      	nop
 80061fc:	20025d21 	.word	0x20025d21

08006200 <__sinit>:
 8006200:	b510      	push	{r4, lr}
 8006202:	4604      	mov	r4, r0
 8006204:	f7ff fff0 	bl	80061e8 <__sfp_lock_acquire>
 8006208:	6a23      	ldr	r3, [r4, #32]
 800620a:	b11b      	cbz	r3, 8006214 <__sinit+0x14>
 800620c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006210:	f7ff bff0 	b.w	80061f4 <__sfp_lock_release>
 8006214:	4b04      	ldr	r3, [pc, #16]	@ (8006228 <__sinit+0x28>)
 8006216:	6223      	str	r3, [r4, #32]
 8006218:	4b04      	ldr	r3, [pc, #16]	@ (800622c <__sinit+0x2c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1f5      	bne.n	800620c <__sinit+0xc>
 8006220:	f7ff ffc4 	bl	80061ac <global_stdio_init.part.0>
 8006224:	e7f2      	b.n	800620c <__sinit+0xc>
 8006226:	bf00      	nop
 8006228:	0800616d 	.word	0x0800616d
 800622c:	20025d18 	.word	0x20025d18

08006230 <_fwalk_sglue>:
 8006230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006234:	4607      	mov	r7, r0
 8006236:	4688      	mov	r8, r1
 8006238:	4614      	mov	r4, r2
 800623a:	2600      	movs	r6, #0
 800623c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006240:	f1b9 0901 	subs.w	r9, r9, #1
 8006244:	d505      	bpl.n	8006252 <_fwalk_sglue+0x22>
 8006246:	6824      	ldr	r4, [r4, #0]
 8006248:	2c00      	cmp	r4, #0
 800624a:	d1f7      	bne.n	800623c <_fwalk_sglue+0xc>
 800624c:	4630      	mov	r0, r6
 800624e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006252:	89ab      	ldrh	r3, [r5, #12]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d907      	bls.n	8006268 <_fwalk_sglue+0x38>
 8006258:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800625c:	3301      	adds	r3, #1
 800625e:	d003      	beq.n	8006268 <_fwalk_sglue+0x38>
 8006260:	4629      	mov	r1, r5
 8006262:	4638      	mov	r0, r7
 8006264:	47c0      	blx	r8
 8006266:	4306      	orrs	r6, r0
 8006268:	3568      	adds	r5, #104	@ 0x68
 800626a:	e7e9      	b.n	8006240 <_fwalk_sglue+0x10>

0800626c <iprintf>:
 800626c:	b40f      	push	{r0, r1, r2, r3}
 800626e:	b507      	push	{r0, r1, r2, lr}
 8006270:	4906      	ldr	r1, [pc, #24]	@ (800628c <iprintf+0x20>)
 8006272:	ab04      	add	r3, sp, #16
 8006274:	6808      	ldr	r0, [r1, #0]
 8006276:	f853 2b04 	ldr.w	r2, [r3], #4
 800627a:	6881      	ldr	r1, [r0, #8]
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	f000 fadb 	bl	8006838 <_vfiprintf_r>
 8006282:	b003      	add	sp, #12
 8006284:	f85d eb04 	ldr.w	lr, [sp], #4
 8006288:	b004      	add	sp, #16
 800628a:	4770      	bx	lr
 800628c:	20000028 	.word	0x20000028

08006290 <_puts_r>:
 8006290:	6a03      	ldr	r3, [r0, #32]
 8006292:	b570      	push	{r4, r5, r6, lr}
 8006294:	6884      	ldr	r4, [r0, #8]
 8006296:	4605      	mov	r5, r0
 8006298:	460e      	mov	r6, r1
 800629a:	b90b      	cbnz	r3, 80062a0 <_puts_r+0x10>
 800629c:	f7ff ffb0 	bl	8006200 <__sinit>
 80062a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062a2:	07db      	lsls	r3, r3, #31
 80062a4:	d405      	bmi.n	80062b2 <_puts_r+0x22>
 80062a6:	89a3      	ldrh	r3, [r4, #12]
 80062a8:	0598      	lsls	r0, r3, #22
 80062aa:	d402      	bmi.n	80062b2 <_puts_r+0x22>
 80062ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ae:	f000 f99e 	bl	80065ee <__retarget_lock_acquire_recursive>
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	0719      	lsls	r1, r3, #28
 80062b6:	d502      	bpl.n	80062be <_puts_r+0x2e>
 80062b8:	6923      	ldr	r3, [r4, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d135      	bne.n	800632a <_puts_r+0x9a>
 80062be:	4621      	mov	r1, r4
 80062c0:	4628      	mov	r0, r5
 80062c2:	f000 f8c5 	bl	8006450 <__swsetup_r>
 80062c6:	b380      	cbz	r0, 800632a <_puts_r+0x9a>
 80062c8:	f04f 35ff 	mov.w	r5, #4294967295
 80062cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062ce:	07da      	lsls	r2, r3, #31
 80062d0:	d405      	bmi.n	80062de <_puts_r+0x4e>
 80062d2:	89a3      	ldrh	r3, [r4, #12]
 80062d4:	059b      	lsls	r3, r3, #22
 80062d6:	d402      	bmi.n	80062de <_puts_r+0x4e>
 80062d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062da:	f000 f989 	bl	80065f0 <__retarget_lock_release_recursive>
 80062de:	4628      	mov	r0, r5
 80062e0:	bd70      	pop	{r4, r5, r6, pc}
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	da04      	bge.n	80062f0 <_puts_r+0x60>
 80062e6:	69a2      	ldr	r2, [r4, #24]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	dc17      	bgt.n	800631c <_puts_r+0x8c>
 80062ec:	290a      	cmp	r1, #10
 80062ee:	d015      	beq.n	800631c <_puts_r+0x8c>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	6022      	str	r2, [r4, #0]
 80062f6:	7019      	strb	r1, [r3, #0]
 80062f8:	68a3      	ldr	r3, [r4, #8]
 80062fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062fe:	3b01      	subs	r3, #1
 8006300:	60a3      	str	r3, [r4, #8]
 8006302:	2900      	cmp	r1, #0
 8006304:	d1ed      	bne.n	80062e2 <_puts_r+0x52>
 8006306:	2b00      	cmp	r3, #0
 8006308:	da11      	bge.n	800632e <_puts_r+0x9e>
 800630a:	4622      	mov	r2, r4
 800630c:	210a      	movs	r1, #10
 800630e:	4628      	mov	r0, r5
 8006310:	f000 f85f 	bl	80063d2 <__swbuf_r>
 8006314:	3001      	adds	r0, #1
 8006316:	d0d7      	beq.n	80062c8 <_puts_r+0x38>
 8006318:	250a      	movs	r5, #10
 800631a:	e7d7      	b.n	80062cc <_puts_r+0x3c>
 800631c:	4622      	mov	r2, r4
 800631e:	4628      	mov	r0, r5
 8006320:	f000 f857 	bl	80063d2 <__swbuf_r>
 8006324:	3001      	adds	r0, #1
 8006326:	d1e7      	bne.n	80062f8 <_puts_r+0x68>
 8006328:	e7ce      	b.n	80062c8 <_puts_r+0x38>
 800632a:	3e01      	subs	r6, #1
 800632c:	e7e4      	b.n	80062f8 <_puts_r+0x68>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	6022      	str	r2, [r4, #0]
 8006334:	220a      	movs	r2, #10
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	e7ee      	b.n	8006318 <_puts_r+0x88>
	...

0800633c <puts>:
 800633c:	4b02      	ldr	r3, [pc, #8]	@ (8006348 <puts+0xc>)
 800633e:	4601      	mov	r1, r0
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	f7ff bfa5 	b.w	8006290 <_puts_r>
 8006346:	bf00      	nop
 8006348:	20000028 	.word	0x20000028

0800634c <__sread>:
 800634c:	b510      	push	{r4, lr}
 800634e:	460c      	mov	r4, r1
 8006350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006354:	f000 f8fc 	bl	8006550 <_read_r>
 8006358:	2800      	cmp	r0, #0
 800635a:	bfab      	itete	ge
 800635c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800635e:	89a3      	ldrhlt	r3, [r4, #12]
 8006360:	181b      	addge	r3, r3, r0
 8006362:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006366:	bfac      	ite	ge
 8006368:	6563      	strge	r3, [r4, #84]	@ 0x54
 800636a:	81a3      	strhlt	r3, [r4, #12]
 800636c:	bd10      	pop	{r4, pc}

0800636e <__swrite>:
 800636e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006372:	461f      	mov	r7, r3
 8006374:	898b      	ldrh	r3, [r1, #12]
 8006376:	05db      	lsls	r3, r3, #23
 8006378:	4605      	mov	r5, r0
 800637a:	460c      	mov	r4, r1
 800637c:	4616      	mov	r6, r2
 800637e:	d505      	bpl.n	800638c <__swrite+0x1e>
 8006380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006384:	2302      	movs	r3, #2
 8006386:	2200      	movs	r2, #0
 8006388:	f000 f8d0 	bl	800652c <_lseek_r>
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006392:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006396:	81a3      	strh	r3, [r4, #12]
 8006398:	4632      	mov	r2, r6
 800639a:	463b      	mov	r3, r7
 800639c:	4628      	mov	r0, r5
 800639e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063a2:	f000 b8e7 	b.w	8006574 <_write_r>

080063a6 <__sseek>:
 80063a6:	b510      	push	{r4, lr}
 80063a8:	460c      	mov	r4, r1
 80063aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ae:	f000 f8bd 	bl	800652c <_lseek_r>
 80063b2:	1c43      	adds	r3, r0, #1
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	bf15      	itete	ne
 80063b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80063ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80063be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80063c2:	81a3      	strheq	r3, [r4, #12]
 80063c4:	bf18      	it	ne
 80063c6:	81a3      	strhne	r3, [r4, #12]
 80063c8:	bd10      	pop	{r4, pc}

080063ca <__sclose>:
 80063ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ce:	f000 b89d 	b.w	800650c <_close_r>

080063d2 <__swbuf_r>:
 80063d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d4:	460e      	mov	r6, r1
 80063d6:	4614      	mov	r4, r2
 80063d8:	4605      	mov	r5, r0
 80063da:	b118      	cbz	r0, 80063e4 <__swbuf_r+0x12>
 80063dc:	6a03      	ldr	r3, [r0, #32]
 80063de:	b90b      	cbnz	r3, 80063e4 <__swbuf_r+0x12>
 80063e0:	f7ff ff0e 	bl	8006200 <__sinit>
 80063e4:	69a3      	ldr	r3, [r4, #24]
 80063e6:	60a3      	str	r3, [r4, #8]
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	071a      	lsls	r2, r3, #28
 80063ec:	d501      	bpl.n	80063f2 <__swbuf_r+0x20>
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	b943      	cbnz	r3, 8006404 <__swbuf_r+0x32>
 80063f2:	4621      	mov	r1, r4
 80063f4:	4628      	mov	r0, r5
 80063f6:	f000 f82b 	bl	8006450 <__swsetup_r>
 80063fa:	b118      	cbz	r0, 8006404 <__swbuf_r+0x32>
 80063fc:	f04f 37ff 	mov.w	r7, #4294967295
 8006400:	4638      	mov	r0, r7
 8006402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	6922      	ldr	r2, [r4, #16]
 8006408:	1a98      	subs	r0, r3, r2
 800640a:	6963      	ldr	r3, [r4, #20]
 800640c:	b2f6      	uxtb	r6, r6
 800640e:	4283      	cmp	r3, r0
 8006410:	4637      	mov	r7, r6
 8006412:	dc05      	bgt.n	8006420 <__swbuf_r+0x4e>
 8006414:	4621      	mov	r1, r4
 8006416:	4628      	mov	r0, r5
 8006418:	f000 fd38 	bl	8006e8c <_fflush_r>
 800641c:	2800      	cmp	r0, #0
 800641e:	d1ed      	bne.n	80063fc <__swbuf_r+0x2a>
 8006420:	68a3      	ldr	r3, [r4, #8]
 8006422:	3b01      	subs	r3, #1
 8006424:	60a3      	str	r3, [r4, #8]
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	6022      	str	r2, [r4, #0]
 800642c:	701e      	strb	r6, [r3, #0]
 800642e:	6962      	ldr	r2, [r4, #20]
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	429a      	cmp	r2, r3
 8006434:	d004      	beq.n	8006440 <__swbuf_r+0x6e>
 8006436:	89a3      	ldrh	r3, [r4, #12]
 8006438:	07db      	lsls	r3, r3, #31
 800643a:	d5e1      	bpl.n	8006400 <__swbuf_r+0x2e>
 800643c:	2e0a      	cmp	r6, #10
 800643e:	d1df      	bne.n	8006400 <__swbuf_r+0x2e>
 8006440:	4621      	mov	r1, r4
 8006442:	4628      	mov	r0, r5
 8006444:	f000 fd22 	bl	8006e8c <_fflush_r>
 8006448:	2800      	cmp	r0, #0
 800644a:	d0d9      	beq.n	8006400 <__swbuf_r+0x2e>
 800644c:	e7d6      	b.n	80063fc <__swbuf_r+0x2a>
	...

08006450 <__swsetup_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4b29      	ldr	r3, [pc, #164]	@ (80064f8 <__swsetup_r+0xa8>)
 8006454:	4605      	mov	r5, r0
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	460c      	mov	r4, r1
 800645a:	b118      	cbz	r0, 8006464 <__swsetup_r+0x14>
 800645c:	6a03      	ldr	r3, [r0, #32]
 800645e:	b90b      	cbnz	r3, 8006464 <__swsetup_r+0x14>
 8006460:	f7ff fece 	bl	8006200 <__sinit>
 8006464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006468:	0719      	lsls	r1, r3, #28
 800646a:	d422      	bmi.n	80064b2 <__swsetup_r+0x62>
 800646c:	06da      	lsls	r2, r3, #27
 800646e:	d407      	bmi.n	8006480 <__swsetup_r+0x30>
 8006470:	2209      	movs	r2, #9
 8006472:	602a      	str	r2, [r5, #0]
 8006474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006478:	81a3      	strh	r3, [r4, #12]
 800647a:	f04f 30ff 	mov.w	r0, #4294967295
 800647e:	e033      	b.n	80064e8 <__swsetup_r+0x98>
 8006480:	0758      	lsls	r0, r3, #29
 8006482:	d512      	bpl.n	80064aa <__swsetup_r+0x5a>
 8006484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006486:	b141      	cbz	r1, 800649a <__swsetup_r+0x4a>
 8006488:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800648c:	4299      	cmp	r1, r3
 800648e:	d002      	beq.n	8006496 <__swsetup_r+0x46>
 8006490:	4628      	mov	r0, r5
 8006492:	f000 f8af 	bl	80065f4 <_free_r>
 8006496:	2300      	movs	r3, #0
 8006498:	6363      	str	r3, [r4, #52]	@ 0x34
 800649a:	89a3      	ldrh	r3, [r4, #12]
 800649c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064a0:	81a3      	strh	r3, [r4, #12]
 80064a2:	2300      	movs	r3, #0
 80064a4:	6063      	str	r3, [r4, #4]
 80064a6:	6923      	ldr	r3, [r4, #16]
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	89a3      	ldrh	r3, [r4, #12]
 80064ac:	f043 0308 	orr.w	r3, r3, #8
 80064b0:	81a3      	strh	r3, [r4, #12]
 80064b2:	6923      	ldr	r3, [r4, #16]
 80064b4:	b94b      	cbnz	r3, 80064ca <__swsetup_r+0x7a>
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064c0:	d003      	beq.n	80064ca <__swsetup_r+0x7a>
 80064c2:	4621      	mov	r1, r4
 80064c4:	4628      	mov	r0, r5
 80064c6:	f000 fd2f 	bl	8006f28 <__smakebuf_r>
 80064ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ce:	f013 0201 	ands.w	r2, r3, #1
 80064d2:	d00a      	beq.n	80064ea <__swsetup_r+0x9a>
 80064d4:	2200      	movs	r2, #0
 80064d6:	60a2      	str	r2, [r4, #8]
 80064d8:	6962      	ldr	r2, [r4, #20]
 80064da:	4252      	negs	r2, r2
 80064dc:	61a2      	str	r2, [r4, #24]
 80064de:	6922      	ldr	r2, [r4, #16]
 80064e0:	b942      	cbnz	r2, 80064f4 <__swsetup_r+0xa4>
 80064e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80064e6:	d1c5      	bne.n	8006474 <__swsetup_r+0x24>
 80064e8:	bd38      	pop	{r3, r4, r5, pc}
 80064ea:	0799      	lsls	r1, r3, #30
 80064ec:	bf58      	it	pl
 80064ee:	6962      	ldrpl	r2, [r4, #20]
 80064f0:	60a2      	str	r2, [r4, #8]
 80064f2:	e7f4      	b.n	80064de <__swsetup_r+0x8e>
 80064f4:	2000      	movs	r0, #0
 80064f6:	e7f7      	b.n	80064e8 <__swsetup_r+0x98>
 80064f8:	20000028 	.word	0x20000028

080064fc <memset>:
 80064fc:	4402      	add	r2, r0
 80064fe:	4603      	mov	r3, r0
 8006500:	4293      	cmp	r3, r2
 8006502:	d100      	bne.n	8006506 <memset+0xa>
 8006504:	4770      	bx	lr
 8006506:	f803 1b01 	strb.w	r1, [r3], #1
 800650a:	e7f9      	b.n	8006500 <memset+0x4>

0800650c <_close_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4d06      	ldr	r5, [pc, #24]	@ (8006528 <_close_r+0x1c>)
 8006510:	2300      	movs	r3, #0
 8006512:	4604      	mov	r4, r0
 8006514:	4608      	mov	r0, r1
 8006516:	602b      	str	r3, [r5, #0]
 8006518:	f7fc f986 	bl	8002828 <_close>
 800651c:	1c43      	adds	r3, r0, #1
 800651e:	d102      	bne.n	8006526 <_close_r+0x1a>
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	b103      	cbz	r3, 8006526 <_close_r+0x1a>
 8006524:	6023      	str	r3, [r4, #0]
 8006526:	bd38      	pop	{r3, r4, r5, pc}
 8006528:	20025d1c 	.word	0x20025d1c

0800652c <_lseek_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4d07      	ldr	r5, [pc, #28]	@ (800654c <_lseek_r+0x20>)
 8006530:	4604      	mov	r4, r0
 8006532:	4608      	mov	r0, r1
 8006534:	4611      	mov	r1, r2
 8006536:	2200      	movs	r2, #0
 8006538:	602a      	str	r2, [r5, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	f7fc f99b 	bl	8002876 <_lseek>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d102      	bne.n	800654a <_lseek_r+0x1e>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	b103      	cbz	r3, 800654a <_lseek_r+0x1e>
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	20025d1c 	.word	0x20025d1c

08006550 <_read_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	4d07      	ldr	r5, [pc, #28]	@ (8006570 <_read_r+0x20>)
 8006554:	4604      	mov	r4, r0
 8006556:	4608      	mov	r0, r1
 8006558:	4611      	mov	r1, r2
 800655a:	2200      	movs	r2, #0
 800655c:	602a      	str	r2, [r5, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	f7fc f929 	bl	80027b6 <_read>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d102      	bne.n	800656e <_read_r+0x1e>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	b103      	cbz	r3, 800656e <_read_r+0x1e>
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	20025d1c 	.word	0x20025d1c

08006574 <_write_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4d07      	ldr	r5, [pc, #28]	@ (8006594 <_write_r+0x20>)
 8006578:	4604      	mov	r4, r0
 800657a:	4608      	mov	r0, r1
 800657c:	4611      	mov	r1, r2
 800657e:	2200      	movs	r2, #0
 8006580:	602a      	str	r2, [r5, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	f7fc f934 	bl	80027f0 <_write>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d102      	bne.n	8006592 <_write_r+0x1e>
 800658c:	682b      	ldr	r3, [r5, #0]
 800658e:	b103      	cbz	r3, 8006592 <_write_r+0x1e>
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	20025d1c 	.word	0x20025d1c

08006598 <__errno>:
 8006598:	4b01      	ldr	r3, [pc, #4]	@ (80065a0 <__errno+0x8>)
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20000028 	.word	0x20000028

080065a4 <__libc_init_array>:
 80065a4:	b570      	push	{r4, r5, r6, lr}
 80065a6:	4d0d      	ldr	r5, [pc, #52]	@ (80065dc <__libc_init_array+0x38>)
 80065a8:	4c0d      	ldr	r4, [pc, #52]	@ (80065e0 <__libc_init_array+0x3c>)
 80065aa:	1b64      	subs	r4, r4, r5
 80065ac:	10a4      	asrs	r4, r4, #2
 80065ae:	2600      	movs	r6, #0
 80065b0:	42a6      	cmp	r6, r4
 80065b2:	d109      	bne.n	80065c8 <__libc_init_array+0x24>
 80065b4:	4d0b      	ldr	r5, [pc, #44]	@ (80065e4 <__libc_init_array+0x40>)
 80065b6:	4c0c      	ldr	r4, [pc, #48]	@ (80065e8 <__libc_init_array+0x44>)
 80065b8:	f000 fd24 	bl	8007004 <_init>
 80065bc:	1b64      	subs	r4, r4, r5
 80065be:	10a4      	asrs	r4, r4, #2
 80065c0:	2600      	movs	r6, #0
 80065c2:	42a6      	cmp	r6, r4
 80065c4:	d105      	bne.n	80065d2 <__libc_init_array+0x2e>
 80065c6:	bd70      	pop	{r4, r5, r6, pc}
 80065c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065cc:	4798      	blx	r3
 80065ce:	3601      	adds	r6, #1
 80065d0:	e7ee      	b.n	80065b0 <__libc_init_array+0xc>
 80065d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d6:	4798      	blx	r3
 80065d8:	3601      	adds	r6, #1
 80065da:	e7f2      	b.n	80065c2 <__libc_init_array+0x1e>
 80065dc:	08008264 	.word	0x08008264
 80065e0:	08008264 	.word	0x08008264
 80065e4:	08008264 	.word	0x08008264
 80065e8:	08008268 	.word	0x08008268

080065ec <__retarget_lock_init_recursive>:
 80065ec:	4770      	bx	lr

080065ee <__retarget_lock_acquire_recursive>:
 80065ee:	4770      	bx	lr

080065f0 <__retarget_lock_release_recursive>:
 80065f0:	4770      	bx	lr
	...

080065f4 <_free_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4605      	mov	r5, r0
 80065f8:	2900      	cmp	r1, #0
 80065fa:	d041      	beq.n	8006680 <_free_r+0x8c>
 80065fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006600:	1f0c      	subs	r4, r1, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	bfb8      	it	lt
 8006606:	18e4      	addlt	r4, r4, r3
 8006608:	f000 f8e0 	bl	80067cc <__malloc_lock>
 800660c:	4a1d      	ldr	r2, [pc, #116]	@ (8006684 <_free_r+0x90>)
 800660e:	6813      	ldr	r3, [r2, #0]
 8006610:	b933      	cbnz	r3, 8006620 <_free_r+0x2c>
 8006612:	6063      	str	r3, [r4, #4]
 8006614:	6014      	str	r4, [r2, #0]
 8006616:	4628      	mov	r0, r5
 8006618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800661c:	f000 b8dc 	b.w	80067d8 <__malloc_unlock>
 8006620:	42a3      	cmp	r3, r4
 8006622:	d908      	bls.n	8006636 <_free_r+0x42>
 8006624:	6820      	ldr	r0, [r4, #0]
 8006626:	1821      	adds	r1, r4, r0
 8006628:	428b      	cmp	r3, r1
 800662a:	bf01      	itttt	eq
 800662c:	6819      	ldreq	r1, [r3, #0]
 800662e:	685b      	ldreq	r3, [r3, #4]
 8006630:	1809      	addeq	r1, r1, r0
 8006632:	6021      	streq	r1, [r4, #0]
 8006634:	e7ed      	b.n	8006612 <_free_r+0x1e>
 8006636:	461a      	mov	r2, r3
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	b10b      	cbz	r3, 8006640 <_free_r+0x4c>
 800663c:	42a3      	cmp	r3, r4
 800663e:	d9fa      	bls.n	8006636 <_free_r+0x42>
 8006640:	6811      	ldr	r1, [r2, #0]
 8006642:	1850      	adds	r0, r2, r1
 8006644:	42a0      	cmp	r0, r4
 8006646:	d10b      	bne.n	8006660 <_free_r+0x6c>
 8006648:	6820      	ldr	r0, [r4, #0]
 800664a:	4401      	add	r1, r0
 800664c:	1850      	adds	r0, r2, r1
 800664e:	4283      	cmp	r3, r0
 8006650:	6011      	str	r1, [r2, #0]
 8006652:	d1e0      	bne.n	8006616 <_free_r+0x22>
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	6053      	str	r3, [r2, #4]
 800665a:	4408      	add	r0, r1
 800665c:	6010      	str	r0, [r2, #0]
 800665e:	e7da      	b.n	8006616 <_free_r+0x22>
 8006660:	d902      	bls.n	8006668 <_free_r+0x74>
 8006662:	230c      	movs	r3, #12
 8006664:	602b      	str	r3, [r5, #0]
 8006666:	e7d6      	b.n	8006616 <_free_r+0x22>
 8006668:	6820      	ldr	r0, [r4, #0]
 800666a:	1821      	adds	r1, r4, r0
 800666c:	428b      	cmp	r3, r1
 800666e:	bf04      	itt	eq
 8006670:	6819      	ldreq	r1, [r3, #0]
 8006672:	685b      	ldreq	r3, [r3, #4]
 8006674:	6063      	str	r3, [r4, #4]
 8006676:	bf04      	itt	eq
 8006678:	1809      	addeq	r1, r1, r0
 800667a:	6021      	streq	r1, [r4, #0]
 800667c:	6054      	str	r4, [r2, #4]
 800667e:	e7ca      	b.n	8006616 <_free_r+0x22>
 8006680:	bd38      	pop	{r3, r4, r5, pc}
 8006682:	bf00      	nop
 8006684:	20025d28 	.word	0x20025d28

08006688 <sbrk_aligned>:
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	4e0f      	ldr	r6, [pc, #60]	@ (80066c8 <sbrk_aligned+0x40>)
 800668c:	460c      	mov	r4, r1
 800668e:	6831      	ldr	r1, [r6, #0]
 8006690:	4605      	mov	r5, r0
 8006692:	b911      	cbnz	r1, 800669a <sbrk_aligned+0x12>
 8006694:	f000 fca6 	bl	8006fe4 <_sbrk_r>
 8006698:	6030      	str	r0, [r6, #0]
 800669a:	4621      	mov	r1, r4
 800669c:	4628      	mov	r0, r5
 800669e:	f000 fca1 	bl	8006fe4 <_sbrk_r>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	d103      	bne.n	80066ae <sbrk_aligned+0x26>
 80066a6:	f04f 34ff 	mov.w	r4, #4294967295
 80066aa:	4620      	mov	r0, r4
 80066ac:	bd70      	pop	{r4, r5, r6, pc}
 80066ae:	1cc4      	adds	r4, r0, #3
 80066b0:	f024 0403 	bic.w	r4, r4, #3
 80066b4:	42a0      	cmp	r0, r4
 80066b6:	d0f8      	beq.n	80066aa <sbrk_aligned+0x22>
 80066b8:	1a21      	subs	r1, r4, r0
 80066ba:	4628      	mov	r0, r5
 80066bc:	f000 fc92 	bl	8006fe4 <_sbrk_r>
 80066c0:	3001      	adds	r0, #1
 80066c2:	d1f2      	bne.n	80066aa <sbrk_aligned+0x22>
 80066c4:	e7ef      	b.n	80066a6 <sbrk_aligned+0x1e>
 80066c6:	bf00      	nop
 80066c8:	20025d24 	.word	0x20025d24

080066cc <_malloc_r>:
 80066cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d0:	1ccd      	adds	r5, r1, #3
 80066d2:	f025 0503 	bic.w	r5, r5, #3
 80066d6:	3508      	adds	r5, #8
 80066d8:	2d0c      	cmp	r5, #12
 80066da:	bf38      	it	cc
 80066dc:	250c      	movcc	r5, #12
 80066de:	2d00      	cmp	r5, #0
 80066e0:	4606      	mov	r6, r0
 80066e2:	db01      	blt.n	80066e8 <_malloc_r+0x1c>
 80066e4:	42a9      	cmp	r1, r5
 80066e6:	d904      	bls.n	80066f2 <_malloc_r+0x26>
 80066e8:	230c      	movs	r3, #12
 80066ea:	6033      	str	r3, [r6, #0]
 80066ec:	2000      	movs	r0, #0
 80066ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067c8 <_malloc_r+0xfc>
 80066f6:	f000 f869 	bl	80067cc <__malloc_lock>
 80066fa:	f8d8 3000 	ldr.w	r3, [r8]
 80066fe:	461c      	mov	r4, r3
 8006700:	bb44      	cbnz	r4, 8006754 <_malloc_r+0x88>
 8006702:	4629      	mov	r1, r5
 8006704:	4630      	mov	r0, r6
 8006706:	f7ff ffbf 	bl	8006688 <sbrk_aligned>
 800670a:	1c43      	adds	r3, r0, #1
 800670c:	4604      	mov	r4, r0
 800670e:	d158      	bne.n	80067c2 <_malloc_r+0xf6>
 8006710:	f8d8 4000 	ldr.w	r4, [r8]
 8006714:	4627      	mov	r7, r4
 8006716:	2f00      	cmp	r7, #0
 8006718:	d143      	bne.n	80067a2 <_malloc_r+0xd6>
 800671a:	2c00      	cmp	r4, #0
 800671c:	d04b      	beq.n	80067b6 <_malloc_r+0xea>
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	4639      	mov	r1, r7
 8006722:	4630      	mov	r0, r6
 8006724:	eb04 0903 	add.w	r9, r4, r3
 8006728:	f000 fc5c 	bl	8006fe4 <_sbrk_r>
 800672c:	4581      	cmp	r9, r0
 800672e:	d142      	bne.n	80067b6 <_malloc_r+0xea>
 8006730:	6821      	ldr	r1, [r4, #0]
 8006732:	1a6d      	subs	r5, r5, r1
 8006734:	4629      	mov	r1, r5
 8006736:	4630      	mov	r0, r6
 8006738:	f7ff ffa6 	bl	8006688 <sbrk_aligned>
 800673c:	3001      	adds	r0, #1
 800673e:	d03a      	beq.n	80067b6 <_malloc_r+0xea>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	442b      	add	r3, r5
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	f8d8 3000 	ldr.w	r3, [r8]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	bb62      	cbnz	r2, 80067a8 <_malloc_r+0xdc>
 800674e:	f8c8 7000 	str.w	r7, [r8]
 8006752:	e00f      	b.n	8006774 <_malloc_r+0xa8>
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	1b52      	subs	r2, r2, r5
 8006758:	d420      	bmi.n	800679c <_malloc_r+0xd0>
 800675a:	2a0b      	cmp	r2, #11
 800675c:	d917      	bls.n	800678e <_malloc_r+0xc2>
 800675e:	1961      	adds	r1, r4, r5
 8006760:	42a3      	cmp	r3, r4
 8006762:	6025      	str	r5, [r4, #0]
 8006764:	bf18      	it	ne
 8006766:	6059      	strne	r1, [r3, #4]
 8006768:	6863      	ldr	r3, [r4, #4]
 800676a:	bf08      	it	eq
 800676c:	f8c8 1000 	streq.w	r1, [r8]
 8006770:	5162      	str	r2, [r4, r5]
 8006772:	604b      	str	r3, [r1, #4]
 8006774:	4630      	mov	r0, r6
 8006776:	f000 f82f 	bl	80067d8 <__malloc_unlock>
 800677a:	f104 000b 	add.w	r0, r4, #11
 800677e:	1d23      	adds	r3, r4, #4
 8006780:	f020 0007 	bic.w	r0, r0, #7
 8006784:	1ac2      	subs	r2, r0, r3
 8006786:	bf1c      	itt	ne
 8006788:	1a1b      	subne	r3, r3, r0
 800678a:	50a3      	strne	r3, [r4, r2]
 800678c:	e7af      	b.n	80066ee <_malloc_r+0x22>
 800678e:	6862      	ldr	r2, [r4, #4]
 8006790:	42a3      	cmp	r3, r4
 8006792:	bf0c      	ite	eq
 8006794:	f8c8 2000 	streq.w	r2, [r8]
 8006798:	605a      	strne	r2, [r3, #4]
 800679a:	e7eb      	b.n	8006774 <_malloc_r+0xa8>
 800679c:	4623      	mov	r3, r4
 800679e:	6864      	ldr	r4, [r4, #4]
 80067a0:	e7ae      	b.n	8006700 <_malloc_r+0x34>
 80067a2:	463c      	mov	r4, r7
 80067a4:	687f      	ldr	r7, [r7, #4]
 80067a6:	e7b6      	b.n	8006716 <_malloc_r+0x4a>
 80067a8:	461a      	mov	r2, r3
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	42a3      	cmp	r3, r4
 80067ae:	d1fb      	bne.n	80067a8 <_malloc_r+0xdc>
 80067b0:	2300      	movs	r3, #0
 80067b2:	6053      	str	r3, [r2, #4]
 80067b4:	e7de      	b.n	8006774 <_malloc_r+0xa8>
 80067b6:	230c      	movs	r3, #12
 80067b8:	6033      	str	r3, [r6, #0]
 80067ba:	4630      	mov	r0, r6
 80067bc:	f000 f80c 	bl	80067d8 <__malloc_unlock>
 80067c0:	e794      	b.n	80066ec <_malloc_r+0x20>
 80067c2:	6005      	str	r5, [r0, #0]
 80067c4:	e7d6      	b.n	8006774 <_malloc_r+0xa8>
 80067c6:	bf00      	nop
 80067c8:	20025d28 	.word	0x20025d28

080067cc <__malloc_lock>:
 80067cc:	4801      	ldr	r0, [pc, #4]	@ (80067d4 <__malloc_lock+0x8>)
 80067ce:	f7ff bf0e 	b.w	80065ee <__retarget_lock_acquire_recursive>
 80067d2:	bf00      	nop
 80067d4:	20025d20 	.word	0x20025d20

080067d8 <__malloc_unlock>:
 80067d8:	4801      	ldr	r0, [pc, #4]	@ (80067e0 <__malloc_unlock+0x8>)
 80067da:	f7ff bf09 	b.w	80065f0 <__retarget_lock_release_recursive>
 80067de:	bf00      	nop
 80067e0:	20025d20 	.word	0x20025d20

080067e4 <__sfputc_r>:
 80067e4:	6893      	ldr	r3, [r2, #8]
 80067e6:	3b01      	subs	r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	b410      	push	{r4}
 80067ec:	6093      	str	r3, [r2, #8]
 80067ee:	da08      	bge.n	8006802 <__sfputc_r+0x1e>
 80067f0:	6994      	ldr	r4, [r2, #24]
 80067f2:	42a3      	cmp	r3, r4
 80067f4:	db01      	blt.n	80067fa <__sfputc_r+0x16>
 80067f6:	290a      	cmp	r1, #10
 80067f8:	d103      	bne.n	8006802 <__sfputc_r+0x1e>
 80067fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067fe:	f7ff bde8 	b.w	80063d2 <__swbuf_r>
 8006802:	6813      	ldr	r3, [r2, #0]
 8006804:	1c58      	adds	r0, r3, #1
 8006806:	6010      	str	r0, [r2, #0]
 8006808:	7019      	strb	r1, [r3, #0]
 800680a:	4608      	mov	r0, r1
 800680c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006810:	4770      	bx	lr

08006812 <__sfputs_r>:
 8006812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006814:	4606      	mov	r6, r0
 8006816:	460f      	mov	r7, r1
 8006818:	4614      	mov	r4, r2
 800681a:	18d5      	adds	r5, r2, r3
 800681c:	42ac      	cmp	r4, r5
 800681e:	d101      	bne.n	8006824 <__sfputs_r+0x12>
 8006820:	2000      	movs	r0, #0
 8006822:	e007      	b.n	8006834 <__sfputs_r+0x22>
 8006824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006828:	463a      	mov	r2, r7
 800682a:	4630      	mov	r0, r6
 800682c:	f7ff ffda 	bl	80067e4 <__sfputc_r>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	d1f3      	bne.n	800681c <__sfputs_r+0xa>
 8006834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006838 <_vfiprintf_r>:
 8006838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683c:	460d      	mov	r5, r1
 800683e:	b09d      	sub	sp, #116	@ 0x74
 8006840:	4614      	mov	r4, r2
 8006842:	4698      	mov	r8, r3
 8006844:	4606      	mov	r6, r0
 8006846:	b118      	cbz	r0, 8006850 <_vfiprintf_r+0x18>
 8006848:	6a03      	ldr	r3, [r0, #32]
 800684a:	b90b      	cbnz	r3, 8006850 <_vfiprintf_r+0x18>
 800684c:	f7ff fcd8 	bl	8006200 <__sinit>
 8006850:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006852:	07d9      	lsls	r1, r3, #31
 8006854:	d405      	bmi.n	8006862 <_vfiprintf_r+0x2a>
 8006856:	89ab      	ldrh	r3, [r5, #12]
 8006858:	059a      	lsls	r2, r3, #22
 800685a:	d402      	bmi.n	8006862 <_vfiprintf_r+0x2a>
 800685c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800685e:	f7ff fec6 	bl	80065ee <__retarget_lock_acquire_recursive>
 8006862:	89ab      	ldrh	r3, [r5, #12]
 8006864:	071b      	lsls	r3, r3, #28
 8006866:	d501      	bpl.n	800686c <_vfiprintf_r+0x34>
 8006868:	692b      	ldr	r3, [r5, #16]
 800686a:	b99b      	cbnz	r3, 8006894 <_vfiprintf_r+0x5c>
 800686c:	4629      	mov	r1, r5
 800686e:	4630      	mov	r0, r6
 8006870:	f7ff fdee 	bl	8006450 <__swsetup_r>
 8006874:	b170      	cbz	r0, 8006894 <_vfiprintf_r+0x5c>
 8006876:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006878:	07dc      	lsls	r4, r3, #31
 800687a:	d504      	bpl.n	8006886 <_vfiprintf_r+0x4e>
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	b01d      	add	sp, #116	@ 0x74
 8006882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006886:	89ab      	ldrh	r3, [r5, #12]
 8006888:	0598      	lsls	r0, r3, #22
 800688a:	d4f7      	bmi.n	800687c <_vfiprintf_r+0x44>
 800688c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800688e:	f7ff feaf 	bl	80065f0 <__retarget_lock_release_recursive>
 8006892:	e7f3      	b.n	800687c <_vfiprintf_r+0x44>
 8006894:	2300      	movs	r3, #0
 8006896:	9309      	str	r3, [sp, #36]	@ 0x24
 8006898:	2320      	movs	r3, #32
 800689a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800689e:	f8cd 800c 	str.w	r8, [sp, #12]
 80068a2:	2330      	movs	r3, #48	@ 0x30
 80068a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006a54 <_vfiprintf_r+0x21c>
 80068a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068ac:	f04f 0901 	mov.w	r9, #1
 80068b0:	4623      	mov	r3, r4
 80068b2:	469a      	mov	sl, r3
 80068b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068b8:	b10a      	cbz	r2, 80068be <_vfiprintf_r+0x86>
 80068ba:	2a25      	cmp	r2, #37	@ 0x25
 80068bc:	d1f9      	bne.n	80068b2 <_vfiprintf_r+0x7a>
 80068be:	ebba 0b04 	subs.w	fp, sl, r4
 80068c2:	d00b      	beq.n	80068dc <_vfiprintf_r+0xa4>
 80068c4:	465b      	mov	r3, fp
 80068c6:	4622      	mov	r2, r4
 80068c8:	4629      	mov	r1, r5
 80068ca:	4630      	mov	r0, r6
 80068cc:	f7ff ffa1 	bl	8006812 <__sfputs_r>
 80068d0:	3001      	adds	r0, #1
 80068d2:	f000 80a7 	beq.w	8006a24 <_vfiprintf_r+0x1ec>
 80068d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068d8:	445a      	add	r2, fp
 80068da:	9209      	str	r2, [sp, #36]	@ 0x24
 80068dc:	f89a 3000 	ldrb.w	r3, [sl]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 809f 	beq.w	8006a24 <_vfiprintf_r+0x1ec>
 80068e6:	2300      	movs	r3, #0
 80068e8:	f04f 32ff 	mov.w	r2, #4294967295
 80068ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068f0:	f10a 0a01 	add.w	sl, sl, #1
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	9307      	str	r3, [sp, #28]
 80068f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80068fe:	4654      	mov	r4, sl
 8006900:	2205      	movs	r2, #5
 8006902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006906:	4853      	ldr	r0, [pc, #332]	@ (8006a54 <_vfiprintf_r+0x21c>)
 8006908:	f7f9 fc72 	bl	80001f0 <memchr>
 800690c:	9a04      	ldr	r2, [sp, #16]
 800690e:	b9d8      	cbnz	r0, 8006948 <_vfiprintf_r+0x110>
 8006910:	06d1      	lsls	r1, r2, #27
 8006912:	bf44      	itt	mi
 8006914:	2320      	movmi	r3, #32
 8006916:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800691a:	0713      	lsls	r3, r2, #28
 800691c:	bf44      	itt	mi
 800691e:	232b      	movmi	r3, #43	@ 0x2b
 8006920:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006924:	f89a 3000 	ldrb.w	r3, [sl]
 8006928:	2b2a      	cmp	r3, #42	@ 0x2a
 800692a:	d015      	beq.n	8006958 <_vfiprintf_r+0x120>
 800692c:	9a07      	ldr	r2, [sp, #28]
 800692e:	4654      	mov	r4, sl
 8006930:	2000      	movs	r0, #0
 8006932:	f04f 0c0a 	mov.w	ip, #10
 8006936:	4621      	mov	r1, r4
 8006938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800693c:	3b30      	subs	r3, #48	@ 0x30
 800693e:	2b09      	cmp	r3, #9
 8006940:	d94b      	bls.n	80069da <_vfiprintf_r+0x1a2>
 8006942:	b1b0      	cbz	r0, 8006972 <_vfiprintf_r+0x13a>
 8006944:	9207      	str	r2, [sp, #28]
 8006946:	e014      	b.n	8006972 <_vfiprintf_r+0x13a>
 8006948:	eba0 0308 	sub.w	r3, r0, r8
 800694c:	fa09 f303 	lsl.w	r3, r9, r3
 8006950:	4313      	orrs	r3, r2
 8006952:	9304      	str	r3, [sp, #16]
 8006954:	46a2      	mov	sl, r4
 8006956:	e7d2      	b.n	80068fe <_vfiprintf_r+0xc6>
 8006958:	9b03      	ldr	r3, [sp, #12]
 800695a:	1d19      	adds	r1, r3, #4
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	9103      	str	r1, [sp, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	bfbb      	ittet	lt
 8006964:	425b      	neglt	r3, r3
 8006966:	f042 0202 	orrlt.w	r2, r2, #2
 800696a:	9307      	strge	r3, [sp, #28]
 800696c:	9307      	strlt	r3, [sp, #28]
 800696e:	bfb8      	it	lt
 8006970:	9204      	strlt	r2, [sp, #16]
 8006972:	7823      	ldrb	r3, [r4, #0]
 8006974:	2b2e      	cmp	r3, #46	@ 0x2e
 8006976:	d10a      	bne.n	800698e <_vfiprintf_r+0x156>
 8006978:	7863      	ldrb	r3, [r4, #1]
 800697a:	2b2a      	cmp	r3, #42	@ 0x2a
 800697c:	d132      	bne.n	80069e4 <_vfiprintf_r+0x1ac>
 800697e:	9b03      	ldr	r3, [sp, #12]
 8006980:	1d1a      	adds	r2, r3, #4
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	9203      	str	r2, [sp, #12]
 8006986:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800698a:	3402      	adds	r4, #2
 800698c:	9305      	str	r3, [sp, #20]
 800698e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a64 <_vfiprintf_r+0x22c>
 8006992:	7821      	ldrb	r1, [r4, #0]
 8006994:	2203      	movs	r2, #3
 8006996:	4650      	mov	r0, sl
 8006998:	f7f9 fc2a 	bl	80001f0 <memchr>
 800699c:	b138      	cbz	r0, 80069ae <_vfiprintf_r+0x176>
 800699e:	9b04      	ldr	r3, [sp, #16]
 80069a0:	eba0 000a 	sub.w	r0, r0, sl
 80069a4:	2240      	movs	r2, #64	@ 0x40
 80069a6:	4082      	lsls	r2, r0
 80069a8:	4313      	orrs	r3, r2
 80069aa:	3401      	adds	r4, #1
 80069ac:	9304      	str	r3, [sp, #16]
 80069ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069b2:	4829      	ldr	r0, [pc, #164]	@ (8006a58 <_vfiprintf_r+0x220>)
 80069b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069b8:	2206      	movs	r2, #6
 80069ba:	f7f9 fc19 	bl	80001f0 <memchr>
 80069be:	2800      	cmp	r0, #0
 80069c0:	d03f      	beq.n	8006a42 <_vfiprintf_r+0x20a>
 80069c2:	4b26      	ldr	r3, [pc, #152]	@ (8006a5c <_vfiprintf_r+0x224>)
 80069c4:	bb1b      	cbnz	r3, 8006a0e <_vfiprintf_r+0x1d6>
 80069c6:	9b03      	ldr	r3, [sp, #12]
 80069c8:	3307      	adds	r3, #7
 80069ca:	f023 0307 	bic.w	r3, r3, #7
 80069ce:	3308      	adds	r3, #8
 80069d0:	9303      	str	r3, [sp, #12]
 80069d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069d4:	443b      	add	r3, r7
 80069d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80069d8:	e76a      	b.n	80068b0 <_vfiprintf_r+0x78>
 80069da:	fb0c 3202 	mla	r2, ip, r2, r3
 80069de:	460c      	mov	r4, r1
 80069e0:	2001      	movs	r0, #1
 80069e2:	e7a8      	b.n	8006936 <_vfiprintf_r+0xfe>
 80069e4:	2300      	movs	r3, #0
 80069e6:	3401      	adds	r4, #1
 80069e8:	9305      	str	r3, [sp, #20]
 80069ea:	4619      	mov	r1, r3
 80069ec:	f04f 0c0a 	mov.w	ip, #10
 80069f0:	4620      	mov	r0, r4
 80069f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069f6:	3a30      	subs	r2, #48	@ 0x30
 80069f8:	2a09      	cmp	r2, #9
 80069fa:	d903      	bls.n	8006a04 <_vfiprintf_r+0x1cc>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0c6      	beq.n	800698e <_vfiprintf_r+0x156>
 8006a00:	9105      	str	r1, [sp, #20]
 8006a02:	e7c4      	b.n	800698e <_vfiprintf_r+0x156>
 8006a04:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a08:	4604      	mov	r4, r0
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e7f0      	b.n	80069f0 <_vfiprintf_r+0x1b8>
 8006a0e:	ab03      	add	r3, sp, #12
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	462a      	mov	r2, r5
 8006a14:	4b12      	ldr	r3, [pc, #72]	@ (8006a60 <_vfiprintf_r+0x228>)
 8006a16:	a904      	add	r1, sp, #16
 8006a18:	4630      	mov	r0, r6
 8006a1a:	f3af 8000 	nop.w
 8006a1e:	4607      	mov	r7, r0
 8006a20:	1c78      	adds	r0, r7, #1
 8006a22:	d1d6      	bne.n	80069d2 <_vfiprintf_r+0x19a>
 8006a24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a26:	07d9      	lsls	r1, r3, #31
 8006a28:	d405      	bmi.n	8006a36 <_vfiprintf_r+0x1fe>
 8006a2a:	89ab      	ldrh	r3, [r5, #12]
 8006a2c:	059a      	lsls	r2, r3, #22
 8006a2e:	d402      	bmi.n	8006a36 <_vfiprintf_r+0x1fe>
 8006a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a32:	f7ff fddd 	bl	80065f0 <__retarget_lock_release_recursive>
 8006a36:	89ab      	ldrh	r3, [r5, #12]
 8006a38:	065b      	lsls	r3, r3, #25
 8006a3a:	f53f af1f 	bmi.w	800687c <_vfiprintf_r+0x44>
 8006a3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a40:	e71e      	b.n	8006880 <_vfiprintf_r+0x48>
 8006a42:	ab03      	add	r3, sp, #12
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	462a      	mov	r2, r5
 8006a48:	4b05      	ldr	r3, [pc, #20]	@ (8006a60 <_vfiprintf_r+0x228>)
 8006a4a:	a904      	add	r1, sp, #16
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f000 f879 	bl	8006b44 <_printf_i>
 8006a52:	e7e4      	b.n	8006a1e <_vfiprintf_r+0x1e6>
 8006a54:	08008228 	.word	0x08008228
 8006a58:	08008232 	.word	0x08008232
 8006a5c:	00000000 	.word	0x00000000
 8006a60:	08006813 	.word	0x08006813
 8006a64:	0800822e 	.word	0x0800822e

08006a68 <_printf_common>:
 8006a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6c:	4616      	mov	r6, r2
 8006a6e:	4698      	mov	r8, r3
 8006a70:	688a      	ldr	r2, [r1, #8]
 8006a72:	690b      	ldr	r3, [r1, #16]
 8006a74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	bfb8      	it	lt
 8006a7c:	4613      	movlt	r3, r2
 8006a7e:	6033      	str	r3, [r6, #0]
 8006a80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a84:	4607      	mov	r7, r0
 8006a86:	460c      	mov	r4, r1
 8006a88:	b10a      	cbz	r2, 8006a8e <_printf_common+0x26>
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	6033      	str	r3, [r6, #0]
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	0699      	lsls	r1, r3, #26
 8006a92:	bf42      	ittt	mi
 8006a94:	6833      	ldrmi	r3, [r6, #0]
 8006a96:	3302      	addmi	r3, #2
 8006a98:	6033      	strmi	r3, [r6, #0]
 8006a9a:	6825      	ldr	r5, [r4, #0]
 8006a9c:	f015 0506 	ands.w	r5, r5, #6
 8006aa0:	d106      	bne.n	8006ab0 <_printf_common+0x48>
 8006aa2:	f104 0a19 	add.w	sl, r4, #25
 8006aa6:	68e3      	ldr	r3, [r4, #12]
 8006aa8:	6832      	ldr	r2, [r6, #0]
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	42ab      	cmp	r3, r5
 8006aae:	dc26      	bgt.n	8006afe <_printf_common+0x96>
 8006ab0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ab4:	6822      	ldr	r2, [r4, #0]
 8006ab6:	3b00      	subs	r3, #0
 8006ab8:	bf18      	it	ne
 8006aba:	2301      	movne	r3, #1
 8006abc:	0692      	lsls	r2, r2, #26
 8006abe:	d42b      	bmi.n	8006b18 <_printf_common+0xb0>
 8006ac0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ac4:	4641      	mov	r1, r8
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	47c8      	blx	r9
 8006aca:	3001      	adds	r0, #1
 8006acc:	d01e      	beq.n	8006b0c <_printf_common+0xa4>
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	6922      	ldr	r2, [r4, #16]
 8006ad2:	f003 0306 	and.w	r3, r3, #6
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	bf02      	ittt	eq
 8006ada:	68e5      	ldreq	r5, [r4, #12]
 8006adc:	6833      	ldreq	r3, [r6, #0]
 8006ade:	1aed      	subeq	r5, r5, r3
 8006ae0:	68a3      	ldr	r3, [r4, #8]
 8006ae2:	bf0c      	ite	eq
 8006ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ae8:	2500      	movne	r5, #0
 8006aea:	4293      	cmp	r3, r2
 8006aec:	bfc4      	itt	gt
 8006aee:	1a9b      	subgt	r3, r3, r2
 8006af0:	18ed      	addgt	r5, r5, r3
 8006af2:	2600      	movs	r6, #0
 8006af4:	341a      	adds	r4, #26
 8006af6:	42b5      	cmp	r5, r6
 8006af8:	d11a      	bne.n	8006b30 <_printf_common+0xc8>
 8006afa:	2000      	movs	r0, #0
 8006afc:	e008      	b.n	8006b10 <_printf_common+0xa8>
 8006afe:	2301      	movs	r3, #1
 8006b00:	4652      	mov	r2, sl
 8006b02:	4641      	mov	r1, r8
 8006b04:	4638      	mov	r0, r7
 8006b06:	47c8      	blx	r9
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d103      	bne.n	8006b14 <_printf_common+0xac>
 8006b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b14:	3501      	adds	r5, #1
 8006b16:	e7c6      	b.n	8006aa6 <_printf_common+0x3e>
 8006b18:	18e1      	adds	r1, r4, r3
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	2030      	movs	r0, #48	@ 0x30
 8006b1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b22:	4422      	add	r2, r4
 8006b24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b2c:	3302      	adds	r3, #2
 8006b2e:	e7c7      	b.n	8006ac0 <_printf_common+0x58>
 8006b30:	2301      	movs	r3, #1
 8006b32:	4622      	mov	r2, r4
 8006b34:	4641      	mov	r1, r8
 8006b36:	4638      	mov	r0, r7
 8006b38:	47c8      	blx	r9
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	d0e6      	beq.n	8006b0c <_printf_common+0xa4>
 8006b3e:	3601      	adds	r6, #1
 8006b40:	e7d9      	b.n	8006af6 <_printf_common+0x8e>
	...

08006b44 <_printf_i>:
 8006b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b48:	7e0f      	ldrb	r7, [r1, #24]
 8006b4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b4c:	2f78      	cmp	r7, #120	@ 0x78
 8006b4e:	4691      	mov	r9, r2
 8006b50:	4680      	mov	r8, r0
 8006b52:	460c      	mov	r4, r1
 8006b54:	469a      	mov	sl, r3
 8006b56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b5a:	d807      	bhi.n	8006b6c <_printf_i+0x28>
 8006b5c:	2f62      	cmp	r7, #98	@ 0x62
 8006b5e:	d80a      	bhi.n	8006b76 <_printf_i+0x32>
 8006b60:	2f00      	cmp	r7, #0
 8006b62:	f000 80d2 	beq.w	8006d0a <_printf_i+0x1c6>
 8006b66:	2f58      	cmp	r7, #88	@ 0x58
 8006b68:	f000 80b9 	beq.w	8006cde <_printf_i+0x19a>
 8006b6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b74:	e03a      	b.n	8006bec <_printf_i+0xa8>
 8006b76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b7a:	2b15      	cmp	r3, #21
 8006b7c:	d8f6      	bhi.n	8006b6c <_printf_i+0x28>
 8006b7e:	a101      	add	r1, pc, #4	@ (adr r1, 8006b84 <_printf_i+0x40>)
 8006b80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b84:	08006bdd 	.word	0x08006bdd
 8006b88:	08006bf1 	.word	0x08006bf1
 8006b8c:	08006b6d 	.word	0x08006b6d
 8006b90:	08006b6d 	.word	0x08006b6d
 8006b94:	08006b6d 	.word	0x08006b6d
 8006b98:	08006b6d 	.word	0x08006b6d
 8006b9c:	08006bf1 	.word	0x08006bf1
 8006ba0:	08006b6d 	.word	0x08006b6d
 8006ba4:	08006b6d 	.word	0x08006b6d
 8006ba8:	08006b6d 	.word	0x08006b6d
 8006bac:	08006b6d 	.word	0x08006b6d
 8006bb0:	08006cf1 	.word	0x08006cf1
 8006bb4:	08006c1b 	.word	0x08006c1b
 8006bb8:	08006cab 	.word	0x08006cab
 8006bbc:	08006b6d 	.word	0x08006b6d
 8006bc0:	08006b6d 	.word	0x08006b6d
 8006bc4:	08006d13 	.word	0x08006d13
 8006bc8:	08006b6d 	.word	0x08006b6d
 8006bcc:	08006c1b 	.word	0x08006c1b
 8006bd0:	08006b6d 	.word	0x08006b6d
 8006bd4:	08006b6d 	.word	0x08006b6d
 8006bd8:	08006cb3 	.word	0x08006cb3
 8006bdc:	6833      	ldr	r3, [r6, #0]
 8006bde:	1d1a      	adds	r2, r3, #4
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6032      	str	r2, [r6, #0]
 8006be4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006be8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bec:	2301      	movs	r3, #1
 8006bee:	e09d      	b.n	8006d2c <_printf_i+0x1e8>
 8006bf0:	6833      	ldr	r3, [r6, #0]
 8006bf2:	6820      	ldr	r0, [r4, #0]
 8006bf4:	1d19      	adds	r1, r3, #4
 8006bf6:	6031      	str	r1, [r6, #0]
 8006bf8:	0606      	lsls	r6, r0, #24
 8006bfa:	d501      	bpl.n	8006c00 <_printf_i+0xbc>
 8006bfc:	681d      	ldr	r5, [r3, #0]
 8006bfe:	e003      	b.n	8006c08 <_printf_i+0xc4>
 8006c00:	0645      	lsls	r5, r0, #25
 8006c02:	d5fb      	bpl.n	8006bfc <_printf_i+0xb8>
 8006c04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c08:	2d00      	cmp	r5, #0
 8006c0a:	da03      	bge.n	8006c14 <_printf_i+0xd0>
 8006c0c:	232d      	movs	r3, #45	@ 0x2d
 8006c0e:	426d      	negs	r5, r5
 8006c10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c14:	4859      	ldr	r0, [pc, #356]	@ (8006d7c <_printf_i+0x238>)
 8006c16:	230a      	movs	r3, #10
 8006c18:	e011      	b.n	8006c3e <_printf_i+0xfa>
 8006c1a:	6821      	ldr	r1, [r4, #0]
 8006c1c:	6833      	ldr	r3, [r6, #0]
 8006c1e:	0608      	lsls	r0, r1, #24
 8006c20:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c24:	d402      	bmi.n	8006c2c <_printf_i+0xe8>
 8006c26:	0649      	lsls	r1, r1, #25
 8006c28:	bf48      	it	mi
 8006c2a:	b2ad      	uxthmi	r5, r5
 8006c2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c2e:	4853      	ldr	r0, [pc, #332]	@ (8006d7c <_printf_i+0x238>)
 8006c30:	6033      	str	r3, [r6, #0]
 8006c32:	bf14      	ite	ne
 8006c34:	230a      	movne	r3, #10
 8006c36:	2308      	moveq	r3, #8
 8006c38:	2100      	movs	r1, #0
 8006c3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c3e:	6866      	ldr	r6, [r4, #4]
 8006c40:	60a6      	str	r6, [r4, #8]
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	bfa2      	ittt	ge
 8006c46:	6821      	ldrge	r1, [r4, #0]
 8006c48:	f021 0104 	bicge.w	r1, r1, #4
 8006c4c:	6021      	strge	r1, [r4, #0]
 8006c4e:	b90d      	cbnz	r5, 8006c54 <_printf_i+0x110>
 8006c50:	2e00      	cmp	r6, #0
 8006c52:	d04b      	beq.n	8006cec <_printf_i+0x1a8>
 8006c54:	4616      	mov	r6, r2
 8006c56:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c5a:	fb03 5711 	mls	r7, r3, r1, r5
 8006c5e:	5dc7      	ldrb	r7, [r0, r7]
 8006c60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c64:	462f      	mov	r7, r5
 8006c66:	42bb      	cmp	r3, r7
 8006c68:	460d      	mov	r5, r1
 8006c6a:	d9f4      	bls.n	8006c56 <_printf_i+0x112>
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d10b      	bne.n	8006c88 <_printf_i+0x144>
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	07df      	lsls	r7, r3, #31
 8006c74:	d508      	bpl.n	8006c88 <_printf_i+0x144>
 8006c76:	6923      	ldr	r3, [r4, #16]
 8006c78:	6861      	ldr	r1, [r4, #4]
 8006c7a:	4299      	cmp	r1, r3
 8006c7c:	bfde      	ittt	le
 8006c7e:	2330      	movle	r3, #48	@ 0x30
 8006c80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c88:	1b92      	subs	r2, r2, r6
 8006c8a:	6122      	str	r2, [r4, #16]
 8006c8c:	f8cd a000 	str.w	sl, [sp]
 8006c90:	464b      	mov	r3, r9
 8006c92:	aa03      	add	r2, sp, #12
 8006c94:	4621      	mov	r1, r4
 8006c96:	4640      	mov	r0, r8
 8006c98:	f7ff fee6 	bl	8006a68 <_printf_common>
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	d14a      	bne.n	8006d36 <_printf_i+0x1f2>
 8006ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca4:	b004      	add	sp, #16
 8006ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	f043 0320 	orr.w	r3, r3, #32
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	4833      	ldr	r0, [pc, #204]	@ (8006d80 <_printf_i+0x23c>)
 8006cb4:	2778      	movs	r7, #120	@ 0x78
 8006cb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	6831      	ldr	r1, [r6, #0]
 8006cbe:	061f      	lsls	r7, r3, #24
 8006cc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8006cc4:	d402      	bmi.n	8006ccc <_printf_i+0x188>
 8006cc6:	065f      	lsls	r7, r3, #25
 8006cc8:	bf48      	it	mi
 8006cca:	b2ad      	uxthmi	r5, r5
 8006ccc:	6031      	str	r1, [r6, #0]
 8006cce:	07d9      	lsls	r1, r3, #31
 8006cd0:	bf44      	itt	mi
 8006cd2:	f043 0320 	orrmi.w	r3, r3, #32
 8006cd6:	6023      	strmi	r3, [r4, #0]
 8006cd8:	b11d      	cbz	r5, 8006ce2 <_printf_i+0x19e>
 8006cda:	2310      	movs	r3, #16
 8006cdc:	e7ac      	b.n	8006c38 <_printf_i+0xf4>
 8006cde:	4827      	ldr	r0, [pc, #156]	@ (8006d7c <_printf_i+0x238>)
 8006ce0:	e7e9      	b.n	8006cb6 <_printf_i+0x172>
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	f023 0320 	bic.w	r3, r3, #32
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	e7f6      	b.n	8006cda <_printf_i+0x196>
 8006cec:	4616      	mov	r6, r2
 8006cee:	e7bd      	b.n	8006c6c <_printf_i+0x128>
 8006cf0:	6833      	ldr	r3, [r6, #0]
 8006cf2:	6825      	ldr	r5, [r4, #0]
 8006cf4:	6961      	ldr	r1, [r4, #20]
 8006cf6:	1d18      	adds	r0, r3, #4
 8006cf8:	6030      	str	r0, [r6, #0]
 8006cfa:	062e      	lsls	r6, r5, #24
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	d501      	bpl.n	8006d04 <_printf_i+0x1c0>
 8006d00:	6019      	str	r1, [r3, #0]
 8006d02:	e002      	b.n	8006d0a <_printf_i+0x1c6>
 8006d04:	0668      	lsls	r0, r5, #25
 8006d06:	d5fb      	bpl.n	8006d00 <_printf_i+0x1bc>
 8006d08:	8019      	strh	r1, [r3, #0]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	6123      	str	r3, [r4, #16]
 8006d0e:	4616      	mov	r6, r2
 8006d10:	e7bc      	b.n	8006c8c <_printf_i+0x148>
 8006d12:	6833      	ldr	r3, [r6, #0]
 8006d14:	1d1a      	adds	r2, r3, #4
 8006d16:	6032      	str	r2, [r6, #0]
 8006d18:	681e      	ldr	r6, [r3, #0]
 8006d1a:	6862      	ldr	r2, [r4, #4]
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f7f9 fa66 	bl	80001f0 <memchr>
 8006d24:	b108      	cbz	r0, 8006d2a <_printf_i+0x1e6>
 8006d26:	1b80      	subs	r0, r0, r6
 8006d28:	6060      	str	r0, [r4, #4]
 8006d2a:	6863      	ldr	r3, [r4, #4]
 8006d2c:	6123      	str	r3, [r4, #16]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d34:	e7aa      	b.n	8006c8c <_printf_i+0x148>
 8006d36:	6923      	ldr	r3, [r4, #16]
 8006d38:	4632      	mov	r2, r6
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	47d0      	blx	sl
 8006d40:	3001      	adds	r0, #1
 8006d42:	d0ad      	beq.n	8006ca0 <_printf_i+0x15c>
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	079b      	lsls	r3, r3, #30
 8006d48:	d413      	bmi.n	8006d72 <_printf_i+0x22e>
 8006d4a:	68e0      	ldr	r0, [r4, #12]
 8006d4c:	9b03      	ldr	r3, [sp, #12]
 8006d4e:	4298      	cmp	r0, r3
 8006d50:	bfb8      	it	lt
 8006d52:	4618      	movlt	r0, r3
 8006d54:	e7a6      	b.n	8006ca4 <_printf_i+0x160>
 8006d56:	2301      	movs	r3, #1
 8006d58:	4632      	mov	r2, r6
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	47d0      	blx	sl
 8006d60:	3001      	adds	r0, #1
 8006d62:	d09d      	beq.n	8006ca0 <_printf_i+0x15c>
 8006d64:	3501      	adds	r5, #1
 8006d66:	68e3      	ldr	r3, [r4, #12]
 8006d68:	9903      	ldr	r1, [sp, #12]
 8006d6a:	1a5b      	subs	r3, r3, r1
 8006d6c:	42ab      	cmp	r3, r5
 8006d6e:	dcf2      	bgt.n	8006d56 <_printf_i+0x212>
 8006d70:	e7eb      	b.n	8006d4a <_printf_i+0x206>
 8006d72:	2500      	movs	r5, #0
 8006d74:	f104 0619 	add.w	r6, r4, #25
 8006d78:	e7f5      	b.n	8006d66 <_printf_i+0x222>
 8006d7a:	bf00      	nop
 8006d7c:	08008239 	.word	0x08008239
 8006d80:	0800824a 	.word	0x0800824a

08006d84 <__sflush_r>:
 8006d84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8c:	0716      	lsls	r6, r2, #28
 8006d8e:	4605      	mov	r5, r0
 8006d90:	460c      	mov	r4, r1
 8006d92:	d454      	bmi.n	8006e3e <__sflush_r+0xba>
 8006d94:	684b      	ldr	r3, [r1, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	dc02      	bgt.n	8006da0 <__sflush_r+0x1c>
 8006d9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	dd48      	ble.n	8006e32 <__sflush_r+0xae>
 8006da0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006da2:	2e00      	cmp	r6, #0
 8006da4:	d045      	beq.n	8006e32 <__sflush_r+0xae>
 8006da6:	2300      	movs	r3, #0
 8006da8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006dac:	682f      	ldr	r7, [r5, #0]
 8006dae:	6a21      	ldr	r1, [r4, #32]
 8006db0:	602b      	str	r3, [r5, #0]
 8006db2:	d030      	beq.n	8006e16 <__sflush_r+0x92>
 8006db4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	0759      	lsls	r1, r3, #29
 8006dba:	d505      	bpl.n	8006dc8 <__sflush_r+0x44>
 8006dbc:	6863      	ldr	r3, [r4, #4]
 8006dbe:	1ad2      	subs	r2, r2, r3
 8006dc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006dc2:	b10b      	cbz	r3, 8006dc8 <__sflush_r+0x44>
 8006dc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006dc6:	1ad2      	subs	r2, r2, r3
 8006dc8:	2300      	movs	r3, #0
 8006dca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006dcc:	6a21      	ldr	r1, [r4, #32]
 8006dce:	4628      	mov	r0, r5
 8006dd0:	47b0      	blx	r6
 8006dd2:	1c43      	adds	r3, r0, #1
 8006dd4:	89a3      	ldrh	r3, [r4, #12]
 8006dd6:	d106      	bne.n	8006de6 <__sflush_r+0x62>
 8006dd8:	6829      	ldr	r1, [r5, #0]
 8006dda:	291d      	cmp	r1, #29
 8006ddc:	d82b      	bhi.n	8006e36 <__sflush_r+0xb2>
 8006dde:	4a2a      	ldr	r2, [pc, #168]	@ (8006e88 <__sflush_r+0x104>)
 8006de0:	410a      	asrs	r2, r1
 8006de2:	07d6      	lsls	r6, r2, #31
 8006de4:	d427      	bmi.n	8006e36 <__sflush_r+0xb2>
 8006de6:	2200      	movs	r2, #0
 8006de8:	6062      	str	r2, [r4, #4]
 8006dea:	04d9      	lsls	r1, r3, #19
 8006dec:	6922      	ldr	r2, [r4, #16]
 8006dee:	6022      	str	r2, [r4, #0]
 8006df0:	d504      	bpl.n	8006dfc <__sflush_r+0x78>
 8006df2:	1c42      	adds	r2, r0, #1
 8006df4:	d101      	bne.n	8006dfa <__sflush_r+0x76>
 8006df6:	682b      	ldr	r3, [r5, #0]
 8006df8:	b903      	cbnz	r3, 8006dfc <__sflush_r+0x78>
 8006dfa:	6560      	str	r0, [r4, #84]	@ 0x54
 8006dfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dfe:	602f      	str	r7, [r5, #0]
 8006e00:	b1b9      	cbz	r1, 8006e32 <__sflush_r+0xae>
 8006e02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e06:	4299      	cmp	r1, r3
 8006e08:	d002      	beq.n	8006e10 <__sflush_r+0x8c>
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f7ff fbf2 	bl	80065f4 <_free_r>
 8006e10:	2300      	movs	r3, #0
 8006e12:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e14:	e00d      	b.n	8006e32 <__sflush_r+0xae>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4628      	mov	r0, r5
 8006e1a:	47b0      	blx	r6
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	1c50      	adds	r0, r2, #1
 8006e20:	d1c9      	bne.n	8006db6 <__sflush_r+0x32>
 8006e22:	682b      	ldr	r3, [r5, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0c6      	beq.n	8006db6 <__sflush_r+0x32>
 8006e28:	2b1d      	cmp	r3, #29
 8006e2a:	d001      	beq.n	8006e30 <__sflush_r+0xac>
 8006e2c:	2b16      	cmp	r3, #22
 8006e2e:	d11e      	bne.n	8006e6e <__sflush_r+0xea>
 8006e30:	602f      	str	r7, [r5, #0]
 8006e32:	2000      	movs	r0, #0
 8006e34:	e022      	b.n	8006e7c <__sflush_r+0xf8>
 8006e36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e3a:	b21b      	sxth	r3, r3
 8006e3c:	e01b      	b.n	8006e76 <__sflush_r+0xf2>
 8006e3e:	690f      	ldr	r7, [r1, #16]
 8006e40:	2f00      	cmp	r7, #0
 8006e42:	d0f6      	beq.n	8006e32 <__sflush_r+0xae>
 8006e44:	0793      	lsls	r3, r2, #30
 8006e46:	680e      	ldr	r6, [r1, #0]
 8006e48:	bf08      	it	eq
 8006e4a:	694b      	ldreq	r3, [r1, #20]
 8006e4c:	600f      	str	r7, [r1, #0]
 8006e4e:	bf18      	it	ne
 8006e50:	2300      	movne	r3, #0
 8006e52:	eba6 0807 	sub.w	r8, r6, r7
 8006e56:	608b      	str	r3, [r1, #8]
 8006e58:	f1b8 0f00 	cmp.w	r8, #0
 8006e5c:	dde9      	ble.n	8006e32 <__sflush_r+0xae>
 8006e5e:	6a21      	ldr	r1, [r4, #32]
 8006e60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e62:	4643      	mov	r3, r8
 8006e64:	463a      	mov	r2, r7
 8006e66:	4628      	mov	r0, r5
 8006e68:	47b0      	blx	r6
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	dc08      	bgt.n	8006e80 <__sflush_r+0xfc>
 8006e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e76:	81a3      	strh	r3, [r4, #12]
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e80:	4407      	add	r7, r0
 8006e82:	eba8 0800 	sub.w	r8, r8, r0
 8006e86:	e7e7      	b.n	8006e58 <__sflush_r+0xd4>
 8006e88:	dfbffffe 	.word	0xdfbffffe

08006e8c <_fflush_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	690b      	ldr	r3, [r1, #16]
 8006e90:	4605      	mov	r5, r0
 8006e92:	460c      	mov	r4, r1
 8006e94:	b913      	cbnz	r3, 8006e9c <_fflush_r+0x10>
 8006e96:	2500      	movs	r5, #0
 8006e98:	4628      	mov	r0, r5
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	b118      	cbz	r0, 8006ea6 <_fflush_r+0x1a>
 8006e9e:	6a03      	ldr	r3, [r0, #32]
 8006ea0:	b90b      	cbnz	r3, 8006ea6 <_fflush_r+0x1a>
 8006ea2:	f7ff f9ad 	bl	8006200 <__sinit>
 8006ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0f3      	beq.n	8006e96 <_fflush_r+0xa>
 8006eae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006eb0:	07d0      	lsls	r0, r2, #31
 8006eb2:	d404      	bmi.n	8006ebe <_fflush_r+0x32>
 8006eb4:	0599      	lsls	r1, r3, #22
 8006eb6:	d402      	bmi.n	8006ebe <_fflush_r+0x32>
 8006eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eba:	f7ff fb98 	bl	80065ee <__retarget_lock_acquire_recursive>
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	f7ff ff5f 	bl	8006d84 <__sflush_r>
 8006ec6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ec8:	07da      	lsls	r2, r3, #31
 8006eca:	4605      	mov	r5, r0
 8006ecc:	d4e4      	bmi.n	8006e98 <_fflush_r+0xc>
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	059b      	lsls	r3, r3, #22
 8006ed2:	d4e1      	bmi.n	8006e98 <_fflush_r+0xc>
 8006ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ed6:	f7ff fb8b 	bl	80065f0 <__retarget_lock_release_recursive>
 8006eda:	e7dd      	b.n	8006e98 <_fflush_r+0xc>

08006edc <__swhatbuf_r>:
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	460c      	mov	r4, r1
 8006ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	b096      	sub	sp, #88	@ 0x58
 8006ee8:	4615      	mov	r5, r2
 8006eea:	461e      	mov	r6, r3
 8006eec:	da0d      	bge.n	8006f0a <__swhatbuf_r+0x2e>
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ef4:	f04f 0100 	mov.w	r1, #0
 8006ef8:	bf14      	ite	ne
 8006efa:	2340      	movne	r3, #64	@ 0x40
 8006efc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f00:	2000      	movs	r0, #0
 8006f02:	6031      	str	r1, [r6, #0]
 8006f04:	602b      	str	r3, [r5, #0]
 8006f06:	b016      	add	sp, #88	@ 0x58
 8006f08:	bd70      	pop	{r4, r5, r6, pc}
 8006f0a:	466a      	mov	r2, sp
 8006f0c:	f000 f848 	bl	8006fa0 <_fstat_r>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	dbec      	blt.n	8006eee <__swhatbuf_r+0x12>
 8006f14:	9901      	ldr	r1, [sp, #4]
 8006f16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f1e:	4259      	negs	r1, r3
 8006f20:	4159      	adcs	r1, r3
 8006f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f26:	e7eb      	b.n	8006f00 <__swhatbuf_r+0x24>

08006f28 <__smakebuf_r>:
 8006f28:	898b      	ldrh	r3, [r1, #12]
 8006f2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f2c:	079d      	lsls	r5, r3, #30
 8006f2e:	4606      	mov	r6, r0
 8006f30:	460c      	mov	r4, r1
 8006f32:	d507      	bpl.n	8006f44 <__smakebuf_r+0x1c>
 8006f34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	6123      	str	r3, [r4, #16]
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	6163      	str	r3, [r4, #20]
 8006f40:	b003      	add	sp, #12
 8006f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f44:	ab01      	add	r3, sp, #4
 8006f46:	466a      	mov	r2, sp
 8006f48:	f7ff ffc8 	bl	8006edc <__swhatbuf_r>
 8006f4c:	9f00      	ldr	r7, [sp, #0]
 8006f4e:	4605      	mov	r5, r0
 8006f50:	4639      	mov	r1, r7
 8006f52:	4630      	mov	r0, r6
 8006f54:	f7ff fbba 	bl	80066cc <_malloc_r>
 8006f58:	b948      	cbnz	r0, 8006f6e <__smakebuf_r+0x46>
 8006f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f5e:	059a      	lsls	r2, r3, #22
 8006f60:	d4ee      	bmi.n	8006f40 <__smakebuf_r+0x18>
 8006f62:	f023 0303 	bic.w	r3, r3, #3
 8006f66:	f043 0302 	orr.w	r3, r3, #2
 8006f6a:	81a3      	strh	r3, [r4, #12]
 8006f6c:	e7e2      	b.n	8006f34 <__smakebuf_r+0xc>
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	6020      	str	r0, [r4, #0]
 8006f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f76:	81a3      	strh	r3, [r4, #12]
 8006f78:	9b01      	ldr	r3, [sp, #4]
 8006f7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f7e:	b15b      	cbz	r3, 8006f98 <__smakebuf_r+0x70>
 8006f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f84:	4630      	mov	r0, r6
 8006f86:	f000 f81d 	bl	8006fc4 <_isatty_r>
 8006f8a:	b128      	cbz	r0, 8006f98 <__smakebuf_r+0x70>
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	f023 0303 	bic.w	r3, r3, #3
 8006f92:	f043 0301 	orr.w	r3, r3, #1
 8006f96:	81a3      	strh	r3, [r4, #12]
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	431d      	orrs	r5, r3
 8006f9c:	81a5      	strh	r5, [r4, #12]
 8006f9e:	e7cf      	b.n	8006f40 <__smakebuf_r+0x18>

08006fa0 <_fstat_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4d07      	ldr	r5, [pc, #28]	@ (8006fc0 <_fstat_r+0x20>)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	4608      	mov	r0, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	602b      	str	r3, [r5, #0]
 8006fae:	f7fb fc47 	bl	8002840 <_fstat>
 8006fb2:	1c43      	adds	r3, r0, #1
 8006fb4:	d102      	bne.n	8006fbc <_fstat_r+0x1c>
 8006fb6:	682b      	ldr	r3, [r5, #0]
 8006fb8:	b103      	cbz	r3, 8006fbc <_fstat_r+0x1c>
 8006fba:	6023      	str	r3, [r4, #0]
 8006fbc:	bd38      	pop	{r3, r4, r5, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20025d1c 	.word	0x20025d1c

08006fc4 <_isatty_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4d06      	ldr	r5, [pc, #24]	@ (8006fe0 <_isatty_r+0x1c>)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4604      	mov	r4, r0
 8006fcc:	4608      	mov	r0, r1
 8006fce:	602b      	str	r3, [r5, #0]
 8006fd0:	f7fb fc46 	bl	8002860 <_isatty>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d102      	bne.n	8006fde <_isatty_r+0x1a>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	b103      	cbz	r3, 8006fde <_isatty_r+0x1a>
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	20025d1c 	.word	0x20025d1c

08006fe4 <_sbrk_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4d06      	ldr	r5, [pc, #24]	@ (8007000 <_sbrk_r+0x1c>)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	4604      	mov	r4, r0
 8006fec:	4608      	mov	r0, r1
 8006fee:	602b      	str	r3, [r5, #0]
 8006ff0:	f7fb fc4e 	bl	8002890 <_sbrk>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d102      	bne.n	8006ffe <_sbrk_r+0x1a>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	b103      	cbz	r3, 8006ffe <_sbrk_r+0x1a>
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	20025d1c 	.word	0x20025d1c

08007004 <_init>:
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007006:	bf00      	nop
 8007008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700a:	bc08      	pop	{r3}
 800700c:	469e      	mov	lr, r3
 800700e:	4770      	bx	lr

08007010 <_fini>:
 8007010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007012:	bf00      	nop
 8007014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007016:	bc08      	pop	{r3}
 8007018:	469e      	mov	lr, r3
 800701a:	4770      	bx	lr
