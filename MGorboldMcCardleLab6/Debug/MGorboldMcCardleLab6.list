
MGorboldMcCardleLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e18  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001300  08007fc8  08007fc8  00008fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092c8  080092c8  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  080092c8  080092c8  0000a2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092d0  080092d0  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092d0  080092d0  0000a2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080092d4  080092d4  0000a2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080092d8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b078  2**0
                  CONTENTS
 10 .bss          00025cf0  20000078  20000078  0000b078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025d68  20025d68  0000b078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014526  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000348a  00000000  00000000  0001f5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  00022a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc3  00000000  00000000  00023ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027592  00000000  00000000  00024e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e4c  00000000  00000000  0004c42d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2de7  00000000  00000000  00066279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149060  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ef0  00000000  00000000  001490a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0014ef94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007fb0 	.word	0x08007fb0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007fb0 	.word	0x08007fb0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 ff20 	bl	80033c8 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 ff0c 	bl	80013a4 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fec9 	bl	8001324 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f001 f822 	bl	80015e0 <LCD_Clear>
    Game_Init();
 800059c:	f000 f90e 	bl	80007bc <Game_Init>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005a0:	f001 fa97 	bl	8001ad2 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a4:	4b02      	ldr	r3, [pc, #8]	@ (80005b0 <ApplicationInit+0x30>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000094 	.word	0x20000094

080005b4 <LCD_Touch_Polling_Demo>:
	visualDemo();
}

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_GREEN);
 80005b8:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80005bc:	2000      	movs	r0, #0
 80005be:	f001 f80f 	bl	80015e0 <LCD_Clear>
	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005c2:	480f      	ldr	r0, [pc, #60]	@ (8000600 <LCD_Touch_Polling_Demo+0x4c>)
 80005c4:	f001 fa90 	bl	8001ae8 <returnTouchStateAndLocation>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10e      	bne.n	80005ec <LCD_Touch_Polling_Demo+0x38>
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <LCD_Touch_Polling_Demo+0x4c>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	4619      	mov	r1, r3
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <LCD_Touch_Polling_Demo+0x4c>)
 80005d6:	885b      	ldrh	r3, [r3, #2]
 80005d8:	461a      	mov	r2, r3
 80005da:	480a      	ldr	r0, [pc, #40]	@ (8000604 <LCD_Touch_Polling_Demo+0x50>)
 80005dc:	f006 fd98 	bl	8007110 <iprintf>
			LCD_Clear(0, LCD_COLOR_RED);
 80005e0:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 fffb 	bl	80015e0 <LCD_Clear>
 80005ea:	e7ea      	b.n	80005c2 <LCD_Touch_Polling_Demo+0xe>
		} else {
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 80005ec:	4806      	ldr	r0, [pc, #24]	@ (8000608 <LCD_Touch_Polling_Demo+0x54>)
 80005ee:	f006 fdf7 	bl	80071e0 <puts>
			LCD_Clear(0, LCD_COLOR_GREEN);
 80005f2:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80005f6:	2000      	movs	r0, #0
 80005f8:	f000 fff2 	bl	80015e0 <LCD_Clear>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005fc:	e7e1      	b.n	80005c2 <LCD_Touch_Polling_Demo+0xe>
 80005fe:	bf00      	nop
 8000600:	20000094 	.word	0x20000094
 8000604:	08007fc8 	.word	0x08007fc8
 8000608:	08007fdc 	.word	0x08007fdc

0800060c <EXTI0_IRQHandler>:
		}
	}
}
#endif // COMPILE_TOUCH_FUNCTIONS

void EXTI0_IRQHandler(){ // change interrupt type to rising
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	disableInterruptIRQ(EXTI0_IRQn);
 8000610:	2006      	movs	r0, #6
 8000612:	f000 fd8c 	bl	800112e <disableInterruptIRQ>
	clearInterruptEXTI(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fdac 	bl	8001174 <clearInterruptEXTI>
	// User Button actions
	if(ConnectFour_DropPiece(Game.currentCol)){
 800061c:	4b51      	ldr	r3, [pc, #324]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 800061e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fb82 	bl	8000d2c <ConnectFour_DropPiece>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	f000 8092 	beq.w	8000754 <EXTI0_IRQHandler+0x148>

		ConnectFour_DrawBoard();
 8000630:	f000 f9ee 	bl	8000a10 <ConnectFour_DrawBoard>
		if(ConnectFour_CheckWin()){
 8000634:	f000 fbf0 	bl	8000e18 <ConnectFour_CheckWin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d022      	beq.n	8000684 <EXTI0_IRQHandler+0x78>
			Game.winner = Game.currentPlayer;
 800063e:	4b49      	ldr	r3, [pc, #292]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000640:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8000644:	4b47      	ldr	r3, [pc, #284]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000646:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			if(Game.currentPlayer == PLAYER_ONE){
 800064a:	4b46      	ldr	r3, [pc, #280]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 800064c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000650:	2b01      	cmp	r3, #1
 8000652:	d108      	bne.n	8000666 <EXTI0_IRQHandler+0x5a>
				Game.YellowWins++;
 8000654:	4b43      	ldr	r3, [pc, #268]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000656:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800065a:	3301      	adds	r3, #1
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b41      	ldr	r3, [pc, #260]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000660:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8000664:	e007      	b.n	8000676 <EXTI0_IRQHandler+0x6a>
			}
			else{
				Game.RedWins++;
 8000666:	4b3f      	ldr	r3, [pc, #252]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000668:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b3c      	ldr	r3, [pc, #240]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000672:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			}
			Game.state = STATE_GAME_OVER;
 8000676:	4b3b      	ldr	r3, [pc, #236]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000678:	2202      	movs	r2, #2
 800067a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			ConnectFour_GameOver();
 800067e:	f000 fa19 	bl	8000ab4 <ConnectFour_GameOver>
 8000682:	e067      	b.n	8000754 <EXTI0_IRQHandler+0x148>
		}
		else if(ConnectFour_CheckDraw()){
 8000684:	f000 fd16 	bl	80010b4 <ConnectFour_CheckDraw>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00a      	beq.n	80006a4 <EXTI0_IRQHandler+0x98>
			Game.isDraw = 1;
 800068e:	4b35      	ldr	r3, [pc, #212]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000690:	2201      	movs	r2, #1
 8000692:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
			Game.state = STATE_GAME_OVER;
 8000696:	4b33      	ldr	r3, [pc, #204]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000698:	2202      	movs	r2, #2
 800069a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			ConnectFour_GameOver();
 800069e:	f000 fa09 	bl	8000ab4 <ConnectFour_GameOver>
 80006a2:	e057      	b.n	8000754 <EXTI0_IRQHandler+0x148>
		}
		// change turns
		else{
			if(Game.currentPlayer == PLAYER_ONE){
 80006a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 80006a6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d103      	bne.n	80006b6 <EXTI0_IRQHandler+0xaa>
				Game.currentPlayer = PLAYER_TWO;
 80006ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			}
			if(Game.currentPlayer == PLAYER_TWO){
 80006b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 80006b8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d103      	bne.n	80006c8 <EXTI0_IRQHandler+0xbc>
				Game.currentPlayer = PLAYER_ONE;
 80006c0:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			}
			ConnectFour_DrawPiece();
 80006c8:	f000 f974 	bl	80009b4 <ConnectFour_DrawPiece>
			if(Game.currentPlayer == COMPUTER_PLAYER && Game.gameMode == GAMEMODE_ONE_PLAYER){
 80006cc:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 80006ce:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d138      	bne.n	8000748 <EXTI0_IRQHandler+0x13c>
 80006d6:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 80006d8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d133      	bne.n	8000748 <EXTI0_IRQHandler+0x13c>
				HAL_Delay(500);
 80006e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006e4:	f002 ffec 	bl	80036c0 <HAL_Delay>
				ConnectFour_ComputerMove();
 80006e8:	f000 fb50 	bl	8000d8c <ConnectFour_ComputerMove>
				ConnectFour_DrawBoard();
 80006ec:	f000 f990 	bl	8000a10 <ConnectFour_DrawBoard>

				if(ConnectFour_CheckWin()){
 80006f0:	f000 fb92 	bl	8000e18 <ConnectFour_CheckWin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d012      	beq.n	8000720 <EXTI0_IRQHandler+0x114>
					Game.winner = COMPUTER_PLAYER;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 80006fc:	2202      	movs	r2, #2
 80006fe:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
					Game.RedWins++;
 8000702:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000704:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000708:	3301      	adds	r3, #1
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 800070e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
					Game.state = STATE_GAME_OVER;
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000714:	2202      	movs	r2, #2
 8000716:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					ConnectFour_GameOver();
 800071a:	f000 f9cb 	bl	8000ab4 <ConnectFour_GameOver>
 800071e:	e013      	b.n	8000748 <EXTI0_IRQHandler+0x13c>
				}
				else if(ConnectFour_CheckDraw()){
 8000720:	f000 fcc8 	bl	80010b4 <ConnectFour_CheckDraw>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d00a      	beq.n	8000740 <EXTI0_IRQHandler+0x134>
					Game.isDraw = 1;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 800072c:	2201      	movs	r2, #1
 800072e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
					Game.state = STATE_GAME_OVER;
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000734:	2202      	movs	r2, #2
 8000736:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					ConnectFour_GameOver();
 800073a:	f000 f9bb 	bl	8000ab4 <ConnectFour_GameOver>
 800073e:	e003      	b.n	8000748 <EXTI0_IRQHandler+0x13c>
				}
				else{
					Game.currentPlayer = PLAYER_ONE;
 8000740:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <EXTI0_IRQHandler+0x158>)
 8000742:	2201      	movs	r2, #1
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				}
			}
			screen2();
 8000748:	f001 f94c 	bl	80019e4 <screen2>
			ConnectFour_DrawPiece();
 800074c:	f000 f932 	bl	80009b4 <ConnectFour_DrawPiece>
			ConnectFour_DrawBoard();
 8000750:	f000 f95e 	bl	8000a10 <ConnectFour_DrawBoard>
			// check if game is over

		}
	}
	clearInterruptIRQ(EXTI0_IRQn);
 8000754:	2006      	movs	r0, #6
 8000756:	f000 fcfb 	bl	8001150 <clearInterruptIRQ>
	enableInterruptIRQ(EXTI0_IRQn);
 800075a:	2006      	movs	r0, #6
 800075c:	f000 fcd6 	bl	800110c <enableInterruptIRQ>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000009c 	.word	0x2000009c

08000768 <Button_Interrupts_Init>:
	else{
		return FALSE;
	}
}

void Button_Interrupts_Init(){
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOA_BUTTON;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <Button_Interrupts_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a0f      	ldr	r2, [pc, #60]	@ (80007b4 <Button_Interrupts_Init+0x4c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <Button_Interrupts_Init+0x4c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
	GPIOA_BUTTON.Pin = GPIO_PIN_0;
 800078a:	2301      	movs	r3, #1
 800078c:	607b      	str	r3, [r7, #4]
	GPIOA_BUTTON.Mode = GPIO_MODE_IT_RISING;
 800078e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000792:	60bb      	str	r3, [r7, #8]
	GPIOA_BUTTON.Speed = GPIO_SPEED_FREQ_HIGH; // choose speed high
 8000794:	2302      	movs	r3, #2
 8000796:	613b      	str	r3, [r7, #16]
	// GPIOA_BUTTON.OPType = GPIO_OPTYPE_PUSHPULL;
	GPIOA_BUTTON.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
	// GPIOA_BUTTON.Alternate = 0;
	HAL_GPIO_Init(GPIOA, &GPIOA_BUTTON);
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <Button_Interrupts_Init+0x50>)
 80007a2:	f003 f921 	bl	80039e8 <HAL_GPIO_Init>
	enableInterruptIRQ(EXTI0_IRQn);
 80007a6:	2006      	movs	r0, #6
 80007a8:	f000 fcb0 	bl	800110c <enableInterruptIRQ>
}
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000

080007bc <Game_Init>:

ConnectFourGame Game;
RNG_HandleTypeDef hrng;
static STMPE811_TouchData TouchScreen;

void Game_Init(void){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	TouchScreen.orientation = STMPE811_Orientation_Portrait_2;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <Game_Init+0x20>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	719a      	strb	r2, [r3, #6]
	ConnectFour_ResetGame();
 80007c6:	f000 f80d 	bl	80007e4 <ConnectFour_ResetGame>
	Game.state = STATE_MENU;
 80007ca:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <Game_Init+0x24>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	Button_Interrupts_Init();
 80007d2:	f7ff ffc9 	bl	8000768 <Button_Interrupts_Init>
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000e0 	.word	0x200000e0
 80007e0:	2000009c 	.word	0x2000009c

080007e4 <ConnectFour_ResetGame>:

void ConnectFour_ResetGame(void){
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
	for(int rows = 1; rows <= BOARD_ROWS; rows++){
 80007ea:	2301      	movs	r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	e015      	b.n	800081c <ConnectFour_ResetGame+0x38>
		for(int cols = 1; cols <= BOARD_COLS; cols++){
 80007f0:	2301      	movs	r3, #1
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	e00c      	b.n	8000810 <ConnectFour_ResetGame+0x2c>
			Game.board[rows][cols] = EMPTY_CELL;
 80007f6:	4916      	ldr	r1, [pc, #88]	@ (8000850 <ConnectFour_ResetGame+0x6c>)
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4613      	mov	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	18ca      	adds	r2, r1, r3
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	4413      	add	r3, r2
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
		for(int cols = 1; cols <= BOARD_COLS; cols++){
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	2b07      	cmp	r3, #7
 8000814:	ddef      	ble.n	80007f6 <ConnectFour_ResetGame+0x12>
	for(int rows = 1; rows <= BOARD_ROWS; rows++){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3301      	adds	r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b06      	cmp	r3, #6
 8000820:	dde6      	ble.n	80007f0 <ConnectFour_ResetGame+0xc>
		}
	}

	Game.currentPlayer = PLAYER_ONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <ConnectFour_ResetGame+0x6c>)
 8000824:	2201      	movs	r2, #1
 8000826:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	Game.currentCol = 4;
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <ConnectFour_ResetGame+0x6c>)
 800082c:	2204      	movs	r2, #4
 800082e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	Game.winner = 0;
 8000832:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <ConnectFour_ResetGame+0x6c>)
 8000834:	2200      	movs	r2, #0
 8000836:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	Game.isDraw = 0;
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <ConnectFour_ResetGame+0x6c>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	2000009c 	.word	0x2000009c

08000854 <ConnectFour_GameLoop>:

void ConnectFour_GameLoop(void){
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	screen1();
 8000858:	f000 ff94 	bl	8001784 <screen1>

	while(1){
		if(returnTouchStateAndLocation(&TouchScreen) == STMPE811_State_Pressed){
 800085c:	480a      	ldr	r0, [pc, #40]	@ (8000888 <ConnectFour_GameLoop+0x34>)
 800085e:	f001 f943 	bl	8001ae8 <returnTouchStateAndLocation>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10b      	bne.n	8000880 <ConnectFour_GameLoop+0x2c>
			ConnectFour_ProcessInput(&TouchScreen);
 8000868:	4807      	ldr	r0, [pc, #28]	@ (8000888 <ConnectFour_GameLoop+0x34>)
 800086a:	f000 f811 	bl	8000890 <ConnectFour_ProcessInput>
			printf("\nX: %03d\nY: %03d\n", TouchScreen.x, TouchScreen.y);
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <ConnectFour_GameLoop+0x34>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	4619      	mov	r1, r3
 8000874:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <ConnectFour_GameLoop+0x34>)
 8000876:	885b      	ldrh	r3, [r3, #2]
 8000878:	461a      	mov	r2, r3
 800087a:	4804      	ldr	r0, [pc, #16]	@ (800088c <ConnectFour_GameLoop+0x38>)
 800087c:	f006 fc48 	bl	8007110 <iprintf>
		}
		HAL_Delay(100);
 8000880:	2064      	movs	r0, #100	@ 0x64
 8000882:	f002 ff1d 	bl	80036c0 <HAL_Delay>
		if(returnTouchStateAndLocation(&TouchScreen) == STMPE811_State_Pressed){
 8000886:	e7e9      	b.n	800085c <ConnectFour_GameLoop+0x8>
 8000888:	200000e0 	.word	0x200000e0
 800088c:	08007fec 	.word	0x08007fec

08000890 <ConnectFour_ProcessInput>:
	}
}

void ConnectFour_ProcessInput(STMPE811_TouchData *touchData){
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	uint16_t x = TouchScreen.x;
 8000898:	4b44      	ldr	r3, [pc, #272]	@ (80009ac <ConnectFour_ProcessInput+0x11c>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	81fb      	strh	r3, [r7, #14]
	uint16_t y = TouchScreen.y;
 800089e:	4b43      	ldr	r3, [pc, #268]	@ (80009ac <ConnectFour_ProcessInput+0x11c>)
 80008a0:	885b      	ldrh	r3, [r3, #2]
 80008a2:	81bb      	strh	r3, [r7, #12]

	switch(Game.state){
 80008a4:	4b42      	ldr	r3, [pc, #264]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 80008a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d060      	beq.n	8000970 <ConnectFour_ProcessInput+0xe0>
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	dc78      	bgt.n	80009a4 <ConnectFour_ProcessInput+0x114>
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <ConnectFour_ProcessInput+0x2c>
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d032      	beq.n	8000920 <ConnectFour_ProcessInput+0x90>
			screen1();
			Game.state = STATE_MENU;
		}
		break;
	}
}
 80008ba:	e073      	b.n	80009a4 <ConnectFour_ProcessInput+0x114>
		if(x >= 45 && x <= 195 && y >= 140 && y <= 175){
 80008bc:	89fb      	ldrh	r3, [r7, #14]
 80008be:	2b2c      	cmp	r3, #44	@ 0x2c
 80008c0:	d915      	bls.n	80008ee <ConnectFour_ProcessInput+0x5e>
 80008c2:	89fb      	ldrh	r3, [r7, #14]
 80008c4:	2bc3      	cmp	r3, #195	@ 0xc3
 80008c6:	d812      	bhi.n	80008ee <ConnectFour_ProcessInput+0x5e>
 80008c8:	89bb      	ldrh	r3, [r7, #12]
 80008ca:	2b8b      	cmp	r3, #139	@ 0x8b
 80008cc:	d90f      	bls.n	80008ee <ConnectFour_ProcessInput+0x5e>
 80008ce:	89bb      	ldrh	r3, [r7, #12]
 80008d0:	2baf      	cmp	r3, #175	@ 0xaf
 80008d2:	d80c      	bhi.n	80008ee <ConnectFour_ProcessInput+0x5e>
			Game.gameMode = GAMEMODE_ONE_PLAYER;
 80008d4:	4b36      	ldr	r3, [pc, #216]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			Game.state = STATE_GAME;
 80008dc:	4b34      	ldr	r3, [pc, #208]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 80008de:	2201      	movs	r2, #1
 80008e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			screen2();
 80008e4:	f001 f87e 	bl	80019e4 <screen2>
			ConnectFour_DrawPiece();
 80008e8:	f000 f864 	bl	80009b4 <ConnectFour_DrawPiece>
		break;
 80008ec:	e057      	b.n	800099e <ConnectFour_ProcessInput+0x10e>
		else if(x >= 45 && x <= 195 && y >= 70 && y <= 105){
 80008ee:	89fb      	ldrh	r3, [r7, #14]
 80008f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80008f2:	d954      	bls.n	800099e <ConnectFour_ProcessInput+0x10e>
 80008f4:	89fb      	ldrh	r3, [r7, #14]
 80008f6:	2bc3      	cmp	r3, #195	@ 0xc3
 80008f8:	d851      	bhi.n	800099e <ConnectFour_ProcessInput+0x10e>
 80008fa:	89bb      	ldrh	r3, [r7, #12]
 80008fc:	2b45      	cmp	r3, #69	@ 0x45
 80008fe:	d94e      	bls.n	800099e <ConnectFour_ProcessInput+0x10e>
 8000900:	89bb      	ldrh	r3, [r7, #12]
 8000902:	2b69      	cmp	r3, #105	@ 0x69
 8000904:	d84b      	bhi.n	800099e <ConnectFour_ProcessInput+0x10e>
			Game.gameMode = GAMEMODE_TWO_PLAYER;
 8000906:	4b2a      	ldr	r3, [pc, #168]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 8000908:	2202      	movs	r2, #2
 800090a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			Game.state = STATE_GAME;
 800090e:	4b28      	ldr	r3, [pc, #160]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 8000910:	2201      	movs	r2, #1
 8000912:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			screen2();
 8000916:	f001 f865 	bl	80019e4 <screen2>
			ConnectFour_DrawPiece();
 800091a:	f000 f84b 	bl	80009b4 <ConnectFour_DrawPiece>
		break;
 800091e:	e03e      	b.n	800099e <ConnectFour_ProcessInput+0x10e>
		if (x < BOARD_MARGIN_X / 2) {
 8000920:	89fb      	ldrh	r3, [r7, #14]
 8000922:	2b77      	cmp	r3, #119	@ 0x77
 8000924:	d80d      	bhi.n	8000942 <ConnectFour_ProcessInput+0xb2>
			if (Game.currentCol > 0) {
 8000926:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 8000928:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800092c:	2b00      	cmp	r3, #0
 800092e:	d018      	beq.n	8000962 <ConnectFour_ProcessInput+0xd2>
				Game.currentCol--;
 8000930:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 8000932:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000936:	3b01      	subs	r3, #1
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 800093c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8000940:	e00f      	b.n	8000962 <ConnectFour_ProcessInput+0xd2>
		else if (x >= BOARD_MARGIN_X / 2) {
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	2b77      	cmp	r3, #119	@ 0x77
 8000946:	d90c      	bls.n	8000962 <ConnectFour_ProcessInput+0xd2>
			if (Game.currentCol < BOARD_COLS - 1) {
 8000948:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 800094a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800094e:	2b05      	cmp	r3, #5
 8000950:	d807      	bhi.n	8000962 <ConnectFour_ProcessInput+0xd2>
				Game.currentCol++;
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 8000954:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000958:	3301      	adds	r3, #1
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 800095e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		screen2();
 8000962:	f001 f83f 	bl	80019e4 <screen2>
		ConnectFour_DrawPiece();
 8000966:	f000 f825 	bl	80009b4 <ConnectFour_DrawPiece>
		ConnectFour_DrawBoard();
 800096a:	f000 f851 	bl	8000a10 <ConnectFour_DrawBoard>
		break;
 800096e:	e019      	b.n	80009a4 <ConnectFour_ProcessInput+0x114>
		ConnectFour_GameOver();
 8000970:	f000 f8a0 	bl	8000ab4 <ConnectFour_GameOver>
		if(x >= 45 && x <= 195 && y >= 210 && y <= 245){
 8000974:	89fb      	ldrh	r3, [r7, #14]
 8000976:	2b2c      	cmp	r3, #44	@ 0x2c
 8000978:	d913      	bls.n	80009a2 <ConnectFour_ProcessInput+0x112>
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	2bc3      	cmp	r3, #195	@ 0xc3
 800097e:	d810      	bhi.n	80009a2 <ConnectFour_ProcessInput+0x112>
 8000980:	89bb      	ldrh	r3, [r7, #12]
 8000982:	2bd1      	cmp	r3, #209	@ 0xd1
 8000984:	d90d      	bls.n	80009a2 <ConnectFour_ProcessInput+0x112>
 8000986:	89bb      	ldrh	r3, [r7, #12]
 8000988:	2bf5      	cmp	r3, #245	@ 0xf5
 800098a:	d80a      	bhi.n	80009a2 <ConnectFour_ProcessInput+0x112>
			ConnectFour_ResetGame();
 800098c:	f7ff ff2a 	bl	80007e4 <ConnectFour_ResetGame>
			screen1();
 8000990:	f000 fef8 	bl	8001784 <screen1>
			Game.state = STATE_MENU;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <ConnectFour_ProcessInput+0x120>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		break;
 800099c:	e001      	b.n	80009a2 <ConnectFour_ProcessInput+0x112>
		break;
 800099e:	bf00      	nop
 80009a0:	e000      	b.n	80009a4 <ConnectFour_ProcessInput+0x114>
		break;
 80009a2:	bf00      	nop
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000e0 	.word	0x200000e0
 80009b0:	2000009c 	.word	0x2000009c

080009b4 <ConnectFour_DrawPiece>:

void ConnectFour_DrawPiece(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
	int x = Game.currentCol * CELL_SIZE + CELL_SIZE / 2  + 1;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <ConnectFour_DrawPiece+0x58>)
 80009bc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80009c0:	461a      	mov	r2, r3
 80009c2:	4613      	mov	r3, r2
 80009c4:	011b      	lsls	r3, r3, #4
 80009c6:	4413      	add	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	3312      	adds	r3, #18
 80009cc:	607b      	str	r3, [r7, #4]
	int y = 25;
 80009ce:	2319      	movs	r3, #25
 80009d0:	603b      	str	r3, [r7, #0]
	if (Game.currentPlayer == PLAYER_ONE) {
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <ConnectFour_DrawPiece+0x58>)
 80009d4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d109      	bne.n	80009f0 <ConnectFour_DrawPiece+0x3c>
		LCD_Draw_Circle_Fill(x, y, PIECE_RADIUS, LCD_COLOR_YELLOW);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	b298      	uxth	r0, r3
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b299      	uxth	r1, r3
 80009e4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80009e8:	220f      	movs	r2, #15
 80009ea:	f000 fd57 	bl	800149c <LCD_Draw_Circle_Fill>
	} else {
		LCD_Draw_Circle_Fill(x, y, PIECE_RADIUS, LCD_COLOR_RED);
	}
}
 80009ee:	e008      	b.n	8000a02 <ConnectFour_DrawPiece+0x4e>
		LCD_Draw_Circle_Fill(x, y, PIECE_RADIUS, LCD_COLOR_RED);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	b298      	uxth	r0, r3
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b299      	uxth	r1, r3
 80009f8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80009fc:	220f      	movs	r2, #15
 80009fe:	f000 fd4d 	bl	800149c <LCD_Draw_Circle_Fill>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000009c 	.word	0x2000009c

08000a10 <ConnectFour_DrawBoard>:

void ConnectFour_DrawBoard(void){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
	for (int cols = 1; cols <= BOARD_COLS; cols++){
 8000a16:	2301      	movs	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	e041      	b.n	8000aa0 <ConnectFour_DrawBoard+0x90>
		for(int rows = 1; rows <= BOARD_ROWS; rows++){
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	e038      	b.n	8000a94 <ConnectFour_DrawBoard+0x84>
			int x = cols * CELL_SIZE + CELL_SIZE / 2 + 1;
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	4613      	mov	r3, r2
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	4413      	add	r3, r2
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	3312      	adds	r3, #18
 8000a2e:	607b      	str	r3, [r7, #4]
			int y = rows * CELL_SIZE + CELL_SIZE / 2 + 50;
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	4613      	mov	r3, r2
 8000a34:	011b      	lsls	r3, r3, #4
 8000a36:	4413      	add	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	3343      	adds	r3, #67	@ 0x43
 8000a3c:	603b      	str	r3, [r7, #0]
			if(Game.board[rows][cols] == PLAYER_ONE){
 8000a3e:	491c      	ldr	r1, [pc, #112]	@ (8000ab0 <ConnectFour_DrawBoard+0xa0>)
 8000a40:	68ba      	ldr	r2, [r7, #8]
 8000a42:	4613      	mov	r3, r2
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	1a9b      	subs	r3, r3, r2
 8000a48:	18ca      	adds	r2, r1, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d108      	bne.n	8000a66 <ConnectFour_DrawBoard+0x56>
				LCD_Draw_Circle_Fill(x,y, PIECE_RADIUS - 2, LCD_COLOR_YELLOW);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	b298      	uxth	r0, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b299      	uxth	r1, r3
 8000a5c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000a60:	220d      	movs	r2, #13
 8000a62:	f000 fd1b 	bl	800149c <LCD_Draw_Circle_Fill>
			}
			if(Game.board[rows][cols] == PLAYER_TWO){
 8000a66:	4912      	ldr	r1, [pc, #72]	@ (8000ab0 <ConnectFour_DrawBoard+0xa0>)
 8000a68:	68ba      	ldr	r2, [r7, #8]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	1a9b      	subs	r3, r3, r2
 8000a70:	18ca      	adds	r2, r1, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4413      	add	r3, r2
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d108      	bne.n	8000a8e <ConnectFour_DrawBoard+0x7e>
				LCD_Draw_Circle_Fill(x,y, PIECE_RADIUS - 2, LCD_COLOR_RED);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	b298      	uxth	r0, r3
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b299      	uxth	r1, r3
 8000a84:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a88:	220d      	movs	r2, #13
 8000a8a:	f000 fd07 	bl	800149c <LCD_Draw_Circle_Fill>
		for(int rows = 1; rows <= BOARD_ROWS; rows++){
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	3301      	adds	r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	ddc3      	ble.n	8000a22 <ConnectFour_DrawBoard+0x12>
	for (int cols = 1; cols <= BOARD_COLS; cols++){
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2b07      	cmp	r3, #7
 8000aa4:	ddba      	ble.n	8000a1c <ConnectFour_DrawBoard+0xc>
			}
		}
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000009c 	.word	0x2000009c

08000ab4 <ConnectFour_GameOver>:

void ConnectFour_GameOver(void){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLACK);
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 fd8f 	bl	80015e0 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ac2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000ac6:	f000 fdad 	bl	8001624 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000aca:	4896      	ldr	r0, [pc, #600]	@ (8000d24 <ConnectFour_GameOver+0x270>)
 8000acc:	f000 fdba 	bl	8001644 <LCD_SetFont>
	char Yellow = Game.YellowWins;
 8000ad0:	4b95      	ldr	r3, [pc, #596]	@ (8000d28 <ConnectFour_GameOver+0x274>)
 8000ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000ad6:	71fb      	strb	r3, [r7, #7]
	char Red = Game.RedWins;
 8000ad8:	4b93      	ldr	r3, [pc, #588]	@ (8000d28 <ConnectFour_GameOver+0x274>)
 8000ada:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000ade:	71bb      	strb	r3, [r7, #6]

	if(Game.isDraw){
 8000ae0:	4b91      	ldr	r3, [pc, #580]	@ (8000d28 <ConnectFour_GameOver+0x274>)
 8000ae2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d019      	beq.n	8000b1e <ConnectFour_GameOver+0x6a>
		LCD_DisplayChar(90, 20, 'D');
 8000aea:	2244      	movs	r2, #68	@ 0x44
 8000aec:	2114      	movs	r1, #20
 8000aee:	205a      	movs	r0, #90	@ 0x5a
 8000af0:	f000 fe26 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(110, 20, 'R');
 8000af4:	2252      	movs	r2, #82	@ 0x52
 8000af6:	2114      	movs	r1, #20
 8000af8:	206e      	movs	r0, #110	@ 0x6e
 8000afa:	f000 fe21 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(130, 20, 'A');
 8000afe:	2241      	movs	r2, #65	@ 0x41
 8000b00:	2114      	movs	r1, #20
 8000b02:	2082      	movs	r0, #130	@ 0x82
 8000b04:	f000 fe1c 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(150, 20, 'W');
 8000b08:	2257      	movs	r2, #87	@ 0x57
 8000b0a:	2114      	movs	r1, #20
 8000b0c:	2096      	movs	r0, #150	@ 0x96
 8000b0e:	f000 fe17 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(170,20,'!');
 8000b12:	2221      	movs	r2, #33	@ 0x21
 8000b14:	2114      	movs	r1, #20
 8000b16:	20aa      	movs	r0, #170	@ 0xaa
 8000b18:	f000 fe12 	bl	8001740 <LCD_DisplayChar>
 8000b1c:	e04b      	b.n	8000bb6 <ConnectFour_GameOver+0x102>

	} else if(Game. winner == PLAYER_ONE){
 8000b1e:	4b82      	ldr	r3, [pc, #520]	@ (8000d28 <ConnectFour_GameOver+0x274>)
 8000b20:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d123      	bne.n	8000b70 <ConnectFour_GameOver+0xbc>
		LCD_DisplayChar(30, 20, 'P');
 8000b28:	2250      	movs	r2, #80	@ 0x50
 8000b2a:	2114      	movs	r1, #20
 8000b2c:	201e      	movs	r0, #30
 8000b2e:	f000 fe07 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(50, 20, '1');
 8000b32:	2231      	movs	r2, #49	@ 0x31
 8000b34:	2114      	movs	r1, #20
 8000b36:	2032      	movs	r0, #50	@ 0x32
 8000b38:	f000 fe02 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(90, 20, 'W');
 8000b3c:	2257      	movs	r2, #87	@ 0x57
 8000b3e:	2114      	movs	r1, #20
 8000b40:	205a      	movs	r0, #90	@ 0x5a
 8000b42:	f000 fdfd 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(110, 20, 'I');
 8000b46:	2249      	movs	r2, #73	@ 0x49
 8000b48:	2114      	movs	r1, #20
 8000b4a:	206e      	movs	r0, #110	@ 0x6e
 8000b4c:	f000 fdf8 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(130, 20,'N');
 8000b50:	224e      	movs	r2, #78	@ 0x4e
 8000b52:	2114      	movs	r1, #20
 8000b54:	2082      	movs	r0, #130	@ 0x82
 8000b56:	f000 fdf3 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(150, 20,'S');
 8000b5a:	2253      	movs	r2, #83	@ 0x53
 8000b5c:	2114      	movs	r1, #20
 8000b5e:	2096      	movs	r0, #150	@ 0x96
 8000b60:	f000 fdee 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(170, 20,'!');
 8000b64:	2221      	movs	r2, #33	@ 0x21
 8000b66:	2114      	movs	r1, #20
 8000b68:	20aa      	movs	r0, #170	@ 0xaa
 8000b6a:	f000 fde9 	bl	8001740 <LCD_DisplayChar>
 8000b6e:	e022      	b.n	8000bb6 <ConnectFour_GameOver+0x102>
	} else{
		LCD_DisplayChar(30, 20, 'P');
 8000b70:	2250      	movs	r2, #80	@ 0x50
 8000b72:	2114      	movs	r1, #20
 8000b74:	201e      	movs	r0, #30
 8000b76:	f000 fde3 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(50, 20, '2');
 8000b7a:	2232      	movs	r2, #50	@ 0x32
 8000b7c:	2114      	movs	r1, #20
 8000b7e:	2032      	movs	r0, #50	@ 0x32
 8000b80:	f000 fdde 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(90, 20, 'W');
 8000b84:	2257      	movs	r2, #87	@ 0x57
 8000b86:	2114      	movs	r1, #20
 8000b88:	205a      	movs	r0, #90	@ 0x5a
 8000b8a:	f000 fdd9 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(110, 20, 'I');
 8000b8e:	2249      	movs	r2, #73	@ 0x49
 8000b90:	2114      	movs	r1, #20
 8000b92:	206e      	movs	r0, #110	@ 0x6e
 8000b94:	f000 fdd4 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(130, 20,'N');
 8000b98:	224e      	movs	r2, #78	@ 0x4e
 8000b9a:	2114      	movs	r1, #20
 8000b9c:	2082      	movs	r0, #130	@ 0x82
 8000b9e:	f000 fdcf 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(150, 20,'S');
 8000ba2:	2253      	movs	r2, #83	@ 0x53
 8000ba4:	2114      	movs	r1, #20
 8000ba6:	2096      	movs	r0, #150	@ 0x96
 8000ba8:	f000 fdca 	bl	8001740 <LCD_DisplayChar>
		LCD_DisplayChar(170, 20,'!');
 8000bac:	2221      	movs	r2, #33	@ 0x21
 8000bae:	2114      	movs	r1, #20
 8000bb0:	20aa      	movs	r0, #170	@ 0xaa
 8000bb2:	f000 fdc5 	bl	8001740 <LCD_DisplayChar>
	}
	LCD_Draw_Vertical_Line(45,75,35,LCD_COLOR_WHITE);
 8000bb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bba:	2223      	movs	r2, #35	@ 0x23
 8000bbc:	214b      	movs	r1, #75	@ 0x4b
 8000bbe:	202d      	movs	r0, #45	@ 0x2d
 8000bc0:	f000 fcbf 	bl	8001542 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(195,75,35,LCD_COLOR_WHITE);
 8000bc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bc8:	2223      	movs	r2, #35	@ 0x23
 8000bca:	214b      	movs	r1, #75	@ 0x4b
 8000bcc:	20c3      	movs	r0, #195	@ 0xc3
 8000bce:	f000 fcb8 	bl	8001542 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(45,75,150,LCD_COLOR_WHITE);
 8000bd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bd6:	2296      	movs	r2, #150	@ 0x96
 8000bd8:	214b      	movs	r1, #75	@ 0x4b
 8000bda:	202d      	movs	r0, #45	@ 0x2d
 8000bdc:	f000 fcd8 	bl	8001590 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(45,110,150,LCD_COLOR_WHITE);
 8000be0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000be4:	2296      	movs	r2, #150	@ 0x96
 8000be6:	216e      	movs	r1, #110	@ 0x6e
 8000be8:	202d      	movs	r0, #45	@ 0x2d
 8000bea:	f000 fcd1 	bl	8001590 <LCD_Draw_Horizontal_Line>
	LCD_DisplayChar(50,80,'R');
 8000bee:	2252      	movs	r2, #82	@ 0x52
 8000bf0:	2150      	movs	r1, #80	@ 0x50
 8000bf2:	2032      	movs	r0, #50	@ 0x32
 8000bf4:	f000 fda4 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(70,80,'E');
 8000bf8:	2245      	movs	r2, #69	@ 0x45
 8000bfa:	2150      	movs	r1, #80	@ 0x50
 8000bfc:	2046      	movs	r0, #70	@ 0x46
 8000bfe:	f000 fd9f 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(90,80,'S');
 8000c02:	2253      	movs	r2, #83	@ 0x53
 8000c04:	2150      	movs	r1, #80	@ 0x50
 8000c06:	205a      	movs	r0, #90	@ 0x5a
 8000c08:	f000 fd9a 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(110,80,'T');
 8000c0c:	2254      	movs	r2, #84	@ 0x54
 8000c0e:	2150      	movs	r1, #80	@ 0x50
 8000c10:	206e      	movs	r0, #110	@ 0x6e
 8000c12:	f000 fd95 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(130,80,'A');
 8000c16:	2241      	movs	r2, #65	@ 0x41
 8000c18:	2150      	movs	r1, #80	@ 0x50
 8000c1a:	2082      	movs	r0, #130	@ 0x82
 8000c1c:	f000 fd90 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(150,80,'R');
 8000c20:	2252      	movs	r2, #82	@ 0x52
 8000c22:	2150      	movs	r1, #80	@ 0x50
 8000c24:	2096      	movs	r0, #150	@ 0x96
 8000c26:	f000 fd8b 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(170,80,'T');
 8000c2a:	2254      	movs	r2, #84	@ 0x54
 8000c2c:	2150      	movs	r1, #80	@ 0x50
 8000c2e:	20aa      	movs	r0, #170	@ 0xaa
 8000c30:	f000 fd86 	bl	8001740 <LCD_DisplayChar>

	LCD_DisplayChar(40,250,'T');
 8000c34:	2254      	movs	r2, #84	@ 0x54
 8000c36:	21fa      	movs	r1, #250	@ 0xfa
 8000c38:	2028      	movs	r0, #40	@ 0x28
 8000c3a:	f000 fd81 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(60,250,'I');
 8000c3e:	2249      	movs	r2, #73	@ 0x49
 8000c40:	21fa      	movs	r1, #250	@ 0xfa
 8000c42:	203c      	movs	r0, #60	@ 0x3c
 8000c44:	f000 fd7c 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(80,250,'M');
 8000c48:	224d      	movs	r2, #77	@ 0x4d
 8000c4a:	21fa      	movs	r1, #250	@ 0xfa
 8000c4c:	2050      	movs	r0, #80	@ 0x50
 8000c4e:	f000 fd77 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(110,250,'E');
 8000c52:	2245      	movs	r2, #69	@ 0x45
 8000c54:	21fa      	movs	r1, #250	@ 0xfa
 8000c56:	206e      	movs	r0, #110	@ 0x6e
 8000c58:	f000 fd72 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(170,200,'0'); // need to figure out how to make timer
 8000c5c:	2230      	movs	r2, #48	@ 0x30
 8000c5e:	21c8      	movs	r1, #200	@ 0xc8
 8000c60:	20aa      	movs	r0, #170	@ 0xaa
 8000c62:	f000 fd6d 	bl	8001740 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000c66:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8000c6a:	f000 fcdb 	bl	8001624 <LCD_SetTextColor>
	LCD_DisplayChar(40,150,'Y');
 8000c6e:	2259      	movs	r2, #89	@ 0x59
 8000c70:	2196      	movs	r1, #150	@ 0x96
 8000c72:	2028      	movs	r0, #40	@ 0x28
 8000c74:	f000 fd64 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(60,150,'E');
 8000c78:	2245      	movs	r2, #69	@ 0x45
 8000c7a:	2196      	movs	r1, #150	@ 0x96
 8000c7c:	203c      	movs	r0, #60	@ 0x3c
 8000c7e:	f000 fd5f 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(80,150,'L');
 8000c82:	224c      	movs	r2, #76	@ 0x4c
 8000c84:	2196      	movs	r1, #150	@ 0x96
 8000c86:	2050      	movs	r0, #80	@ 0x50
 8000c88:	f000 fd5a 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(110,150,'W');
 8000c8c:	2257      	movs	r2, #87	@ 0x57
 8000c8e:	2196      	movs	r1, #150	@ 0x96
 8000c90:	206e      	movs	r0, #110	@ 0x6e
 8000c92:	f000 fd55 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(130,150,'I');
 8000c96:	2249      	movs	r2, #73	@ 0x49
 8000c98:	2196      	movs	r1, #150	@ 0x96
 8000c9a:	2082      	movs	r0, #130	@ 0x82
 8000c9c:	f000 fd50 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(150,150,'N');
 8000ca0:	224e      	movs	r2, #78	@ 0x4e
 8000ca2:	2196      	movs	r1, #150	@ 0x96
 8000ca4:	2096      	movs	r0, #150	@ 0x96
 8000ca6:	f000 fd4b 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(170,150,'S');
 8000caa:	2253      	movs	r2, #83	@ 0x53
 8000cac:	2196      	movs	r1, #150	@ 0x96
 8000cae:	20aa      	movs	r0, #170	@ 0xaa
 8000cb0:	f000 fd46 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(170,150,Yellow);
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	2196      	movs	r1, #150	@ 0x96
 8000cba:	20aa      	movs	r0, #170	@ 0xaa
 8000cbc:	f000 fd40 	bl	8001740 <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_RED);
 8000cc0:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000cc4:	f000 fcae 	bl	8001624 <LCD_SetTextColor>
	LCD_DisplayChar(40,200,'R');
 8000cc8:	2252      	movs	r2, #82	@ 0x52
 8000cca:	21c8      	movs	r1, #200	@ 0xc8
 8000ccc:	2028      	movs	r0, #40	@ 0x28
 8000cce:	f000 fd37 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(60,200,'E');
 8000cd2:	2245      	movs	r2, #69	@ 0x45
 8000cd4:	21c8      	movs	r1, #200	@ 0xc8
 8000cd6:	203c      	movs	r0, #60	@ 0x3c
 8000cd8:	f000 fd32 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(80,200,'D');
 8000cdc:	2244      	movs	r2, #68	@ 0x44
 8000cde:	21c8      	movs	r1, #200	@ 0xc8
 8000ce0:	2050      	movs	r0, #80	@ 0x50
 8000ce2:	f000 fd2d 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(110,200,'W');
 8000ce6:	2257      	movs	r2, #87	@ 0x57
 8000ce8:	21c8      	movs	r1, #200	@ 0xc8
 8000cea:	206e      	movs	r0, #110	@ 0x6e
 8000cec:	f000 fd28 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(130,200,'I');
 8000cf0:	2249      	movs	r2, #73	@ 0x49
 8000cf2:	21c8      	movs	r1, #200	@ 0xc8
 8000cf4:	2082      	movs	r0, #130	@ 0x82
 8000cf6:	f000 fd23 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(150,200,'N');
 8000cfa:	224e      	movs	r2, #78	@ 0x4e
 8000cfc:	21c8      	movs	r1, #200	@ 0xc8
 8000cfe:	2096      	movs	r0, #150	@ 0x96
 8000d00:	f000 fd1e 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(170,200,'S');
 8000d04:	2253      	movs	r2, #83	@ 0x53
 8000d06:	21c8      	movs	r1, #200	@ 0xc8
 8000d08:	20aa      	movs	r0, #170	@ 0xaa
 8000d0a:	f000 fd19 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(170,200,Red);
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	461a      	mov	r2, r3
 8000d12:	21c8      	movs	r1, #200	@ 0xc8
 8000d14:	20aa      	movs	r0, #170	@ 0xaa
 8000d16:	f000 fd13 	bl	8001740 <LCD_DisplayChar>


}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000004 	.word	0x20000004
 8000d28:	2000009c 	.word	0x2000009c

08000d2c <ConnectFour_DropPiece>:


uint8_t ConnectFour_DropPiece(uint8_t col){
 8000d2c:	b490      	push	{r4, r7}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	for (int rows = BOARD_ROWS - 1; rows >= 0; rows--) {
 8000d36:	2305      	movs	r3, #5
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	e01c      	b.n	8000d76 <ConnectFour_DropPiece+0x4a>
		if (Game.board[rows][col] == EMPTY_CELL) {
 8000d3c:	79f9      	ldrb	r1, [r7, #7]
 8000d3e:	4812      	ldr	r0, [pc, #72]	@ (8000d88 <ConnectFour_DropPiece+0x5c>)
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4613      	mov	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	4403      	add	r3, r0
 8000d4a:	440b      	add	r3, r1
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10e      	bne.n	8000d70 <ConnectFour_DropPiece+0x44>
			Game.board[rows][col] = Game.currentPlayer;
 8000d52:	79f9      	ldrb	r1, [r7, #7]
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <ConnectFour_DropPiece+0x5c>)
 8000d56:	f893 402a 	ldrb.w	r4, [r3, #42]	@ 0x2a
 8000d5a:	480b      	ldr	r0, [pc, #44]	@ (8000d88 <ConnectFour_DropPiece+0x5c>)
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	1a9b      	subs	r3, r3, r2
 8000d64:	4403      	add	r3, r0
 8000d66:	440b      	add	r3, r1
 8000d68:	4622      	mov	r2, r4
 8000d6a:	701a      	strb	r2, [r3, #0]
			return 1;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e006      	b.n	8000d7e <ConnectFour_DropPiece+0x52>
	for (int rows = BOARD_ROWS - 1; rows >= 0; rows--) {
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	dadf      	bge.n	8000d3c <ConnectFour_DropPiece+0x10>
		}
	}
	return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc90      	pop	{r4, r7}
 8000d86:	4770      	bx	lr
 8000d88:	2000009c 	.word	0x2000009c

08000d8c <ConnectFour_ComputerMove>:

void ConnectFour_ComputerMove(void){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
	uint32_t random;
	uint8_t col;
	uint8_t valid;
	if(HAL_RNG_GenerateRandomNumber(&hrng, &random) == HAL_OK){
 8000d92:	463b      	mov	r3, r7
 8000d94:	4619      	mov	r1, r3
 8000d96:	481d      	ldr	r0, [pc, #116]	@ (8000e0c <ConnectFour_ComputerMove+0x80>)
 8000d98:	f005 faac 	bl	80062f4 <HAL_RNG_GenerateRandomNumber>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d12b      	bne.n	8000dfa <ConnectFour_ComputerMove+0x6e>
		col = random % BOARD_COLS;
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <ConnectFour_ComputerMove+0x84>)
 8000da6:	fba3 1302 	umull	r1, r3, r3, r2
 8000daa:	1ad1      	subs	r1, r2, r3
 8000dac:	0849      	lsrs	r1, r1, #1
 8000dae:	440b      	add	r3, r1
 8000db0:	0899      	lsrs	r1, r3, #2
 8000db2:	460b      	mov	r3, r1
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	1a5b      	subs	r3, r3, r1
 8000db8:	1ad1      	subs	r1, r2, r3
 8000dba:	460b      	mov	r3, r1
 8000dbc:	71bb      	strb	r3, [r7, #6]
		if(ConnectFour_DropPiece(col)){
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ffb3 	bl	8000d2c <ConnectFour_DropPiece>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d11a      	bne.n	8000e02 <ConnectFour_ComputerMove+0x76>
			return;
		}
	}
	while(!valid){			// if column is full
 8000dcc:	e015      	b.n	8000dfa <ConnectFour_ComputerMove+0x6e>
		col = rand() % BOARD_COLS;
 8000dce:	f006 f89f 	bl	8006f10 <rand>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <ConnectFour_ComputerMove+0x88>)
 8000dd6:	fb83 1302 	smull	r1, r3, r3, r2
 8000dda:	4413      	add	r3, r2
 8000ddc:	1099      	asrs	r1, r3, #2
 8000dde:	17d3      	asrs	r3, r2, #31
 8000de0:	1ac9      	subs	r1, r1, r3
 8000de2:	460b      	mov	r3, r1
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	1a5b      	subs	r3, r3, r1
 8000de8:	1ad1      	subs	r1, r2, r3
 8000dea:	460b      	mov	r3, r1
 8000dec:	71bb      	strb	r3, [r7, #6]
		valid = ConnectFour_DropPiece(col);
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff9b 	bl	8000d2c <ConnectFour_DropPiece>
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
	while(!valid){			// if column is full
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0e6      	beq.n	8000dce <ConnectFour_ComputerMove+0x42>
 8000e00:	e000      	b.n	8000e04 <ConnectFour_ComputerMove+0x78>
			return;
 8000e02:	bf00      	nop
	}
}
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200000d0 	.word	0x200000d0
 8000e10:	24924925 	.word	0x24924925
 8000e14:	92492493 	.word	0x92492493

08000e18 <ConnectFour_CheckWin>:

uint8_t ConnectFour_CheckWin(void){
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	@ 0x24
 8000e1c:	af00      	add	r7, sp, #0
	// horizontal
	for(int rows = 1; rows <= BOARD_ROWS; rows++){
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	e048      	b.n	8000eb6 <ConnectFour_CheckWin+0x9e>
		for(int cols = 1; cols <= BOARD_COLS - 3; cols++){
 8000e24:	2301      	movs	r3, #1
 8000e26:	61bb      	str	r3, [r7, #24]
 8000e28:	e03f      	b.n	8000eaa <ConnectFour_CheckWin+0x92>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows][cols+1] == Game.currentPlayer && Game.board[rows][cols+2] == Game.currentPlayer && Game.board[rows][cols+3] == Game.currentPlayer){
 8000e2a:	49a1      	ldr	r1, [pc, #644]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000e2c:	69fa      	ldr	r2, [r7, #28]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	1a9b      	subs	r3, r3, r2
 8000e34:	18ca      	adds	r2, r1, r3
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4413      	add	r3, r2
 8000e3a:	781a      	ldrb	r2, [r3, #0]
 8000e3c:	4b9c      	ldr	r3, [pc, #624]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000e3e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d12e      	bne.n	8000ea4 <ConnectFour_CheckWin+0x8c>
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	1c59      	adds	r1, r3, #1
 8000e4a:	4899      	ldr	r0, [pc, #612]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000e4c:	69fa      	ldr	r2, [r7, #28]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	4403      	add	r3, r0
 8000e56:	440b      	add	r3, r1
 8000e58:	781a      	ldrb	r2, [r3, #0]
 8000e5a:	4b95      	ldr	r3, [pc, #596]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000e5c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d11f      	bne.n	8000ea4 <ConnectFour_CheckWin+0x8c>
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	1c99      	adds	r1, r3, #2
 8000e68:	4891      	ldr	r0, [pc, #580]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000e6a:	69fa      	ldr	r2, [r7, #28]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	1a9b      	subs	r3, r3, r2
 8000e72:	4403      	add	r3, r0
 8000e74:	440b      	add	r3, r1
 8000e76:	781a      	ldrb	r2, [r3, #0]
 8000e78:	4b8d      	ldr	r3, [pc, #564]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000e7a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d110      	bne.n	8000ea4 <ConnectFour_CheckWin+0x8c>
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	1cd9      	adds	r1, r3, #3
 8000e86:	488a      	ldr	r0, [pc, #552]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000e88:	69fa      	ldr	r2, [r7, #28]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	1a9b      	subs	r3, r3, r2
 8000e90:	4403      	add	r3, r0
 8000e92:	440b      	add	r3, r1
 8000e94:	781a      	ldrb	r2, [r3, #0]
 8000e96:	4b86      	ldr	r3, [pc, #536]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000e98:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d101      	bne.n	8000ea4 <ConnectFour_CheckWin+0x8c>
				return 1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e0ff      	b.n	80010a4 <ConnectFour_CheckWin+0x28c>
		for(int cols = 1; cols <= BOARD_COLS - 3; cols++){
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	61bb      	str	r3, [r7, #24]
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	ddbc      	ble.n	8000e2a <ConnectFour_CheckWin+0x12>
	for(int rows = 1; rows <= BOARD_ROWS; rows++){
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	2b06      	cmp	r3, #6
 8000eba:	ddb3      	ble.n	8000e24 <ConnectFour_CheckWin+0xc>
			}
		}
	}
	// vertical
	for(int rows = 1; rows <= BOARD_ROWS-3; rows++){
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	e048      	b.n	8000f54 <ConnectFour_CheckWin+0x13c>
		for(int cols = 1; cols <= BOARD_COLS; cols++){
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	e03f      	b.n	8000f48 <ConnectFour_CheckWin+0x130>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows+1][cols] == Game.currentPlayer && Game.board[rows+2][cols] == Game.currentPlayer && Game.board[rows+3][cols] == Game.currentPlayer){
 8000ec8:	4979      	ldr	r1, [pc, #484]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	1a9b      	subs	r3, r3, r2
 8000ed2:	18ca      	adds	r2, r1, r3
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	4b75      	ldr	r3, [pc, #468]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000edc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d12e      	bne.n	8000f42 <ConnectFour_CheckWin+0x12a>
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	4971      	ldr	r1, [pc, #452]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000eea:	4613      	mov	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	1a9b      	subs	r3, r3, r2
 8000ef0:	18ca      	adds	r2, r1, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	4b6d      	ldr	r3, [pc, #436]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000efa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d11f      	bne.n	8000f42 <ConnectFour_CheckWin+0x12a>
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	1c9a      	adds	r2, r3, #2
 8000f06:	496a      	ldr	r1, [pc, #424]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000f08:	4613      	mov	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	1a9b      	subs	r3, r3, r2
 8000f0e:	18ca      	adds	r2, r1, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4413      	add	r3, r2
 8000f14:	781a      	ldrb	r2, [r3, #0]
 8000f16:	4b66      	ldr	r3, [pc, #408]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000f18:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d110      	bne.n	8000f42 <ConnectFour_CheckWin+0x12a>
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	1cda      	adds	r2, r3, #3
 8000f24:	4962      	ldr	r1, [pc, #392]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000f26:	4613      	mov	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	1a9b      	subs	r3, r3, r2
 8000f2c:	18ca      	adds	r2, r1, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4413      	add	r3, r2
 8000f32:	781a      	ldrb	r2, [r3, #0]
 8000f34:	4b5e      	ldr	r3, [pc, #376]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000f36:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d101      	bne.n	8000f42 <ConnectFour_CheckWin+0x12a>
				return 1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e0b0      	b.n	80010a4 <ConnectFour_CheckWin+0x28c>
		for(int cols = 1; cols <= BOARD_COLS; cols++){
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	3301      	adds	r3, #1
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	2b07      	cmp	r3, #7
 8000f4c:	ddbc      	ble.n	8000ec8 <ConnectFour_CheckWin+0xb0>
	for(int rows = 1; rows <= BOARD_ROWS-3; rows++){
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	ddb3      	ble.n	8000ec2 <ConnectFour_CheckWin+0xaa>
			}
		}
	}
	// diagonal upwards to right
	for(int rows = 1; rows <= BOARD_ROWS -3  ; rows++){
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	e04b      	b.n	8000ff8 <ConnectFour_CheckWin+0x1e0>
		for(int cols = 1; cols <= BOARD_COLS - 3; cols++){
 8000f60:	2301      	movs	r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	e042      	b.n	8000fec <ConnectFour_CheckWin+0x1d4>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows+1][cols+1] == Game.currentPlayer && Game.board[rows+2][cols+2] == Game.currentPlayer && Game.board[rows+3][cols+3] == Game.currentPlayer){
 8000f66:	4952      	ldr	r1, [pc, #328]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	1a9b      	subs	r3, r3, r2
 8000f70:	18ca      	adds	r2, r1, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	4413      	add	r3, r2
 8000f76:	781a      	ldrb	r2, [r3, #0]
 8000f78:	4b4d      	ldr	r3, [pc, #308]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000f7a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d131      	bne.n	8000fe6 <ConnectFour_CheckWin+0x1ce>
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	1c5a      	adds	r2, r3, #1
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1c59      	adds	r1, r3, #1
 8000f8a:	4849      	ldr	r0, [pc, #292]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	1a9b      	subs	r3, r3, r2
 8000f92:	4403      	add	r3, r0
 8000f94:	440b      	add	r3, r1
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	4b45      	ldr	r3, [pc, #276]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000f9a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d121      	bne.n	8000fe6 <ConnectFour_CheckWin+0x1ce>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	1c9a      	adds	r2, r3, #2
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1c99      	adds	r1, r3, #2
 8000faa:	4841      	ldr	r0, [pc, #260]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000fac:	4613      	mov	r3, r2
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	1a9b      	subs	r3, r3, r2
 8000fb2:	4403      	add	r3, r0
 8000fb4:	440b      	add	r3, r1
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000fba:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d111      	bne.n	8000fe6 <ConnectFour_CheckWin+0x1ce>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	1cda      	adds	r2, r3, #3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1cd9      	adds	r1, r3, #3
 8000fca:	4839      	ldr	r0, [pc, #228]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000fcc:	4613      	mov	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	1a9b      	subs	r3, r3, r2
 8000fd2:	4403      	add	r3, r0
 8000fd4:	440b      	add	r3, r1
 8000fd6:	781a      	ldrb	r2, [r3, #0]
 8000fd8:	4b35      	ldr	r3, [pc, #212]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8000fda:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d101      	bne.n	8000fe6 <ConnectFour_CheckWin+0x1ce>
				return 1;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e05e      	b.n	80010a4 <ConnectFour_CheckWin+0x28c>
		for(int cols = 1; cols <= BOARD_COLS - 3; cols++){
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	ddb9      	ble.n	8000f66 <ConnectFour_CheckWin+0x14e>
	for(int rows = 1; rows <= BOARD_ROWS -3  ; rows++){
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	ddb0      	ble.n	8000f60 <ConnectFour_CheckWin+0x148>
			}
		}
	}
	// diagonal downwards to right
	for(int rows = 4; rows <= BOARD_ROWS; rows++){
 8000ffe:	2304      	movs	r3, #4
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	e04b      	b.n	800109c <ConnectFour_CheckWin+0x284>
		for(int cols = 1; cols <= BOARD_COLS - 3; cols++){
 8001004:	2301      	movs	r3, #1
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	e042      	b.n	8001090 <ConnectFour_CheckWin+0x278>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows-1][cols+1] == Game.currentPlayer && Game.board[rows-2][cols+2] == Game.currentPlayer && Game.board[rows-3][cols+3] == Game.currentPlayer){
 800100a:	4929      	ldr	r1, [pc, #164]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	1a9b      	subs	r3, r3, r2
 8001014:	18ca      	adds	r2, r1, r3
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	4413      	add	r3, r2
 800101a:	781a      	ldrb	r2, [r3, #0]
 800101c:	4b24      	ldr	r3, [pc, #144]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 800101e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001022:	429a      	cmp	r2, r3
 8001024:	d131      	bne.n	800108a <ConnectFour_CheckWin+0x272>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	1e5a      	subs	r2, r3, #1
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	1c59      	adds	r1, r3, #1
 800102e:	4820      	ldr	r0, [pc, #128]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8001030:	4613      	mov	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	1a9b      	subs	r3, r3, r2
 8001036:	4403      	add	r3, r0
 8001038:	440b      	add	r3, r1
 800103a:	781a      	ldrb	r2, [r3, #0]
 800103c:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 800103e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001042:	429a      	cmp	r2, r3
 8001044:	d121      	bne.n	800108a <ConnectFour_CheckWin+0x272>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	1e9a      	subs	r2, r3, #2
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	1c99      	adds	r1, r3, #2
 800104e:	4818      	ldr	r0, [pc, #96]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	4403      	add	r3, r0
 8001058:	440b      	add	r3, r1
 800105a:	781a      	ldrb	r2, [r3, #0]
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 800105e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001062:	429a      	cmp	r2, r3
 8001064:	d111      	bne.n	800108a <ConnectFour_CheckWin+0x272>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	1eda      	subs	r2, r3, #3
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	1cd9      	adds	r1, r3, #3
 800106e:	4810      	ldr	r0, [pc, #64]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	4403      	add	r3, r0
 8001078:	440b      	add	r3, r1
 800107a:	781a      	ldrb	r2, [r3, #0]
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <ConnectFour_CheckWin+0x298>)
 800107e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001082:	429a      	cmp	r2, r3
 8001084:	d101      	bne.n	800108a <ConnectFour_CheckWin+0x272>
				return 1;
 8001086:	2301      	movs	r3, #1
 8001088:	e00c      	b.n	80010a4 <ConnectFour_CheckWin+0x28c>
		for(int cols = 1; cols <= BOARD_COLS - 3; cols++){
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b04      	cmp	r3, #4
 8001094:	ddb9      	ble.n	800100a <ConnectFour_CheckWin+0x1f2>
	for(int rows = 4; rows <= BOARD_ROWS; rows++){
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3301      	adds	r3, #1
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b06      	cmp	r3, #6
 80010a0:	ddb0      	ble.n	8001004 <ConnectFour_CheckWin+0x1ec>
			}
		}
	}
	return 0;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3724      	adds	r7, #36	@ 0x24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	2000009c 	.word	0x2000009c

080010b4 <ConnectFour_CheckDraw>:

uint8_t ConnectFour_CheckDraw(void){
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
	for (int cols = 1; cols <= BOARD_COLS; cols++){
 80010ba:	2301      	movs	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	e018      	b.n	80010f2 <ConnectFour_CheckDraw+0x3e>
		for(int rows = 1; rows <= BOARD_ROWS; rows++){
 80010c0:	2301      	movs	r3, #1
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	e00f      	b.n	80010e6 <ConnectFour_CheckDraw+0x32>
			if(Game.board[rows][cols] == EMPTY_CELL){
 80010c6:	4910      	ldr	r1, [pc, #64]	@ (8001108 <ConnectFour_CheckDraw+0x54>)
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	1a9b      	subs	r3, r3, r2
 80010d0:	18ca      	adds	r2, r1, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <ConnectFour_CheckDraw+0x2c>
				return 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	e00c      	b.n	80010fa <ConnectFour_CheckDraw+0x46>
		for(int rows = 1; rows <= BOARD_ROWS; rows++){
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2b06      	cmp	r3, #6
 80010ea:	ddec      	ble.n	80010c6 <ConnectFour_CheckDraw+0x12>
	for (int cols = 1; cols <= BOARD_COLS; cols++){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3301      	adds	r3, #1
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b07      	cmp	r3, #7
 80010f6:	dde3      	ble.n	80010c0 <ConnectFour_CheckDraw+0xc>
			}
		}
	}
	return 1;
 80010f8:	2301      	movs	r3, #1
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000009c 	.word	0x2000009c

0800110c <enableInterruptIRQ>:
 */


#include "InterruptControl.h"

void enableInterruptIRQ(uint8_t IRQ_num){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	if (IRQ_num < 32){
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b1f      	cmp	r3, #31
 800111a:	d804      	bhi.n	8001126 <enableInterruptIRQ+0x1a>
		// *NVIC_ISER_SETENABLE = (SET << IRQ_num);
		HAL_NVIC_EnableIRQ(IRQ_num);
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fc2a 	bl	800397a <HAL_NVIC_EnableIRQ>
	}
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <disableInterruptIRQ>:

void disableInterruptIRQ(uint8_t IRQ_num){
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
	if (IRQ_num < 32){
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b1f      	cmp	r3, #31
 800113c:	d804      	bhi.n	8001148 <disableInterruptIRQ+0x1a>
		// *NVIC_ISER_CLEARENABLE = (SET << IRQ_num);
		HAL_NVIC_DisableIRQ(IRQ_num);
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	4618      	mov	r0, r3
 8001144:	f002 fc27 	bl	8003996 <HAL_NVIC_DisableIRQ>
	}
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <clearInterruptIRQ>:
void setInterruptIRQ(uint8_t IRQ_num){


}

void clearInterruptIRQ(uint8_t IRQ_num){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	if (IRQ_num < 32){
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b1f      	cmp	r3, #31
 800115e:	d804      	bhi.n	800116a <clearInterruptIRQ+0x1a>
		// *NVIC_ISER_CLEARPENDING = (SET << IRQ_num);
		HAL_NVIC_ClearPendingIRQ(IRQ_num);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f002 fc30 	bl	80039ca <HAL_NVIC_ClearPendingIRQ>
	}

}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <clearInterruptEXTI>:

void clearInterruptEXTI(uint8_t IRQ_num){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	// EXTI->PR |= (SET << IRQ_num);
	__HAL_GPIO_EXTI_CLEAR_FLAG(IRQ_num);
 800117e:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <clearInterruptEXTI+0x1c>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	6153      	str	r3, [r2, #20]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40013c00 	.word	0x40013c00

08001194 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	@ 0x30
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	4b5a      	ldr	r3, [pc, #360]	@ (8001308 <LCD_GPIO_Init+0x174>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4a59      	ldr	r2, [pc, #356]	@ (8001308 <LCD_GPIO_Init+0x174>)
 80011a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011aa:	4b57      	ldr	r3, [pc, #348]	@ (8001308 <LCD_GPIO_Init+0x174>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	4b53      	ldr	r3, [pc, #332]	@ (8001308 <LCD_GPIO_Init+0x174>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a52      	ldr	r2, [pc, #328]	@ (8001308 <LCD_GPIO_Init+0x174>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b50      	ldr	r3, [pc, #320]	@ (8001308 <LCD_GPIO_Init+0x174>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001308 <LCD_GPIO_Init+0x174>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a4b      	ldr	r2, [pc, #300]	@ (8001308 <LCD_GPIO_Init+0x174>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b49      	ldr	r3, [pc, #292]	@ (8001308 <LCD_GPIO_Init+0x174>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b45      	ldr	r3, [pc, #276]	@ (8001308 <LCD_GPIO_Init+0x174>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a44      	ldr	r2, [pc, #272]	@ (8001308 <LCD_GPIO_Init+0x174>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b42      	ldr	r3, [pc, #264]	@ (8001308 <LCD_GPIO_Init+0x174>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b3e      	ldr	r3, [pc, #248]	@ (8001308 <LCD_GPIO_Init+0x174>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a3d      	ldr	r2, [pc, #244]	@ (8001308 <LCD_GPIO_Init+0x174>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <LCD_GPIO_Init+0x174>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b37      	ldr	r3, [pc, #220]	@ (8001308 <LCD_GPIO_Init+0x174>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a36      	ldr	r2, [pc, #216]	@ (8001308 <LCD_GPIO_Init+0x174>)
 8001230:	f043 0320 	orr.w	r3, r3, #32
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b34      	ldr	r3, [pc, #208]	@ (8001308 <LCD_GPIO_Init+0x174>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	4b30      	ldr	r3, [pc, #192]	@ (8001308 <LCD_GPIO_Init+0x174>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a2f      	ldr	r2, [pc, #188]	@ (8001308 <LCD_GPIO_Init+0x174>)
 800124c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <LCD_GPIO_Init+0x174>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800125e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001262:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800126c:	2302      	movs	r3, #2
 800126e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001270:	230e      	movs	r3, #14
 8001272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	4824      	ldr	r0, [pc, #144]	@ (800130c <LCD_GPIO_Init+0x178>)
 800127c:	f002 fbb4 	bl	80039e8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001280:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001284:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	4820      	ldr	r0, [pc, #128]	@ (8001310 <LCD_GPIO_Init+0x17c>)
 800128e:	f002 fbab 	bl	80039e8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001292:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	481d      	ldr	r0, [pc, #116]	@ (8001314 <LCD_GPIO_Init+0x180>)
 80012a0:	f002 fba2 	bl	80039e8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80012a4:	2348      	movs	r3, #72	@ 0x48
 80012a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	481a      	ldr	r0, [pc, #104]	@ (8001318 <LCD_GPIO_Init+0x184>)
 80012b0:	f002 fb9a 	bl	80039e8 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80012b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	4816      	ldr	r0, [pc, #88]	@ (800131c <LCD_GPIO_Init+0x188>)
 80012c2:	f002 fb91 	bl	80039e8 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80012c6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80012ca:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	4813      	ldr	r0, [pc, #76]	@ (8001320 <LCD_GPIO_Init+0x18c>)
 80012d4:	f002 fb88 	bl	80039e8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80012d8:	2303      	movs	r3, #3
 80012da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80012dc:	2309      	movs	r3, #9
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	480a      	ldr	r0, [pc, #40]	@ (8001310 <LCD_GPIO_Init+0x17c>)
 80012e8:	f002 fb7e 	bl	80039e8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80012ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4809      	ldr	r0, [pc, #36]	@ (8001320 <LCD_GPIO_Init+0x18c>)
 80012fa:	f002 fb75 	bl	80039e8 <HAL_GPIO_Init>
}
 80012fe:	bf00      	nop
 8001300:	3730      	adds	r7, #48	@ 0x30
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021400 	.word	0x40021400
 8001320:	40021800 	.word	0x40021800

08001324 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b090      	sub	sp, #64	@ 0x40
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001332:	23f0      	movs	r3, #240	@ 0xf0
 8001334:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800133a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800133e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001340:	2302      	movs	r3, #2
 8001342:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001344:	23ff      	movs	r3, #255	@ 0xff
 8001346:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800134c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001350:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001352:	2305      	movs	r3, #5
 8001354:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <LTCD_Layer_Init+0x78>)
 800135e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001360:	23f0      	movs	r3, #240	@ 0xf0
 8001362:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001364:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001368:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800137c:	79fa      	ldrb	r2, [r7, #7]
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4619      	mov	r1, r3
 8001384:	4806      	ldr	r0, [pc, #24]	@ (80013a0 <LTCD_Layer_Init+0x7c>)
 8001386:	f003 ff71 	bl	800526c <HAL_LTDC_ConfigLayer>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001390:	f000 fb99 	bl	8001ac6 <LCD_Error_Handler>
	}
}
 8001394:	bf00      	nop
 8001396:	3740      	adds	r7, #64	@ 0x40
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200001c4 	.word	0x200001c4
 80013a0:	200000e8 	.word	0x200000e8

080013a4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80013a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001454 <LTCD__Init+0xb0>)
 80013aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001458 <LTCD__Init+0xb4>)
 80013ac:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80013ae:	4b29      	ldr	r3, [pc, #164]	@ (8001454 <LTCD__Init+0xb0>)
 80013b0:	2209      	movs	r2, #9
 80013b2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80013b4:	4b27      	ldr	r3, [pc, #156]	@ (8001454 <LTCD__Init+0xb0>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80013ba:	4b26      	ldr	r3, [pc, #152]	@ (8001454 <LTCD__Init+0xb0>)
 80013bc:	221d      	movs	r2, #29
 80013be:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80013c0:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <LTCD__Init+0xb0>)
 80013c2:	2203      	movs	r2, #3
 80013c4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80013c6:	4b23      	ldr	r3, [pc, #140]	@ (8001454 <LTCD__Init+0xb0>)
 80013c8:	f240 120d 	movw	r2, #269	@ 0x10d
 80013cc:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80013ce:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <LTCD__Init+0xb0>)
 80013d0:	f240 1243 	movw	r2, #323	@ 0x143
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80013d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <LTCD__Init+0xb0>)
 80013d8:	f240 1217 	movw	r2, #279	@ 0x117
 80013dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80013de:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <LTCD__Init+0xb0>)
 80013e0:	f240 1247 	movw	r2, #327	@ 0x147
 80013e4:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <LTCD__Init+0xb0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80013ee:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <LTCD__Init+0xb0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80013f6:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <LTCD__Init+0xb0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013fe:	4b17      	ldr	r3, [pc, #92]	@ (800145c <LTCD__Init+0xb8>)
 8001400:	2208      	movs	r2, #8
 8001402:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001404:	4b15      	ldr	r3, [pc, #84]	@ (800145c <LTCD__Init+0xb8>)
 8001406:	22c0      	movs	r2, #192	@ 0xc0
 8001408:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800140a:	4b14      	ldr	r3, [pc, #80]	@ (800145c <LTCD__Init+0xb8>)
 800140c:	2204      	movs	r2, #4
 800140e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <LTCD__Init+0xb8>)
 8001412:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001416:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001418:	4810      	ldr	r0, [pc, #64]	@ (800145c <LTCD__Init+0xb8>)
 800141a:	f004 fd81 	bl	8005f20 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800141e:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <LTCD__Init+0xb0>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001424:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <LTCD__Init+0xb0>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800142a:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <LTCD__Init+0xb0>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001430:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <LTCD__Init+0xb0>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001436:	f7ff fead 	bl	8001194 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800143a:	4806      	ldr	r0, [pc, #24]	@ (8001454 <LTCD__Init+0xb0>)
 800143c:	f003 fe46 	bl	80050cc <HAL_LTDC_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001446:	f000 fb3e 	bl	8001ac6 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800144a:	f000 fb59 	bl	8001b00 <ili9341_Init>
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200000e8 	.word	0x200000e8
 8001458:	40016800 	.word	0x40016800
 800145c:	20000190 	.word	0x20000190

08001460 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	80fb      	strh	r3, [r7, #6]
 800146a:	460b      	mov	r3, r1
 800146c:	80bb      	strh	r3, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001472:	88ba      	ldrh	r2, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	1a9b      	subs	r3, r3, r2
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	461a      	mov	r2, r3
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	4413      	add	r3, r2
 8001482:	4905      	ldr	r1, [pc, #20]	@ (8001498 <LCD_Draw_Pixel+0x38>)
 8001484:	887a      	ldrh	r2, [r7, #2]
 8001486:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200001c4 	.word	0x200001c4

0800149c <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4604      	mov	r4, r0
 80014a4:	4608      	mov	r0, r1
 80014a6:	4611      	mov	r1, r2
 80014a8:	461a      	mov	r2, r3
 80014aa:	4623      	mov	r3, r4
 80014ac:	80fb      	strh	r3, [r7, #6]
 80014ae:	4603      	mov	r3, r0
 80014b0:	80bb      	strh	r3, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	807b      	strh	r3, [r7, #2]
 80014b6:	4613      	mov	r3, r2
 80014b8:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	425b      	negs	r3, r3
 80014be:	b29b      	uxth	r3, r3
 80014c0:	81fb      	strh	r3, [r7, #14]
 80014c2:	e034      	b.n	800152e <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	425b      	negs	r3, r3
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	81bb      	strh	r3, [r7, #12]
 80014cc:	e024      	b.n	8001518 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 80014ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014d2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014d6:	fb03 f202 	mul.w	r2, r3, r2
 80014da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014de:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80014e2:	fb01 f303 	mul.w	r3, r1, r3
 80014e6:	441a      	add	r2, r3
 80014e8:	887b      	ldrh	r3, [r7, #2]
 80014ea:	8879      	ldrh	r1, [r7, #2]
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dc0b      	bgt.n	800150c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 80014f4:	89ba      	ldrh	r2, [r7, #12]
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	4413      	add	r3, r2
 80014fa:	b298      	uxth	r0, r3
 80014fc:	89fa      	ldrh	r2, [r7, #14]
 80014fe:	88bb      	ldrh	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	b29b      	uxth	r3, r3
 8001504:	883a      	ldrh	r2, [r7, #0]
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff ffaa 	bl	8001460 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 800150c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001510:	b29b      	uxth	r3, r3
 8001512:	3301      	adds	r3, #1
 8001514:	b29b      	uxth	r3, r3
 8001516:	81bb      	strh	r3, [r7, #12]
 8001518:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	429a      	cmp	r2, r3
 8001520:	ddd5      	ble.n	80014ce <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8001522:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001526:	b29b      	uxth	r3, r3
 8001528:	3301      	adds	r3, #1
 800152a:	b29b      	uxth	r3, r3
 800152c:	81fb      	strh	r3, [r7, #14]
 800152e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001532:	887b      	ldrh	r3, [r7, #2]
 8001534:	429a      	cmp	r2, r3
 8001536:	ddc5      	ble.n	80014c4 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bd90      	pop	{r4, r7, pc}

08001542 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001542:	b590      	push	{r4, r7, lr}
 8001544:	b085      	sub	sp, #20
 8001546:	af00      	add	r7, sp, #0
 8001548:	4604      	mov	r4, r0
 800154a:	4608      	mov	r0, r1
 800154c:	4611      	mov	r1, r2
 800154e:	461a      	mov	r2, r3
 8001550:	4623      	mov	r3, r4
 8001552:	80fb      	strh	r3, [r7, #6]
 8001554:	4603      	mov	r3, r0
 8001556:	80bb      	strh	r3, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001560:	2300      	movs	r3, #0
 8001562:	81fb      	strh	r3, [r7, #14]
 8001564:	e00b      	b.n	800157e <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8001566:	89fa      	ldrh	r2, [r7, #14]
 8001568:	88bb      	ldrh	r3, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	b299      	uxth	r1, r3
 800156e:	883a      	ldrh	r2, [r7, #0]
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff74 	bl	8001460 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001578:	89fb      	ldrh	r3, [r7, #14]
 800157a:	3301      	adds	r3, #1
 800157c:	81fb      	strh	r3, [r7, #14]
 800157e:	89fa      	ldrh	r2, [r7, #14]
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	429a      	cmp	r2, r3
 8001584:	d3ef      	bcc.n	8001566 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bd90      	pop	{r4, r7, pc}

08001590 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	4604      	mov	r4, r0
 8001598:	4608      	mov	r0, r1
 800159a:	4611      	mov	r1, r2
 800159c:	461a      	mov	r2, r3
 800159e:	4623      	mov	r3, r4
 80015a0:	80fb      	strh	r3, [r7, #6]
 80015a2:	4603      	mov	r3, r0
 80015a4:	80bb      	strh	r3, [r7, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	807b      	strh	r3, [r7, #2]
 80015aa:	4613      	mov	r3, r2
 80015ac:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	81fb      	strh	r3, [r7, #14]
 80015b2:	e00b      	b.n	80015cc <LCD_Draw_Horizontal_Line+0x3c>
  {
      LCD_Draw_Pixel(i+x, y, color);
 80015b4:	89fa      	ldrh	r2, [r7, #14]
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	4413      	add	r3, r2
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	883a      	ldrh	r2, [r7, #0]
 80015be:	88b9      	ldrh	r1, [r7, #4]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff4d 	bl	8001460 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80015c6:	89fb      	ldrh	r3, [r7, #14]
 80015c8:	3301      	adds	r3, #1
 80015ca:	81fb      	strh	r3, [r7, #14]
 80015cc:	89fa      	ldrh	r2, [r7, #14]
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d3ef      	bcc.n	80015b4 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
	...

080015e0 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	460a      	mov	r2, r1
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	4613      	mov	r3, r2
 80015ee:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10e      	bne.n	8001614 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	e007      	b.n	800160c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80015fc:	4908      	ldr	r1, [pc, #32]	@ (8001620 <LCD_Clear+0x40>)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	88ba      	ldrh	r2, [r7, #4]
 8001602:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3301      	adds	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001612:	d3f3      	bcc.n	80015fc <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	200001c4 	.word	0x200001c4

08001624 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800162e:	4a04      	ldr	r2, [pc, #16]	@ (8001640 <LCD_SetTextColor+0x1c>)
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	8013      	strh	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	20000000 	.word	0x20000000

08001644 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <LCD_SetFont+0x1c>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200001c0 	.word	0x200001c0

08001664 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	603a      	str	r2, [r7, #0]
 800166e:	80fb      	strh	r3, [r7, #6]
 8001670:	460b      	mov	r3, r1
 8001672:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	e04c      	b.n	800171c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	e03f      	b.n	8001708 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	4413      	add	r3, r2
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	4619      	mov	r1, r3
 8001694:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <LCD_Draw_Char+0xd0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	889b      	ldrh	r3, [r3, #4]
 800169a:	4a27      	ldr	r2, [pc, #156]	@ (8001738 <LCD_Draw_Char+0xd4>)
 800169c:	fba2 2303 	umull	r2, r3, r2, r3
 80016a0:	08db      	lsrs	r3, r3, #3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	2280      	movs	r2, #128	@ 0x80
 80016a8:	409a      	lsls	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	fa42 f303 	asr.w	r3, r2, r3
 80016b0:	400b      	ands	r3, r1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d104      	bne.n	80016c0 <LCD_Draw_Char+0x5c>
 80016b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <LCD_Draw_Char+0xd0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	889b      	ldrh	r3, [r3, #4]
 80016bc:	2b0c      	cmp	r3, #12
 80016be:	d920      	bls.n	8001702 <LCD_Draw_Char+0x9e>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	fa42 f303 	asr.w	r3, r2, r3
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d104      	bne.n	80016e4 <LCD_Draw_Char+0x80>
 80016da:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <LCD_Draw_Char+0xd0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	889b      	ldrh	r3, [r3, #4]
 80016e0:	2b0c      	cmp	r3, #12
 80016e2:	d80e      	bhi.n	8001702 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	4413      	add	r3, r2
 80016ec:	b298      	uxth	r0, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	88bb      	ldrh	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4a10      	ldr	r2, [pc, #64]	@ (800173c <LCD_Draw_Char+0xd8>)
 80016fa:	8812      	ldrh	r2, [r2, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f7ff feaf 	bl	8001460 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	3301      	adds	r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <LCD_Draw_Char+0xd0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	889b      	ldrh	r3, [r3, #4]
 800170e:	461a      	mov	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4293      	cmp	r3, r2
 8001714:	d3b8      	bcc.n	8001688 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3301      	adds	r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <LCD_Draw_Char+0xd0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	88db      	ldrh	r3, [r3, #6]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4293      	cmp	r3, r2
 8001728:	d3ab      	bcc.n	8001682 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200001c0 	.word	0x200001c0
 8001738:	aaaaaaab 	.word	0xaaaaaaab
 800173c:	20000000 	.word	0x20000000

08001740 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
 800174a:	460b      	mov	r3, r1
 800174c:	80bb      	strh	r3, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	3b20      	subs	r3, #32
 8001756:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <LCD_DisplayChar+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	4907      	ldr	r1, [pc, #28]	@ (8001780 <LCD_DisplayChar+0x40>)
 8001762:	6809      	ldr	r1, [r1, #0]
 8001764:	88c9      	ldrh	r1, [r1, #6]
 8001766:	fb01 f303 	mul.w	r3, r1, r3
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	441a      	add	r2, r3
 800176e:	88b9      	ldrh	r1, [r7, #4]
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff76 	bl	8001664 <LCD_Draw_Char>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200001c0 	.word	0x200001c0

08001784 <screen1>:
	LCD_DisplayChar(125,160,'r');
	LCD_DisplayChar(130,160,'l');
	LCD_DisplayChar(140,160,'d');
}

void screen1(void){
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLACK);
 8001788:	2100      	movs	r1, #0
 800178a:	2000      	movs	r0, #0
 800178c:	f7ff ff28 	bl	80015e0 <LCD_Clear>
	// Initial game screen, select game mode
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8001790:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001794:	f7ff ff46 	bl	8001624 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001798:	4891      	ldr	r0, [pc, #580]	@ (80019e0 <screen1+0x25c>)
 800179a:	f7ff ff53 	bl	8001644 <LCD_SetFont>

	LCD_DisplayChar(30, 20, 'C');
 800179e:	2243      	movs	r2, #67	@ 0x43
 80017a0:	2114      	movs	r1, #20
 80017a2:	201e      	movs	r0, #30
 80017a4:	f7ff ffcc 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(50, 20, 'O');
 80017a8:	224f      	movs	r2, #79	@ 0x4f
 80017aa:	2114      	movs	r1, #20
 80017ac:	2032      	movs	r0, #50	@ 0x32
 80017ae:	f7ff ffc7 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(70, 20, 'N');
 80017b2:	224e      	movs	r2, #78	@ 0x4e
 80017b4:	2114      	movs	r1, #20
 80017b6:	2046      	movs	r0, #70	@ 0x46
 80017b8:	f7ff ffc2 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(90, 20, 'N');
 80017bc:	224e      	movs	r2, #78	@ 0x4e
 80017be:	2114      	movs	r1, #20
 80017c0:	205a      	movs	r0, #90	@ 0x5a
 80017c2:	f7ff ffbd 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(110, 20, 'E');
 80017c6:	2245      	movs	r2, #69	@ 0x45
 80017c8:	2114      	movs	r1, #20
 80017ca:	206e      	movs	r0, #110	@ 0x6e
 80017cc:	f7ff ffb8 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(130, 20, 'C');
 80017d0:	2243      	movs	r2, #67	@ 0x43
 80017d2:	2114      	movs	r1, #20
 80017d4:	2082      	movs	r0, #130	@ 0x82
 80017d6:	f7ff ffb3 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(150, 20, 'T');
 80017da:	2254      	movs	r2, #84	@ 0x54
 80017dc:	2114      	movs	r1, #20
 80017de:	2096      	movs	r0, #150	@ 0x96
 80017e0:	f7ff ffae 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(170, 20, ' ');
 80017e4:	2220      	movs	r2, #32
 80017e6:	2114      	movs	r1, #20
 80017e8:	20aa      	movs	r0, #170	@ 0xaa
 80017ea:	f7ff ffa9 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(190, 20, '4');
 80017ee:	2234      	movs	r2, #52	@ 0x34
 80017f0:	2114      	movs	r1, #20
 80017f2:	20be      	movs	r0, #190	@ 0xbe
 80017f4:	f7ff ffa4 	bl	8001740 <LCD_DisplayChar>

	LCD_DisplayChar(20,80,'S');
 80017f8:	2253      	movs	r2, #83	@ 0x53
 80017fa:	2150      	movs	r1, #80	@ 0x50
 80017fc:	2014      	movs	r0, #20
 80017fe:	f7ff ff9f 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(35,80,'e');
 8001802:	2265      	movs	r2, #101	@ 0x65
 8001804:	2150      	movs	r1, #80	@ 0x50
 8001806:	2023      	movs	r0, #35	@ 0x23
 8001808:	f7ff ff9a 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(45,80,'l');
 800180c:	226c      	movs	r2, #108	@ 0x6c
 800180e:	2150      	movs	r1, #80	@ 0x50
 8001810:	202d      	movs	r0, #45	@ 0x2d
 8001812:	f7ff ff95 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(55,80,'e');
 8001816:	2265      	movs	r2, #101	@ 0x65
 8001818:	2150      	movs	r1, #80	@ 0x50
 800181a:	2037      	movs	r0, #55	@ 0x37
 800181c:	f7ff ff90 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(70,80,'c');
 8001820:	2263      	movs	r2, #99	@ 0x63
 8001822:	2150      	movs	r1, #80	@ 0x50
 8001824:	2046      	movs	r0, #70	@ 0x46
 8001826:	f7ff ff8b 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(80,80,'t');
 800182a:	2274      	movs	r2, #116	@ 0x74
 800182c:	2150      	movs	r1, #80	@ 0x50
 800182e:	2050      	movs	r0, #80	@ 0x50
 8001830:	f7ff ff86 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(100,80,'G');
 8001834:	2247      	movs	r2, #71	@ 0x47
 8001836:	2150      	movs	r1, #80	@ 0x50
 8001838:	2064      	movs	r0, #100	@ 0x64
 800183a:	f7ff ff81 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(118,80,'a');
 800183e:	2261      	movs	r2, #97	@ 0x61
 8001840:	2150      	movs	r1, #80	@ 0x50
 8001842:	2076      	movs	r0, #118	@ 0x76
 8001844:	f7ff ff7c 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(135,80,'m');
 8001848:	226d      	movs	r2, #109	@ 0x6d
 800184a:	2150      	movs	r1, #80	@ 0x50
 800184c:	2087      	movs	r0, #135	@ 0x87
 800184e:	f7ff ff77 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(150,80,'e');
 8001852:	2265      	movs	r2, #101	@ 0x65
 8001854:	2150      	movs	r1, #80	@ 0x50
 8001856:	2096      	movs	r0, #150	@ 0x96
 8001858:	f7ff ff72 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(165,80,'m');
 800185c:	226d      	movs	r2, #109	@ 0x6d
 800185e:	2150      	movs	r1, #80	@ 0x50
 8001860:	20a5      	movs	r0, #165	@ 0xa5
 8001862:	f7ff ff6d 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(180,80,'o');
 8001866:	226f      	movs	r2, #111	@ 0x6f
 8001868:	2150      	movs	r1, #80	@ 0x50
 800186a:	20b4      	movs	r0, #180	@ 0xb4
 800186c:	f7ff ff68 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(192,80,'d');
 8001870:	2264      	movs	r2, #100	@ 0x64
 8001872:	2150      	movs	r1, #80	@ 0x50
 8001874:	20c0      	movs	r0, #192	@ 0xc0
 8001876:	f7ff ff63 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(205,80,'e');
 800187a:	2265      	movs	r2, #101	@ 0x65
 800187c:	2150      	movs	r1, #80	@ 0x50
 800187e:	20cd      	movs	r0, #205	@ 0xcd
 8001880:	f7ff ff5e 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(215,80,':');
 8001884:	223a      	movs	r2, #58	@ 0x3a
 8001886:	2150      	movs	r1, #80	@ 0x50
 8001888:	20d7      	movs	r0, #215	@ 0xd7
 800188a:	f7ff ff59 	bl	8001740 <LCD_DisplayChar>
	// button 1
	LCD_DisplayChar(50,150,'1');
 800188e:	2231      	movs	r2, #49	@ 0x31
 8001890:	2196      	movs	r1, #150	@ 0x96
 8001892:	2032      	movs	r0, #50	@ 0x32
 8001894:	f7ff ff54 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(70,150,'P');
 8001898:	2250      	movs	r2, #80	@ 0x50
 800189a:	2196      	movs	r1, #150	@ 0x96
 800189c:	2046      	movs	r0, #70	@ 0x46
 800189e:	f7ff ff4f 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(80,150,'l');
 80018a2:	226c      	movs	r2, #108	@ 0x6c
 80018a4:	2196      	movs	r1, #150	@ 0x96
 80018a6:	2050      	movs	r0, #80	@ 0x50
 80018a8:	f7ff ff4a 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(90,150,'a');
 80018ac:	2261      	movs	r2, #97	@ 0x61
 80018ae:	2196      	movs	r1, #150	@ 0x96
 80018b0:	205a      	movs	r0, #90	@ 0x5a
 80018b2:	f7ff ff45 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(100,150,'y');
 80018b6:	2279      	movs	r2, #121	@ 0x79
 80018b8:	2196      	movs	r1, #150	@ 0x96
 80018ba:	2064      	movs	r0, #100	@ 0x64
 80018bc:	f7ff ff40 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(110,150,'e');
 80018c0:	2265      	movs	r2, #101	@ 0x65
 80018c2:	2196      	movs	r1, #150	@ 0x96
 80018c4:	206e      	movs	r0, #110	@ 0x6e
 80018c6:	f7ff ff3b 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(120,150,'r');
 80018ca:	2272      	movs	r2, #114	@ 0x72
 80018cc:	2196      	movs	r1, #150	@ 0x96
 80018ce:	2078      	movs	r0, #120	@ 0x78
 80018d0:	f7ff ff36 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(140,150,'M');
 80018d4:	224d      	movs	r2, #77	@ 0x4d
 80018d6:	2196      	movs	r1, #150	@ 0x96
 80018d8:	208c      	movs	r0, #140	@ 0x8c
 80018da:	f7ff ff31 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(155,150,'o');
 80018de:	226f      	movs	r2, #111	@ 0x6f
 80018e0:	2196      	movs	r1, #150	@ 0x96
 80018e2:	209b      	movs	r0, #155	@ 0x9b
 80018e4:	f7ff ff2c 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(167,150,'d');
 80018e8:	2264      	movs	r2, #100	@ 0x64
 80018ea:	2196      	movs	r1, #150	@ 0x96
 80018ec:	20a7      	movs	r0, #167	@ 0xa7
 80018ee:	f7ff ff27 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(180,150,'e');
 80018f2:	2265      	movs	r2, #101	@ 0x65
 80018f4:	2196      	movs	r1, #150	@ 0x96
 80018f6:	20b4      	movs	r0, #180	@ 0xb4
 80018f8:	f7ff ff22 	bl	8001740 <LCD_DisplayChar>
	LCD_Draw_Vertical_Line(45,145,35,LCD_COLOR_WHITE);
 80018fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001900:	2223      	movs	r2, #35	@ 0x23
 8001902:	2191      	movs	r1, #145	@ 0x91
 8001904:	202d      	movs	r0, #45	@ 0x2d
 8001906:	f7ff fe1c 	bl	8001542 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(195,145,35,LCD_COLOR_WHITE);
 800190a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800190e:	2223      	movs	r2, #35	@ 0x23
 8001910:	2191      	movs	r1, #145	@ 0x91
 8001912:	20c3      	movs	r0, #195	@ 0xc3
 8001914:	f7ff fe15 	bl	8001542 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(45,145,150,LCD_COLOR_WHITE);
 8001918:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800191c:	2296      	movs	r2, #150	@ 0x96
 800191e:	2191      	movs	r1, #145	@ 0x91
 8001920:	202d      	movs	r0, #45	@ 0x2d
 8001922:	f7ff fe35 	bl	8001590 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(45,180,150,LCD_COLOR_WHITE);
 8001926:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800192a:	2296      	movs	r2, #150	@ 0x96
 800192c:	21b4      	movs	r1, #180	@ 0xb4
 800192e:	202d      	movs	r0, #45	@ 0x2d
 8001930:	f7ff fe2e 	bl	8001590 <LCD_Draw_Horizontal_Line>

	// button 2
	LCD_DisplayChar(50,220,'2');
 8001934:	2232      	movs	r2, #50	@ 0x32
 8001936:	21dc      	movs	r1, #220	@ 0xdc
 8001938:	2032      	movs	r0, #50	@ 0x32
 800193a:	f7ff ff01 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(70,220,'P');
 800193e:	2250      	movs	r2, #80	@ 0x50
 8001940:	21dc      	movs	r1, #220	@ 0xdc
 8001942:	2046      	movs	r0, #70	@ 0x46
 8001944:	f7ff fefc 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(80,220,'l');
 8001948:	226c      	movs	r2, #108	@ 0x6c
 800194a:	21dc      	movs	r1, #220	@ 0xdc
 800194c:	2050      	movs	r0, #80	@ 0x50
 800194e:	f7ff fef7 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(90,220,'a');
 8001952:	2261      	movs	r2, #97	@ 0x61
 8001954:	21dc      	movs	r1, #220	@ 0xdc
 8001956:	205a      	movs	r0, #90	@ 0x5a
 8001958:	f7ff fef2 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(100,220,'y');
 800195c:	2279      	movs	r2, #121	@ 0x79
 800195e:	21dc      	movs	r1, #220	@ 0xdc
 8001960:	2064      	movs	r0, #100	@ 0x64
 8001962:	f7ff feed 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(110,220,'e');
 8001966:	2265      	movs	r2, #101	@ 0x65
 8001968:	21dc      	movs	r1, #220	@ 0xdc
 800196a:	206e      	movs	r0, #110	@ 0x6e
 800196c:	f7ff fee8 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(120,220,'r');
 8001970:	2272      	movs	r2, #114	@ 0x72
 8001972:	21dc      	movs	r1, #220	@ 0xdc
 8001974:	2078      	movs	r0, #120	@ 0x78
 8001976:	f7ff fee3 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(140,220,'M');
 800197a:	224d      	movs	r2, #77	@ 0x4d
 800197c:	21dc      	movs	r1, #220	@ 0xdc
 800197e:	208c      	movs	r0, #140	@ 0x8c
 8001980:	f7ff fede 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(155,220,'o');
 8001984:	226f      	movs	r2, #111	@ 0x6f
 8001986:	21dc      	movs	r1, #220	@ 0xdc
 8001988:	209b      	movs	r0, #155	@ 0x9b
 800198a:	f7ff fed9 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(167,220,'d');
 800198e:	2264      	movs	r2, #100	@ 0x64
 8001990:	21dc      	movs	r1, #220	@ 0xdc
 8001992:	20a7      	movs	r0, #167	@ 0xa7
 8001994:	f7ff fed4 	bl	8001740 <LCD_DisplayChar>
	LCD_DisplayChar(180,220,'e');
 8001998:	2265      	movs	r2, #101	@ 0x65
 800199a:	21dc      	movs	r1, #220	@ 0xdc
 800199c:	20b4      	movs	r0, #180	@ 0xb4
 800199e:	f7ff fecf 	bl	8001740 <LCD_DisplayChar>
	LCD_Draw_Vertical_Line(45,215,35,LCD_COLOR_WHITE);
 80019a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019a6:	2223      	movs	r2, #35	@ 0x23
 80019a8:	21d7      	movs	r1, #215	@ 0xd7
 80019aa:	202d      	movs	r0, #45	@ 0x2d
 80019ac:	f7ff fdc9 	bl	8001542 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(195,215,35,LCD_COLOR_WHITE);
 80019b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019b4:	2223      	movs	r2, #35	@ 0x23
 80019b6:	21d7      	movs	r1, #215	@ 0xd7
 80019b8:	20c3      	movs	r0, #195	@ 0xc3
 80019ba:	f7ff fdc2 	bl	8001542 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(45,215,150,LCD_COLOR_WHITE);
 80019be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019c2:	2296      	movs	r2, #150	@ 0x96
 80019c4:	21d7      	movs	r1, #215	@ 0xd7
 80019c6:	202d      	movs	r0, #45	@ 0x2d
 80019c8:	f7ff fde2 	bl	8001590 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(45,250,150,LCD_COLOR_WHITE);
 80019cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019d0:	2296      	movs	r2, #150	@ 0x96
 80019d2:	21fa      	movs	r1, #250	@ 0xfa
 80019d4:	202d      	movs	r0, #45	@ 0x2d
 80019d6:	f7ff fddb 	bl	8001590 <LCD_Draw_Horizontal_Line>

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000004 	.word	0x20000004

080019e4 <screen2>:

void screen2(void){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLUE);
 80019e8:	211f      	movs	r1, #31
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fdf8 	bl	80015e0 <LCD_Clear>
	// Gameplay
	// Draw vertical lines in connect four grid screen is 320 x 240
	LCD_Draw_Vertical_Line(1,50,204, LCD_COLOR_WHITE);
 80019f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019f4:	22cc      	movs	r2, #204	@ 0xcc
 80019f6:	2132      	movs	r1, #50	@ 0x32
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff fda2 	bl	8001542 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(35,50,204, LCD_COLOR_WHITE);
 80019fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a02:	22cc      	movs	r2, #204	@ 0xcc
 8001a04:	2132      	movs	r1, #50	@ 0x32
 8001a06:	2023      	movs	r0, #35	@ 0x23
 8001a08:	f7ff fd9b 	bl	8001542 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(69,50,204, LCD_COLOR_WHITE);
 8001a0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a10:	22cc      	movs	r2, #204	@ 0xcc
 8001a12:	2132      	movs	r1, #50	@ 0x32
 8001a14:	2045      	movs	r0, #69	@ 0x45
 8001a16:	f7ff fd94 	bl	8001542 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(103,50,204, LCD_COLOR_WHITE);
 8001a1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a1e:	22cc      	movs	r2, #204	@ 0xcc
 8001a20:	2132      	movs	r1, #50	@ 0x32
 8001a22:	2067      	movs	r0, #103	@ 0x67
 8001a24:	f7ff fd8d 	bl	8001542 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(137,50,204, LCD_COLOR_WHITE);
 8001a28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a2c:	22cc      	movs	r2, #204	@ 0xcc
 8001a2e:	2132      	movs	r1, #50	@ 0x32
 8001a30:	2089      	movs	r0, #137	@ 0x89
 8001a32:	f7ff fd86 	bl	8001542 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(171,50,204, LCD_COLOR_WHITE);
 8001a36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a3a:	22cc      	movs	r2, #204	@ 0xcc
 8001a3c:	2132      	movs	r1, #50	@ 0x32
 8001a3e:	20ab      	movs	r0, #171	@ 0xab
 8001a40:	f7ff fd7f 	bl	8001542 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(205,50,204, LCD_COLOR_WHITE);
 8001a44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a48:	22cc      	movs	r2, #204	@ 0xcc
 8001a4a:	2132      	movs	r1, #50	@ 0x32
 8001a4c:	20cd      	movs	r0, #205	@ 0xcd
 8001a4e:	f7ff fd78 	bl	8001542 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(239,50,204, LCD_COLOR_WHITE);
 8001a52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a56:	22cc      	movs	r2, #204	@ 0xcc
 8001a58:	2132      	movs	r1, #50	@ 0x32
 8001a5a:	20ef      	movs	r0, #239	@ 0xef
 8001a5c:	f7ff fd71 	bl	8001542 <LCD_Draw_Vertical_Line>
	// draw horizontal lines in connected four grid
	LCD_Draw_Horizontal_Line(0,50,240,LCD_COLOR_WHITE);
 8001a60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a64:	22f0      	movs	r2, #240	@ 0xf0
 8001a66:	2132      	movs	r1, #50	@ 0x32
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff fd91 	bl	8001590 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,84,240,LCD_COLOR_WHITE);
 8001a6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a72:	22f0      	movs	r2, #240	@ 0xf0
 8001a74:	2154      	movs	r1, #84	@ 0x54
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7ff fd8a 	bl	8001590 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,118,240,LCD_COLOR_WHITE);
 8001a7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a80:	22f0      	movs	r2, #240	@ 0xf0
 8001a82:	2176      	movs	r1, #118	@ 0x76
 8001a84:	2000      	movs	r0, #0
 8001a86:	f7ff fd83 	bl	8001590 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,152,240,LCD_COLOR_WHITE);
 8001a8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a8e:	22f0      	movs	r2, #240	@ 0xf0
 8001a90:	2198      	movs	r1, #152	@ 0x98
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff fd7c 	bl	8001590 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,186,240,LCD_COLOR_WHITE);
 8001a98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a9c:	22f0      	movs	r2, #240	@ 0xf0
 8001a9e:	21ba      	movs	r1, #186	@ 0xba
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7ff fd75 	bl	8001590 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,220,240,LCD_COLOR_WHITE);
 8001aa6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001aaa:	22f0      	movs	r2, #240	@ 0xf0
 8001aac:	21dc      	movs	r1, #220	@ 0xdc
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f7ff fd6e 	bl	8001590 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,254,240,LCD_COLOR_WHITE);
 8001ab4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ab8:	22f0      	movs	r2, #240	@ 0xf0
 8001aba:	21fe      	movs	r1, #254	@ 0xfe
 8001abc:	2000      	movs	r0, #0
 8001abe:	f7ff fd67 	bl	8001590 <LCD_Draw_Horizontal_Line>
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aca:	b672      	cpsid	i
}
 8001acc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ace:	bf00      	nop
 8001ad0:	e7fd      	b.n	8001ace <LCD_Error_Handler+0x8>

08001ad2 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001ad6:	f001 f92e 	bl	8002d36 <STMPE811_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d001      	beq.n	8001ae4 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <InitializeLCDTouch+0xe>
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f001 f9d8 	bl	8002ea6 <STMPE811_ReadTouch>
 8001af6:	4603      	mov	r3, r0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001b04:	f000 f9fe 	bl	8001f04 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001b08:	20ca      	movs	r0, #202	@ 0xca
 8001b0a:	f000 f943 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001b0e:	20c3      	movs	r0, #195	@ 0xc3
 8001b10:	f000 f94d 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001b14:	2008      	movs	r0, #8
 8001b16:	f000 f94a 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001b1a:	2050      	movs	r0, #80	@ 0x50
 8001b1c:	f000 f947 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001b20:	20cf      	movs	r0, #207	@ 0xcf
 8001b22:	f000 f937 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001b26:	2000      	movs	r0, #0
 8001b28:	f000 f941 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001b2c:	20c1      	movs	r0, #193	@ 0xc1
 8001b2e:	f000 f93e 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001b32:	2030      	movs	r0, #48	@ 0x30
 8001b34:	f000 f93b 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001b38:	20ed      	movs	r0, #237	@ 0xed
 8001b3a:	f000 f92b 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001b3e:	2064      	movs	r0, #100	@ 0x64
 8001b40:	f000 f935 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f000 f932 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001b4a:	2012      	movs	r0, #18
 8001b4c:	f000 f92f 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001b50:	2081      	movs	r0, #129	@ 0x81
 8001b52:	f000 f92c 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001b56:	20e8      	movs	r0, #232	@ 0xe8
 8001b58:	f000 f91c 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001b5c:	2085      	movs	r0, #133	@ 0x85
 8001b5e:	f000 f926 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f000 f923 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001b68:	2078      	movs	r0, #120	@ 0x78
 8001b6a:	f000 f920 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001b6e:	20cb      	movs	r0, #203	@ 0xcb
 8001b70:	f000 f910 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001b74:	2039      	movs	r0, #57	@ 0x39
 8001b76:	f000 f91a 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001b7a:	202c      	movs	r0, #44	@ 0x2c
 8001b7c:	f000 f917 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b80:	2000      	movs	r0, #0
 8001b82:	f000 f914 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001b86:	2034      	movs	r0, #52	@ 0x34
 8001b88:	f000 f911 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f000 f90e 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001b92:	20f7      	movs	r0, #247	@ 0xf7
 8001b94:	f000 f8fe 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001b98:	2020      	movs	r0, #32
 8001b9a:	f000 f908 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001b9e:	20ea      	movs	r0, #234	@ 0xea
 8001ba0:	f000 f8f8 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f000 f902 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f000 f8ff 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001bb0:	20b1      	movs	r0, #177	@ 0xb1
 8001bb2:	f000 f8ef 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f000 f8f9 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001bbc:	201b      	movs	r0, #27
 8001bbe:	f000 f8f6 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001bc2:	20b6      	movs	r0, #182	@ 0xb6
 8001bc4:	f000 f8e6 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001bc8:	200a      	movs	r0, #10
 8001bca:	f000 f8f0 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001bce:	20a2      	movs	r0, #162	@ 0xa2
 8001bd0:	f000 f8ed 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001bd4:	20c0      	movs	r0, #192	@ 0xc0
 8001bd6:	f000 f8dd 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001bda:	2010      	movs	r0, #16
 8001bdc:	f000 f8e7 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001be0:	20c1      	movs	r0, #193	@ 0xc1
 8001be2:	f000 f8d7 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001be6:	2010      	movs	r0, #16
 8001be8:	f000 f8e1 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001bec:	20c5      	movs	r0, #197	@ 0xc5
 8001bee:	f000 f8d1 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001bf2:	2045      	movs	r0, #69	@ 0x45
 8001bf4:	f000 f8db 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001bf8:	2015      	movs	r0, #21
 8001bfa:	f000 f8d8 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001bfe:	20c7      	movs	r0, #199	@ 0xc7
 8001c00:	f000 f8c8 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001c04:	2090      	movs	r0, #144	@ 0x90
 8001c06:	f000 f8d2 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001c0a:	2036      	movs	r0, #54	@ 0x36
 8001c0c:	f000 f8c2 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001c10:	20c8      	movs	r0, #200	@ 0xc8
 8001c12:	f000 f8cc 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001c16:	20f2      	movs	r0, #242	@ 0xf2
 8001c18:	f000 f8bc 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f000 f8c6 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001c22:	20b0      	movs	r0, #176	@ 0xb0
 8001c24:	f000 f8b6 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001c28:	20c2      	movs	r0, #194	@ 0xc2
 8001c2a:	f000 f8c0 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001c2e:	20b6      	movs	r0, #182	@ 0xb6
 8001c30:	f000 f8b0 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001c34:	200a      	movs	r0, #10
 8001c36:	f000 f8ba 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001c3a:	20a7      	movs	r0, #167	@ 0xa7
 8001c3c:	f000 f8b7 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001c40:	2027      	movs	r0, #39	@ 0x27
 8001c42:	f000 f8b4 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001c46:	2004      	movs	r0, #4
 8001c48:	f000 f8b1 	bl	8001dae <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001c4c:	202a      	movs	r0, #42	@ 0x2a
 8001c4e:	f000 f8a1 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f000 f8ab 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f000 f8a8 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f000 f8a5 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001c64:	20ef      	movs	r0, #239	@ 0xef
 8001c66:	f000 f8a2 	bl	8001dae <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001c6a:	202b      	movs	r0, #43	@ 0x2b
 8001c6c:	f000 f892 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c70:	2000      	movs	r0, #0
 8001c72:	f000 f89c 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f000 f899 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f000 f896 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001c82:	203f      	movs	r0, #63	@ 0x3f
 8001c84:	f000 f893 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001c88:	20f6      	movs	r0, #246	@ 0xf6
 8001c8a:	f000 f883 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f000 f88d 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c94:	2000      	movs	r0, #0
 8001c96:	f000 f88a 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001c9a:	2006      	movs	r0, #6
 8001c9c:	f000 f887 	bl	8001dae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001ca0:	202c      	movs	r0, #44	@ 0x2c
 8001ca2:	f000 f877 	bl	8001d94 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001ca6:	20c8      	movs	r0, #200	@ 0xc8
 8001ca8:	f000 f9e8 	bl	800207c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001cac:	2026      	movs	r0, #38	@ 0x26
 8001cae:	f000 f871 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f000 f87b 	bl	8001dae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001cb8:	20e0      	movs	r0, #224	@ 0xe0
 8001cba:	f000 f86b 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f000 f875 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001cc4:	2029      	movs	r0, #41	@ 0x29
 8001cc6:	f000 f872 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001cca:	2024      	movs	r0, #36	@ 0x24
 8001ccc:	f000 f86f 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001cd0:	200c      	movs	r0, #12
 8001cd2:	f000 f86c 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001cd6:	200e      	movs	r0, #14
 8001cd8:	f000 f869 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001cdc:	2009      	movs	r0, #9
 8001cde:	f000 f866 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001ce2:	204e      	movs	r0, #78	@ 0x4e
 8001ce4:	f000 f863 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001ce8:	2078      	movs	r0, #120	@ 0x78
 8001cea:	f000 f860 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001cee:	203c      	movs	r0, #60	@ 0x3c
 8001cf0:	f000 f85d 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001cf4:	2009      	movs	r0, #9
 8001cf6:	f000 f85a 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001cfa:	2013      	movs	r0, #19
 8001cfc:	f000 f857 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001d00:	2005      	movs	r0, #5
 8001d02:	f000 f854 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001d06:	2017      	movs	r0, #23
 8001d08:	f000 f851 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001d0c:	2011      	movs	r0, #17
 8001d0e:	f000 f84e 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d12:	2000      	movs	r0, #0
 8001d14:	f000 f84b 	bl	8001dae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001d18:	20e1      	movs	r0, #225	@ 0xe1
 8001d1a:	f000 f83b 	bl	8001d94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f000 f845 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001d24:	2016      	movs	r0, #22
 8001d26:	f000 f842 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001d2a:	201b      	movs	r0, #27
 8001d2c:	f000 f83f 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001d30:	2004      	movs	r0, #4
 8001d32:	f000 f83c 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001d36:	2011      	movs	r0, #17
 8001d38:	f000 f839 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001d3c:	2007      	movs	r0, #7
 8001d3e:	f000 f836 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001d42:	2031      	movs	r0, #49	@ 0x31
 8001d44:	f000 f833 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001d48:	2033      	movs	r0, #51	@ 0x33
 8001d4a:	f000 f830 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001d4e:	2042      	movs	r0, #66	@ 0x42
 8001d50:	f000 f82d 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001d54:	2005      	movs	r0, #5
 8001d56:	f000 f82a 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001d5a:	200c      	movs	r0, #12
 8001d5c:	f000 f827 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001d60:	200a      	movs	r0, #10
 8001d62:	f000 f824 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001d66:	2028      	movs	r0, #40	@ 0x28
 8001d68:	f000 f821 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001d6c:	202f      	movs	r0, #47	@ 0x2f
 8001d6e:	f000 f81e 	bl	8001dae <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001d72:	200f      	movs	r0, #15
 8001d74:	f000 f81b 	bl	8001dae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001d78:	2011      	movs	r0, #17
 8001d7a:	f000 f80b 	bl	8001d94 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001d7e:	20c8      	movs	r0, #200	@ 0xc8
 8001d80:	f000 f97c 	bl	800207c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001d84:	2029      	movs	r0, #41	@ 0x29
 8001d86:	f000 f805 	bl	8001d94 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001d8a:	202c      	movs	r0, #44	@ 0x2c
 8001d8c:	f000 f802 	bl	8001d94 <ili9341_Write_Reg>
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 f949 	bl	8002038 <LCD_IO_WriteReg>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f91a 	bl	8001ff4 <LCD_IO_WriteData>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001dcc:	4819      	ldr	r0, [pc, #100]	@ (8001e34 <SPI_Init+0x6c>)
 8001dce:	f004 fcdc 	bl	800678a <HAL_SPI_GetState>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d12b      	bne.n	8001e30 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001dd8:	4b16      	ldr	r3, [pc, #88]	@ (8001e34 <SPI_Init+0x6c>)
 8001dda:	4a17      	ldr	r2, [pc, #92]	@ (8001e38 <SPI_Init+0x70>)
 8001ddc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <SPI_Init+0x6c>)
 8001de0:	2218      	movs	r2, #24
 8001de2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001de4:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <SPI_Init+0x6c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001dea:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <SPI_Init+0x6c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001df0:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <SPI_Init+0x6c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001df6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <SPI_Init+0x6c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <SPI_Init+0x6c>)
 8001dfe:	2207      	movs	r2, #7
 8001e00:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001e02:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <SPI_Init+0x6c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <SPI_Init+0x6c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001e0e:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <SPI_Init+0x6c>)
 8001e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e14:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001e16:	4b07      	ldr	r3, [pc, #28]	@ (8001e34 <SPI_Init+0x6c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <SPI_Init+0x6c>)
 8001e1e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e22:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001e24:	4803      	ldr	r0, [pc, #12]	@ (8001e34 <SPI_Init+0x6c>)
 8001e26:	f000 f833 	bl	8001e90 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001e2a:	4802      	ldr	r0, [pc, #8]	@ (8001e34 <SPI_Init+0x6c>)
 8001e2c:	f004 fab8 	bl	80063a0 <HAL_SPI_Init>
  }
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200259c4 	.word	0x200259c4
 8001e38:	40015000 	.word	0x40015000

08001e3c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001e4a:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <SPI_Write+0x34>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	1db9      	adds	r1, r7, #6
 8001e50:	2201      	movs	r2, #1
 8001e52:	4808      	ldr	r0, [pc, #32]	@ (8001e74 <SPI_Write+0x38>)
 8001e54:	f004 fb55 	bl	8006502 <HAL_SPI_Transmit>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001e62:	f000 f809 	bl	8001e78 <SPI_Error>
  }
}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000000c 	.word	0x2000000c
 8001e74:	200259c4 	.word	0x200259c4

08001e78 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001e7c:	4803      	ldr	r0, [pc, #12]	@ (8001e8c <SPI_Error+0x14>)
 8001e7e:	f004 fb18 	bl	80064b2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001e82:	f7ff ffa1 	bl	8001dc8 <SPI_Init>
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200259c4 	.word	0x200259c4

08001e90 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	@ 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	4b17      	ldr	r3, [pc, #92]	@ (8001efc <SPI_MspInit+0x6c>)
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea0:	4a16      	ldr	r2, [pc, #88]	@ (8001efc <SPI_MspInit+0x6c>)
 8001ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ea6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <SPI_MspInit+0x6c>)
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <SPI_MspInit+0x6c>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8001efc <SPI_MspInit+0x6c>)
 8001ebe:	f043 0320 	orr.w	r3, r3, #32
 8001ec2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <SPI_MspInit+0x6c>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec8:	f003 0320 	and.w	r3, r3, #32
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001ed0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4804      	ldr	r0, [pc, #16]	@ (8001f00 <SPI_MspInit+0x70>)
 8001eee:	f001 fd7b 	bl	80039e8 <HAL_GPIO_Init>
}
 8001ef2:	bf00      	nop
 8001ef4:	3728      	adds	r7, #40	@ 0x28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40021400 	.word	0x40021400

08001f04 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001f0a:	4b36      	ldr	r3, [pc, #216]	@ (8001fe4 <LCD_IO_Init+0xe0>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d164      	bne.n	8001fdc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001f12:	4b34      	ldr	r3, [pc, #208]	@ (8001fe4 <LCD_IO_Init+0xe0>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	4b32      	ldr	r3, [pc, #200]	@ (8001fe8 <LCD_IO_Init+0xe4>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f20:	4a31      	ldr	r2, [pc, #196]	@ (8001fe8 <LCD_IO_Init+0xe4>)
 8001f22:	f043 0308 	orr.w	r3, r3, #8
 8001f26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f28:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe8 <LCD_IO_Init+0xe4>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001f34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4827      	ldr	r0, [pc, #156]	@ (8001fec <LCD_IO_Init+0xe8>)
 8001f4e:	f001 fd4b 	bl	80039e8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	4b24      	ldr	r3, [pc, #144]	@ (8001fe8 <LCD_IO_Init+0xe4>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a23      	ldr	r2, [pc, #140]	@ (8001fe8 <LCD_IO_Init+0xe4>)
 8001f5c:	f043 0308 	orr.w	r3, r3, #8
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b21      	ldr	r3, [pc, #132]	@ (8001fe8 <LCD_IO_Init+0xe4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001f6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f74:	2301      	movs	r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001f80:	f107 030c 	add.w	r3, r7, #12
 8001f84:	4619      	mov	r1, r3
 8001f86:	4819      	ldr	r0, [pc, #100]	@ (8001fec <LCD_IO_Init+0xe8>)
 8001f88:	f001 fd2e 	bl	80039e8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	4b15      	ldr	r3, [pc, #84]	@ (8001fe8 <LCD_IO_Init+0xe4>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f94:	4a14      	ldr	r2, [pc, #80]	@ (8001fe8 <LCD_IO_Init+0xe4>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9c:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <LCD_IO_Init+0xe4>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001fa8:	2304      	movs	r3, #4
 8001faa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480c      	ldr	r0, [pc, #48]	@ (8001ff0 <LCD_IO_Init+0xec>)
 8001fc0:	f001 fd12 	bl	80039e8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2104      	movs	r1, #4
 8001fc8:	4809      	ldr	r0, [pc, #36]	@ (8001ff0 <LCD_IO_Init+0xec>)
 8001fca:	f001 ffc5 	bl	8003f58 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001fce:	2201      	movs	r2, #1
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	4807      	ldr	r0, [pc, #28]	@ (8001ff0 <LCD_IO_Init+0xec>)
 8001fd4:	f001 ffc0 	bl	8003f58 <HAL_GPIO_WritePin>

    SPI_Init();
 8001fd8:	f7ff fef6 	bl	8001dc8 <SPI_Init>
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20025a1c 	.word	0x20025a1c
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020c00 	.word	0x40020c00
 8001ff0:	40020800 	.word	0x40020800

08001ff4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001ffe:	2201      	movs	r2, #1
 8002000:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002004:	480a      	ldr	r0, [pc, #40]	@ (8002030 <LCD_IO_WriteData+0x3c>)
 8002006:	f001 ffa7 	bl	8003f58 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800200a:	2200      	movs	r2, #0
 800200c:	2104      	movs	r1, #4
 800200e:	4809      	ldr	r0, [pc, #36]	@ (8002034 <LCD_IO_WriteData+0x40>)
 8002010:	f001 ffa2 	bl	8003f58 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff10 	bl	8001e3c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800201c:	2201      	movs	r2, #1
 800201e:	2104      	movs	r1, #4
 8002020:	4804      	ldr	r0, [pc, #16]	@ (8002034 <LCD_IO_WriteData+0x40>)
 8002022:	f001 ff99 	bl	8003f58 <HAL_GPIO_WritePin>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40020c00 	.word	0x40020c00
 8002034:	40020800 	.word	0x40020800

08002038 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002042:	2200      	movs	r2, #0
 8002044:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002048:	480a      	ldr	r0, [pc, #40]	@ (8002074 <LCD_IO_WriteReg+0x3c>)
 800204a:	f001 ff85 	bl	8003f58 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800204e:	2200      	movs	r2, #0
 8002050:	2104      	movs	r1, #4
 8002052:	4809      	ldr	r0, [pc, #36]	@ (8002078 <LCD_IO_WriteReg+0x40>)
 8002054:	f001 ff80 	bl	8003f58 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	b29b      	uxth	r3, r3
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff feed 	bl	8001e3c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002062:	2201      	movs	r2, #1
 8002064:	2104      	movs	r1, #4
 8002066:	4804      	ldr	r0, [pc, #16]	@ (8002078 <LCD_IO_WriteReg+0x40>)
 8002068:	f001 ff76 	bl	8003f58 <HAL_GPIO_WritePin>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40020c00 	.word	0x40020c00
 8002078:	40020800 	.word	0x40020800

0800207c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f001 fb1b 	bl	80036c0 <HAL_Delay>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002096:	f001 faa1 	bl	80035dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800209a:	f000 f815 	bl	80020c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800209e:	f000 fa05 	bl	80024ac <MX_GPIO_Init>
  MX_LTDC_Init();
 80020a2:	f000 f8bb 	bl	800221c <MX_LTDC_Init>
  MX_RNG_Init();
 80020a6:	f000 f96b 	bl	8002380 <MX_RNG_Init>
  MX_TIM2_Init();
 80020aa:	f000 f9b3 	bl	8002414 <MX_TIM2_Init>
  MX_SPI5_Init();
 80020ae:	f000 f97b 	bl	80023a8 <MX_SPI5_Init>
  MX_I2C3_Init();
 80020b2:	f000 f873 	bl	800219c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 80020b6:	f7fe fa63 	bl	8000580 <ApplicationInit>
  //LCD_Visual_Demo();
  ConnectFour_GameLoop();
 80020ba:	f7fe fbcb 	bl	8000854 <ConnectFour_GameLoop>

    /* USER CODE END 2 */
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
  LCD_Touch_Polling_Demo(); // This function Will not return
 80020be:	f7fe fa79 	bl	80005b4 <LCD_Touch_Polling_Demo>
#endif
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020c2:	bf00      	nop
 80020c4:	e7fd      	b.n	80020c2 <main+0x30>
	...

080020c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b094      	sub	sp, #80	@ 0x50
 80020cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ce:	f107 0320 	add.w	r3, r7, #32
 80020d2:	2230      	movs	r2, #48	@ 0x30
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f005 f962 	bl	80073a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020dc:	f107 030c 	add.w	r3, r7, #12
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <SystemClock_Config+0xcc>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	4a27      	ldr	r2, [pc, #156]	@ (8002194 <SystemClock_Config+0xcc>)
 80020f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fc:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <SystemClock_Config+0xcc>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002108:	2300      	movs	r3, #0
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <SystemClock_Config+0xd0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a21      	ldr	r2, [pc, #132]	@ (8002198 <SystemClock_Config+0xd0>)
 8002112:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b1f      	ldr	r3, [pc, #124]	@ (8002198 <SystemClock_Config+0xd0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002124:	2301      	movs	r3, #1
 8002126:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002128:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800212c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800212e:	2302      	movs	r3, #2
 8002130:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002132:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002136:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002138:	2308      	movs	r3, #8
 800213a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800213c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002140:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002142:	2302      	movs	r3, #2
 8002144:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002146:	2307      	movs	r3, #7
 8002148:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800214a:	f107 0320 	add.w	r3, r7, #32
 800214e:	4618      	mov	r0, r3
 8002150:	f003 fa62 	bl	8005618 <HAL_RCC_OscConfig>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800215a:	f000 fb55 	bl	8002808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800215e:	230f      	movs	r3, #15
 8002160:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002162:	2302      	movs	r3, #2
 8002164:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800216a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800216e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002174:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	2105      	movs	r1, #5
 800217c:	4618      	mov	r0, r3
 800217e:	f003 fcc3 	bl	8005b08 <HAL_RCC_ClockConfig>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002188:	f000 fb3e 	bl	8002808 <Error_Handler>
  }
}
 800218c:	bf00      	nop
 800218e:	3750      	adds	r7, #80	@ 0x50
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40023800 	.word	0x40023800
 8002198:	40007000 	.word	0x40007000

0800219c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80021a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002210 <MX_I2C3_Init+0x74>)
 80021a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002214 <MX_I2C3_Init+0x78>)
 80021a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80021a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <MX_I2C3_Init+0x74>)
 80021a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002218 <MX_I2C3_Init+0x7c>)
 80021aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021ac:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <MX_I2C3_Init+0x74>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <MX_I2C3_Init+0x74>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021b8:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <MX_I2C3_Init+0x74>)
 80021ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021be:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021c0:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <MX_I2C3_Init+0x74>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80021c6:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <MX_I2C3_Init+0x74>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021cc:	4b10      	ldr	r3, [pc, #64]	@ (8002210 <MX_I2C3_Init+0x74>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002210 <MX_I2C3_Init+0x74>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80021d8:	480d      	ldr	r0, [pc, #52]	@ (8002210 <MX_I2C3_Init+0x74>)
 80021da:	f001 fed7 	bl	8003f8c <HAL_I2C_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80021e4:	f000 fb10 	bl	8002808 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021e8:	2100      	movs	r1, #0
 80021ea:	4809      	ldr	r0, [pc, #36]	@ (8002210 <MX_I2C3_Init+0x74>)
 80021ec:	f002 fef2 	bl	8004fd4 <HAL_I2CEx_ConfigAnalogFilter>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80021f6:	f000 fb07 	bl	8002808 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80021fa:	2100      	movs	r1, #0
 80021fc:	4804      	ldr	r0, [pc, #16]	@ (8002210 <MX_I2C3_Init+0x74>)
 80021fe:	f002 ff25 	bl	800504c <HAL_I2CEx_ConfigDigitalFilter>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002208:	f000 fafe 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20025a20 	.word	0x20025a20
 8002214:	40005c00 	.word	0x40005c00
 8002218:	000186a0 	.word	0x000186a0

0800221c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b09a      	sub	sp, #104	@ 0x68
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002222:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002226:	2234      	movs	r2, #52	@ 0x34
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f005 f8b8 	bl	80073a0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002230:	463b      	mov	r3, r7
 8002232:	2234      	movs	r2, #52	@ 0x34
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f005 f8b2 	bl	80073a0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800223c:	4b4e      	ldr	r3, [pc, #312]	@ (8002378 <MX_LTDC_Init+0x15c>)
 800223e:	4a4f      	ldr	r2, [pc, #316]	@ (800237c <MX_LTDC_Init+0x160>)
 8002240:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002242:	4b4d      	ldr	r3, [pc, #308]	@ (8002378 <MX_LTDC_Init+0x15c>)
 8002244:	2200      	movs	r2, #0
 8002246:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002248:	4b4b      	ldr	r3, [pc, #300]	@ (8002378 <MX_LTDC_Init+0x15c>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800224e:	4b4a      	ldr	r3, [pc, #296]	@ (8002378 <MX_LTDC_Init+0x15c>)
 8002250:	2200      	movs	r2, #0
 8002252:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002254:	4b48      	ldr	r3, [pc, #288]	@ (8002378 <MX_LTDC_Init+0x15c>)
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800225a:	4b47      	ldr	r3, [pc, #284]	@ (8002378 <MX_LTDC_Init+0x15c>)
 800225c:	2207      	movs	r2, #7
 800225e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002260:	4b45      	ldr	r3, [pc, #276]	@ (8002378 <MX_LTDC_Init+0x15c>)
 8002262:	2203      	movs	r2, #3
 8002264:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8002266:	4b44      	ldr	r3, [pc, #272]	@ (8002378 <MX_LTDC_Init+0x15c>)
 8002268:	220e      	movs	r2, #14
 800226a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800226c:	4b42      	ldr	r3, [pc, #264]	@ (8002378 <MX_LTDC_Init+0x15c>)
 800226e:	2205      	movs	r2, #5
 8002270:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8002272:	4b41      	ldr	r3, [pc, #260]	@ (8002378 <MX_LTDC_Init+0x15c>)
 8002274:	f240 228e 	movw	r2, #654	@ 0x28e
 8002278:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800227a:	4b3f      	ldr	r3, [pc, #252]	@ (8002378 <MX_LTDC_Init+0x15c>)
 800227c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002280:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8002282:	4b3d      	ldr	r3, [pc, #244]	@ (8002378 <MX_LTDC_Init+0x15c>)
 8002284:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002288:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800228a:	4b3b      	ldr	r3, [pc, #236]	@ (8002378 <MX_LTDC_Init+0x15c>)
 800228c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002290:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002292:	4b39      	ldr	r3, [pc, #228]	@ (8002378 <MX_LTDC_Init+0x15c>)
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800229a:	4b37      	ldr	r3, [pc, #220]	@ (8002378 <MX_LTDC_Init+0x15c>)
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80022a2:	4b35      	ldr	r3, [pc, #212]	@ (8002378 <MX_LTDC_Init+0x15c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80022aa:	4833      	ldr	r0, [pc, #204]	@ (8002378 <MX_LTDC_Init+0x15c>)
 80022ac:	f002 ff0e 	bl	80050cc <HAL_LTDC_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80022b6:	f000 faa7 	bl	8002808 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80022ca:	2300      	movs	r3, #0
 80022cc:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80022d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022da:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80022dc:	2305      	movs	r3, #5
 80022de:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80022fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002302:	2200      	movs	r2, #0
 8002304:	4619      	mov	r1, r3
 8002306:	481c      	ldr	r0, [pc, #112]	@ (8002378 <MX_LTDC_Init+0x15c>)
 8002308:	f002 ffb0 	bl	800526c <HAL_LTDC_ConfigLayer>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002312:	f000 fa79 	bl	8002808 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002336:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002338:	2305      	movs	r3, #5
 800233a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800235a:	463b      	mov	r3, r7
 800235c:	2201      	movs	r2, #1
 800235e:	4619      	mov	r1, r3
 8002360:	4805      	ldr	r0, [pc, #20]	@ (8002378 <MX_LTDC_Init+0x15c>)
 8002362:	f002 ff83 	bl	800526c <HAL_LTDC_ConfigLayer>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800236c:	f000 fa4c 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	3768      	adds	r7, #104	@ 0x68
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20025a74 	.word	0x20025a74
 800237c:	40016800 	.word	0x40016800

08002380 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002384:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <MX_RNG_Init+0x20>)
 8002386:	4a07      	ldr	r2, [pc, #28]	@ (80023a4 <MX_RNG_Init+0x24>)
 8002388:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800238a:	4805      	ldr	r0, [pc, #20]	@ (80023a0 <MX_RNG_Init+0x20>)
 800238c:	f003 ff88 	bl	80062a0 <HAL_RNG_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002396:	f000 fa37 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200000d0 	.word	0x200000d0
 80023a4:	50060800 	.word	0x50060800

080023a8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80023ac:	4b17      	ldr	r3, [pc, #92]	@ (800240c <MX_SPI5_Init+0x64>)
 80023ae:	4a18      	ldr	r2, [pc, #96]	@ (8002410 <MX_SPI5_Init+0x68>)
 80023b0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80023b2:	4b16      	ldr	r3, [pc, #88]	@ (800240c <MX_SPI5_Init+0x64>)
 80023b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023b8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80023ba:	4b14      	ldr	r3, [pc, #80]	@ (800240c <MX_SPI5_Init+0x64>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80023c0:	4b12      	ldr	r3, [pc, #72]	@ (800240c <MX_SPI5_Init+0x64>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023c6:	4b11      	ldr	r3, [pc, #68]	@ (800240c <MX_SPI5_Init+0x64>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023cc:	4b0f      	ldr	r3, [pc, #60]	@ (800240c <MX_SPI5_Init+0x64>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	@ (800240c <MX_SPI5_Init+0x64>)
 80023d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023d8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023da:	4b0c      	ldr	r3, [pc, #48]	@ (800240c <MX_SPI5_Init+0x64>)
 80023dc:	2200      	movs	r2, #0
 80023de:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023e0:	4b0a      	ldr	r3, [pc, #40]	@ (800240c <MX_SPI5_Init+0x64>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80023e6:	4b09      	ldr	r3, [pc, #36]	@ (800240c <MX_SPI5_Init+0x64>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ec:	4b07      	ldr	r3, [pc, #28]	@ (800240c <MX_SPI5_Init+0x64>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <MX_SPI5_Init+0x64>)
 80023f4:	220a      	movs	r2, #10
 80023f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80023f8:	4804      	ldr	r0, [pc, #16]	@ (800240c <MX_SPI5_Init+0x64>)
 80023fa:	f003 ffd1 	bl	80063a0 <HAL_SPI_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002404:	f000 fa00 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20025b1c 	.word	0x20025b1c
 8002410:	40015000 	.word	0x40015000

08002414 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800241a:	f107 0308 	add.w	r3, r7, #8
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002428:	463b      	mov	r3, r7
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002430:	4b1d      	ldr	r3, [pc, #116]	@ (80024a8 <MX_TIM2_Init+0x94>)
 8002432:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002436:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002438:	4b1b      	ldr	r3, [pc, #108]	@ (80024a8 <MX_TIM2_Init+0x94>)
 800243a:	2200      	movs	r2, #0
 800243c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243e:	4b1a      	ldr	r3, [pc, #104]	@ (80024a8 <MX_TIM2_Init+0x94>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002444:	4b18      	ldr	r3, [pc, #96]	@ (80024a8 <MX_TIM2_Init+0x94>)
 8002446:	f04f 32ff 	mov.w	r2, #4294967295
 800244a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244c:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <MX_TIM2_Init+0x94>)
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002452:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <MX_TIM2_Init+0x94>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002458:	4813      	ldr	r0, [pc, #76]	@ (80024a8 <MX_TIM2_Init+0x94>)
 800245a:	f004 fa81 	bl	8006960 <HAL_TIM_Base_Init>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002464:	f000 f9d0 	bl	8002808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800246c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800246e:	f107 0308 	add.w	r3, r7, #8
 8002472:	4619      	mov	r1, r3
 8002474:	480c      	ldr	r0, [pc, #48]	@ (80024a8 <MX_TIM2_Init+0x94>)
 8002476:	f004 fac2 	bl	80069fe <HAL_TIM_ConfigClockSource>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002480:	f000 f9c2 	bl	8002808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800248c:	463b      	mov	r3, r7
 800248e:	4619      	mov	r1, r3
 8002490:	4805      	ldr	r0, [pc, #20]	@ (80024a8 <MX_TIM2_Init+0x94>)
 8002492:	f004 fcc1 	bl	8006e18 <HAL_TIMEx_MasterConfigSynchronization>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800249c:	f000 f9b4 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024a0:	bf00      	nop
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20025b74 	.word	0x20025b74

080024ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08e      	sub	sp, #56	@ 0x38
 80024b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
 80024c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
 80024c6:	4bb2      	ldr	r3, [pc, #712]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	4ab1      	ldr	r2, [pc, #708]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d2:	4baf      	ldr	r3, [pc, #700]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	623b      	str	r3, [r7, #32]
 80024dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	4bab      	ldr	r3, [pc, #684]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	4aaa      	ldr	r2, [pc, #680]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 80024e8:	f043 0320 	orr.w	r3, r3, #32
 80024ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ee:	4ba8      	ldr	r3, [pc, #672]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	4ba4      	ldr	r3, [pc, #656]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	4aa3      	ldr	r2, [pc, #652]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 8002504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002508:	6313      	str	r3, [r2, #48]	@ 0x30
 800250a:	4ba1      	ldr	r3, [pc, #644]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002512:	61bb      	str	r3, [r7, #24]
 8002514:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	4b9d      	ldr	r3, [pc, #628]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	4a9c      	ldr	r2, [pc, #624]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	@ 0x30
 8002526:	4b9a      	ldr	r3, [pc, #616]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	4b96      	ldr	r3, [pc, #600]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	4a95      	ldr	r2, [pc, #596]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	6313      	str	r3, [r2, #48]	@ 0x30
 8002542:	4b93      	ldr	r3, [pc, #588]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b8f      	ldr	r3, [pc, #572]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	4a8e      	ldr	r2, [pc, #568]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 8002558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800255c:	6313      	str	r3, [r2, #48]	@ 0x30
 800255e:	4b8c      	ldr	r3, [pc, #560]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	4b88      	ldr	r3, [pc, #544]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	4a87      	ldr	r2, [pc, #540]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 8002574:	f043 0310 	orr.w	r3, r3, #16
 8002578:	6313      	str	r3, [r2, #48]	@ 0x30
 800257a:	4b85      	ldr	r3, [pc, #532]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	4b81      	ldr	r3, [pc, #516]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	4a80      	ldr	r2, [pc, #512]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 8002590:	f043 0308 	orr.w	r3, r3, #8
 8002594:	6313      	str	r3, [r2, #48]	@ 0x30
 8002596:	4b7e      	ldr	r3, [pc, #504]	@ (8002790 <MX_GPIO_Init+0x2e4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2116      	movs	r1, #22
 80025a6:	487b      	ldr	r0, [pc, #492]	@ (8002794 <MX_GPIO_Init+0x2e8>)
 80025a8:	f001 fcd6 	bl	8003f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2180      	movs	r1, #128	@ 0x80
 80025b0:	4879      	ldr	r0, [pc, #484]	@ (8002798 <MX_GPIO_Init+0x2ec>)
 80025b2:	f001 fcd1 	bl	8003f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80025b6:	2200      	movs	r2, #0
 80025b8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80025bc:	4877      	ldr	r0, [pc, #476]	@ (800279c <MX_GPIO_Init+0x2f0>)
 80025be:	f001 fccb 	bl	8003f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80025c2:	2200      	movs	r2, #0
 80025c4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80025c8:	4875      	ldr	r0, [pc, #468]	@ (80027a0 <MX_GPIO_Init+0x2f4>)
 80025ca:	f001 fcc5 	bl	8003f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80025ce:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025dc:	2303      	movs	r3, #3
 80025de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025e0:	230c      	movs	r3, #12
 80025e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025e8:	4619      	mov	r1, r3
 80025ea:	486e      	ldr	r0, [pc, #440]	@ (80027a4 <MX_GPIO_Init+0x2f8>)
 80025ec:	f001 f9fc 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80025f0:	2301      	movs	r3, #1
 80025f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fc:	2303      	movs	r3, #3
 80025fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002600:	230c      	movs	r3, #12
 8002602:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002608:	4619      	mov	r1, r3
 800260a:	4862      	ldr	r0, [pc, #392]	@ (8002794 <MX_GPIO_Init+0x2e8>)
 800260c:	f001 f9ec 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002610:	2316      	movs	r3, #22
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002614:	2301      	movs	r3, #1
 8002616:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002620:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002624:	4619      	mov	r1, r3
 8002626:	485b      	ldr	r0, [pc, #364]	@ (8002794 <MX_GPIO_Init+0x2e8>)
 8002628:	f001 f9de 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800262c:	f248 0307 	movw	r3, #32775	@ 0x8007
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002632:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002636:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002640:	4619      	mov	r1, r3
 8002642:	4855      	ldr	r0, [pc, #340]	@ (8002798 <MX_GPIO_Init+0x2ec>)
 8002644:	f001 f9d0 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264c:	2301      	movs	r3, #1
 800264e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2300      	movs	r3, #0
 8002656:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800265c:	4619      	mov	r1, r3
 800265e:	484e      	ldr	r0, [pc, #312]	@ (8002798 <MX_GPIO_Init+0x2ec>)
 8002660:	f001 f9c2 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002664:	2320      	movs	r3, #32
 8002666:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002668:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800266c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002676:	4619      	mov	r1, r3
 8002678:	4846      	ldr	r0, [pc, #280]	@ (8002794 <MX_GPIO_Init+0x2e8>)
 800267a:	f001 f9b5 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800267e:	2304      	movs	r3, #4
 8002680:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002682:	2300      	movs	r3, #0
 8002684:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800268a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800268e:	4619      	mov	r1, r3
 8002690:	4845      	ldr	r0, [pc, #276]	@ (80027a8 <MX_GPIO_Init+0x2fc>)
 8002692:	f001 f9a9 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002696:	f248 1333 	movw	r3, #33075	@ 0x8133
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026a8:	230c      	movs	r3, #12
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b0:	4619      	mov	r1, r3
 80026b2:	483b      	ldr	r0, [pc, #236]	@ (80027a0 <MX_GPIO_Init+0x2f4>)
 80026b4:	f001 f998 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80026b8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c6:	2303      	movs	r3, #3
 80026c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026ca:	230c      	movs	r3, #12
 80026cc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026d2:	4619      	mov	r1, r3
 80026d4:	4835      	ldr	r0, [pc, #212]	@ (80027ac <MX_GPIO_Init+0x300>)
 80026d6:	f001 f987 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80026da:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e8:	2300      	movs	r3, #0
 80026ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80026ec:	230c      	movs	r3, #12
 80026ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026f4:	4619      	mov	r1, r3
 80026f6:	482c      	ldr	r0, [pc, #176]	@ (80027a8 <MX_GPIO_Init+0x2fc>)
 80026f8:	f001 f976 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80026fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002700:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002702:	2300      	movs	r3, #0
 8002704:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800270a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800270e:	4619      	mov	r1, r3
 8002710:	4825      	ldr	r0, [pc, #148]	@ (80027a8 <MX_GPIO_Init+0x2fc>)
 8002712:	f001 f969 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002716:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002728:	230c      	movs	r3, #12
 800272a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800272c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002730:	4619      	mov	r1, r3
 8002732:	481a      	ldr	r0, [pc, #104]	@ (800279c <MX_GPIO_Init+0x2f0>)
 8002734:	f001 f958 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002738:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800273e:	2300      	movs	r3, #0
 8002740:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800274a:	4619      	mov	r1, r3
 800274c:	4813      	ldr	r0, [pc, #76]	@ (800279c <MX_GPIO_Init+0x2f0>)
 800274e:	f001 f94b 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002752:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002756:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002758:	2301      	movs	r3, #1
 800275a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002768:	4619      	mov	r1, r3
 800276a:	480c      	ldr	r0, [pc, #48]	@ (800279c <MX_GPIO_Init+0x2f0>)
 800276c:	f001 f93c 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002770:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277e:	2303      	movs	r3, #3
 8002780:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002782:	2307      	movs	r3, #7
 8002784:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800278a:	4619      	mov	r1, r3
 800278c:	e010      	b.n	80027b0 <MX_GPIO_Init+0x304>
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	40020800 	.word	0x40020800
 8002798:	40020000 	.word	0x40020000
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	40021800 	.word	0x40021800
 80027a4:	40021400 	.word	0x40021400
 80027a8:	40020400 	.word	0x40020400
 80027ac:	40021000 	.word	0x40021000
 80027b0:	4812      	ldr	r0, [pc, #72]	@ (80027fc <MX_GPIO_Init+0x350>)
 80027b2:	f001 f919 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80027b6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027bc:	2301      	movs	r3, #1
 80027be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027cc:	4619      	mov	r1, r3
 80027ce:	480c      	ldr	r0, [pc, #48]	@ (8002800 <MX_GPIO_Init+0x354>)
 80027d0:	f001 f90a 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80027d4:	2360      	movs	r3, #96	@ 0x60
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	2302      	movs	r3, #2
 80027da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e0:	2303      	movs	r3, #3
 80027e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027e4:	230c      	movs	r3, #12
 80027e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ec:	4619      	mov	r1, r3
 80027ee:	4805      	ldr	r0, [pc, #20]	@ (8002804 <MX_GPIO_Init+0x358>)
 80027f0:	f001 f8fa 	bl	80039e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027f4:	bf00      	nop
 80027f6:	3738      	adds	r7, #56	@ 0x38
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40020000 	.word	0x40020000
 8002800:	40021800 	.word	0x40021800
 8002804:	40020400 	.word	0x40020400

08002808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800280c:	b672      	cpsid	i
}
 800280e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <Error_Handler+0x8>

08002814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
 800281e:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <HAL_MspInit+0x4c>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002822:	4a0f      	ldr	r2, [pc, #60]	@ (8002860 <HAL_MspInit+0x4c>)
 8002824:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002828:	6453      	str	r3, [r2, #68]	@ 0x44
 800282a:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <HAL_MspInit+0x4c>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <HAL_MspInit+0x4c>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	4a08      	ldr	r2, [pc, #32]	@ (8002860 <HAL_MspInit+0x4c>)
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002844:	6413      	str	r3, [r2, #64]	@ 0x40
 8002846:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <HAL_MspInit+0x4c>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002852:	2007      	movs	r0, #7
 8002854:	f001 f86a 	bl	800392c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800

08002864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	@ 0x28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a29      	ldr	r2, [pc, #164]	@ (8002928 <HAL_I2C_MspInit+0xc4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d14b      	bne.n	800291e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	4b28      	ldr	r3, [pc, #160]	@ (800292c <HAL_I2C_MspInit+0xc8>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	4a27      	ldr	r2, [pc, #156]	@ (800292c <HAL_I2C_MspInit+0xc8>)
 8002890:	f043 0304 	orr.w	r3, r3, #4
 8002894:	6313      	str	r3, [r2, #48]	@ 0x30
 8002896:	4b25      	ldr	r3, [pc, #148]	@ (800292c <HAL_I2C_MspInit+0xc8>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b21      	ldr	r3, [pc, #132]	@ (800292c <HAL_I2C_MspInit+0xc8>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	4a20      	ldr	r2, [pc, #128]	@ (800292c <HAL_I2C_MspInit+0xc8>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b2:	4b1e      	ldr	r3, [pc, #120]	@ (800292c <HAL_I2C_MspInit+0xc8>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80028be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c4:	2312      	movs	r3, #18
 80028c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028d0:	2304      	movs	r3, #4
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	4619      	mov	r1, r3
 80028da:	4815      	ldr	r0, [pc, #84]	@ (8002930 <HAL_I2C_MspInit+0xcc>)
 80028dc:	f001 f884 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80028e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e6:	2312      	movs	r3, #18
 80028e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028f2:	2304      	movs	r3, #4
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4619      	mov	r1, r3
 80028fc:	480d      	ldr	r0, [pc, #52]	@ (8002934 <HAL_I2C_MspInit+0xd0>)
 80028fe:	f001 f873 	bl	80039e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	4b09      	ldr	r3, [pc, #36]	@ (800292c <HAL_I2C_MspInit+0xc8>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	4a08      	ldr	r2, [pc, #32]	@ (800292c <HAL_I2C_MspInit+0xc8>)
 800290c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002910:	6413      	str	r3, [r2, #64]	@ 0x40
 8002912:	4b06      	ldr	r3, [pc, #24]	@ (800292c <HAL_I2C_MspInit+0xc8>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800291e:	bf00      	nop
 8002920:	3728      	adds	r7, #40	@ 0x28
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40005c00 	.word	0x40005c00
 800292c:	40023800 	.word	0x40023800
 8002930:	40020800 	.word	0x40020800
 8002934:	40020000 	.word	0x40020000

08002938 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b09a      	sub	sp, #104	@ 0x68
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002954:	2230      	movs	r2, #48	@ 0x30
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f004 fd21 	bl	80073a0 <memset>
  if(hltdc->Instance==LTDC)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a81      	ldr	r2, [pc, #516]	@ (8002b68 <HAL_LTDC_MspInit+0x230>)
 8002964:	4293      	cmp	r3, r2
 8002966:	f040 80fb 	bne.w	8002b60 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800296a:	2308      	movs	r3, #8
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 800296e:	23c8      	movs	r3, #200	@ 0xc8
 8002970:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002972:	2302      	movs	r3, #2
 8002974:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002976:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800297a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800297c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002980:	4618      	mov	r0, r3
 8002982:	f003 facd 	bl	8005f20 <HAL_RCCEx_PeriphCLKConfig>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 800298c:	f7ff ff3c 	bl	8002808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]
 8002994:	4b75      	ldr	r3, [pc, #468]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 8002996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002998:	4a74      	ldr	r2, [pc, #464]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 800299a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800299e:	6453      	str	r3, [r2, #68]	@ 0x44
 80029a0:	4b72      	ldr	r3, [pc, #456]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 80029a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029a8:	623b      	str	r3, [r7, #32]
 80029aa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	4b6e      	ldr	r3, [pc, #440]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b4:	4a6d      	ldr	r2, [pc, #436]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 80029b6:	f043 0320 	orr.w	r3, r3, #32
 80029ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80029bc:	4b6b      	ldr	r3, [pc, #428]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
 80029cc:	4b67      	ldr	r3, [pc, #412]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	4a66      	ldr	r2, [pc, #408]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d8:	4b64      	ldr	r3, [pc, #400]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	4b60      	ldr	r3, [pc, #384]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ec:	4a5f      	ldr	r2, [pc, #380]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 80029ee:	f043 0302 	orr.w	r3, r3, #2
 80029f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f4:	4b5d      	ldr	r3, [pc, #372]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	4b59      	ldr	r3, [pc, #356]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 8002a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a08:	4a58      	ldr	r2, [pc, #352]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 8002a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a10:	4b56      	ldr	r3, [pc, #344]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	4b52      	ldr	r3, [pc, #328]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	4a51      	ldr	r2, [pc, #324]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2c:	4b4f      	ldr	r3, [pc, #316]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a40:	4a4a      	ldr	r2, [pc, #296]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 8002a42:	f043 0308 	orr.w	r3, r3, #8
 8002a46:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a48:	4b48      	ldr	r3, [pc, #288]	@ (8002b6c <HAL_LTDC_MspInit+0x234>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002a54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a58:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a66:	230e      	movs	r3, #14
 8002a68:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002a6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a6e:	4619      	mov	r1, r3
 8002a70:	483f      	ldr	r0, [pc, #252]	@ (8002b70 <HAL_LTDC_MspInit+0x238>)
 8002a72:	f000 ffb9 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002a76:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002a7a:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a84:	2300      	movs	r3, #0
 8002a86:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a88:	230e      	movs	r3, #14
 8002a8a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a90:	4619      	mov	r1, r3
 8002a92:	4838      	ldr	r0, [pc, #224]	@ (8002b74 <HAL_LTDC_MspInit+0x23c>)
 8002a94:	f000 ffa8 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002aa8:	2309      	movs	r3, #9
 8002aaa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4831      	ldr	r0, [pc, #196]	@ (8002b78 <HAL_LTDC_MspInit+0x240>)
 8002ab4:	f000 ff98 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002ab8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002abc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002aca:	230e      	movs	r3, #14
 8002acc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4828      	ldr	r0, [pc, #160]	@ (8002b78 <HAL_LTDC_MspInit+0x240>)
 8002ad6:	f000 ff87 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002ada:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002ade:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002aec:	230e      	movs	r3, #14
 8002aee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002af0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002af4:	4619      	mov	r1, r3
 8002af6:	4821      	ldr	r0, [pc, #132]	@ (8002b7c <HAL_LTDC_MspInit+0x244>)
 8002af8:	f000 ff76 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002afc:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002b00:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	2302      	movs	r3, #2
 8002b04:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b0e:	230e      	movs	r3, #14
 8002b10:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b16:	4619      	mov	r1, r3
 8002b18:	4819      	ldr	r0, [pc, #100]	@ (8002b80 <HAL_LTDC_MspInit+0x248>)
 8002b1a:	f000 ff65 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002b1e:	2348      	movs	r3, #72	@ 0x48
 8002b20:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b2e:	230e      	movs	r3, #14
 8002b30:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b32:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b36:	4619      	mov	r1, r3
 8002b38:	4812      	ldr	r0, [pc, #72]	@ (8002b84 <HAL_LTDC_MspInit+0x24c>)
 8002b3a:	f000 ff55 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002b3e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b42:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b50:	2309      	movs	r3, #9
 8002b52:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b54:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4808      	ldr	r0, [pc, #32]	@ (8002b7c <HAL_LTDC_MspInit+0x244>)
 8002b5c:	f000 ff44 	bl	80039e8 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002b60:	bf00      	nop
 8002b62:	3768      	adds	r7, #104	@ 0x68
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40016800 	.word	0x40016800
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40021400 	.word	0x40021400
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40021800 	.word	0x40021800
 8002b80:	40020800 	.word	0x40020800
 8002b84:	40020c00 	.word	0x40020c00

08002b88 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc4 <HAL_RNG_MspInit+0x3c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d10d      	bne.n	8002bb6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <HAL_RNG_MspInit+0x40>)
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba2:	4a09      	ldr	r2, [pc, #36]	@ (8002bc8 <HAL_RNG_MspInit+0x40>)
 8002ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ba8:	6353      	str	r3, [r2, #52]	@ 0x34
 8002baa:	4b07      	ldr	r3, [pc, #28]	@ (8002bc8 <HAL_RNG_MspInit+0x40>)
 8002bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	50060800 	.word	0x50060800
 8002bc8:	40023800 	.word	0x40023800

08002bcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	@ 0x28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a19      	ldr	r2, [pc, #100]	@ (8002c50 <HAL_SPI_MspInit+0x84>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d12c      	bne.n	8002c48 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	4b18      	ldr	r3, [pc, #96]	@ (8002c54 <HAL_SPI_MspInit+0x88>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	4a17      	ldr	r2, [pc, #92]	@ (8002c54 <HAL_SPI_MspInit+0x88>)
 8002bf8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bfe:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <HAL_SPI_MspInit+0x88>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b11      	ldr	r3, [pc, #68]	@ (8002c54 <HAL_SPI_MspInit+0x88>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	4a10      	ldr	r2, [pc, #64]	@ (8002c54 <HAL_SPI_MspInit+0x88>)
 8002c14:	f043 0320 	orr.w	r3, r3, #32
 8002c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c54 <HAL_SPI_MspInit+0x88>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002c26:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	2300      	movs	r3, #0
 8002c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002c38:	2305      	movs	r3, #5
 8002c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4619      	mov	r1, r3
 8002c42:	4805      	ldr	r0, [pc, #20]	@ (8002c58 <HAL_SPI_MspInit+0x8c>)
 8002c44:	f000 fed0 	bl	80039e8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002c48:	bf00      	nop
 8002c4a:	3728      	adds	r7, #40	@ 0x28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40015000 	.word	0x40015000
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40021400 	.word	0x40021400

08002c5c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a08      	ldr	r2, [pc, #32]	@ (8002c8c <HAL_SPI_MspDeInit+0x30>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10a      	bne.n	8002c84 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002c6e:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <HAL_SPI_MspDeInit+0x34>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	4a07      	ldr	r2, [pc, #28]	@ (8002c90 <HAL_SPI_MspDeInit+0x34>)
 8002c74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002c78:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002c7a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002c7e:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <HAL_SPI_MspDeInit+0x38>)
 8002c80:	f001 f85e 	bl	8003d40 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40015000 	.word	0x40015000
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40021400 	.word	0x40021400

08002c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca8:	d10d      	bne.n	8002cc6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	4b09      	ldr	r3, [pc, #36]	@ (8002cd4 <HAL_TIM_Base_MspInit+0x3c>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	4a08      	ldr	r2, [pc, #32]	@ (8002cd4 <HAL_TIM_Base_MspInit+0x3c>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cba:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <HAL_TIM_Base_MspInit+0x3c>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002cc6:	bf00      	nop
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800

08002cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <NMI_Handler+0x4>

08002ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <HardFault_Handler+0x4>

08002ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <MemManage_Handler+0x4>

08002cf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <BusFault_Handler+0x4>

08002cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <UsageFault_Handler+0x4>

08002d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d2e:	f000 fca7 	bl	8003680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002d3c:	f000 f9ce 	bl	80030dc <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002d40:	f000 f98e 	bl	8003060 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002d44:	2202      	movs	r2, #2
 8002d46:	2103      	movs	r1, #3
 8002d48:	2082      	movs	r0, #130	@ 0x82
 8002d4a:	f000 fa1b 	bl	8003184 <I2C3_Write>
    HAL_Delay(5);
 8002d4e:	2005      	movs	r0, #5
 8002d50:	f000 fcb6 	bl	80036c0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2103      	movs	r1, #3
 8002d58:	2082      	movs	r0, #130	@ 0x82
 8002d5a:	f000 fa13 	bl	8003184 <I2C3_Write>
    HAL_Delay(2);
 8002d5e:	2002      	movs	r0, #2
 8002d60:	f000 fcae 	bl	80036c0 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002d64:	1cba      	adds	r2, r7, #2
 8002d66:	2302      	movs	r3, #2
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2082      	movs	r0, #130	@ 0x82
 8002d6c:	f000 fa5a 	bl	8003224 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	f640 0211 	movw	r2, #2065	@ 0x811
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d001      	beq.n	8002d90 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e075      	b.n	8002e7c <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002d90:	2202      	movs	r2, #2
 8002d92:	2103      	movs	r1, #3
 8002d94:	2082      	movs	r0, #130	@ 0x82
 8002d96:	f000 f9f5 	bl	8003184 <I2C3_Write>
    HAL_Delay(5);
 8002d9a:	2005      	movs	r0, #5
 8002d9c:	f000 fc90 	bl	80036c0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002da0:	2200      	movs	r2, #0
 8002da2:	2103      	movs	r1, #3
 8002da4:	2082      	movs	r0, #130	@ 0x82
 8002da6:	f000 f9ed 	bl	8003184 <I2C3_Write>
    HAL_Delay(2);
 8002daa:	2002      	movs	r0, #2
 8002dac:	f000 fc88 	bl	80036c0 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002db0:	2004      	movs	r0, #4
 8002db2:	f000 f867 	bl	8002e84 <STMPE811_Read>
 8002db6:	4603      	mov	r3, r0
 8002db8:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002dba:	797b      	ldrb	r3, [r7, #5]
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002dc2:	797b      	ldrb	r3, [r7, #5]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2104      	movs	r1, #4
 8002dc8:	2082      	movs	r0, #130	@ 0x82
 8002dca:	f000 f9db 	bl	8003184 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002dce:	2004      	movs	r0, #4
 8002dd0:	f000 f858 	bl	8002e84 <STMPE811_Read>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002dd8:	797b      	ldrb	r3, [r7, #5]
 8002dda:	f023 0302 	bic.w	r3, r3, #2
 8002dde:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002de0:	797b      	ldrb	r3, [r7, #5]
 8002de2:	461a      	mov	r2, r3
 8002de4:	2104      	movs	r1, #4
 8002de6:	2082      	movs	r0, #130	@ 0x82
 8002de8:	f000 f9cc 	bl	8003184 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002dec:	2249      	movs	r2, #73	@ 0x49
 8002dee:	2120      	movs	r1, #32
 8002df0:	2082      	movs	r0, #130	@ 0x82
 8002df2:	f000 f9c7 	bl	8003184 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002df6:	2002      	movs	r0, #2
 8002df8:	f000 fc62 	bl	80036c0 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	2121      	movs	r1, #33	@ 0x21
 8002e00:	2082      	movs	r0, #130	@ 0x82
 8002e02:	f000 f9bf 	bl	8003184 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002e06:	2017      	movs	r0, #23
 8002e08:	f000 f83c 	bl	8002e84 <STMPE811_Read>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002e10:	797b      	ldrb	r3, [r7, #5]
 8002e12:	f043 031e 	orr.w	r3, r3, #30
 8002e16:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002e18:	797b      	ldrb	r3, [r7, #5]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2117      	movs	r1, #23
 8002e1e:	2082      	movs	r0, #130	@ 0x82
 8002e20:	f000 f9b0 	bl	8003184 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002e24:	229a      	movs	r2, #154	@ 0x9a
 8002e26:	2141      	movs	r1, #65	@ 0x41
 8002e28:	2082      	movs	r0, #130	@ 0x82
 8002e2a:	f000 f9ab 	bl	8003184 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002e2e:	2201      	movs	r2, #1
 8002e30:	214a      	movs	r1, #74	@ 0x4a
 8002e32:	2082      	movs	r0, #130	@ 0x82
 8002e34:	f000 f9a6 	bl	8003184 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002e38:	2201      	movs	r2, #1
 8002e3a:	214b      	movs	r1, #75	@ 0x4b
 8002e3c:	2082      	movs	r0, #130	@ 0x82
 8002e3e:	f000 f9a1 	bl	8003184 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002e42:	2200      	movs	r2, #0
 8002e44:	214b      	movs	r1, #75	@ 0x4b
 8002e46:	2082      	movs	r0, #130	@ 0x82
 8002e48:	f000 f99c 	bl	8003184 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	2156      	movs	r1, #86	@ 0x56
 8002e50:	2082      	movs	r0, #130	@ 0x82
 8002e52:	f000 f997 	bl	8003184 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002e56:	2201      	movs	r2, #1
 8002e58:	2158      	movs	r1, #88	@ 0x58
 8002e5a:	2082      	movs	r0, #130	@ 0x82
 8002e5c:	f000 f992 	bl	8003184 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002e60:	2203      	movs	r2, #3
 8002e62:	2140      	movs	r1, #64	@ 0x40
 8002e64:	2082      	movs	r0, #130	@ 0x82
 8002e66:	f000 f98d 	bl	8003184 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002e6a:	22ff      	movs	r2, #255	@ 0xff
 8002e6c:	210b      	movs	r1, #11
 8002e6e:	2082      	movs	r0, #130	@ 0x82
 8002e70:	f000 f988 	bl	8003184 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002e74:	20c8      	movs	r0, #200	@ 0xc8
 8002e76:	f000 fc23 	bl	80036c0 <HAL_Delay>

    return STMPE811_State_Ok;
 8002e7a:	2302      	movs	r3, #2

}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002e8e:	f107 020f 	add.w	r2, r7, #15
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	4619      	mov	r1, r3
 8002e96:	2082      	movs	r0, #130	@ 0x82
 8002e98:	f000 f99e 	bl	80031d8 <I2C3_Read>

    return readData;
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	791a      	ldrb	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002eb6:	2040      	movs	r0, #64	@ 0x40
 8002eb8:	f7ff ffe4 	bl	8002e84 <STMPE811_Read>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	db0e      	blt.n	8002ee6 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002ece:	2201      	movs	r2, #1
 8002ed0:	214b      	movs	r1, #75	@ 0x4b
 8002ed2:	2082      	movs	r0, #130	@ 0x82
 8002ed4:	f000 f956 	bl	8003184 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	214b      	movs	r1, #75	@ 0x4b
 8002edc:	2082      	movs	r0, #130	@ 0x82
 8002ede:	f000 f951 	bl	8003184 <I2C3_Write>

        return STMPE811_State_Released;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e0a7      	b.n	8003036 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	799b      	ldrb	r3, [r3, #6]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d117      	bne.n	8002f1e <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f9b8 	bl	8003268 <TM_STMPE811_ReadX>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	885b      	ldrh	r3, [r3, #2]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fa0b 	bl	8003324 <TM_STMPE811_ReadY>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002f14:	3301      	adds	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	805a      	strh	r2, [r3, #2]
 8002f1c:	e048      	b.n	8002fb0 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	799b      	ldrb	r3, [r3, #6]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d112      	bne.n	8002f4c <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f99c 	bl	8003268 <TM_STMPE811_ReadX>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461a      	mov	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	885b      	ldrh	r3, [r3, #2]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 f9f1 	bl	8003324 <TM_STMPE811_ReadY>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461a      	mov	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	805a      	strh	r2, [r3, #2]
 8002f4a:	e031      	b.n	8002fb0 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	799b      	ldrb	r3, [r3, #6]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d115      	bne.n	8002f80 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	885b      	ldrh	r3, [r3, #2]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 f985 	bl	8003268 <TM_STMPE811_ReadX>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	461a      	mov	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 f9da 	bl	8003324 <TM_STMPE811_ReadY>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002f76:	3301      	adds	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	801a      	strh	r2, [r3, #0]
 8002f7e:	e017      	b.n	8002fb0 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	799b      	ldrb	r3, [r3, #6]
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d113      	bne.n	8002fb0 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 f96b 	bl	8003268 <TM_STMPE811_ReadX>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f9be 	bl	8003324 <TM_STMPE811_ReadY>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	461a      	mov	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	214b      	movs	r1, #75	@ 0x4b
 8002fb4:	2082      	movs	r0, #130	@ 0x82
 8002fb6:	f000 f8e5 	bl	8003184 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	214b      	movs	r1, #75	@ 0x4b
 8002fbe:	2082      	movs	r0, #130	@ 0x82
 8002fc0:	f000 f8e0 	bl	8003184 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	799b      	ldrb	r3, [r3, #6]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <STMPE811_ReadTouch+0x12e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	799b      	ldrb	r3, [r3, #6]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d115      	bne.n	8003000 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d027      	beq.n	800302c <STMPE811_ReadTouch+0x186>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	2bee      	cmp	r3, #238	@ 0xee
 8002fe2:	d823      	bhi.n	800302c <STMPE811_ReadTouch+0x186>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	885b      	ldrh	r3, [r3, #2]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01f      	beq.n	800302c <STMPE811_ReadTouch+0x186>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	885b      	ldrh	r3, [r3, #2]
 8002ff0:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002ff4:	d81a      	bhi.n	800302c <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e01a      	b.n	8003036 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d012      	beq.n	800302e <STMPE811_ReadTouch+0x188>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003010:	d80d      	bhi.n	800302e <STMPE811_ReadTouch+0x188>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	885b      	ldrh	r3, [r3, #2]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <STMPE811_ReadTouch+0x188>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	885b      	ldrh	r3, [r3, #2]
 800301e:	2bee      	cmp	r3, #238	@ 0xee
 8003020:	d805      	bhi.n	800302e <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003028:	2300      	movs	r3, #0
 800302a:	e004      	b.n	8003036 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800302c:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8003034:	2301      	movs	r3, #1
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003044:	4b05      	ldr	r3, [pc, #20]	@ (800305c <verifyHAL_I2C_IS_OKAY+0x1c>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 800304c:	bf00      	nop
 800304e:	e7fd      	b.n	800304c <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20025c10 	.word	0x20025c10

08003060 <I2C3_Init>:

static void I2C3_Init()
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	4b18      	ldr	r3, [pc, #96]	@ (80030cc <I2C3_Init+0x6c>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	4a17      	ldr	r2, [pc, #92]	@ (80030cc <I2C3_Init+0x6c>)
 8003070:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003074:	6413      	str	r3, [r2, #64]	@ 0x40
 8003076:	4b15      	ldr	r3, [pc, #84]	@ (80030cc <I2C3_Init+0x6c>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8003082:	4b13      	ldr	r3, [pc, #76]	@ (80030d0 <I2C3_Init+0x70>)
 8003084:	4a13      	ldr	r2, [pc, #76]	@ (80030d4 <I2C3_Init+0x74>)
 8003086:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003088:	4b11      	ldr	r3, [pc, #68]	@ (80030d0 <I2C3_Init+0x70>)
 800308a:	4a13      	ldr	r2, [pc, #76]	@ (80030d8 <I2C3_Init+0x78>)
 800308c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800308e:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <I2C3_Init+0x70>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003094:	4b0e      	ldr	r3, [pc, #56]	@ (80030d0 <I2C3_Init+0x70>)
 8003096:	2200      	movs	r2, #0
 8003098:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800309a:	4b0d      	ldr	r3, [pc, #52]	@ (80030d0 <I2C3_Init+0x70>)
 800309c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80030a0:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80030a2:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <I2C3_Init+0x70>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030a8:	4b09      	ldr	r3, [pc, #36]	@ (80030d0 <I2C3_Init+0x70>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80030ae:	4808      	ldr	r0, [pc, #32]	@ (80030d0 <I2C3_Init+0x70>)
 80030b0:	f000 ff6c 	bl	8003f8c <HAL_I2C_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80030be:	bf00      	nop
 80030c0:	e7fd      	b.n	80030be <I2C3_Init+0x5e>
    }
    return;
 80030c2:	bf00      	nop
}
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	20025bbc 	.word	0x20025bbc
 80030d4:	40005c00 	.word	0x40005c00
 80030d8:	000186a0 	.word	0x000186a0

080030dc <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e2:	f107 030c 	add.w	r3, r7, #12
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	609a      	str	r2, [r3, #8]
 80030ee:	60da      	str	r2, [r3, #12]
 80030f0:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	4b20      	ldr	r3, [pc, #128]	@ (8003178 <I2C3_MspInit+0x9c>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003178 <I2C3_MspInit+0x9c>)
 80030fc:	f043 0304 	orr.w	r3, r3, #4
 8003100:	6313      	str	r3, [r2, #48]	@ 0x30
 8003102:	4b1d      	ldr	r3, [pc, #116]	@ (8003178 <I2C3_MspInit+0x9c>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
 8003112:	4b19      	ldr	r3, [pc, #100]	@ (8003178 <I2C3_MspInit+0x9c>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	4a18      	ldr	r2, [pc, #96]	@ (8003178 <I2C3_MspInit+0x9c>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6313      	str	r3, [r2, #48]	@ 0x30
 800311e:	4b16      	ldr	r3, [pc, #88]	@ (8003178 <I2C3_MspInit+0x9c>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800312a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800312e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003130:	2312      	movs	r3, #18
 8003132:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003138:	2300      	movs	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800313c:	2304      	movs	r3, #4
 800313e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003140:	f107 030c 	add.w	r3, r7, #12
 8003144:	4619      	mov	r1, r3
 8003146:	480d      	ldr	r0, [pc, #52]	@ (800317c <I2C3_MspInit+0xa0>)
 8003148:	f000 fc4e 	bl	80039e8 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800314c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003150:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003152:	2312      	movs	r3, #18
 8003154:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800315e:	2304      	movs	r3, #4
 8003160:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003162:	f107 030c 	add.w	r3, r7, #12
 8003166:	4619      	mov	r1, r3
 8003168:	4805      	ldr	r0, [pc, #20]	@ (8003180 <I2C3_MspInit+0xa4>)
 800316a:	f000 fc3d 	bl	80039e8 <HAL_GPIO_Init>
    
}
 800316e:	bf00      	nop
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	40020800 	.word	0x40020800
 8003180:	40020000 	.word	0x40020000

08003184 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af04      	add	r7, sp, #16
 800318a:	4603      	mov	r3, r0
 800318c:	80fb      	strh	r3, [r7, #6]
 800318e:	460b      	mov	r3, r1
 8003190:	717b      	strb	r3, [r7, #5]
 8003192:	4613      	mov	r3, r2
 8003194:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003196:	793b      	ldrb	r3, [r7, #4]
 8003198:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800319a:	797b      	ldrb	r3, [r7, #5]
 800319c:	b29a      	uxth	r2, r3
 800319e:	88f9      	ldrh	r1, [r7, #6]
 80031a0:	4b0a      	ldr	r3, [pc, #40]	@ (80031cc <I2C3_Write+0x48>)
 80031a2:	9302      	str	r3, [sp, #8]
 80031a4:	2301      	movs	r3, #1
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	f107 030f 	add.w	r3, r7, #15
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	2301      	movs	r3, #1
 80031b0:	4807      	ldr	r0, [pc, #28]	@ (80031d0 <I2C3_Write+0x4c>)
 80031b2:	f001 f82f 	bl	8004214 <HAL_I2C_Mem_Write>
 80031b6:	4603      	mov	r3, r0
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <I2C3_Write+0x50>)
 80031bc:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80031be:	f7ff ff3f 	bl	8003040 <verifyHAL_I2C_IS_OKAY>
}
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	0003d090 	.word	0x0003d090
 80031d0:	20025bbc 	.word	0x20025bbc
 80031d4:	20025c10 	.word	0x20025c10

080031d8 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af04      	add	r7, sp, #16
 80031de:	4603      	mov	r3, r0
 80031e0:	603a      	str	r2, [r7, #0]
 80031e2:	71fb      	strb	r3, [r7, #7]
 80031e4:	460b      	mov	r3, r1
 80031e6:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	b299      	uxth	r1, r3
 80031ec:	79bb      	ldrb	r3, [r7, #6]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	4b09      	ldr	r3, [pc, #36]	@ (8003218 <I2C3_Read+0x40>)
 80031f2:	9302      	str	r3, [sp, #8]
 80031f4:	2301      	movs	r3, #1
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	2301      	movs	r3, #1
 80031fe:	4807      	ldr	r0, [pc, #28]	@ (800321c <I2C3_Read+0x44>)
 8003200:	f001 f902 	bl	8004408 <HAL_I2C_Mem_Read>
 8003204:	4603      	mov	r3, r0
 8003206:	461a      	mov	r2, r3
 8003208:	4b05      	ldr	r3, [pc, #20]	@ (8003220 <I2C3_Read+0x48>)
 800320a:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800320c:	f7ff ff18 	bl	8003040 <verifyHAL_I2C_IS_OKAY>
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	0003d090 	.word	0x0003d090
 800321c:	20025bbc 	.word	0x20025bbc
 8003220:	20025c10 	.word	0x20025c10

08003224 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af04      	add	r7, sp, #16
 800322a:	603a      	str	r2, [r7, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
 8003232:	460b      	mov	r3, r1
 8003234:	71bb      	strb	r3, [r7, #6]
 8003236:	4613      	mov	r3, r2
 8003238:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	b299      	uxth	r1, r3
 800323e:	79bb      	ldrb	r3, [r7, #6]
 8003240:	b29a      	uxth	r2, r3
 8003242:	4b07      	ldr	r3, [pc, #28]	@ (8003260 <I2C3_MulitByteRead+0x3c>)
 8003244:	9302      	str	r3, [sp, #8]
 8003246:	88bb      	ldrh	r3, [r7, #4]
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	2301      	movs	r3, #1
 8003250:	4804      	ldr	r0, [pc, #16]	@ (8003264 <I2C3_MulitByteRead+0x40>)
 8003252:	f001 f8d9 	bl	8004408 <HAL_I2C_Mem_Read>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	0003d090 	.word	0x0003d090
 8003264:	20025bbc 	.word	0x20025bbc

08003268 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8003272:	204d      	movs	r0, #77	@ 0x4d
 8003274:	f7ff fe06 	bl	8002e84 <STMPE811_Read>
 8003278:	4603      	mov	r3, r0
 800327a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 800327c:	204e      	movs	r0, #78	@ 0x4e
 800327e:	f7ff fe01 	bl	8002e84 <STMPE811_Read>
 8003282:	4603      	mov	r3, r0
 8003284:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003286:	7a7b      	ldrb	r3, [r7, #9]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	b21a      	sxth	r2, r3
 800328c:	7a3b      	ldrb	r3, [r7, #8]
 800328e:	b21b      	sxth	r3, r3
 8003290:	4313      	orrs	r3, r2
 8003292:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003294:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003298:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800329c:	4293      	cmp	r3, r2
 800329e:	dc06      	bgt.n	80032ae <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80032a0:	89fb      	ldrh	r3, [r7, #14]
 80032a2:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80032a6:	330c      	adds	r3, #12
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	81fb      	strh	r3, [r7, #14]
 80032ac:	e005      	b.n	80032ba <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80032ae:	89fb      	ldrh	r3, [r7, #14]
 80032b0:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80032b4:	3308      	adds	r3, #8
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80032ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032be:	4a18      	ldr	r2, [pc, #96]	@ (8003320 <TM_STMPE811_ReadX+0xb8>)
 80032c0:	fb82 1203 	smull	r1, r2, r2, r3
 80032c4:	441a      	add	r2, r3
 80032c6:	10d2      	asrs	r2, r2, #3
 80032c8:	17db      	asrs	r3, r3, #31
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80032ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032d2:	2bef      	cmp	r3, #239	@ 0xef
 80032d4:	dd02      	ble.n	80032dc <TM_STMPE811_ReadX+0x74>
        val = 239;
 80032d6:	23ef      	movs	r3, #239	@ 0xef
 80032d8:	81fb      	strh	r3, [r7, #14]
 80032da:	e005      	b.n	80032e8 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80032dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	da01      	bge.n	80032e8 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80032e8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	dd05      	ble.n	80032fe <TM_STMPE811_ReadX+0x96>
 80032f2:	89fa      	ldrh	r2, [r7, #14]
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	b21b      	sxth	r3, r3
 80032fc:	e004      	b.n	8003308 <TM_STMPE811_ReadX+0xa0>
 80032fe:	89fb      	ldrh	r3, [r7, #14]
 8003300:	88fa      	ldrh	r2, [r7, #6]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	b29b      	uxth	r3, r3
 8003306:	b21b      	sxth	r3, r3
 8003308:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 800330a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800330e:	2b04      	cmp	r3, #4
 8003310:	dd01      	ble.n	8003316 <TM_STMPE811_ReadX+0xae>
        return val;
 8003312:	89fb      	ldrh	r3, [r7, #14]
 8003314:	e000      	b.n	8003318 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003316:	88fb      	ldrh	r3, [r7, #6]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	88888889 	.word	0x88888889

08003324 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800332e:	204f      	movs	r0, #79	@ 0x4f
 8003330:	f7ff fda8 	bl	8002e84 <STMPE811_Read>
 8003334:	4603      	mov	r3, r0
 8003336:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003338:	2050      	movs	r0, #80	@ 0x50
 800333a:	f7ff fda3 	bl	8002e84 <STMPE811_Read>
 800333e:	4603      	mov	r3, r0
 8003340:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003342:	7a7b      	ldrb	r3, [r7, #9]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	b21a      	sxth	r2, r3
 8003348:	7a3b      	ldrb	r3, [r7, #8]
 800334a:	b21b      	sxth	r3, r3
 800334c:	4313      	orrs	r3, r2
 800334e:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003350:	89fb      	ldrh	r3, [r7, #14]
 8003352:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003356:	b29b      	uxth	r3, r3
 8003358:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800335a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800335e:	4a19      	ldr	r2, [pc, #100]	@ (80033c4 <TM_STMPE811_ReadY+0xa0>)
 8003360:	fb82 1203 	smull	r1, r2, r2, r3
 8003364:	1052      	asrs	r2, r2, #1
 8003366:	17db      	asrs	r3, r3, #31
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 800336c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003370:	2b00      	cmp	r3, #0
 8003372:	dc02      	bgt.n	800337a <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	81fb      	strh	r3, [r7, #14]
 8003378:	e007      	b.n	800338a <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 800337a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800337e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003382:	db02      	blt.n	800338a <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003384:	f240 133f 	movw	r3, #319	@ 0x13f
 8003388:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 800338a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	429a      	cmp	r2, r3
 8003392:	dd05      	ble.n	80033a0 <TM_STMPE811_ReadY+0x7c>
 8003394:	89fa      	ldrh	r2, [r7, #14]
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	b29b      	uxth	r3, r3
 800339c:	b21b      	sxth	r3, r3
 800339e:	e004      	b.n	80033aa <TM_STMPE811_ReadY+0x86>
 80033a0:	89fb      	ldrh	r3, [r7, #14]
 80033a2:	88fa      	ldrh	r2, [r7, #6]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	b21b      	sxth	r3, r3
 80033aa:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80033ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	dd01      	ble.n	80033b8 <TM_STMPE811_ReadY+0x94>
        return val;
 80033b4:	89fb      	ldrh	r3, [r7, #14]
 80033b6:	e000      	b.n	80033ba <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80033b8:	88fb      	ldrh	r3, [r7, #6]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	2e8ba2e9 	.word	0x2e8ba2e9

080033c8 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <_getpid>:

int _getpid(void)
{
 80033d6:	b480      	push	{r7}
 80033d8:	af00      	add	r7, sp, #0
  return 1;
 80033da:	2301      	movs	r3, #1
}
 80033dc:	4618      	mov	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <_kill>:

int _kill(int pid, int sig)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033f0:	f004 f824 	bl	800743c <__errno>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2216      	movs	r2, #22
 80033f8:	601a      	str	r2, [r3, #0]
  return -1;
 80033fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_exit>:

void _exit (int status)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800340e:	f04f 31ff 	mov.w	r1, #4294967295
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff ffe7 	bl	80033e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003418:	bf00      	nop
 800341a:	e7fd      	b.n	8003418 <_exit+0x12>

0800341c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	e00a      	b.n	8003444 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800342e:	f3af 8000 	nop.w
 8003432:	4601      	mov	r1, r0
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	60ba      	str	r2, [r7, #8]
 800343a:	b2ca      	uxtb	r2, r1
 800343c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	3301      	adds	r3, #1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	dbf0      	blt.n	800342e <_read+0x12>
  }

  return len;
 800344c:	687b      	ldr	r3, [r7, #4]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	e009      	b.n	800347c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	60ba      	str	r2, [r7, #8]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	3301      	adds	r3, #1
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	dbf1      	blt.n	8003468 <_write+0x12>
  }
  return len;
 8003484:	687b      	ldr	r3, [r7, #4]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <_close>:

int _close(int file)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034b6:	605a      	str	r2, [r3, #4]
  return 0;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <_isatty>:

int _isatty(int file)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034ce:	2301      	movs	r3, #1
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003500:	4a14      	ldr	r2, [pc, #80]	@ (8003554 <_sbrk+0x5c>)
 8003502:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <_sbrk+0x60>)
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800350c:	4b13      	ldr	r3, [pc, #76]	@ (800355c <_sbrk+0x64>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003514:	4b11      	ldr	r3, [pc, #68]	@ (800355c <_sbrk+0x64>)
 8003516:	4a12      	ldr	r2, [pc, #72]	@ (8003560 <_sbrk+0x68>)
 8003518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800351a:	4b10      	ldr	r3, [pc, #64]	@ (800355c <_sbrk+0x64>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4413      	add	r3, r2
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	429a      	cmp	r2, r3
 8003526:	d207      	bcs.n	8003538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003528:	f003 ff88 	bl	800743c <__errno>
 800352c:	4603      	mov	r3, r0
 800352e:	220c      	movs	r2, #12
 8003530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003532:	f04f 33ff 	mov.w	r3, #4294967295
 8003536:	e009      	b.n	800354c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003538:	4b08      	ldr	r3, [pc, #32]	@ (800355c <_sbrk+0x64>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800353e:	4b07      	ldr	r3, [pc, #28]	@ (800355c <_sbrk+0x64>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	4a05      	ldr	r2, [pc, #20]	@ (800355c <_sbrk+0x64>)
 8003548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800354a:	68fb      	ldr	r3, [r7, #12]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20030000 	.word	0x20030000
 8003558:	00000400 	.word	0x00000400
 800355c:	20025c14 	.word	0x20025c14
 8003560:	20025d68 	.word	0x20025d68

08003564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003568:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <SystemInit+0x20>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356e:	4a05      	ldr	r2, [pc, #20]	@ (8003584 <SystemInit+0x20>)
 8003570:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003574:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003588:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800358c:	f7ff ffea 	bl	8003564 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003590:	480c      	ldr	r0, [pc, #48]	@ (80035c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003592:	490d      	ldr	r1, [pc, #52]	@ (80035c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003594:	4a0d      	ldr	r2, [pc, #52]	@ (80035cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003598:	e002      	b.n	80035a0 <LoopCopyDataInit>

0800359a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800359a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800359c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800359e:	3304      	adds	r3, #4

080035a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035a4:	d3f9      	bcc.n	800359a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035a6:	4a0a      	ldr	r2, [pc, #40]	@ (80035d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035a8:	4c0a      	ldr	r4, [pc, #40]	@ (80035d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035ac:	e001      	b.n	80035b2 <LoopFillZerobss>

080035ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035b0:	3204      	adds	r2, #4

080035b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035b4:	d3fb      	bcc.n	80035ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80035b6:	f003 ff47 	bl	8007448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ba:	f7fe fd6a 	bl	8002092 <main>
  bx  lr    
 80035be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80035c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80035c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035c8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80035cc:	080092d8 	.word	0x080092d8
  ldr r2, =_sbss
 80035d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80035d4:	20025d68 	.word	0x20025d68

080035d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035d8:	e7fe      	b.n	80035d8 <ADC_IRQHandler>
	...

080035dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035e0:	4b0e      	ldr	r3, [pc, #56]	@ (800361c <HAL_Init+0x40>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a0d      	ldr	r2, [pc, #52]	@ (800361c <HAL_Init+0x40>)
 80035e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035ec:	4b0b      	ldr	r3, [pc, #44]	@ (800361c <HAL_Init+0x40>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0a      	ldr	r2, [pc, #40]	@ (800361c <HAL_Init+0x40>)
 80035f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035f8:	4b08      	ldr	r3, [pc, #32]	@ (800361c <HAL_Init+0x40>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a07      	ldr	r2, [pc, #28]	@ (800361c <HAL_Init+0x40>)
 80035fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003604:	2003      	movs	r0, #3
 8003606:	f000 f991 	bl	800392c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800360a:	2000      	movs	r0, #0
 800360c:	f000 f808 	bl	8003620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003610:	f7ff f900 	bl	8002814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40023c00 	.word	0x40023c00

08003620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003628:	4b12      	ldr	r3, [pc, #72]	@ (8003674 <HAL_InitTick+0x54>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b12      	ldr	r3, [pc, #72]	@ (8003678 <HAL_InitTick+0x58>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	4619      	mov	r1, r3
 8003632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003636:	fbb3 f3f1 	udiv	r3, r3, r1
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	4618      	mov	r0, r3
 8003640:	f000 f9b7 	bl	80039b2 <HAL_SYSTICK_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e00e      	b.n	800366c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b0f      	cmp	r3, #15
 8003652:	d80a      	bhi.n	800366a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003654:	2200      	movs	r2, #0
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	f000 f971 	bl	8003942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003660:	4a06      	ldr	r2, [pc, #24]	@ (800367c <HAL_InitTick+0x5c>)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e000      	b.n	800366c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000010 	.word	0x20000010
 8003678:	20000018 	.word	0x20000018
 800367c:	20000014 	.word	0x20000014

08003680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003684:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <HAL_IncTick+0x20>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	4b06      	ldr	r3, [pc, #24]	@ (80036a4 <HAL_IncTick+0x24>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4413      	add	r3, r2
 8003690:	4a04      	ldr	r2, [pc, #16]	@ (80036a4 <HAL_IncTick+0x24>)
 8003692:	6013      	str	r3, [r2, #0]
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	20000018 	.word	0x20000018
 80036a4:	20025c18 	.word	0x20025c18

080036a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return uwTick;
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <HAL_GetTick+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20025c18 	.word	0x20025c18

080036c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036c8:	f7ff ffee 	bl	80036a8 <HAL_GetTick>
 80036cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d005      	beq.n	80036e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036da:	4b0a      	ldr	r3, [pc, #40]	@ (8003704 <HAL_Delay+0x44>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036e6:	bf00      	nop
 80036e8:	f7ff ffde 	bl	80036a8 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d8f7      	bhi.n	80036e8 <HAL_Delay+0x28>
  {
  }
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000018 	.word	0x20000018

08003708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003718:	4b0c      	ldr	r3, [pc, #48]	@ (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003724:	4013      	ands	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800373a:	4a04      	ldr	r2, [pc, #16]	@ (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	60d3      	str	r3, [r2, #12]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003754:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <__NVIC_GetPriorityGrouping+0x18>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f003 0307 	and.w	r3, r3, #7
}
 800375e:	4618      	mov	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	2b00      	cmp	r3, #0
 800377c:	db0b      	blt.n	8003796 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	f003 021f 	and.w	r2, r3, #31
 8003784:	4907      	ldr	r1, [pc, #28]	@ (80037a4 <__NVIC_EnableIRQ+0x38>)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	2001      	movs	r0, #1
 800378e:	fa00 f202 	lsl.w	r2, r0, r2
 8003792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000e100 	.word	0xe000e100

080037a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	db12      	blt.n	80037e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	f003 021f 	and.w	r2, r3, #31
 80037c0:	490a      	ldr	r1, [pc, #40]	@ (80037ec <__NVIC_DisableIRQ+0x44>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	2001      	movs	r0, #1
 80037ca:	fa00 f202 	lsl.w	r2, r0, r2
 80037ce:	3320      	adds	r3, #32
 80037d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80037d4:	f3bf 8f4f 	dsb	sy
}
 80037d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037da:	f3bf 8f6f 	isb	sy
}
 80037de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	e000e100 	.word	0xe000e100

080037f0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	db0c      	blt.n	800381c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	f003 021f 	and.w	r2, r3, #31
 8003808:	4907      	ldr	r1, [pc, #28]	@ (8003828 <__NVIC_ClearPendingIRQ+0x38>)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	2001      	movs	r0, #1
 8003812:	fa00 f202 	lsl.w	r2, r0, r2
 8003816:	3360      	adds	r3, #96	@ 0x60
 8003818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	e000e100 	.word	0xe000e100

0800382c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	6039      	str	r1, [r7, #0]
 8003836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383c:	2b00      	cmp	r3, #0
 800383e:	db0a      	blt.n	8003856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	b2da      	uxtb	r2, r3
 8003844:	490c      	ldr	r1, [pc, #48]	@ (8003878 <__NVIC_SetPriority+0x4c>)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	0112      	lsls	r2, r2, #4
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	440b      	add	r3, r1
 8003850:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003854:	e00a      	b.n	800386c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	4908      	ldr	r1, [pc, #32]	@ (800387c <__NVIC_SetPriority+0x50>)
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	3b04      	subs	r3, #4
 8003864:	0112      	lsls	r2, r2, #4
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	440b      	add	r3, r1
 800386a:	761a      	strb	r2, [r3, #24]
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000e100 	.word	0xe000e100
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003880:	b480      	push	{r7}
 8003882:	b089      	sub	sp, #36	@ 0x24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f1c3 0307 	rsb	r3, r3, #7
 800389a:	2b04      	cmp	r3, #4
 800389c:	bf28      	it	cs
 800389e:	2304      	movcs	r3, #4
 80038a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3304      	adds	r3, #4
 80038a6:	2b06      	cmp	r3, #6
 80038a8:	d902      	bls.n	80038b0 <NVIC_EncodePriority+0x30>
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3b03      	subs	r3, #3
 80038ae:	e000      	b.n	80038b2 <NVIC_EncodePriority+0x32>
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b4:	f04f 32ff 	mov.w	r2, #4294967295
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43da      	mvns	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	401a      	ands	r2, r3
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038c8:	f04f 31ff 	mov.w	r1, #4294967295
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	fa01 f303 	lsl.w	r3, r1, r3
 80038d2:	43d9      	mvns	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d8:	4313      	orrs	r3, r2
         );
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3724      	adds	r7, #36	@ 0x24
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038f8:	d301      	bcc.n	80038fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038fa:	2301      	movs	r3, #1
 80038fc:	e00f      	b.n	800391e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003928 <SysTick_Config+0x40>)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3b01      	subs	r3, #1
 8003904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003906:	210f      	movs	r1, #15
 8003908:	f04f 30ff 	mov.w	r0, #4294967295
 800390c:	f7ff ff8e 	bl	800382c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003910:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <SysTick_Config+0x40>)
 8003912:	2200      	movs	r2, #0
 8003914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003916:	4b04      	ldr	r3, [pc, #16]	@ (8003928 <SysTick_Config+0x40>)
 8003918:	2207      	movs	r2, #7
 800391a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	e000e010 	.word	0xe000e010

0800392c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff fee7 	bl	8003708 <__NVIC_SetPriorityGrouping>
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003942:	b580      	push	{r7, lr}
 8003944:	b086      	sub	sp, #24
 8003946:	af00      	add	r7, sp, #0
 8003948:	4603      	mov	r3, r0
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003954:	f7ff fefc 	bl	8003750 <__NVIC_GetPriorityGrouping>
 8003958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	6978      	ldr	r0, [r7, #20]
 8003960:	f7ff ff8e 	bl	8003880 <NVIC_EncodePriority>
 8003964:	4602      	mov	r2, r0
 8003966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396a:	4611      	mov	r1, r2
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff5d 	bl	800382c <__NVIC_SetPriority>
}
 8003972:	bf00      	nop
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	4603      	mov	r3, r0
 8003982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff feef 	bl	800376c <__NVIC_EnableIRQ>
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	4603      	mov	r3, r0
 800399e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff feff 	bl	80037a8 <__NVIC_DisableIRQ>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ff94 	bl	80038e8 <SysTick_Config>
 80039c0:	4603      	mov	r3, r0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	4603      	mov	r3, r0
 80039d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80039d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff09 	bl	80037f0 <__NVIC_ClearPendingIRQ>
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	@ 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	e177      	b.n	8003cf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a04:	2201      	movs	r2, #1
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	f040 8166 	bne.w	8003cee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d005      	beq.n	8003a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d130      	bne.n	8003a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	2203      	movs	r2, #3
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a70:	2201      	movs	r2, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 0201 	and.w	r2, r3, #1
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d017      	beq.n	8003ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d123      	bne.n	8003b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	08da      	lsrs	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3208      	adds	r2, #8
 8003aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	220f      	movs	r2, #15
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	08da      	lsrs	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3208      	adds	r2, #8
 8003b26:	69b9      	ldr	r1, [r7, #24]
 8003b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	2203      	movs	r2, #3
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0203 	and.w	r2, r3, #3
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80c0 	beq.w	8003cee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	4b66      	ldr	r3, [pc, #408]	@ (8003d0c <HAL_GPIO_Init+0x324>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	4a65      	ldr	r2, [pc, #404]	@ (8003d0c <HAL_GPIO_Init+0x324>)
 8003b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b7e:	4b63      	ldr	r3, [pc, #396]	@ (8003d0c <HAL_GPIO_Init+0x324>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b8a:	4a61      	ldr	r2, [pc, #388]	@ (8003d10 <HAL_GPIO_Init+0x328>)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	089b      	lsrs	r3, r3, #2
 8003b90:	3302      	adds	r3, #2
 8003b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a58      	ldr	r2, [pc, #352]	@ (8003d14 <HAL_GPIO_Init+0x32c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d037      	beq.n	8003c26 <HAL_GPIO_Init+0x23e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a57      	ldr	r2, [pc, #348]	@ (8003d18 <HAL_GPIO_Init+0x330>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d031      	beq.n	8003c22 <HAL_GPIO_Init+0x23a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a56      	ldr	r2, [pc, #344]	@ (8003d1c <HAL_GPIO_Init+0x334>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d02b      	beq.n	8003c1e <HAL_GPIO_Init+0x236>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a55      	ldr	r2, [pc, #340]	@ (8003d20 <HAL_GPIO_Init+0x338>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d025      	beq.n	8003c1a <HAL_GPIO_Init+0x232>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a54      	ldr	r2, [pc, #336]	@ (8003d24 <HAL_GPIO_Init+0x33c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01f      	beq.n	8003c16 <HAL_GPIO_Init+0x22e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a53      	ldr	r2, [pc, #332]	@ (8003d28 <HAL_GPIO_Init+0x340>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d019      	beq.n	8003c12 <HAL_GPIO_Init+0x22a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a52      	ldr	r2, [pc, #328]	@ (8003d2c <HAL_GPIO_Init+0x344>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_GPIO_Init+0x226>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a51      	ldr	r2, [pc, #324]	@ (8003d30 <HAL_GPIO_Init+0x348>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00d      	beq.n	8003c0a <HAL_GPIO_Init+0x222>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a50      	ldr	r2, [pc, #320]	@ (8003d34 <HAL_GPIO_Init+0x34c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d007      	beq.n	8003c06 <HAL_GPIO_Init+0x21e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8003d38 <HAL_GPIO_Init+0x350>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_GPIO_Init+0x21a>
 8003bfe:	2309      	movs	r3, #9
 8003c00:	e012      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c02:	230a      	movs	r3, #10
 8003c04:	e010      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c06:	2308      	movs	r3, #8
 8003c08:	e00e      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	e00c      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c0e:	2306      	movs	r3, #6
 8003c10:	e00a      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c12:	2305      	movs	r3, #5
 8003c14:	e008      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c16:	2304      	movs	r3, #4
 8003c18:	e006      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e004      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e002      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c26:	2300      	movs	r3, #0
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	f002 0203 	and.w	r2, r2, #3
 8003c2e:	0092      	lsls	r2, r2, #2
 8003c30:	4093      	lsls	r3, r2
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c38:	4935      	ldr	r1, [pc, #212]	@ (8003d10 <HAL_GPIO_Init+0x328>)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	3302      	adds	r3, #2
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c46:	4b3d      	ldr	r3, [pc, #244]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4013      	ands	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c6a:	4a34      	ldr	r2, [pc, #208]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c70:	4b32      	ldr	r3, [pc, #200]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c94:	4a29      	ldr	r2, [pc, #164]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c9a:	4b28      	ldr	r3, [pc, #160]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ce8:	4a14      	ldr	r2, [pc, #80]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2b0f      	cmp	r3, #15
 8003cf8:	f67f ae84 	bls.w	8003a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	3724      	adds	r7, #36	@ 0x24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	40013800 	.word	0x40013800
 8003d14:	40020000 	.word	0x40020000
 8003d18:	40020400 	.word	0x40020400
 8003d1c:	40020800 	.word	0x40020800
 8003d20:	40020c00 	.word	0x40020c00
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40021400 	.word	0x40021400
 8003d2c:	40021800 	.word	0x40021800
 8003d30:	40021c00 	.word	0x40021c00
 8003d34:	40022000 	.word	0x40022000
 8003d38:	40022400 	.word	0x40022400
 8003d3c:	40013c00 	.word	0x40013c00

08003d40 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	e0d9      	b.n	8003f10 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	f040 80c9 	bne.w	8003f0a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003d78:	4a6b      	ldr	r2, [pc, #428]	@ (8003f28 <HAL_GPIO_DeInit+0x1e8>)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	3302      	adds	r3, #2
 8003d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d84:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	220f      	movs	r2, #15
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	4013      	ands	r3, r2
 8003d98:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a63      	ldr	r2, [pc, #396]	@ (8003f2c <HAL_GPIO_DeInit+0x1ec>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d037      	beq.n	8003e12 <HAL_GPIO_DeInit+0xd2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a62      	ldr	r2, [pc, #392]	@ (8003f30 <HAL_GPIO_DeInit+0x1f0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d031      	beq.n	8003e0e <HAL_GPIO_DeInit+0xce>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a61      	ldr	r2, [pc, #388]	@ (8003f34 <HAL_GPIO_DeInit+0x1f4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d02b      	beq.n	8003e0a <HAL_GPIO_DeInit+0xca>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a60      	ldr	r2, [pc, #384]	@ (8003f38 <HAL_GPIO_DeInit+0x1f8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d025      	beq.n	8003e06 <HAL_GPIO_DeInit+0xc6>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a5f      	ldr	r2, [pc, #380]	@ (8003f3c <HAL_GPIO_DeInit+0x1fc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d01f      	beq.n	8003e02 <HAL_GPIO_DeInit+0xc2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a5e      	ldr	r2, [pc, #376]	@ (8003f40 <HAL_GPIO_DeInit+0x200>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d019      	beq.n	8003dfe <HAL_GPIO_DeInit+0xbe>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8003f44 <HAL_GPIO_DeInit+0x204>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <HAL_GPIO_DeInit+0xba>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a5c      	ldr	r2, [pc, #368]	@ (8003f48 <HAL_GPIO_DeInit+0x208>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00d      	beq.n	8003df6 <HAL_GPIO_DeInit+0xb6>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a5b      	ldr	r2, [pc, #364]	@ (8003f4c <HAL_GPIO_DeInit+0x20c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d007      	beq.n	8003df2 <HAL_GPIO_DeInit+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a5a      	ldr	r2, [pc, #360]	@ (8003f50 <HAL_GPIO_DeInit+0x210>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d101      	bne.n	8003dee <HAL_GPIO_DeInit+0xae>
 8003dea:	2309      	movs	r3, #9
 8003dec:	e012      	b.n	8003e14 <HAL_GPIO_DeInit+0xd4>
 8003dee:	230a      	movs	r3, #10
 8003df0:	e010      	b.n	8003e14 <HAL_GPIO_DeInit+0xd4>
 8003df2:	2308      	movs	r3, #8
 8003df4:	e00e      	b.n	8003e14 <HAL_GPIO_DeInit+0xd4>
 8003df6:	2307      	movs	r3, #7
 8003df8:	e00c      	b.n	8003e14 <HAL_GPIO_DeInit+0xd4>
 8003dfa:	2306      	movs	r3, #6
 8003dfc:	e00a      	b.n	8003e14 <HAL_GPIO_DeInit+0xd4>
 8003dfe:	2305      	movs	r3, #5
 8003e00:	e008      	b.n	8003e14 <HAL_GPIO_DeInit+0xd4>
 8003e02:	2304      	movs	r3, #4
 8003e04:	e006      	b.n	8003e14 <HAL_GPIO_DeInit+0xd4>
 8003e06:	2303      	movs	r3, #3
 8003e08:	e004      	b.n	8003e14 <HAL_GPIO_DeInit+0xd4>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e002      	b.n	8003e14 <HAL_GPIO_DeInit+0xd4>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <HAL_GPIO_DeInit+0xd4>
 8003e12:	2300      	movs	r3, #0
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	f002 0203 	and.w	r2, r2, #3
 8003e1a:	0092      	lsls	r2, r2, #2
 8003e1c:	4093      	lsls	r3, r2
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d132      	bne.n	8003e8a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003e24:	4b4b      	ldr	r3, [pc, #300]	@ (8003f54 <HAL_GPIO_DeInit+0x214>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	4949      	ldr	r1, [pc, #292]	@ (8003f54 <HAL_GPIO_DeInit+0x214>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003e32:	4b48      	ldr	r3, [pc, #288]	@ (8003f54 <HAL_GPIO_DeInit+0x214>)
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	4946      	ldr	r1, [pc, #280]	@ (8003f54 <HAL_GPIO_DeInit+0x214>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003e40:	4b44      	ldr	r3, [pc, #272]	@ (8003f54 <HAL_GPIO_DeInit+0x214>)
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	43db      	mvns	r3, r3
 8003e48:	4942      	ldr	r1, [pc, #264]	@ (8003f54 <HAL_GPIO_DeInit+0x214>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003e4e:	4b41      	ldr	r3, [pc, #260]	@ (8003f54 <HAL_GPIO_DeInit+0x214>)
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	493f      	ldr	r1, [pc, #252]	@ (8003f54 <HAL_GPIO_DeInit+0x214>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	220f      	movs	r2, #15
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003e6c:	4a2e      	ldr	r2, [pc, #184]	@ (8003f28 <HAL_GPIO_DeInit+0x1e8>)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	089b      	lsrs	r3, r3, #2
 8003e72:	3302      	adds	r3, #2
 8003e74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	482a      	ldr	r0, [pc, #168]	@ (8003f28 <HAL_GPIO_DeInit+0x1e8>)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	400a      	ands	r2, r1
 8003e84:	3302      	adds	r3, #2
 8003e86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	2103      	movs	r1, #3
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	08da      	lsrs	r2, r3, #3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3208      	adds	r2, #8
 8003ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	220f      	movs	r2, #15
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	08d2      	lsrs	r2, r2, #3
 8003ec0:	4019      	ands	r1, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3208      	adds	r2, #8
 8003ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	2103      	movs	r1, #3
 8003ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	401a      	ands	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	401a      	ands	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	2103      	movs	r1, #3
 8003efe:	fa01 f303 	lsl.w	r3, r1, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	401a      	ands	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2b0f      	cmp	r3, #15
 8003f14:	f67f af22 	bls.w	8003d5c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40013800 	.word	0x40013800
 8003f2c:	40020000 	.word	0x40020000
 8003f30:	40020400 	.word	0x40020400
 8003f34:	40020800 	.word	0x40020800
 8003f38:	40020c00 	.word	0x40020c00
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40021400 	.word	0x40021400
 8003f44:	40021800 	.word	0x40021800
 8003f48:	40021c00 	.word	0x40021c00
 8003f4c:	40022000 	.word	0x40022000
 8003f50:	40022400 	.word	0x40022400
 8003f54:	40013c00 	.word	0x40013c00

08003f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	807b      	strh	r3, [r7, #2]
 8003f64:	4613      	mov	r3, r2
 8003f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f68:	787b      	ldrb	r3, [r7, #1]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f6e:	887a      	ldrh	r2, [r7, #2]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f74:	e003      	b.n	8003f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f76:	887b      	ldrh	r3, [r7, #2]
 8003f78:	041a      	lsls	r2, r3, #16
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	619a      	str	r2, [r3, #24]
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e12b      	b.n	80041f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fe fc56 	bl	8002864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2224      	movs	r2, #36	@ 0x24
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0201 	bic.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ff0:	f001 ff82 	bl	8005ef8 <HAL_RCC_GetPCLK1Freq>
 8003ff4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4a81      	ldr	r2, [pc, #516]	@ (8004200 <HAL_I2C_Init+0x274>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d807      	bhi.n	8004010 <HAL_I2C_Init+0x84>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a80      	ldr	r2, [pc, #512]	@ (8004204 <HAL_I2C_Init+0x278>)
 8004004:	4293      	cmp	r3, r2
 8004006:	bf94      	ite	ls
 8004008:	2301      	movls	r3, #1
 800400a:	2300      	movhi	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e006      	b.n	800401e <HAL_I2C_Init+0x92>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4a7d      	ldr	r2, [pc, #500]	@ (8004208 <HAL_I2C_Init+0x27c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	bf94      	ite	ls
 8004018:	2301      	movls	r3, #1
 800401a:	2300      	movhi	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e0e7      	b.n	80041f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a78      	ldr	r2, [pc, #480]	@ (800420c <HAL_I2C_Init+0x280>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	0c9b      	lsrs	r3, r3, #18
 8004030:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4a6a      	ldr	r2, [pc, #424]	@ (8004200 <HAL_I2C_Init+0x274>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d802      	bhi.n	8004060 <HAL_I2C_Init+0xd4>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	3301      	adds	r3, #1
 800405e:	e009      	b.n	8004074 <HAL_I2C_Init+0xe8>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	4a69      	ldr	r2, [pc, #420]	@ (8004210 <HAL_I2C_Init+0x284>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	099b      	lsrs	r3, r3, #6
 8004072:	3301      	adds	r3, #1
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	430b      	orrs	r3, r1
 800407a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004086:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	495c      	ldr	r1, [pc, #368]	@ (8004200 <HAL_I2C_Init+0x274>)
 8004090:	428b      	cmp	r3, r1
 8004092:	d819      	bhi.n	80040c8 <HAL_I2C_Init+0x13c>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1e59      	subs	r1, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a2:	1c59      	adds	r1, r3, #1
 80040a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040a8:	400b      	ands	r3, r1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_I2C_Init+0x138>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1e59      	subs	r1, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80040bc:	3301      	adds	r3, #1
 80040be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c2:	e051      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 80040c4:	2304      	movs	r3, #4
 80040c6:	e04f      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d111      	bne.n	80040f4 <HAL_I2C_Init+0x168>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1e58      	subs	r0, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6859      	ldr	r1, [r3, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	440b      	add	r3, r1
 80040de:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e2:	3301      	adds	r3, #1
 80040e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e012      	b.n	800411a <HAL_I2C_Init+0x18e>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	1e58      	subs	r0, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	0099      	lsls	r1, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	fbb0 f3f3 	udiv	r3, r0, r3
 800410a:	3301      	adds	r3, #1
 800410c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_I2C_Init+0x196>
 800411e:	2301      	movs	r3, #1
 8004120:	e022      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10e      	bne.n	8004148 <HAL_I2C_Init+0x1bc>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1e58      	subs	r0, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6859      	ldr	r1, [r3, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	440b      	add	r3, r1
 8004138:	fbb0 f3f3 	udiv	r3, r0, r3
 800413c:	3301      	adds	r3, #1
 800413e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004146:	e00f      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1e58      	subs	r0, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	0099      	lsls	r1, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	fbb0 f3f3 	udiv	r3, r0, r3
 800415e:	3301      	adds	r3, #1
 8004160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004164:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	6809      	ldr	r1, [r1, #0]
 800416c:	4313      	orrs	r3, r2
 800416e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004196:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6911      	ldr	r1, [r2, #16]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68d2      	ldr	r2, [r2, #12]
 80041a2:	4311      	orrs	r1, r2
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	430b      	orrs	r3, r1
 80041aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	000186a0 	.word	0x000186a0
 8004204:	001e847f 	.word	0x001e847f
 8004208:	003d08ff 	.word	0x003d08ff
 800420c:	431bde83 	.word	0x431bde83
 8004210:	10624dd3 	.word	0x10624dd3

08004214 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	461a      	mov	r2, r3
 8004222:	4603      	mov	r3, r0
 8004224:	817b      	strh	r3, [r7, #10]
 8004226:	460b      	mov	r3, r1
 8004228:	813b      	strh	r3, [r7, #8]
 800422a:	4613      	mov	r3, r2
 800422c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800422e:	f7ff fa3b 	bl	80036a8 <HAL_GetTick>
 8004232:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b20      	cmp	r3, #32
 800423e:	f040 80d9 	bne.w	80043f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	2319      	movs	r3, #25
 8004248:	2201      	movs	r2, #1
 800424a:	496d      	ldr	r1, [pc, #436]	@ (8004400 <HAL_I2C_Mem_Write+0x1ec>)
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 fc8b 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004258:	2302      	movs	r3, #2
 800425a:	e0cc      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_I2C_Mem_Write+0x56>
 8004266:	2302      	movs	r3, #2
 8004268:	e0c5      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d007      	beq.n	8004290 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800429e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2221      	movs	r2, #33	@ 0x21
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2240      	movs	r2, #64	@ 0x40
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a3a      	ldr	r2, [r7, #32]
 80042ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004404 <HAL_I2C_Mem_Write+0x1f0>)
 80042d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042d2:	88f8      	ldrh	r0, [r7, #6]
 80042d4:	893a      	ldrh	r2, [r7, #8]
 80042d6:	8979      	ldrh	r1, [r7, #10]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	9301      	str	r3, [sp, #4]
 80042dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	4603      	mov	r3, r0
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 fac2 	bl	800486c <I2C_RequestMemoryWrite>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d052      	beq.n	8004394 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e081      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fd50 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	2b04      	cmp	r3, #4
 8004308:	d107      	bne.n	800431a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004318:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e06b      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	781a      	ldrb	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b04      	cmp	r3, #4
 800435a:	d11b      	bne.n	8004394 <HAL_I2C_Mem_Write+0x180>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004360:	2b00      	cmp	r3, #0
 8004362:	d017      	beq.n	8004394 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	781a      	ldrb	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1aa      	bne.n	80042f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 fd43 	bl	8004e2c <I2C_WaitOnBTFFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00d      	beq.n	80043c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d107      	bne.n	80043c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e016      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	00100002 	.word	0x00100002
 8004404:	ffff0000 	.word	0xffff0000

08004408 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08c      	sub	sp, #48	@ 0x30
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	4608      	mov	r0, r1
 8004412:	4611      	mov	r1, r2
 8004414:	461a      	mov	r2, r3
 8004416:	4603      	mov	r3, r0
 8004418:	817b      	strh	r3, [r7, #10]
 800441a:	460b      	mov	r3, r1
 800441c:	813b      	strh	r3, [r7, #8]
 800441e:	4613      	mov	r3, r2
 8004420:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004422:	f7ff f941 	bl	80036a8 <HAL_GetTick>
 8004426:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b20      	cmp	r3, #32
 8004432:	f040 8214 	bne.w	800485e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	2319      	movs	r3, #25
 800443c:	2201      	movs	r2, #1
 800443e:	497b      	ldr	r1, [pc, #492]	@ (800462c <HAL_I2C_Mem_Read+0x224>)
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fb91 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800444c:	2302      	movs	r3, #2
 800444e:	e207      	b.n	8004860 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_I2C_Mem_Read+0x56>
 800445a:	2302      	movs	r3, #2
 800445c:	e200      	b.n	8004860 <HAL_I2C_Mem_Read+0x458>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d007      	beq.n	8004484 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004492:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2222      	movs	r2, #34	@ 0x22
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2240      	movs	r2, #64	@ 0x40
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80044b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004630 <HAL_I2C_Mem_Read+0x228>)
 80044c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044c6:	88f8      	ldrh	r0, [r7, #6]
 80044c8:	893a      	ldrh	r2, [r7, #8]
 80044ca:	8979      	ldrh	r1, [r7, #10]
 80044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	4603      	mov	r3, r0
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fa5e 	bl	8004998 <I2C_RequestMemoryRead>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e1bc      	b.n	8004860 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d113      	bne.n	8004516 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ee:	2300      	movs	r3, #0
 80044f0:	623b      	str	r3, [r7, #32]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	623b      	str	r3, [r7, #32]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	623b      	str	r3, [r7, #32]
 8004502:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e190      	b.n	8004838 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451a:	2b01      	cmp	r3, #1
 800451c:	d11b      	bne.n	8004556 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800452c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e170      	b.n	8004838 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800455a:	2b02      	cmp	r3, #2
 800455c:	d11b      	bne.n	8004596 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800456c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800457c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457e:	2300      	movs	r3, #0
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	e150      	b.n	8004838 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045ac:	e144      	b.n	8004838 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	f200 80f1 	bhi.w	800479a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d123      	bne.n	8004608 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 fc79 	bl	8004ebc <I2C_WaitOnRXNEFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e145      	b.n	8004860 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004606:	e117      	b.n	8004838 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460c:	2b02      	cmp	r3, #2
 800460e:	d14e      	bne.n	80046ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004616:	2200      	movs	r2, #0
 8004618:	4906      	ldr	r1, [pc, #24]	@ (8004634 <HAL_I2C_Mem_Read+0x22c>)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 faa4 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d008      	beq.n	8004638 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e11a      	b.n	8004860 <HAL_I2C_Mem_Read+0x458>
 800462a:	bf00      	nop
 800462c:	00100002 	.word	0x00100002
 8004630:	ffff0000 	.word	0xffff0000
 8004634:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046ac:	e0c4      	b.n	8004838 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b4:	2200      	movs	r2, #0
 80046b6:	496c      	ldr	r1, [pc, #432]	@ (8004868 <HAL_I2C_Mem_Read+0x460>)
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 fa55 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0cb      	b.n	8004860 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004710:	2200      	movs	r2, #0
 8004712:	4955      	ldr	r1, [pc, #340]	@ (8004868 <HAL_I2C_Mem_Read+0x460>)
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 fa27 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e09d      	b.n	8004860 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475c:	b29b      	uxth	r3, r3
 800475e:	3b01      	subs	r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004798:	e04e      	b.n	8004838 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800479a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800479c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fb8c 	bl	8004ebc <I2C_WaitOnRXNEFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e058      	b.n	8004860 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d124      	bne.n	8004838 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d107      	bne.n	8004806 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004804:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483c:	2b00      	cmp	r3, #0
 800483e:	f47f aeb6 	bne.w	80045ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	e000      	b.n	8004860 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800485e:	2302      	movs	r3, #2
  }
}
 8004860:	4618      	mov	r0, r3
 8004862:	3728      	adds	r7, #40	@ 0x28
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	00010004 	.word	0x00010004

0800486c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	4608      	mov	r0, r1
 8004876:	4611      	mov	r1, r2
 8004878:	461a      	mov	r2, r3
 800487a:	4603      	mov	r3, r0
 800487c:	817b      	strh	r3, [r7, #10]
 800487e:	460b      	mov	r3, r1
 8004880:	813b      	strh	r3, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004894:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	2200      	movs	r2, #0
 800489e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 f960 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048bc:	d103      	bne.n	80048c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e05f      	b.n	800498a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048ca:	897b      	ldrh	r3, [r7, #10]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	492d      	ldr	r1, [pc, #180]	@ (8004994 <I2C_RequestMemoryWrite+0x128>)
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f9bb 	bl	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e04c      	b.n	800498a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004908:	6a39      	ldr	r1, [r7, #32]
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fa46 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00d      	beq.n	8004932 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	2b04      	cmp	r3, #4
 800491c:	d107      	bne.n	800492e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800492c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e02b      	b.n	800498a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d105      	bne.n	8004944 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004938:	893b      	ldrh	r3, [r7, #8]
 800493a:	b2da      	uxtb	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	611a      	str	r2, [r3, #16]
 8004942:	e021      	b.n	8004988 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004944:	893b      	ldrh	r3, [r7, #8]
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	b29b      	uxth	r3, r3
 800494a:	b2da      	uxtb	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004954:	6a39      	ldr	r1, [r7, #32]
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 fa20 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00d      	beq.n	800497e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004966:	2b04      	cmp	r3, #4
 8004968:	d107      	bne.n	800497a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004978:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e005      	b.n	800498a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800497e:	893b      	ldrh	r3, [r7, #8]
 8004980:	b2da      	uxtb	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	00010002 	.word	0x00010002

08004998 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af02      	add	r7, sp, #8
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	4608      	mov	r0, r1
 80049a2:	4611      	mov	r1, r2
 80049a4:	461a      	mov	r2, r3
 80049a6:	4603      	mov	r3, r0
 80049a8:	817b      	strh	r3, [r7, #10]
 80049aa:	460b      	mov	r3, r1
 80049ac:	813b      	strh	r3, [r7, #8]
 80049ae:	4613      	mov	r3, r2
 80049b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	2200      	movs	r2, #0
 80049da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f8c2 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00d      	beq.n	8004a06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049f8:	d103      	bne.n	8004a02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e0aa      	b.n	8004b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a06:	897b      	ldrh	r3, [r7, #10]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	6a3a      	ldr	r2, [r7, #32]
 8004a1a:	4952      	ldr	r1, [pc, #328]	@ (8004b64 <I2C_RequestMemoryRead+0x1cc>)
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f91d 	bl	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e097      	b.n	8004b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a44:	6a39      	ldr	r1, [r7, #32]
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 f9a8 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00d      	beq.n	8004a6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d107      	bne.n	8004a6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e076      	b.n	8004b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d105      	bne.n	8004a80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a74:	893b      	ldrh	r3, [r7, #8]
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	611a      	str	r2, [r3, #16]
 8004a7e:	e021      	b.n	8004ac4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a80:	893b      	ldrh	r3, [r7, #8]
 8004a82:	0a1b      	lsrs	r3, r3, #8
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a90:	6a39      	ldr	r1, [r7, #32]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f982 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00d      	beq.n	8004aba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d107      	bne.n	8004ab6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ab4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e050      	b.n	8004b5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004aba:	893b      	ldrh	r3, [r7, #8]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac6:	6a39      	ldr	r1, [r7, #32]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f967 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00d      	beq.n	8004af0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d107      	bne.n	8004aec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e035      	b.n	8004b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004afe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f82b 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00d      	beq.n	8004b34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b26:	d103      	bne.n	8004b30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e013      	b.n	8004b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b34:	897b      	ldrh	r3, [r7, #10]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	6a3a      	ldr	r2, [r7, #32]
 8004b48:	4906      	ldr	r1, [pc, #24]	@ (8004b64 <I2C_RequestMemoryRead+0x1cc>)
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f886 	bl	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	00010002 	.word	0x00010002

08004b68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	4613      	mov	r3, r2
 8004b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b78:	e048      	b.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b80:	d044      	beq.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b82:	f7fe fd91 	bl	80036a8 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d302      	bcc.n	8004b98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d139      	bne.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	0c1b      	lsrs	r3, r3, #16
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d10d      	bne.n	8004bbe <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	43da      	mvns	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4013      	ands	r3, r2
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2301      	moveq	r3, #1
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	e00c      	b.n	8004bd8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	43da      	mvns	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d116      	bne.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf8:	f043 0220 	orr.w	r2, r3, #32
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e023      	b.n	8004c54 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	0c1b      	lsrs	r3, r3, #16
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d10d      	bne.n	8004c32 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	43da      	mvns	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4013      	ands	r3, r2
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	e00c      	b.n	8004c4c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d093      	beq.n	8004b7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c6a:	e071      	b.n	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c7a:	d123      	bne.n	8004cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb0:	f043 0204 	orr.w	r2, r3, #4
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e067      	b.n	8004d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d041      	beq.n	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ccc:	f7fe fcec 	bl	80036a8 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d302      	bcc.n	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d136      	bne.n	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d10c      	bne.n	8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	43da      	mvns	r2, r3
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	bf14      	ite	ne
 8004cfe:	2301      	movne	r3, #1
 8004d00:	2300      	moveq	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	e00b      	b.n	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	43da      	mvns	r2, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4013      	ands	r3, r2
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	bf14      	ite	ne
 8004d18:	2301      	movne	r3, #1
 8004d1a:	2300      	moveq	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d016      	beq.n	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3c:	f043 0220 	orr.w	r2, r3, #32
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e021      	b.n	8004d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	0c1b      	lsrs	r3, r3, #16
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d10c      	bne.n	8004d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	43da      	mvns	r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4013      	ands	r3, r2
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bf14      	ite	ne
 8004d6c:	2301      	movne	r3, #1
 8004d6e:	2300      	moveq	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	e00b      	b.n	8004d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	43da      	mvns	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf14      	ite	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	2300      	moveq	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f47f af6d 	bne.w	8004c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004da8:	e034      	b.n	8004e14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f8e3 	bl	8004f76 <I2C_IsAcknowledgeFailed>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e034      	b.n	8004e24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d028      	beq.n	8004e14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc2:	f7fe fc71 	bl	80036a8 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d302      	bcc.n	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d11d      	bne.n	8004e14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de2:	2b80      	cmp	r3, #128	@ 0x80
 8004de4:	d016      	beq.n	8004e14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e00:	f043 0220 	orr.w	r2, r3, #32
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e007      	b.n	8004e24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1e:	2b80      	cmp	r3, #128	@ 0x80
 8004e20:	d1c3      	bne.n	8004daa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e38:	e034      	b.n	8004ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f89b 	bl	8004f76 <I2C_IsAcknowledgeFailed>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e034      	b.n	8004eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d028      	beq.n	8004ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e52:	f7fe fc29 	bl	80036a8 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d11d      	bne.n	8004ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d016      	beq.n	8004ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	f043 0220 	orr.w	r2, r3, #32
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e007      	b.n	8004eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d1c3      	bne.n	8004e3a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ec8:	e049      	b.n	8004f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b10      	cmp	r3, #16
 8004ed6:	d119      	bne.n	8004f0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0210 	mvn.w	r2, #16
 8004ee0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e030      	b.n	8004f6e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0c:	f7fe fbcc 	bl	80036a8 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d302      	bcc.n	8004f22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d11d      	bne.n	8004f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2c:	2b40      	cmp	r3, #64	@ 0x40
 8004f2e:	d016      	beq.n	8004f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e007      	b.n	8004f6e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f68:	2b40      	cmp	r3, #64	@ 0x40
 8004f6a:	d1ae      	bne.n	8004eca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f8c:	d11b      	bne.n	8004fc6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f96:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	f043 0204 	orr.w	r2, r3, #4
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d129      	bne.n	800503e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2224      	movs	r2, #36	@ 0x24
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0201 	bic.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0210 	bic.w	r2, r2, #16
 8005010:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	e000      	b.n	8005040 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800503e:	2302      	movs	r3, #2
  }
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b20      	cmp	r3, #32
 8005064:	d12a      	bne.n	80050bc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2224      	movs	r2, #36	@ 0x24
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0201 	bic.w	r2, r2, #1
 800507c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005086:	89fb      	ldrh	r3, [r7, #14]
 8005088:	f023 030f 	bic.w	r3, r3, #15
 800508c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	b29a      	uxth	r2, r3
 8005092:	89fb      	ldrh	r3, [r7, #14]
 8005094:	4313      	orrs	r3, r2
 8005096:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	89fa      	ldrh	r2, [r7, #14]
 800509e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e000      	b.n	80050be <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80050bc:	2302      	movs	r3, #2
  }
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
	...

080050cc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e0bf      	b.n	800525e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fd fc20 	bl	8002938 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800510e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6999      	ldr	r1, [r3, #24]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005124:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6899      	ldr	r1, [r3, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4b4a      	ldr	r3, [pc, #296]	@ (8005268 <HAL_LTDC_Init+0x19c>)
 8005140:	400b      	ands	r3, r1
 8005142:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	041b      	lsls	r3, r3, #16
 800514a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6899      	ldr	r1, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68d9      	ldr	r1, [r3, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	4b3e      	ldr	r3, [pc, #248]	@ (8005268 <HAL_LTDC_Init+0x19c>)
 800516e:	400b      	ands	r3, r1
 8005170:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	041b      	lsls	r3, r3, #16
 8005178:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68d9      	ldr	r1, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1a      	ldr	r2, [r3, #32]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6919      	ldr	r1, [r3, #16]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4b33      	ldr	r3, [pc, #204]	@ (8005268 <HAL_LTDC_Init+0x19c>)
 800519c:	400b      	ands	r3, r1
 800519e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a4:	041b      	lsls	r3, r3, #16
 80051a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6919      	ldr	r1, [r3, #16]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6959      	ldr	r1, [r3, #20]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	4b27      	ldr	r3, [pc, #156]	@ (8005268 <HAL_LTDC_Init+0x19c>)
 80051ca:	400b      	ands	r3, r1
 80051cc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d2:	041b      	lsls	r3, r3, #16
 80051d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6959      	ldr	r1, [r3, #20]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800520e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0206 	orr.w	r2, r2, #6
 800523a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	f000f800 	.word	0xf000f800

0800526c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800526c:	b5b0      	push	{r4, r5, r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_LTDC_ConfigLayer+0x1a>
 8005282:	2302      	movs	r3, #2
 8005284:	e02c      	b.n	80052e0 <HAL_LTDC_ConfigLayer+0x74>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2202      	movs	r2, #2
 8005292:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2134      	movs	r1, #52	@ 0x34
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	4413      	add	r3, r2
 80052a2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4614      	mov	r4, r2
 80052aa:	461d      	mov	r5, r3
 80052ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	68b9      	ldr	r1, [r7, #8]
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f811 	bl	80052e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2201      	movs	r2, #1
 80052cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bdb0      	pop	{r4, r5, r7, pc}

080052e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b089      	sub	sp, #36	@ 0x24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	0c1b      	lsrs	r3, r3, #16
 8005300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005304:	4413      	add	r3, r2
 8005306:	041b      	lsls	r3, r3, #16
 8005308:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	01db      	lsls	r3, r3, #7
 8005314:	4413      	add	r3, r2
 8005316:	3384      	adds	r3, #132	@ 0x84
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	4611      	mov	r1, r2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	01d2      	lsls	r2, r2, #7
 8005324:	440a      	add	r2, r1
 8005326:	3284      	adds	r2, #132	@ 0x84
 8005328:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800532c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	0c1b      	lsrs	r3, r3, #16
 800533a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800533e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005340:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4619      	mov	r1, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	01db      	lsls	r3, r3, #7
 800534c:	440b      	add	r3, r1
 800534e:	3384      	adds	r3, #132	@ 0x84
 8005350:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005356:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005366:	4413      	add	r3, r2
 8005368:	041b      	lsls	r3, r3, #16
 800536a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	01db      	lsls	r3, r3, #7
 8005376:	4413      	add	r3, r2
 8005378:	3384      	adds	r3, #132	@ 0x84
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	4611      	mov	r1, r2
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	01d2      	lsls	r2, r2, #7
 8005386:	440a      	add	r2, r1
 8005388:	3284      	adds	r2, #132	@ 0x84
 800538a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800538e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800539e:	4413      	add	r3, r2
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4619      	mov	r1, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	01db      	lsls	r3, r3, #7
 80053ac:	440b      	add	r3, r1
 80053ae:	3384      	adds	r3, #132	@ 0x84
 80053b0:	4619      	mov	r1, r3
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	01db      	lsls	r3, r3, #7
 80053c2:	4413      	add	r3, r2
 80053c4:	3384      	adds	r3, #132	@ 0x84
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	4611      	mov	r1, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	01d2      	lsls	r2, r2, #7
 80053d2:	440a      	add	r2, r1
 80053d4:	3284      	adds	r2, #132	@ 0x84
 80053d6:	f023 0307 	bic.w	r3, r3, #7
 80053da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	01db      	lsls	r3, r3, #7
 80053e6:	4413      	add	r3, r2
 80053e8:	3384      	adds	r3, #132	@ 0x84
 80053ea:	461a      	mov	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005402:	041b      	lsls	r3, r3, #16
 8005404:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	061b      	lsls	r3, r3, #24
 800540c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	01db      	lsls	r3, r3, #7
 8005418:	4413      	add	r3, r2
 800541a:	3384      	adds	r3, #132	@ 0x84
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	01db      	lsls	r3, r3, #7
 8005428:	4413      	add	r3, r2
 800542a:	3384      	adds	r3, #132	@ 0x84
 800542c:	461a      	mov	r2, r3
 800542e:	2300      	movs	r3, #0
 8005430:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005438:	461a      	mov	r2, r3
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	431a      	orrs	r2, r3
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	431a      	orrs	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4619      	mov	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	01db      	lsls	r3, r3, #7
 800544c:	440b      	add	r3, r1
 800544e:	3384      	adds	r3, #132	@ 0x84
 8005450:	4619      	mov	r1, r3
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	01db      	lsls	r3, r3, #7
 8005462:	4413      	add	r3, r2
 8005464:	3384      	adds	r3, #132	@ 0x84
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	4611      	mov	r1, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	01d2      	lsls	r2, r2, #7
 8005472:	440a      	add	r2, r1
 8005474:	3284      	adds	r2, #132	@ 0x84
 8005476:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800547a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	01db      	lsls	r3, r3, #7
 8005486:	4413      	add	r3, r2
 8005488:	3384      	adds	r3, #132	@ 0x84
 800548a:	461a      	mov	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	01db      	lsls	r3, r3, #7
 800549c:	4413      	add	r3, r2
 800549e:	3384      	adds	r3, #132	@ 0x84
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	4611      	mov	r1, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	01d2      	lsls	r2, r2, #7
 80054ac:	440a      	add	r2, r1
 80054ae:	3284      	adds	r2, #132	@ 0x84
 80054b0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80054b4:	f023 0307 	bic.w	r3, r3, #7
 80054b8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	69da      	ldr	r2, [r3, #28]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	6809      	ldr	r1, [r1, #0]
 80054c6:	4608      	mov	r0, r1
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	01c9      	lsls	r1, r1, #7
 80054cc:	4401      	add	r1, r0
 80054ce:	3184      	adds	r1, #132	@ 0x84
 80054d0:	4313      	orrs	r3, r2
 80054d2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	01db      	lsls	r3, r3, #7
 80054de:	4413      	add	r3, r2
 80054e0:	3384      	adds	r3, #132	@ 0x84
 80054e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	01db      	lsls	r3, r3, #7
 80054ee:	4413      	add	r3, r2
 80054f0:	3384      	adds	r3, #132	@ 0x84
 80054f2:	461a      	mov	r2, r3
 80054f4:	2300      	movs	r3, #0
 80054f6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	01db      	lsls	r3, r3, #7
 8005502:	4413      	add	r3, r2
 8005504:	3384      	adds	r3, #132	@ 0x84
 8005506:	461a      	mov	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d102      	bne.n	800551c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005516:	2304      	movs	r3, #4
 8005518:	61fb      	str	r3, [r7, #28]
 800551a:	e01b      	b.n	8005554 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d102      	bne.n	800552a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005524:	2303      	movs	r3, #3
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	e014      	b.n	8005554 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2b04      	cmp	r3, #4
 8005530:	d00b      	beq.n	800554a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005536:	2b02      	cmp	r3, #2
 8005538:	d007      	beq.n	800554a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800553e:	2b03      	cmp	r3, #3
 8005540:	d003      	beq.n	800554a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005546:	2b07      	cmp	r3, #7
 8005548:	d102      	bne.n	8005550 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800554a:	2302      	movs	r3, #2
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	e001      	b.n	8005554 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005550:	2301      	movs	r3, #1
 8005552:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	01db      	lsls	r3, r3, #7
 800555e:	4413      	add	r3, r2
 8005560:	3384      	adds	r3, #132	@ 0x84
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	4611      	mov	r1, r2
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	01d2      	lsls	r2, r2, #7
 800556e:	440a      	add	r2, r1
 8005570:	3284      	adds	r2, #132	@ 0x84
 8005572:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005576:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557c:	69fa      	ldr	r2, [r7, #28]
 800557e:	fb02 f303 	mul.w	r3, r2, r3
 8005582:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	6859      	ldr	r1, [r3, #4]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	1acb      	subs	r3, r1, r3
 800558e:	69f9      	ldr	r1, [r7, #28]
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005596:	68f9      	ldr	r1, [r7, #12]
 8005598:	6809      	ldr	r1, [r1, #0]
 800559a:	4608      	mov	r0, r1
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	01c9      	lsls	r1, r1, #7
 80055a0:	4401      	add	r1, r0
 80055a2:	3184      	adds	r1, #132	@ 0x84
 80055a4:	4313      	orrs	r3, r2
 80055a6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	01db      	lsls	r3, r3, #7
 80055b2:	4413      	add	r3, r2
 80055b4:	3384      	adds	r3, #132	@ 0x84
 80055b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	6812      	ldr	r2, [r2, #0]
 80055bc:	4611      	mov	r1, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	01d2      	lsls	r2, r2, #7
 80055c2:	440a      	add	r2, r1
 80055c4:	3284      	adds	r2, #132	@ 0x84
 80055c6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80055ca:	f023 0307 	bic.w	r3, r3, #7
 80055ce:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	01db      	lsls	r3, r3, #7
 80055da:	4413      	add	r3, r2
 80055dc:	3384      	adds	r3, #132	@ 0x84
 80055de:	461a      	mov	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	01db      	lsls	r3, r3, #7
 80055f0:	4413      	add	r3, r2
 80055f2:	3384      	adds	r3, #132	@ 0x84
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	4611      	mov	r1, r2
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	01d2      	lsls	r2, r2, #7
 8005600:	440a      	add	r2, r1
 8005602:	3284      	adds	r2, #132	@ 0x84
 8005604:	f043 0301 	orr.w	r3, r3, #1
 8005608:	6013      	str	r3, [r2, #0]
}
 800560a:	bf00      	nop
 800560c:	3724      	adds	r7, #36	@ 0x24
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
	...

08005618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e267      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d075      	beq.n	8005722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005636:	4b88      	ldr	r3, [pc, #544]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	2b04      	cmp	r3, #4
 8005640:	d00c      	beq.n	800565c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005642:	4b85      	ldr	r3, [pc, #532]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800564a:	2b08      	cmp	r3, #8
 800564c:	d112      	bne.n	8005674 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800564e:	4b82      	ldr	r3, [pc, #520]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005656:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800565a:	d10b      	bne.n	8005674 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800565c:	4b7e      	ldr	r3, [pc, #504]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d05b      	beq.n	8005720 <HAL_RCC_OscConfig+0x108>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d157      	bne.n	8005720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e242      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800567c:	d106      	bne.n	800568c <HAL_RCC_OscConfig+0x74>
 800567e:	4b76      	ldr	r3, [pc, #472]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a75      	ldr	r2, [pc, #468]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 8005684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	e01d      	b.n	80056c8 <HAL_RCC_OscConfig+0xb0>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005694:	d10c      	bne.n	80056b0 <HAL_RCC_OscConfig+0x98>
 8005696:	4b70      	ldr	r3, [pc, #448]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a6f      	ldr	r2, [pc, #444]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 800569c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a6c      	ldr	r2, [pc, #432]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 80056a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e00b      	b.n	80056c8 <HAL_RCC_OscConfig+0xb0>
 80056b0:	4b69      	ldr	r3, [pc, #420]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a68      	ldr	r2, [pc, #416]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 80056b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	4b66      	ldr	r3, [pc, #408]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a65      	ldr	r2, [pc, #404]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 80056c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d013      	beq.n	80056f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d0:	f7fd ffea 	bl	80036a8 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d8:	f7fd ffe6 	bl	80036a8 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b64      	cmp	r3, #100	@ 0x64
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e207      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f0      	beq.n	80056d8 <HAL_RCC_OscConfig+0xc0>
 80056f6:	e014      	b.n	8005722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7fd ffd6 	bl	80036a8 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005700:	f7fd ffd2 	bl	80036a8 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b64      	cmp	r3, #100	@ 0x64
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e1f3      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005712:	4b51      	ldr	r3, [pc, #324]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0xe8>
 800571e:	e000      	b.n	8005722 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d063      	beq.n	80057f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800572e:	4b4a      	ldr	r3, [pc, #296]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 030c 	and.w	r3, r3, #12
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00b      	beq.n	8005752 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800573a:	4b47      	ldr	r3, [pc, #284]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005742:	2b08      	cmp	r3, #8
 8005744:	d11c      	bne.n	8005780 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005746:	4b44      	ldr	r3, [pc, #272]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d116      	bne.n	8005780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005752:	4b41      	ldr	r3, [pc, #260]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d005      	beq.n	800576a <HAL_RCC_OscConfig+0x152>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d001      	beq.n	800576a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e1c7      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800576a:	4b3b      	ldr	r3, [pc, #236]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4937      	ldr	r1, [pc, #220]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 800577a:	4313      	orrs	r3, r2
 800577c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800577e:	e03a      	b.n	80057f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d020      	beq.n	80057ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005788:	4b34      	ldr	r3, [pc, #208]	@ (800585c <HAL_RCC_OscConfig+0x244>)
 800578a:	2201      	movs	r2, #1
 800578c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578e:	f7fd ff8b 	bl	80036a8 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005796:	f7fd ff87 	bl	80036a8 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e1a8      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b4:	4b28      	ldr	r3, [pc, #160]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4925      	ldr	r1, [pc, #148]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	600b      	str	r3, [r1, #0]
 80057c8:	e015      	b.n	80057f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ca:	4b24      	ldr	r3, [pc, #144]	@ (800585c <HAL_RCC_OscConfig+0x244>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d0:	f7fd ff6a 	bl	80036a8 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057d8:	f7fd ff66 	bl	80036a8 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e187      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f0      	bne.n	80057d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d036      	beq.n	8005870 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d016      	beq.n	8005838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800580a:	4b15      	ldr	r3, [pc, #84]	@ (8005860 <HAL_RCC_OscConfig+0x248>)
 800580c:	2201      	movs	r2, #1
 800580e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005810:	f7fd ff4a 	bl	80036a8 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005818:	f7fd ff46 	bl	80036a8 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e167      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800582a:	4b0b      	ldr	r3, [pc, #44]	@ (8005858 <HAL_RCC_OscConfig+0x240>)
 800582c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0f0      	beq.n	8005818 <HAL_RCC_OscConfig+0x200>
 8005836:	e01b      	b.n	8005870 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005838:	4b09      	ldr	r3, [pc, #36]	@ (8005860 <HAL_RCC_OscConfig+0x248>)
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800583e:	f7fd ff33 	bl	80036a8 <HAL_GetTick>
 8005842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005844:	e00e      	b.n	8005864 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005846:	f7fd ff2f 	bl	80036a8 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d907      	bls.n	8005864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e150      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
 8005858:	40023800 	.word	0x40023800
 800585c:	42470000 	.word	0x42470000
 8005860:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005864:	4b88      	ldr	r3, [pc, #544]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 8005866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1ea      	bne.n	8005846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 8097 	beq.w	80059ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800587e:	2300      	movs	r3, #0
 8005880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005882:	4b81      	ldr	r3, [pc, #516]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10f      	bne.n	80058ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800588e:	2300      	movs	r3, #0
 8005890:	60bb      	str	r3, [r7, #8]
 8005892:	4b7d      	ldr	r3, [pc, #500]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	4a7c      	ldr	r2, [pc, #496]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 8005898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800589c:	6413      	str	r3, [r2, #64]	@ 0x40
 800589e:	4b7a      	ldr	r3, [pc, #488]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a6:	60bb      	str	r3, [r7, #8]
 80058a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058aa:	2301      	movs	r3, #1
 80058ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ae:	4b77      	ldr	r3, [pc, #476]	@ (8005a8c <HAL_RCC_OscConfig+0x474>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d118      	bne.n	80058ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058ba:	4b74      	ldr	r3, [pc, #464]	@ (8005a8c <HAL_RCC_OscConfig+0x474>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a73      	ldr	r2, [pc, #460]	@ (8005a8c <HAL_RCC_OscConfig+0x474>)
 80058c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058c6:	f7fd feef 	bl	80036a8 <HAL_GetTick>
 80058ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ce:	f7fd feeb 	bl	80036a8 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e10c      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e0:	4b6a      	ldr	r3, [pc, #424]	@ (8005a8c <HAL_RCC_OscConfig+0x474>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0f0      	beq.n	80058ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d106      	bne.n	8005902 <HAL_RCC_OscConfig+0x2ea>
 80058f4:	4b64      	ldr	r3, [pc, #400]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 80058f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f8:	4a63      	ldr	r2, [pc, #396]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 80058fa:	f043 0301 	orr.w	r3, r3, #1
 80058fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005900:	e01c      	b.n	800593c <HAL_RCC_OscConfig+0x324>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2b05      	cmp	r3, #5
 8005908:	d10c      	bne.n	8005924 <HAL_RCC_OscConfig+0x30c>
 800590a:	4b5f      	ldr	r3, [pc, #380]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 800590c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590e:	4a5e      	ldr	r2, [pc, #376]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 8005910:	f043 0304 	orr.w	r3, r3, #4
 8005914:	6713      	str	r3, [r2, #112]	@ 0x70
 8005916:	4b5c      	ldr	r3, [pc, #368]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 8005918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800591a:	4a5b      	ldr	r2, [pc, #364]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	6713      	str	r3, [r2, #112]	@ 0x70
 8005922:	e00b      	b.n	800593c <HAL_RCC_OscConfig+0x324>
 8005924:	4b58      	ldr	r3, [pc, #352]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 8005926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005928:	4a57      	ldr	r2, [pc, #348]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 800592a:	f023 0301 	bic.w	r3, r3, #1
 800592e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005930:	4b55      	ldr	r3, [pc, #340]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 8005932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005934:	4a54      	ldr	r2, [pc, #336]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 8005936:	f023 0304 	bic.w	r3, r3, #4
 800593a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d015      	beq.n	8005970 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005944:	f7fd feb0 	bl	80036a8 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800594a:	e00a      	b.n	8005962 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800594c:	f7fd feac 	bl	80036a8 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800595a:	4293      	cmp	r3, r2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e0cb      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005962:	4b49      	ldr	r3, [pc, #292]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 8005964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0ee      	beq.n	800594c <HAL_RCC_OscConfig+0x334>
 800596e:	e014      	b.n	800599a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005970:	f7fd fe9a 	bl	80036a8 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005976:	e00a      	b.n	800598e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005978:	f7fd fe96 	bl	80036a8 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005986:	4293      	cmp	r3, r2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e0b5      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800598e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 8005990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1ee      	bne.n	8005978 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800599a:	7dfb      	ldrb	r3, [r7, #23]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d105      	bne.n	80059ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a0:	4b39      	ldr	r3, [pc, #228]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 80059a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a4:	4a38      	ldr	r2, [pc, #224]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 80059a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 80a1 	beq.w	8005af8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059b6:	4b34      	ldr	r3, [pc, #208]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 030c 	and.w	r3, r3, #12
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d05c      	beq.n	8005a7c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d141      	bne.n	8005a4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ca:	4b31      	ldr	r3, [pc, #196]	@ (8005a90 <HAL_RCC_OscConfig+0x478>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d0:	f7fd fe6a 	bl	80036a8 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d8:	f7fd fe66 	bl	80036a8 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e087      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ea:	4b27      	ldr	r3, [pc, #156]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1f0      	bne.n	80059d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69da      	ldr	r2, [r3, #28]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a04:	019b      	lsls	r3, r3, #6
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0c:	085b      	lsrs	r3, r3, #1
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	041b      	lsls	r3, r3, #16
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a18:	061b      	lsls	r3, r3, #24
 8005a1a:	491b      	ldr	r1, [pc, #108]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a20:	4b1b      	ldr	r3, [pc, #108]	@ (8005a90 <HAL_RCC_OscConfig+0x478>)
 8005a22:	2201      	movs	r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a26:	f7fd fe3f 	bl	80036a8 <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a2e:	f7fd fe3b 	bl	80036a8 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e05c      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a40:	4b11      	ldr	r3, [pc, #68]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCC_OscConfig+0x416>
 8005a4c:	e054      	b.n	8005af8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a4e:	4b10      	ldr	r3, [pc, #64]	@ (8005a90 <HAL_RCC_OscConfig+0x478>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a54:	f7fd fe28 	bl	80036a8 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a5c:	f7fd fe24 	bl	80036a8 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e045      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6e:	4b06      	ldr	r3, [pc, #24]	@ (8005a88 <HAL_RCC_OscConfig+0x470>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f0      	bne.n	8005a5c <HAL_RCC_OscConfig+0x444>
 8005a7a:	e03d      	b.n	8005af8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d107      	bne.n	8005a94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e038      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	40007000 	.word	0x40007000
 8005a90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a94:	4b1b      	ldr	r3, [pc, #108]	@ (8005b04 <HAL_RCC_OscConfig+0x4ec>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d028      	beq.n	8005af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d121      	bne.n	8005af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d11a      	bne.n	8005af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005aca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d111      	bne.n	8005af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ada:	085b      	lsrs	r3, r3, #1
 8005adc:	3b01      	subs	r3, #1
 8005ade:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d107      	bne.n	8005af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d001      	beq.n	8005af8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	40023800 	.word	0x40023800

08005b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0cc      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b1c:	4b68      	ldr	r3, [pc, #416]	@ (8005cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d90c      	bls.n	8005b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2a:	4b65      	ldr	r3, [pc, #404]	@ (8005cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b32:	4b63      	ldr	r3, [pc, #396]	@ (8005cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d001      	beq.n	8005b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e0b8      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d020      	beq.n	8005b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b5c:	4b59      	ldr	r3, [pc, #356]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	4a58      	ldr	r2, [pc, #352]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0308 	and.w	r3, r3, #8
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d005      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b74:	4b53      	ldr	r3, [pc, #332]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	4a52      	ldr	r2, [pc, #328]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b80:	4b50      	ldr	r3, [pc, #320]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	494d      	ldr	r1, [pc, #308]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d044      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d107      	bne.n	8005bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ba6:	4b47      	ldr	r3, [pc, #284]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d119      	bne.n	8005be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e07f      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d003      	beq.n	8005bc6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d107      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e06f      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e067      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005be6:	4b37      	ldr	r3, [pc, #220]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f023 0203 	bic.w	r2, r3, #3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	4934      	ldr	r1, [pc, #208]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bf8:	f7fd fd56 	bl	80036a8 <HAL_GetTick>
 8005bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfe:	e00a      	b.n	8005c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c00:	f7fd fd52 	bl	80036a8 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e04f      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c16:	4b2b      	ldr	r3, [pc, #172]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 020c 	and.w	r2, r3, #12
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d1eb      	bne.n	8005c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c28:	4b25      	ldr	r3, [pc, #148]	@ (8005cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d20c      	bcs.n	8005c50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c36:	4b22      	ldr	r3, [pc, #136]	@ (8005cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3e:	4b20      	ldr	r3, [pc, #128]	@ (8005cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d001      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e032      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d008      	beq.n	8005c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c5c:	4b19      	ldr	r3, [pc, #100]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	4916      	ldr	r1, [pc, #88]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d009      	beq.n	8005c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c7a:	4b12      	ldr	r3, [pc, #72]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	490e      	ldr	r1, [pc, #56]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c8e:	f000 f821 	bl	8005cd4 <HAL_RCC_GetSysClockFreq>
 8005c92:	4602      	mov	r2, r0
 8005c94:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	091b      	lsrs	r3, r3, #4
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	490a      	ldr	r1, [pc, #40]	@ (8005cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca0:	5ccb      	ldrb	r3, [r1, r3]
 8005ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca6:	4a09      	ldr	r2, [pc, #36]	@ (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005caa:	4b09      	ldr	r3, [pc, #36]	@ (8005cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fd fcb6 	bl	8003620 <HAL_InitTick>

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40023c00 	.word	0x40023c00
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	080091d0 	.word	0x080091d0
 8005ccc:	20000010 	.word	0x20000010
 8005cd0:	20000014 	.word	0x20000014

08005cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd8:	b094      	sub	sp, #80	@ 0x50
 8005cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cec:	4b79      	ldr	r3, [pc, #484]	@ (8005ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 030c 	and.w	r3, r3, #12
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d00d      	beq.n	8005d14 <HAL_RCC_GetSysClockFreq+0x40>
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	f200 80e1 	bhi.w	8005ec0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_RCC_GetSysClockFreq+0x34>
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d003      	beq.n	8005d0e <HAL_RCC_GetSysClockFreq+0x3a>
 8005d06:	e0db      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d08:	4b73      	ldr	r3, [pc, #460]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d0c:	e0db      	b.n	8005ec6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d0e:	4b73      	ldr	r3, [pc, #460]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x208>)
 8005d10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d12:	e0d8      	b.n	8005ec6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d14:	4b6f      	ldr	r3, [pc, #444]	@ (8005ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d063      	beq.n	8005df2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d2a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	099b      	lsrs	r3, r3, #6
 8005d30:	2200      	movs	r2, #0
 8005d32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d3e:	2300      	movs	r3, #0
 8005d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d46:	4622      	mov	r2, r4
 8005d48:	462b      	mov	r3, r5
 8005d4a:	f04f 0000 	mov.w	r0, #0
 8005d4e:	f04f 0100 	mov.w	r1, #0
 8005d52:	0159      	lsls	r1, r3, #5
 8005d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d58:	0150      	lsls	r0, r2, #5
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4621      	mov	r1, r4
 8005d60:	1a51      	subs	r1, r2, r1
 8005d62:	6139      	str	r1, [r7, #16]
 8005d64:	4629      	mov	r1, r5
 8005d66:	eb63 0301 	sbc.w	r3, r3, r1
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d78:	4659      	mov	r1, fp
 8005d7a:	018b      	lsls	r3, r1, #6
 8005d7c:	4651      	mov	r1, sl
 8005d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d82:	4651      	mov	r1, sl
 8005d84:	018a      	lsls	r2, r1, #6
 8005d86:	4651      	mov	r1, sl
 8005d88:	ebb2 0801 	subs.w	r8, r2, r1
 8005d8c:	4659      	mov	r1, fp
 8005d8e:	eb63 0901 	sbc.w	r9, r3, r1
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	f04f 0300 	mov.w	r3, #0
 8005d9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005da2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005da6:	4690      	mov	r8, r2
 8005da8:	4699      	mov	r9, r3
 8005daa:	4623      	mov	r3, r4
 8005dac:	eb18 0303 	adds.w	r3, r8, r3
 8005db0:	60bb      	str	r3, [r7, #8]
 8005db2:	462b      	mov	r3, r5
 8005db4:	eb49 0303 	adc.w	r3, r9, r3
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	024b      	lsls	r3, r1, #9
 8005dca:	4621      	mov	r1, r4
 8005dcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	024a      	lsls	r2, r1, #9
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dda:	2200      	movs	r2, #0
 8005ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005de0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005de4:	f7fa fa54 	bl	8000290 <__aeabi_uldivmod>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4613      	mov	r3, r2
 8005dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005df0:	e058      	b.n	8005ea4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005df2:	4b38      	ldr	r3, [pc, #224]	@ (8005ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	099b      	lsrs	r3, r3, #6
 8005df8:	2200      	movs	r2, #0
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e02:	623b      	str	r3, [r7, #32]
 8005e04:	2300      	movs	r3, #0
 8005e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	464b      	mov	r3, r9
 8005e10:	f04f 0000 	mov.w	r0, #0
 8005e14:	f04f 0100 	mov.w	r1, #0
 8005e18:	0159      	lsls	r1, r3, #5
 8005e1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e1e:	0150      	lsls	r0, r2, #5
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4641      	mov	r1, r8
 8005e26:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e44:	ebb2 040a 	subs.w	r4, r2, sl
 8005e48:	eb63 050b 	sbc.w	r5, r3, fp
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	f04f 0300 	mov.w	r3, #0
 8005e54:	00eb      	lsls	r3, r5, #3
 8005e56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e5a:	00e2      	lsls	r2, r4, #3
 8005e5c:	4614      	mov	r4, r2
 8005e5e:	461d      	mov	r5, r3
 8005e60:	4643      	mov	r3, r8
 8005e62:	18e3      	adds	r3, r4, r3
 8005e64:	603b      	str	r3, [r7, #0]
 8005e66:	464b      	mov	r3, r9
 8005e68:	eb45 0303 	adc.w	r3, r5, r3
 8005e6c:	607b      	str	r3, [r7, #4]
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	028b      	lsls	r3, r1, #10
 8005e7e:	4621      	mov	r1, r4
 8005e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e84:	4621      	mov	r1, r4
 8005e86:	028a      	lsls	r2, r1, #10
 8005e88:	4610      	mov	r0, r2
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e8e:	2200      	movs	r2, #0
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	61fa      	str	r2, [r7, #28]
 8005e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e98:	f7fa f9fa 	bl	8000290 <__aeabi_uldivmod>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	0c1b      	lsrs	r3, r3, #16
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	3301      	adds	r3, #1
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005eb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ebe:	e002      	b.n	8005ec6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ec0:	4b05      	ldr	r3, [pc, #20]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3750      	adds	r7, #80	@ 0x50
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	00f42400 	.word	0x00f42400
 8005edc:	007a1200 	.word	0x007a1200

08005ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ee4:	4b03      	ldr	r3, [pc, #12]	@ (8005ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20000010 	.word	0x20000010

08005ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005efc:	f7ff fff0 	bl	8005ee0 <HAL_RCC_GetHCLKFreq>
 8005f00:	4602      	mov	r2, r0
 8005f02:	4b05      	ldr	r3, [pc, #20]	@ (8005f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	0a9b      	lsrs	r3, r3, #10
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	4903      	ldr	r1, [pc, #12]	@ (8005f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f0e:	5ccb      	ldrb	r3, [r1, r3]
 8005f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	080091e0 	.word	0x080091e0

08005f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d105      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d075      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f54:	4b91      	ldr	r3, [pc, #580]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f5a:	f7fd fba5 	bl	80036a8 <HAL_GetTick>
 8005f5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f60:	e008      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f62:	f7fd fba1 	bl	80036a8 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d901      	bls.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e189      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f74:	4b8a      	ldr	r3, [pc, #552]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1f0      	bne.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d009      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	019a      	lsls	r2, r3, #6
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	071b      	lsls	r3, r3, #28
 8005f98:	4981      	ldr	r1, [pc, #516]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d01f      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fac:	4b7c      	ldr	r3, [pc, #496]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fb2:	0f1b      	lsrs	r3, r3, #28
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	019a      	lsls	r2, r3, #6
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	061b      	lsls	r3, r3, #24
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	071b      	lsls	r3, r3, #28
 8005fcc:	4974      	ldr	r1, [pc, #464]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fd4:	4b72      	ldr	r3, [pc, #456]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fda:	f023 021f 	bic.w	r2, r3, #31
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	496e      	ldr	r1, [pc, #440]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00d      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	019a      	lsls	r2, r3, #6
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	061b      	lsls	r3, r3, #24
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	071b      	lsls	r3, r3, #28
 800600c:	4964      	ldr	r1, [pc, #400]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006014:	4b61      	ldr	r3, [pc, #388]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006016:	2201      	movs	r2, #1
 8006018:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800601a:	f7fd fb45 	bl	80036a8 <HAL_GetTick>
 800601e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006020:	e008      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006022:	f7fd fb41 	bl	80036a8 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e129      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006034:	4b5a      	ldr	r3, [pc, #360]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0f0      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	d105      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006054:	2b00      	cmp	r3, #0
 8006056:	d079      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006058:	4b52      	ldr	r3, [pc, #328]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800605e:	f7fd fb23 	bl	80036a8 <HAL_GetTick>
 8006062:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006064:	e008      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006066:	f7fd fb1f 	bl	80036a8 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d901      	bls.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e107      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006078:	4b49      	ldr	r3, [pc, #292]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006080:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006084:	d0ef      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	d020      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006092:	4b43      	ldr	r3, [pc, #268]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006098:	0f1b      	lsrs	r3, r3, #28
 800609a:	f003 0307 	and.w	r3, r3, #7
 800609e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	019a      	lsls	r2, r3, #6
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	061b      	lsls	r3, r3, #24
 80060ac:	431a      	orrs	r2, r3
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	071b      	lsls	r3, r3, #28
 80060b2:	493b      	ldr	r1, [pc, #236]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060ba:	4b39      	ldr	r3, [pc, #228]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060c0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	4934      	ldr	r1, [pc, #208]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0308 	and.w	r3, r3, #8
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d01e      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060e0:	4b2f      	ldr	r3, [pc, #188]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e6:	0e1b      	lsrs	r3, r3, #24
 80060e8:	f003 030f 	and.w	r3, r3, #15
 80060ec:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	019a      	lsls	r2, r3, #6
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	061b      	lsls	r3, r3, #24
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	071b      	lsls	r3, r3, #28
 8006100:	4927      	ldr	r1, [pc, #156]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006102:	4313      	orrs	r3, r2
 8006104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006108:	4b25      	ldr	r3, [pc, #148]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800610a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800610e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006116:	4922      	ldr	r1, [pc, #136]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800611e:	4b21      	ldr	r3, [pc, #132]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006120:	2201      	movs	r2, #1
 8006122:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006124:	f7fd fac0 	bl	80036a8 <HAL_GetTick>
 8006128:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800612a:	e008      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800612c:	f7fd fabc 	bl	80036a8 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e0a4      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800613e:	4b18      	ldr	r3, [pc, #96]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006146:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800614a:	d1ef      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 808b 	beq.w	8006270 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	4b10      	ldr	r3, [pc, #64]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006162:	4a0f      	ldr	r2, [pc, #60]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006168:	6413      	str	r3, [r2, #64]	@ 0x40
 800616a:	4b0d      	ldr	r3, [pc, #52]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006176:	4b0c      	ldr	r3, [pc, #48]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a0b      	ldr	r2, [pc, #44]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800617c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006180:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006182:	f7fd fa91 	bl	80036a8 <HAL_GetTick>
 8006186:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006188:	e010      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800618a:	f7fd fa8d 	bl	80036a8 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d909      	bls.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e075      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800619c:	42470068 	.word	0x42470068
 80061a0:	40023800 	.word	0x40023800
 80061a4:	42470070 	.word	0x42470070
 80061a8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80061ac:	4b38      	ldr	r3, [pc, #224]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0e8      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061b8:	4b36      	ldr	r3, [pc, #216]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061c0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d02f      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d028      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80061e2:	2201      	movs	r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80061ec:	4a29      	ldr	r2, [pc, #164]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061f2:	4b28      	ldr	r3, [pc, #160]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d114      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061fe:	f7fd fa53 	bl	80036a8 <HAL_GetTick>
 8006202:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006204:	e00a      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006206:	f7fd fa4f 	bl	80036a8 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006214:	4293      	cmp	r3, r2
 8006216:	d901      	bls.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e035      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800621c:	4b1d      	ldr	r3, [pc, #116]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800621e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0ee      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006230:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006234:	d10d      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006236:	4b17      	ldr	r3, [pc, #92]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006242:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800624a:	4912      	ldr	r1, [pc, #72]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800624c:	4313      	orrs	r3, r2
 800624e:	608b      	str	r3, [r1, #8]
 8006250:	e005      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006252:	4b10      	ldr	r3, [pc, #64]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	4a0f      	ldr	r2, [pc, #60]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006258:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800625c:	6093      	str	r3, [r2, #8]
 800625e:	4b0d      	ldr	r3, [pc, #52]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006260:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800626a:	490a      	ldr	r1, [pc, #40]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800626c:	4313      	orrs	r3, r2
 800626e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0310 	and.w	r3, r3, #16
 8006278:	2b00      	cmp	r3, #0
 800627a:	d004      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006282:	4b06      	ldr	r3, [pc, #24]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006284:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40007000 	.word	0x40007000
 8006294:	40023800 	.word	0x40023800
 8006298:	42470e40 	.word	0x42470e40
 800629c:	424711e0 	.word	0x424711e0

080062a0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e01c      	b.n	80062ec <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	795b      	ldrb	r3, [r3, #5]
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d105      	bne.n	80062c8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7fc fc60 	bl	8002b88 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0204 	orr.w	r2, r2, #4
 80062dc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	791b      	ldrb	r3, [r3, #4]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_RNG_GenerateRandomNumber+0x1a>
 800630a:	2302      	movs	r3, #2
 800630c:	e044      	b.n	8006398 <HAL_RNG_GenerateRandomNumber+0xa4>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	795b      	ldrb	r3, [r3, #5]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b01      	cmp	r3, #1
 800631c:	d133      	bne.n	8006386 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2202      	movs	r2, #2
 8006322:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006324:	f7fd f9c0 	bl	80036a8 <HAL_GetTick>
 8006328:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800632a:	e018      	b.n	800635e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800632c:	f7fd f9bc 	bl	80036a8 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d911      	bls.n	800635e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b01      	cmp	r3, #1
 8006346:	d00a      	beq.n	800635e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2202      	movs	r2, #2
 8006352:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e01c      	b.n	8006398 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b01      	cmp	r3, #1
 800636a:	d1df      	bne.n	800632c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689a      	ldr	r2, [r3, #8]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	715a      	strb	r2, [r3, #5]
 8006384:	e004      	b.n	8006390 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2204      	movs	r2, #4
 800638a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	711a      	strb	r2, [r3, #4]

  return status;
 8006396:	7bfb      	ldrb	r3, [r7, #15]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e07b      	b.n	80064aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d108      	bne.n	80063cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063c2:	d009      	beq.n	80063d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	61da      	str	r2, [r3, #28]
 80063ca:	e005      	b.n	80063d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fc fbea 	bl	8002bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800640e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	431a      	orrs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006448:	431a      	orrs	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645c:	ea42 0103 	orr.w	r1, r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006464:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	0c1b      	lsrs	r3, r3, #16
 8006476:	f003 0104 	and.w	r1, r3, #4
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647e:	f003 0210 	and.w	r2, r3, #16
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006498:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e01a      	b.n	80064fa <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064da:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7fc fbbd 	bl	8002c5c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b088      	sub	sp, #32
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	603b      	str	r3, [r7, #0]
 800650e:	4613      	mov	r3, r2
 8006510:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006512:	f7fd f8c9 	bl	80036a8 <HAL_GetTick>
 8006516:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006518:	88fb      	ldrh	r3, [r7, #6]
 800651a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b01      	cmp	r3, #1
 8006526:	d001      	beq.n	800652c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006528:	2302      	movs	r3, #2
 800652a:	e12a      	b.n	8006782 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <HAL_SPI_Transmit+0x36>
 8006532:	88fb      	ldrh	r3, [r7, #6]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e122      	b.n	8006782 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <HAL_SPI_Transmit+0x48>
 8006546:	2302      	movs	r3, #2
 8006548:	e11b      	b.n	8006782 <HAL_SPI_Transmit+0x280>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2203      	movs	r2, #3
 8006556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	88fa      	ldrh	r2, [r7, #6]
 800656a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	88fa      	ldrh	r2, [r7, #6]
 8006570:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006598:	d10f      	bne.n	80065ba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c4:	2b40      	cmp	r3, #64	@ 0x40
 80065c6:	d007      	beq.n	80065d8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065e0:	d152      	bne.n	8006688 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <HAL_SPI_Transmit+0xee>
 80065ea:	8b7b      	ldrh	r3, [r7, #26]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d145      	bne.n	800667c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f4:	881a      	ldrh	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006600:	1c9a      	adds	r2, r3, #2
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800660a:	b29b      	uxth	r3, r3
 800660c:	3b01      	subs	r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006614:	e032      	b.n	800667c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b02      	cmp	r3, #2
 8006622:	d112      	bne.n	800664a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006628:	881a      	ldrh	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006634:	1c9a      	adds	r2, r3, #2
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006648:	e018      	b.n	800667c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800664a:	f7fd f82d 	bl	80036a8 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d803      	bhi.n	8006662 <HAL_SPI_Transmit+0x160>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006660:	d102      	bne.n	8006668 <HAL_SPI_Transmit+0x166>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d109      	bne.n	800667c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e082      	b.n	8006782 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1c7      	bne.n	8006616 <HAL_SPI_Transmit+0x114>
 8006686:	e053      	b.n	8006730 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <HAL_SPI_Transmit+0x194>
 8006690:	8b7b      	ldrh	r3, [r7, #26]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d147      	bne.n	8006726 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	330c      	adds	r3, #12
 80066a0:	7812      	ldrb	r2, [r2, #0]
 80066a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80066bc:	e033      	b.n	8006726 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d113      	bne.n	80066f4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	330c      	adds	r3, #12
 80066d6:	7812      	ldrb	r2, [r2, #0]
 80066d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	3b01      	subs	r3, #1
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80066f2:	e018      	b.n	8006726 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066f4:	f7fc ffd8 	bl	80036a8 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d803      	bhi.n	800670c <HAL_SPI_Transmit+0x20a>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670a:	d102      	bne.n	8006712 <HAL_SPI_Transmit+0x210>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d109      	bne.n	8006726 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e02d      	b.n	8006782 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800672a:	b29b      	uxth	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1c6      	bne.n	80066be <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f8bf 	bl	80068b8 <SPI_EndRxTxTransaction>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10a      	bne.n	8006764 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800674e:	2300      	movs	r3, #0
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006780:	2300      	movs	r3, #0
  }
}
 8006782:	4618      	mov	r0, r3
 8006784:	3720      	adds	r7, #32
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006798:	b2db      	uxtb	r3, r3
}
 800679a:	4618      	mov	r0, r3
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
	...

080067a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	4613      	mov	r3, r2
 80067b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067b8:	f7fc ff76 	bl	80036a8 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c0:	1a9b      	subs	r3, r3, r2
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	4413      	add	r3, r2
 80067c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067c8:	f7fc ff6e 	bl	80036a8 <HAL_GetTick>
 80067cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067ce:	4b39      	ldr	r3, [pc, #228]	@ (80068b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	015b      	lsls	r3, r3, #5
 80067d4:	0d1b      	lsrs	r3, r3, #20
 80067d6:	69fa      	ldr	r2, [r7, #28]
 80067d8:	fb02 f303 	mul.w	r3, r2, r3
 80067dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067de:	e054      	b.n	800688a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e6:	d050      	beq.n	800688a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067e8:	f7fc ff5e 	bl	80036a8 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d902      	bls.n	80067fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d13d      	bne.n	800687a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800680c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006816:	d111      	bne.n	800683c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006820:	d004      	beq.n	800682c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800682a:	d107      	bne.n	800683c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800683a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006844:	d10f      	bne.n	8006866 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006864:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e017      	b.n	80068aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	3b01      	subs	r3, #1
 8006888:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4013      	ands	r3, r2
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	429a      	cmp	r2, r3
 8006898:	bf0c      	ite	eq
 800689a:	2301      	moveq	r3, #1
 800689c:	2300      	movne	r3, #0
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d19b      	bne.n	80067e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3720      	adds	r7, #32
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000010 	.word	0x20000010

080068b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af02      	add	r7, sp, #8
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2201      	movs	r2, #1
 80068cc:	2102      	movs	r1, #2
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f7ff ff6a 	bl	80067a8 <SPI_WaitFlagStateUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d007      	beq.n	80068ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068de:	f043 0220 	orr.w	r2, r3, #32
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e032      	b.n	8006950 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006958 <SPI_EndRxTxTransaction+0xa0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a1b      	ldr	r2, [pc, #108]	@ (800695c <SPI_EndRxTxTransaction+0xa4>)
 80068f0:	fba2 2303 	umull	r2, r3, r2, r3
 80068f4:	0d5b      	lsrs	r3, r3, #21
 80068f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80068fa:	fb02 f303 	mul.w	r3, r2, r3
 80068fe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006908:	d112      	bne.n	8006930 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2200      	movs	r2, #0
 8006912:	2180      	movs	r1, #128	@ 0x80
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f7ff ff47 	bl	80067a8 <SPI_WaitFlagStateUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d016      	beq.n	800694e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006924:	f043 0220 	orr.w	r2, r3, #32
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e00f      	b.n	8006950 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	3b01      	subs	r3, #1
 800693a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006946:	2b80      	cmp	r3, #128	@ 0x80
 8006948:	d0f2      	beq.n	8006930 <SPI_EndRxTxTransaction+0x78>
 800694a:	e000      	b.n	800694e <SPI_EndRxTxTransaction+0x96>
        break;
 800694c:	bf00      	nop
  }

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	20000010 	.word	0x20000010
 800695c:	165e9f81 	.word	0x165e9f81

08006960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e041      	b.n	80069f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fc f986 	bl	8002c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3304      	adds	r3, #4
 800699c:	4619      	mov	r1, r3
 800699e:	4610      	mov	r0, r2
 80069a0:	f000 f8f4 	bl	8006b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d101      	bne.n	8006a1a <HAL_TIM_ConfigClockSource+0x1c>
 8006a16:	2302      	movs	r3, #2
 8006a18:	e0b4      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x186>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a38:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a40:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a52:	d03e      	beq.n	8006ad2 <HAL_TIM_ConfigClockSource+0xd4>
 8006a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a58:	f200 8087 	bhi.w	8006b6a <HAL_TIM_ConfigClockSource+0x16c>
 8006a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a60:	f000 8086 	beq.w	8006b70 <HAL_TIM_ConfigClockSource+0x172>
 8006a64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a68:	d87f      	bhi.n	8006b6a <HAL_TIM_ConfigClockSource+0x16c>
 8006a6a:	2b70      	cmp	r3, #112	@ 0x70
 8006a6c:	d01a      	beq.n	8006aa4 <HAL_TIM_ConfigClockSource+0xa6>
 8006a6e:	2b70      	cmp	r3, #112	@ 0x70
 8006a70:	d87b      	bhi.n	8006b6a <HAL_TIM_ConfigClockSource+0x16c>
 8006a72:	2b60      	cmp	r3, #96	@ 0x60
 8006a74:	d050      	beq.n	8006b18 <HAL_TIM_ConfigClockSource+0x11a>
 8006a76:	2b60      	cmp	r3, #96	@ 0x60
 8006a78:	d877      	bhi.n	8006b6a <HAL_TIM_ConfigClockSource+0x16c>
 8006a7a:	2b50      	cmp	r3, #80	@ 0x50
 8006a7c:	d03c      	beq.n	8006af8 <HAL_TIM_ConfigClockSource+0xfa>
 8006a7e:	2b50      	cmp	r3, #80	@ 0x50
 8006a80:	d873      	bhi.n	8006b6a <HAL_TIM_ConfigClockSource+0x16c>
 8006a82:	2b40      	cmp	r3, #64	@ 0x40
 8006a84:	d058      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0x13a>
 8006a86:	2b40      	cmp	r3, #64	@ 0x40
 8006a88:	d86f      	bhi.n	8006b6a <HAL_TIM_ConfigClockSource+0x16c>
 8006a8a:	2b30      	cmp	r3, #48	@ 0x30
 8006a8c:	d064      	beq.n	8006b58 <HAL_TIM_ConfigClockSource+0x15a>
 8006a8e:	2b30      	cmp	r3, #48	@ 0x30
 8006a90:	d86b      	bhi.n	8006b6a <HAL_TIM_ConfigClockSource+0x16c>
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d060      	beq.n	8006b58 <HAL_TIM_ConfigClockSource+0x15a>
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	d867      	bhi.n	8006b6a <HAL_TIM_ConfigClockSource+0x16c>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d05c      	beq.n	8006b58 <HAL_TIM_ConfigClockSource+0x15a>
 8006a9e:	2b10      	cmp	r3, #16
 8006aa0:	d05a      	beq.n	8006b58 <HAL_TIM_ConfigClockSource+0x15a>
 8006aa2:	e062      	b.n	8006b6a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ab4:	f000 f990 	bl	8006dd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ac6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	609a      	str	r2, [r3, #8]
      break;
 8006ad0:	e04f      	b.n	8006b72 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ae2:	f000 f979 	bl	8006dd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006af4:	609a      	str	r2, [r3, #8]
      break;
 8006af6:	e03c      	b.n	8006b72 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b04:	461a      	mov	r2, r3
 8006b06:	f000 f8ed 	bl	8006ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2150      	movs	r1, #80	@ 0x50
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 f946 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 8006b16:	e02c      	b.n	8006b72 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b24:	461a      	mov	r2, r3
 8006b26:	f000 f90c 	bl	8006d42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2160      	movs	r1, #96	@ 0x60
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 f936 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 8006b36:	e01c      	b.n	8006b72 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b44:	461a      	mov	r2, r3
 8006b46:	f000 f8cd 	bl	8006ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2140      	movs	r1, #64	@ 0x40
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 f926 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 8006b56:	e00c      	b.n	8006b72 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4619      	mov	r1, r3
 8006b62:	4610      	mov	r0, r2
 8006b64:	f000 f91d 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 8006b68:	e003      	b.n	8006b72 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b6e:	e000      	b.n	8006b72 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a46      	ldr	r2, [pc, #280]	@ (8006cb8 <TIM_Base_SetConfig+0x12c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d013      	beq.n	8006bcc <TIM_Base_SetConfig+0x40>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006baa:	d00f      	beq.n	8006bcc <TIM_Base_SetConfig+0x40>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a43      	ldr	r2, [pc, #268]	@ (8006cbc <TIM_Base_SetConfig+0x130>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00b      	beq.n	8006bcc <TIM_Base_SetConfig+0x40>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a42      	ldr	r2, [pc, #264]	@ (8006cc0 <TIM_Base_SetConfig+0x134>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d007      	beq.n	8006bcc <TIM_Base_SetConfig+0x40>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a41      	ldr	r2, [pc, #260]	@ (8006cc4 <TIM_Base_SetConfig+0x138>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d003      	beq.n	8006bcc <TIM_Base_SetConfig+0x40>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a40      	ldr	r2, [pc, #256]	@ (8006cc8 <TIM_Base_SetConfig+0x13c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d108      	bne.n	8006bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a35      	ldr	r2, [pc, #212]	@ (8006cb8 <TIM_Base_SetConfig+0x12c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d02b      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bec:	d027      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a32      	ldr	r2, [pc, #200]	@ (8006cbc <TIM_Base_SetConfig+0x130>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d023      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a31      	ldr	r2, [pc, #196]	@ (8006cc0 <TIM_Base_SetConfig+0x134>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d01f      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a30      	ldr	r2, [pc, #192]	@ (8006cc4 <TIM_Base_SetConfig+0x138>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d01b      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a2f      	ldr	r2, [pc, #188]	@ (8006cc8 <TIM_Base_SetConfig+0x13c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d017      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a2e      	ldr	r2, [pc, #184]	@ (8006ccc <TIM_Base_SetConfig+0x140>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d013      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a2d      	ldr	r2, [pc, #180]	@ (8006cd0 <TIM_Base_SetConfig+0x144>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00f      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a2c      	ldr	r2, [pc, #176]	@ (8006cd4 <TIM_Base_SetConfig+0x148>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00b      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a2b      	ldr	r2, [pc, #172]	@ (8006cd8 <TIM_Base_SetConfig+0x14c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d007      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a2a      	ldr	r2, [pc, #168]	@ (8006cdc <TIM_Base_SetConfig+0x150>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a29      	ldr	r2, [pc, #164]	@ (8006ce0 <TIM_Base_SetConfig+0x154>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d108      	bne.n	8006c50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a10      	ldr	r2, [pc, #64]	@ (8006cb8 <TIM_Base_SetConfig+0x12c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_Base_SetConfig+0xf8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a12      	ldr	r2, [pc, #72]	@ (8006cc8 <TIM_Base_SetConfig+0x13c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d103      	bne.n	8006c8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d105      	bne.n	8006caa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f023 0201 	bic.w	r2, r3, #1
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	611a      	str	r2, [r3, #16]
  }
}
 8006caa:	bf00      	nop
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40010000 	.word	0x40010000
 8006cbc:	40000400 	.word	0x40000400
 8006cc0:	40000800 	.word	0x40000800
 8006cc4:	40000c00 	.word	0x40000c00
 8006cc8:	40010400 	.word	0x40010400
 8006ccc:	40014000 	.word	0x40014000
 8006cd0:	40014400 	.word	0x40014400
 8006cd4:	40014800 	.word	0x40014800
 8006cd8:	40001800 	.word	0x40001800
 8006cdc:	40001c00 	.word	0x40001c00
 8006ce0:	40002000 	.word	0x40002000

08006ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	f023 0201 	bic.w	r2, r3, #1
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f023 030a 	bic.w	r3, r3, #10
 8006d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	621a      	str	r2, [r3, #32]
}
 8006d36:	bf00      	nop
 8006d38:	371c      	adds	r7, #28
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b087      	sub	sp, #28
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	60b9      	str	r1, [r7, #8]
 8006d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	f023 0210 	bic.w	r2, r3, #16
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	031b      	lsls	r3, r3, #12
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	621a      	str	r2, [r3, #32]
}
 8006d96:	bf00      	nop
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b085      	sub	sp, #20
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f043 0307 	orr.w	r3, r3, #7
 8006dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	609a      	str	r2, [r3, #8]
}
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	021a      	lsls	r2, r3, #8
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	609a      	str	r2, [r3, #8]
}
 8006e0c:	bf00      	nop
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e05a      	b.n	8006ee6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a21      	ldr	r2, [pc, #132]	@ (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d022      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e7c:	d01d      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d018      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8006efc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a1a      	ldr	r2, [pc, #104]	@ (8006f00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00e      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a18      	ldr	r2, [pc, #96]	@ (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d009      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a17      	ldr	r2, [pc, #92]	@ (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d004      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a15      	ldr	r2, [pc, #84]	@ (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d10c      	bne.n	8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40010000 	.word	0x40010000
 8006ef8:	40000400 	.word	0x40000400
 8006efc:	40000800 	.word	0x40000800
 8006f00:	40000c00 	.word	0x40000c00
 8006f04:	40010400 	.word	0x40010400
 8006f08:	40014000 	.word	0x40014000
 8006f0c:	40001800 	.word	0x40001800

08006f10 <rand>:
 8006f10:	4b16      	ldr	r3, [pc, #88]	@ (8006f6c <rand+0x5c>)
 8006f12:	b510      	push	{r4, lr}
 8006f14:	681c      	ldr	r4, [r3, #0]
 8006f16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006f18:	b9b3      	cbnz	r3, 8006f48 <rand+0x38>
 8006f1a:	2018      	movs	r0, #24
 8006f1c:	f000 fb24 	bl	8007568 <malloc>
 8006f20:	4602      	mov	r2, r0
 8006f22:	6320      	str	r0, [r4, #48]	@ 0x30
 8006f24:	b920      	cbnz	r0, 8006f30 <rand+0x20>
 8006f26:	4b12      	ldr	r3, [pc, #72]	@ (8006f70 <rand+0x60>)
 8006f28:	4812      	ldr	r0, [pc, #72]	@ (8006f74 <rand+0x64>)
 8006f2a:	2152      	movs	r1, #82	@ 0x52
 8006f2c:	f000 fab4 	bl	8007498 <__assert_func>
 8006f30:	4911      	ldr	r1, [pc, #68]	@ (8006f78 <rand+0x68>)
 8006f32:	4b12      	ldr	r3, [pc, #72]	@ (8006f7c <rand+0x6c>)
 8006f34:	e9c0 1300 	strd	r1, r3, [r0]
 8006f38:	4b11      	ldr	r3, [pc, #68]	@ (8006f80 <rand+0x70>)
 8006f3a:	6083      	str	r3, [r0, #8]
 8006f3c:	230b      	movs	r3, #11
 8006f3e:	8183      	strh	r3, [r0, #12]
 8006f40:	2100      	movs	r1, #0
 8006f42:	2001      	movs	r0, #1
 8006f44:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006f48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006f4a:	480e      	ldr	r0, [pc, #56]	@ (8006f84 <rand+0x74>)
 8006f4c:	690b      	ldr	r3, [r1, #16]
 8006f4e:	694c      	ldr	r4, [r1, #20]
 8006f50:	4a0d      	ldr	r2, [pc, #52]	@ (8006f88 <rand+0x78>)
 8006f52:	4358      	muls	r0, r3
 8006f54:	fb02 0004 	mla	r0, r2, r4, r0
 8006f58:	fba3 3202 	umull	r3, r2, r3, r2
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	eb40 0002 	adc.w	r0, r0, r2
 8006f62:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006f66:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006f6a:	bd10      	pop	{r4, pc}
 8006f6c:	20000028 	.word	0x20000028
 8006f70:	080091e8 	.word	0x080091e8
 8006f74:	080091ff 	.word	0x080091ff
 8006f78:	abcd330e 	.word	0xabcd330e
 8006f7c:	e66d1234 	.word	0xe66d1234
 8006f80:	0005deec 	.word	0x0005deec
 8006f84:	5851f42d 	.word	0x5851f42d
 8006f88:	4c957f2d 	.word	0x4c957f2d

08006f8c <std>:
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	b510      	push	{r4, lr}
 8006f90:	4604      	mov	r4, r0
 8006f92:	e9c0 3300 	strd	r3, r3, [r0]
 8006f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f9a:	6083      	str	r3, [r0, #8]
 8006f9c:	8181      	strh	r1, [r0, #12]
 8006f9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006fa0:	81c2      	strh	r2, [r0, #14]
 8006fa2:	6183      	str	r3, [r0, #24]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	2208      	movs	r2, #8
 8006fa8:	305c      	adds	r0, #92	@ 0x5c
 8006faa:	f000 f9f9 	bl	80073a0 <memset>
 8006fae:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe4 <std+0x58>)
 8006fb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe8 <std+0x5c>)
 8006fb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006fec <std+0x60>)
 8006fb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006fba:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff0 <std+0x64>)
 8006fbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff4 <std+0x68>)
 8006fc0:	6224      	str	r4, [r4, #32]
 8006fc2:	429c      	cmp	r4, r3
 8006fc4:	d006      	beq.n	8006fd4 <std+0x48>
 8006fc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006fca:	4294      	cmp	r4, r2
 8006fcc:	d002      	beq.n	8006fd4 <std+0x48>
 8006fce:	33d0      	adds	r3, #208	@ 0xd0
 8006fd0:	429c      	cmp	r4, r3
 8006fd2:	d105      	bne.n	8006fe0 <std+0x54>
 8006fd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fdc:	f000 ba58 	b.w	8007490 <__retarget_lock_init_recursive>
 8006fe0:	bd10      	pop	{r4, pc}
 8006fe2:	bf00      	nop
 8006fe4:	080071f1 	.word	0x080071f1
 8006fe8:	08007213 	.word	0x08007213
 8006fec:	0800724b 	.word	0x0800724b
 8006ff0:	0800726f 	.word	0x0800726f
 8006ff4:	20025c1c 	.word	0x20025c1c

08006ff8 <stdio_exit_handler>:
 8006ff8:	4a02      	ldr	r2, [pc, #8]	@ (8007004 <stdio_exit_handler+0xc>)
 8006ffa:	4903      	ldr	r1, [pc, #12]	@ (8007008 <stdio_exit_handler+0x10>)
 8006ffc:	4803      	ldr	r0, [pc, #12]	@ (800700c <stdio_exit_handler+0x14>)
 8006ffe:	f000 b869 	b.w	80070d4 <_fwalk_sglue>
 8007002:	bf00      	nop
 8007004:	2000001c 	.word	0x2000001c
 8007008:	08007d7d 	.word	0x08007d7d
 800700c:	2000002c 	.word	0x2000002c

08007010 <cleanup_stdio>:
 8007010:	6841      	ldr	r1, [r0, #4]
 8007012:	4b0c      	ldr	r3, [pc, #48]	@ (8007044 <cleanup_stdio+0x34>)
 8007014:	4299      	cmp	r1, r3
 8007016:	b510      	push	{r4, lr}
 8007018:	4604      	mov	r4, r0
 800701a:	d001      	beq.n	8007020 <cleanup_stdio+0x10>
 800701c:	f000 feae 	bl	8007d7c <_fflush_r>
 8007020:	68a1      	ldr	r1, [r4, #8]
 8007022:	4b09      	ldr	r3, [pc, #36]	@ (8007048 <cleanup_stdio+0x38>)
 8007024:	4299      	cmp	r1, r3
 8007026:	d002      	beq.n	800702e <cleanup_stdio+0x1e>
 8007028:	4620      	mov	r0, r4
 800702a:	f000 fea7 	bl	8007d7c <_fflush_r>
 800702e:	68e1      	ldr	r1, [r4, #12]
 8007030:	4b06      	ldr	r3, [pc, #24]	@ (800704c <cleanup_stdio+0x3c>)
 8007032:	4299      	cmp	r1, r3
 8007034:	d004      	beq.n	8007040 <cleanup_stdio+0x30>
 8007036:	4620      	mov	r0, r4
 8007038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800703c:	f000 be9e 	b.w	8007d7c <_fflush_r>
 8007040:	bd10      	pop	{r4, pc}
 8007042:	bf00      	nop
 8007044:	20025c1c 	.word	0x20025c1c
 8007048:	20025c84 	.word	0x20025c84
 800704c:	20025cec 	.word	0x20025cec

08007050 <global_stdio_init.part.0>:
 8007050:	b510      	push	{r4, lr}
 8007052:	4b0b      	ldr	r3, [pc, #44]	@ (8007080 <global_stdio_init.part.0+0x30>)
 8007054:	4c0b      	ldr	r4, [pc, #44]	@ (8007084 <global_stdio_init.part.0+0x34>)
 8007056:	4a0c      	ldr	r2, [pc, #48]	@ (8007088 <global_stdio_init.part.0+0x38>)
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	4620      	mov	r0, r4
 800705c:	2200      	movs	r2, #0
 800705e:	2104      	movs	r1, #4
 8007060:	f7ff ff94 	bl	8006f8c <std>
 8007064:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007068:	2201      	movs	r2, #1
 800706a:	2109      	movs	r1, #9
 800706c:	f7ff ff8e 	bl	8006f8c <std>
 8007070:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007074:	2202      	movs	r2, #2
 8007076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800707a:	2112      	movs	r1, #18
 800707c:	f7ff bf86 	b.w	8006f8c <std>
 8007080:	20025d54 	.word	0x20025d54
 8007084:	20025c1c 	.word	0x20025c1c
 8007088:	08006ff9 	.word	0x08006ff9

0800708c <__sfp_lock_acquire>:
 800708c:	4801      	ldr	r0, [pc, #4]	@ (8007094 <__sfp_lock_acquire+0x8>)
 800708e:	f000 ba00 	b.w	8007492 <__retarget_lock_acquire_recursive>
 8007092:	bf00      	nop
 8007094:	20025d5d 	.word	0x20025d5d

08007098 <__sfp_lock_release>:
 8007098:	4801      	ldr	r0, [pc, #4]	@ (80070a0 <__sfp_lock_release+0x8>)
 800709a:	f000 b9fb 	b.w	8007494 <__retarget_lock_release_recursive>
 800709e:	bf00      	nop
 80070a0:	20025d5d 	.word	0x20025d5d

080070a4 <__sinit>:
 80070a4:	b510      	push	{r4, lr}
 80070a6:	4604      	mov	r4, r0
 80070a8:	f7ff fff0 	bl	800708c <__sfp_lock_acquire>
 80070ac:	6a23      	ldr	r3, [r4, #32]
 80070ae:	b11b      	cbz	r3, 80070b8 <__sinit+0x14>
 80070b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b4:	f7ff bff0 	b.w	8007098 <__sfp_lock_release>
 80070b8:	4b04      	ldr	r3, [pc, #16]	@ (80070cc <__sinit+0x28>)
 80070ba:	6223      	str	r3, [r4, #32]
 80070bc:	4b04      	ldr	r3, [pc, #16]	@ (80070d0 <__sinit+0x2c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1f5      	bne.n	80070b0 <__sinit+0xc>
 80070c4:	f7ff ffc4 	bl	8007050 <global_stdio_init.part.0>
 80070c8:	e7f2      	b.n	80070b0 <__sinit+0xc>
 80070ca:	bf00      	nop
 80070cc:	08007011 	.word	0x08007011
 80070d0:	20025d54 	.word	0x20025d54

080070d4 <_fwalk_sglue>:
 80070d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070d8:	4607      	mov	r7, r0
 80070da:	4688      	mov	r8, r1
 80070dc:	4614      	mov	r4, r2
 80070de:	2600      	movs	r6, #0
 80070e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070e4:	f1b9 0901 	subs.w	r9, r9, #1
 80070e8:	d505      	bpl.n	80070f6 <_fwalk_sglue+0x22>
 80070ea:	6824      	ldr	r4, [r4, #0]
 80070ec:	2c00      	cmp	r4, #0
 80070ee:	d1f7      	bne.n	80070e0 <_fwalk_sglue+0xc>
 80070f0:	4630      	mov	r0, r6
 80070f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070f6:	89ab      	ldrh	r3, [r5, #12]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d907      	bls.n	800710c <_fwalk_sglue+0x38>
 80070fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007100:	3301      	adds	r3, #1
 8007102:	d003      	beq.n	800710c <_fwalk_sglue+0x38>
 8007104:	4629      	mov	r1, r5
 8007106:	4638      	mov	r0, r7
 8007108:	47c0      	blx	r8
 800710a:	4306      	orrs	r6, r0
 800710c:	3568      	adds	r5, #104	@ 0x68
 800710e:	e7e9      	b.n	80070e4 <_fwalk_sglue+0x10>

08007110 <iprintf>:
 8007110:	b40f      	push	{r0, r1, r2, r3}
 8007112:	b507      	push	{r0, r1, r2, lr}
 8007114:	4906      	ldr	r1, [pc, #24]	@ (8007130 <iprintf+0x20>)
 8007116:	ab04      	add	r3, sp, #16
 8007118:	6808      	ldr	r0, [r1, #0]
 800711a:	f853 2b04 	ldr.w	r2, [r3], #4
 800711e:	6881      	ldr	r1, [r0, #8]
 8007120:	9301      	str	r3, [sp, #4]
 8007122:	f000 fb01 	bl	8007728 <_vfiprintf_r>
 8007126:	b003      	add	sp, #12
 8007128:	f85d eb04 	ldr.w	lr, [sp], #4
 800712c:	b004      	add	sp, #16
 800712e:	4770      	bx	lr
 8007130:	20000028 	.word	0x20000028

08007134 <_puts_r>:
 8007134:	6a03      	ldr	r3, [r0, #32]
 8007136:	b570      	push	{r4, r5, r6, lr}
 8007138:	6884      	ldr	r4, [r0, #8]
 800713a:	4605      	mov	r5, r0
 800713c:	460e      	mov	r6, r1
 800713e:	b90b      	cbnz	r3, 8007144 <_puts_r+0x10>
 8007140:	f7ff ffb0 	bl	80070a4 <__sinit>
 8007144:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007146:	07db      	lsls	r3, r3, #31
 8007148:	d405      	bmi.n	8007156 <_puts_r+0x22>
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	0598      	lsls	r0, r3, #22
 800714e:	d402      	bmi.n	8007156 <_puts_r+0x22>
 8007150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007152:	f000 f99e 	bl	8007492 <__retarget_lock_acquire_recursive>
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	0719      	lsls	r1, r3, #28
 800715a:	d502      	bpl.n	8007162 <_puts_r+0x2e>
 800715c:	6923      	ldr	r3, [r4, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d135      	bne.n	80071ce <_puts_r+0x9a>
 8007162:	4621      	mov	r1, r4
 8007164:	4628      	mov	r0, r5
 8007166:	f000 f8c5 	bl	80072f4 <__swsetup_r>
 800716a:	b380      	cbz	r0, 80071ce <_puts_r+0x9a>
 800716c:	f04f 35ff 	mov.w	r5, #4294967295
 8007170:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007172:	07da      	lsls	r2, r3, #31
 8007174:	d405      	bmi.n	8007182 <_puts_r+0x4e>
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	059b      	lsls	r3, r3, #22
 800717a:	d402      	bmi.n	8007182 <_puts_r+0x4e>
 800717c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800717e:	f000 f989 	bl	8007494 <__retarget_lock_release_recursive>
 8007182:	4628      	mov	r0, r5
 8007184:	bd70      	pop	{r4, r5, r6, pc}
 8007186:	2b00      	cmp	r3, #0
 8007188:	da04      	bge.n	8007194 <_puts_r+0x60>
 800718a:	69a2      	ldr	r2, [r4, #24]
 800718c:	429a      	cmp	r2, r3
 800718e:	dc17      	bgt.n	80071c0 <_puts_r+0x8c>
 8007190:	290a      	cmp	r1, #10
 8007192:	d015      	beq.n	80071c0 <_puts_r+0x8c>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	1c5a      	adds	r2, r3, #1
 8007198:	6022      	str	r2, [r4, #0]
 800719a:	7019      	strb	r1, [r3, #0]
 800719c:	68a3      	ldr	r3, [r4, #8]
 800719e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80071a2:	3b01      	subs	r3, #1
 80071a4:	60a3      	str	r3, [r4, #8]
 80071a6:	2900      	cmp	r1, #0
 80071a8:	d1ed      	bne.n	8007186 <_puts_r+0x52>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	da11      	bge.n	80071d2 <_puts_r+0x9e>
 80071ae:	4622      	mov	r2, r4
 80071b0:	210a      	movs	r1, #10
 80071b2:	4628      	mov	r0, r5
 80071b4:	f000 f85f 	bl	8007276 <__swbuf_r>
 80071b8:	3001      	adds	r0, #1
 80071ba:	d0d7      	beq.n	800716c <_puts_r+0x38>
 80071bc:	250a      	movs	r5, #10
 80071be:	e7d7      	b.n	8007170 <_puts_r+0x3c>
 80071c0:	4622      	mov	r2, r4
 80071c2:	4628      	mov	r0, r5
 80071c4:	f000 f857 	bl	8007276 <__swbuf_r>
 80071c8:	3001      	adds	r0, #1
 80071ca:	d1e7      	bne.n	800719c <_puts_r+0x68>
 80071cc:	e7ce      	b.n	800716c <_puts_r+0x38>
 80071ce:	3e01      	subs	r6, #1
 80071d0:	e7e4      	b.n	800719c <_puts_r+0x68>
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	6022      	str	r2, [r4, #0]
 80071d8:	220a      	movs	r2, #10
 80071da:	701a      	strb	r2, [r3, #0]
 80071dc:	e7ee      	b.n	80071bc <_puts_r+0x88>
	...

080071e0 <puts>:
 80071e0:	4b02      	ldr	r3, [pc, #8]	@ (80071ec <puts+0xc>)
 80071e2:	4601      	mov	r1, r0
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	f7ff bfa5 	b.w	8007134 <_puts_r>
 80071ea:	bf00      	nop
 80071ec:	20000028 	.word	0x20000028

080071f0 <__sread>:
 80071f0:	b510      	push	{r4, lr}
 80071f2:	460c      	mov	r4, r1
 80071f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f8:	f000 f8fc 	bl	80073f4 <_read_r>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	bfab      	itete	ge
 8007200:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007202:	89a3      	ldrhlt	r3, [r4, #12]
 8007204:	181b      	addge	r3, r3, r0
 8007206:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800720a:	bfac      	ite	ge
 800720c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800720e:	81a3      	strhlt	r3, [r4, #12]
 8007210:	bd10      	pop	{r4, pc}

08007212 <__swrite>:
 8007212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007216:	461f      	mov	r7, r3
 8007218:	898b      	ldrh	r3, [r1, #12]
 800721a:	05db      	lsls	r3, r3, #23
 800721c:	4605      	mov	r5, r0
 800721e:	460c      	mov	r4, r1
 8007220:	4616      	mov	r6, r2
 8007222:	d505      	bpl.n	8007230 <__swrite+0x1e>
 8007224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007228:	2302      	movs	r3, #2
 800722a:	2200      	movs	r2, #0
 800722c:	f000 f8d0 	bl	80073d0 <_lseek_r>
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007236:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800723a:	81a3      	strh	r3, [r4, #12]
 800723c:	4632      	mov	r2, r6
 800723e:	463b      	mov	r3, r7
 8007240:	4628      	mov	r0, r5
 8007242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007246:	f000 b8e7 	b.w	8007418 <_write_r>

0800724a <__sseek>:
 800724a:	b510      	push	{r4, lr}
 800724c:	460c      	mov	r4, r1
 800724e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007252:	f000 f8bd 	bl	80073d0 <_lseek_r>
 8007256:	1c43      	adds	r3, r0, #1
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	bf15      	itete	ne
 800725c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800725e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007262:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007266:	81a3      	strheq	r3, [r4, #12]
 8007268:	bf18      	it	ne
 800726a:	81a3      	strhne	r3, [r4, #12]
 800726c:	bd10      	pop	{r4, pc}

0800726e <__sclose>:
 800726e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007272:	f000 b89d 	b.w	80073b0 <_close_r>

08007276 <__swbuf_r>:
 8007276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007278:	460e      	mov	r6, r1
 800727a:	4614      	mov	r4, r2
 800727c:	4605      	mov	r5, r0
 800727e:	b118      	cbz	r0, 8007288 <__swbuf_r+0x12>
 8007280:	6a03      	ldr	r3, [r0, #32]
 8007282:	b90b      	cbnz	r3, 8007288 <__swbuf_r+0x12>
 8007284:	f7ff ff0e 	bl	80070a4 <__sinit>
 8007288:	69a3      	ldr	r3, [r4, #24]
 800728a:	60a3      	str	r3, [r4, #8]
 800728c:	89a3      	ldrh	r3, [r4, #12]
 800728e:	071a      	lsls	r2, r3, #28
 8007290:	d501      	bpl.n	8007296 <__swbuf_r+0x20>
 8007292:	6923      	ldr	r3, [r4, #16]
 8007294:	b943      	cbnz	r3, 80072a8 <__swbuf_r+0x32>
 8007296:	4621      	mov	r1, r4
 8007298:	4628      	mov	r0, r5
 800729a:	f000 f82b 	bl	80072f4 <__swsetup_r>
 800729e:	b118      	cbz	r0, 80072a8 <__swbuf_r+0x32>
 80072a0:	f04f 37ff 	mov.w	r7, #4294967295
 80072a4:	4638      	mov	r0, r7
 80072a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	6922      	ldr	r2, [r4, #16]
 80072ac:	1a98      	subs	r0, r3, r2
 80072ae:	6963      	ldr	r3, [r4, #20]
 80072b0:	b2f6      	uxtb	r6, r6
 80072b2:	4283      	cmp	r3, r0
 80072b4:	4637      	mov	r7, r6
 80072b6:	dc05      	bgt.n	80072c4 <__swbuf_r+0x4e>
 80072b8:	4621      	mov	r1, r4
 80072ba:	4628      	mov	r0, r5
 80072bc:	f000 fd5e 	bl	8007d7c <_fflush_r>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d1ed      	bne.n	80072a0 <__swbuf_r+0x2a>
 80072c4:	68a3      	ldr	r3, [r4, #8]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	60a3      	str	r3, [r4, #8]
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	6022      	str	r2, [r4, #0]
 80072d0:	701e      	strb	r6, [r3, #0]
 80072d2:	6962      	ldr	r2, [r4, #20]
 80072d4:	1c43      	adds	r3, r0, #1
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d004      	beq.n	80072e4 <__swbuf_r+0x6e>
 80072da:	89a3      	ldrh	r3, [r4, #12]
 80072dc:	07db      	lsls	r3, r3, #31
 80072de:	d5e1      	bpl.n	80072a4 <__swbuf_r+0x2e>
 80072e0:	2e0a      	cmp	r6, #10
 80072e2:	d1df      	bne.n	80072a4 <__swbuf_r+0x2e>
 80072e4:	4621      	mov	r1, r4
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 fd48 	bl	8007d7c <_fflush_r>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d0d9      	beq.n	80072a4 <__swbuf_r+0x2e>
 80072f0:	e7d6      	b.n	80072a0 <__swbuf_r+0x2a>
	...

080072f4 <__swsetup_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	4b29      	ldr	r3, [pc, #164]	@ (800739c <__swsetup_r+0xa8>)
 80072f8:	4605      	mov	r5, r0
 80072fa:	6818      	ldr	r0, [r3, #0]
 80072fc:	460c      	mov	r4, r1
 80072fe:	b118      	cbz	r0, 8007308 <__swsetup_r+0x14>
 8007300:	6a03      	ldr	r3, [r0, #32]
 8007302:	b90b      	cbnz	r3, 8007308 <__swsetup_r+0x14>
 8007304:	f7ff fece 	bl	80070a4 <__sinit>
 8007308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800730c:	0719      	lsls	r1, r3, #28
 800730e:	d422      	bmi.n	8007356 <__swsetup_r+0x62>
 8007310:	06da      	lsls	r2, r3, #27
 8007312:	d407      	bmi.n	8007324 <__swsetup_r+0x30>
 8007314:	2209      	movs	r2, #9
 8007316:	602a      	str	r2, [r5, #0]
 8007318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800731c:	81a3      	strh	r3, [r4, #12]
 800731e:	f04f 30ff 	mov.w	r0, #4294967295
 8007322:	e033      	b.n	800738c <__swsetup_r+0x98>
 8007324:	0758      	lsls	r0, r3, #29
 8007326:	d512      	bpl.n	800734e <__swsetup_r+0x5a>
 8007328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800732a:	b141      	cbz	r1, 800733e <__swsetup_r+0x4a>
 800732c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007330:	4299      	cmp	r1, r3
 8007332:	d002      	beq.n	800733a <__swsetup_r+0x46>
 8007334:	4628      	mov	r0, r5
 8007336:	f000 f8cd 	bl	80074d4 <_free_r>
 800733a:	2300      	movs	r3, #0
 800733c:	6363      	str	r3, [r4, #52]	@ 0x34
 800733e:	89a3      	ldrh	r3, [r4, #12]
 8007340:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007344:	81a3      	strh	r3, [r4, #12]
 8007346:	2300      	movs	r3, #0
 8007348:	6063      	str	r3, [r4, #4]
 800734a:	6923      	ldr	r3, [r4, #16]
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	89a3      	ldrh	r3, [r4, #12]
 8007350:	f043 0308 	orr.w	r3, r3, #8
 8007354:	81a3      	strh	r3, [r4, #12]
 8007356:	6923      	ldr	r3, [r4, #16]
 8007358:	b94b      	cbnz	r3, 800736e <__swsetup_r+0x7a>
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007364:	d003      	beq.n	800736e <__swsetup_r+0x7a>
 8007366:	4621      	mov	r1, r4
 8007368:	4628      	mov	r0, r5
 800736a:	f000 fd67 	bl	8007e3c <__smakebuf_r>
 800736e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007372:	f013 0201 	ands.w	r2, r3, #1
 8007376:	d00a      	beq.n	800738e <__swsetup_r+0x9a>
 8007378:	2200      	movs	r2, #0
 800737a:	60a2      	str	r2, [r4, #8]
 800737c:	6962      	ldr	r2, [r4, #20]
 800737e:	4252      	negs	r2, r2
 8007380:	61a2      	str	r2, [r4, #24]
 8007382:	6922      	ldr	r2, [r4, #16]
 8007384:	b942      	cbnz	r2, 8007398 <__swsetup_r+0xa4>
 8007386:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800738a:	d1c5      	bne.n	8007318 <__swsetup_r+0x24>
 800738c:	bd38      	pop	{r3, r4, r5, pc}
 800738e:	0799      	lsls	r1, r3, #30
 8007390:	bf58      	it	pl
 8007392:	6962      	ldrpl	r2, [r4, #20]
 8007394:	60a2      	str	r2, [r4, #8]
 8007396:	e7f4      	b.n	8007382 <__swsetup_r+0x8e>
 8007398:	2000      	movs	r0, #0
 800739a:	e7f7      	b.n	800738c <__swsetup_r+0x98>
 800739c:	20000028 	.word	0x20000028

080073a0 <memset>:
 80073a0:	4402      	add	r2, r0
 80073a2:	4603      	mov	r3, r0
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d100      	bne.n	80073aa <memset+0xa>
 80073a8:	4770      	bx	lr
 80073aa:	f803 1b01 	strb.w	r1, [r3], #1
 80073ae:	e7f9      	b.n	80073a4 <memset+0x4>

080073b0 <_close_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	4d06      	ldr	r5, [pc, #24]	@ (80073cc <_close_r+0x1c>)
 80073b4:	2300      	movs	r3, #0
 80073b6:	4604      	mov	r4, r0
 80073b8:	4608      	mov	r0, r1
 80073ba:	602b      	str	r3, [r5, #0]
 80073bc:	f7fc f867 	bl	800348e <_close>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d102      	bne.n	80073ca <_close_r+0x1a>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	b103      	cbz	r3, 80073ca <_close_r+0x1a>
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	20025d58 	.word	0x20025d58

080073d0 <_lseek_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4d07      	ldr	r5, [pc, #28]	@ (80073f0 <_lseek_r+0x20>)
 80073d4:	4604      	mov	r4, r0
 80073d6:	4608      	mov	r0, r1
 80073d8:	4611      	mov	r1, r2
 80073da:	2200      	movs	r2, #0
 80073dc:	602a      	str	r2, [r5, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	f7fc f87c 	bl	80034dc <_lseek>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	d102      	bne.n	80073ee <_lseek_r+0x1e>
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	b103      	cbz	r3, 80073ee <_lseek_r+0x1e>
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	bd38      	pop	{r3, r4, r5, pc}
 80073f0:	20025d58 	.word	0x20025d58

080073f4 <_read_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4d07      	ldr	r5, [pc, #28]	@ (8007414 <_read_r+0x20>)
 80073f8:	4604      	mov	r4, r0
 80073fa:	4608      	mov	r0, r1
 80073fc:	4611      	mov	r1, r2
 80073fe:	2200      	movs	r2, #0
 8007400:	602a      	str	r2, [r5, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	f7fc f80a 	bl	800341c <_read>
 8007408:	1c43      	adds	r3, r0, #1
 800740a:	d102      	bne.n	8007412 <_read_r+0x1e>
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	b103      	cbz	r3, 8007412 <_read_r+0x1e>
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	bd38      	pop	{r3, r4, r5, pc}
 8007414:	20025d58 	.word	0x20025d58

08007418 <_write_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4d07      	ldr	r5, [pc, #28]	@ (8007438 <_write_r+0x20>)
 800741c:	4604      	mov	r4, r0
 800741e:	4608      	mov	r0, r1
 8007420:	4611      	mov	r1, r2
 8007422:	2200      	movs	r2, #0
 8007424:	602a      	str	r2, [r5, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	f7fc f815 	bl	8003456 <_write>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d102      	bne.n	8007436 <_write_r+0x1e>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	b103      	cbz	r3, 8007436 <_write_r+0x1e>
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	20025d58 	.word	0x20025d58

0800743c <__errno>:
 800743c:	4b01      	ldr	r3, [pc, #4]	@ (8007444 <__errno+0x8>)
 800743e:	6818      	ldr	r0, [r3, #0]
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20000028 	.word	0x20000028

08007448 <__libc_init_array>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	4d0d      	ldr	r5, [pc, #52]	@ (8007480 <__libc_init_array+0x38>)
 800744c:	4c0d      	ldr	r4, [pc, #52]	@ (8007484 <__libc_init_array+0x3c>)
 800744e:	1b64      	subs	r4, r4, r5
 8007450:	10a4      	asrs	r4, r4, #2
 8007452:	2600      	movs	r6, #0
 8007454:	42a6      	cmp	r6, r4
 8007456:	d109      	bne.n	800746c <__libc_init_array+0x24>
 8007458:	4d0b      	ldr	r5, [pc, #44]	@ (8007488 <__libc_init_array+0x40>)
 800745a:	4c0c      	ldr	r4, [pc, #48]	@ (800748c <__libc_init_array+0x44>)
 800745c:	f000 fda8 	bl	8007fb0 <_init>
 8007460:	1b64      	subs	r4, r4, r5
 8007462:	10a4      	asrs	r4, r4, #2
 8007464:	2600      	movs	r6, #0
 8007466:	42a6      	cmp	r6, r4
 8007468:	d105      	bne.n	8007476 <__libc_init_array+0x2e>
 800746a:	bd70      	pop	{r4, r5, r6, pc}
 800746c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007470:	4798      	blx	r3
 8007472:	3601      	adds	r6, #1
 8007474:	e7ee      	b.n	8007454 <__libc_init_array+0xc>
 8007476:	f855 3b04 	ldr.w	r3, [r5], #4
 800747a:	4798      	blx	r3
 800747c:	3601      	adds	r6, #1
 800747e:	e7f2      	b.n	8007466 <__libc_init_array+0x1e>
 8007480:	080092d0 	.word	0x080092d0
 8007484:	080092d0 	.word	0x080092d0
 8007488:	080092d0 	.word	0x080092d0
 800748c:	080092d4 	.word	0x080092d4

08007490 <__retarget_lock_init_recursive>:
 8007490:	4770      	bx	lr

08007492 <__retarget_lock_acquire_recursive>:
 8007492:	4770      	bx	lr

08007494 <__retarget_lock_release_recursive>:
 8007494:	4770      	bx	lr
	...

08007498 <__assert_func>:
 8007498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800749a:	4614      	mov	r4, r2
 800749c:	461a      	mov	r2, r3
 800749e:	4b09      	ldr	r3, [pc, #36]	@ (80074c4 <__assert_func+0x2c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4605      	mov	r5, r0
 80074a4:	68d8      	ldr	r0, [r3, #12]
 80074a6:	b954      	cbnz	r4, 80074be <__assert_func+0x26>
 80074a8:	4b07      	ldr	r3, [pc, #28]	@ (80074c8 <__assert_func+0x30>)
 80074aa:	461c      	mov	r4, r3
 80074ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074b0:	9100      	str	r1, [sp, #0]
 80074b2:	462b      	mov	r3, r5
 80074b4:	4905      	ldr	r1, [pc, #20]	@ (80074cc <__assert_func+0x34>)
 80074b6:	f000 fc89 	bl	8007dcc <fiprintf>
 80074ba:	f000 fd2d 	bl	8007f18 <abort>
 80074be:	4b04      	ldr	r3, [pc, #16]	@ (80074d0 <__assert_func+0x38>)
 80074c0:	e7f4      	b.n	80074ac <__assert_func+0x14>
 80074c2:	bf00      	nop
 80074c4:	20000028 	.word	0x20000028
 80074c8:	08009292 	.word	0x08009292
 80074cc:	08009264 	.word	0x08009264
 80074d0:	08009257 	.word	0x08009257

080074d4 <_free_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4605      	mov	r5, r0
 80074d8:	2900      	cmp	r1, #0
 80074da:	d041      	beq.n	8007560 <_free_r+0x8c>
 80074dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074e0:	1f0c      	subs	r4, r1, #4
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	bfb8      	it	lt
 80074e6:	18e4      	addlt	r4, r4, r3
 80074e8:	f000 f8e8 	bl	80076bc <__malloc_lock>
 80074ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007564 <_free_r+0x90>)
 80074ee:	6813      	ldr	r3, [r2, #0]
 80074f0:	b933      	cbnz	r3, 8007500 <_free_r+0x2c>
 80074f2:	6063      	str	r3, [r4, #4]
 80074f4:	6014      	str	r4, [r2, #0]
 80074f6:	4628      	mov	r0, r5
 80074f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074fc:	f000 b8e4 	b.w	80076c8 <__malloc_unlock>
 8007500:	42a3      	cmp	r3, r4
 8007502:	d908      	bls.n	8007516 <_free_r+0x42>
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	1821      	adds	r1, r4, r0
 8007508:	428b      	cmp	r3, r1
 800750a:	bf01      	itttt	eq
 800750c:	6819      	ldreq	r1, [r3, #0]
 800750e:	685b      	ldreq	r3, [r3, #4]
 8007510:	1809      	addeq	r1, r1, r0
 8007512:	6021      	streq	r1, [r4, #0]
 8007514:	e7ed      	b.n	80074f2 <_free_r+0x1e>
 8007516:	461a      	mov	r2, r3
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	b10b      	cbz	r3, 8007520 <_free_r+0x4c>
 800751c:	42a3      	cmp	r3, r4
 800751e:	d9fa      	bls.n	8007516 <_free_r+0x42>
 8007520:	6811      	ldr	r1, [r2, #0]
 8007522:	1850      	adds	r0, r2, r1
 8007524:	42a0      	cmp	r0, r4
 8007526:	d10b      	bne.n	8007540 <_free_r+0x6c>
 8007528:	6820      	ldr	r0, [r4, #0]
 800752a:	4401      	add	r1, r0
 800752c:	1850      	adds	r0, r2, r1
 800752e:	4283      	cmp	r3, r0
 8007530:	6011      	str	r1, [r2, #0]
 8007532:	d1e0      	bne.n	80074f6 <_free_r+0x22>
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	6053      	str	r3, [r2, #4]
 800753a:	4408      	add	r0, r1
 800753c:	6010      	str	r0, [r2, #0]
 800753e:	e7da      	b.n	80074f6 <_free_r+0x22>
 8007540:	d902      	bls.n	8007548 <_free_r+0x74>
 8007542:	230c      	movs	r3, #12
 8007544:	602b      	str	r3, [r5, #0]
 8007546:	e7d6      	b.n	80074f6 <_free_r+0x22>
 8007548:	6820      	ldr	r0, [r4, #0]
 800754a:	1821      	adds	r1, r4, r0
 800754c:	428b      	cmp	r3, r1
 800754e:	bf04      	itt	eq
 8007550:	6819      	ldreq	r1, [r3, #0]
 8007552:	685b      	ldreq	r3, [r3, #4]
 8007554:	6063      	str	r3, [r4, #4]
 8007556:	bf04      	itt	eq
 8007558:	1809      	addeq	r1, r1, r0
 800755a:	6021      	streq	r1, [r4, #0]
 800755c:	6054      	str	r4, [r2, #4]
 800755e:	e7ca      	b.n	80074f6 <_free_r+0x22>
 8007560:	bd38      	pop	{r3, r4, r5, pc}
 8007562:	bf00      	nop
 8007564:	20025d64 	.word	0x20025d64

08007568 <malloc>:
 8007568:	4b02      	ldr	r3, [pc, #8]	@ (8007574 <malloc+0xc>)
 800756a:	4601      	mov	r1, r0
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	f000 b825 	b.w	80075bc <_malloc_r>
 8007572:	bf00      	nop
 8007574:	20000028 	.word	0x20000028

08007578 <sbrk_aligned>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	4e0f      	ldr	r6, [pc, #60]	@ (80075b8 <sbrk_aligned+0x40>)
 800757c:	460c      	mov	r4, r1
 800757e:	6831      	ldr	r1, [r6, #0]
 8007580:	4605      	mov	r5, r0
 8007582:	b911      	cbnz	r1, 800758a <sbrk_aligned+0x12>
 8007584:	f000 fcb8 	bl	8007ef8 <_sbrk_r>
 8007588:	6030      	str	r0, [r6, #0]
 800758a:	4621      	mov	r1, r4
 800758c:	4628      	mov	r0, r5
 800758e:	f000 fcb3 	bl	8007ef8 <_sbrk_r>
 8007592:	1c43      	adds	r3, r0, #1
 8007594:	d103      	bne.n	800759e <sbrk_aligned+0x26>
 8007596:	f04f 34ff 	mov.w	r4, #4294967295
 800759a:	4620      	mov	r0, r4
 800759c:	bd70      	pop	{r4, r5, r6, pc}
 800759e:	1cc4      	adds	r4, r0, #3
 80075a0:	f024 0403 	bic.w	r4, r4, #3
 80075a4:	42a0      	cmp	r0, r4
 80075a6:	d0f8      	beq.n	800759a <sbrk_aligned+0x22>
 80075a8:	1a21      	subs	r1, r4, r0
 80075aa:	4628      	mov	r0, r5
 80075ac:	f000 fca4 	bl	8007ef8 <_sbrk_r>
 80075b0:	3001      	adds	r0, #1
 80075b2:	d1f2      	bne.n	800759a <sbrk_aligned+0x22>
 80075b4:	e7ef      	b.n	8007596 <sbrk_aligned+0x1e>
 80075b6:	bf00      	nop
 80075b8:	20025d60 	.word	0x20025d60

080075bc <_malloc_r>:
 80075bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075c0:	1ccd      	adds	r5, r1, #3
 80075c2:	f025 0503 	bic.w	r5, r5, #3
 80075c6:	3508      	adds	r5, #8
 80075c8:	2d0c      	cmp	r5, #12
 80075ca:	bf38      	it	cc
 80075cc:	250c      	movcc	r5, #12
 80075ce:	2d00      	cmp	r5, #0
 80075d0:	4606      	mov	r6, r0
 80075d2:	db01      	blt.n	80075d8 <_malloc_r+0x1c>
 80075d4:	42a9      	cmp	r1, r5
 80075d6:	d904      	bls.n	80075e2 <_malloc_r+0x26>
 80075d8:	230c      	movs	r3, #12
 80075da:	6033      	str	r3, [r6, #0]
 80075dc:	2000      	movs	r0, #0
 80075de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076b8 <_malloc_r+0xfc>
 80075e6:	f000 f869 	bl	80076bc <__malloc_lock>
 80075ea:	f8d8 3000 	ldr.w	r3, [r8]
 80075ee:	461c      	mov	r4, r3
 80075f0:	bb44      	cbnz	r4, 8007644 <_malloc_r+0x88>
 80075f2:	4629      	mov	r1, r5
 80075f4:	4630      	mov	r0, r6
 80075f6:	f7ff ffbf 	bl	8007578 <sbrk_aligned>
 80075fa:	1c43      	adds	r3, r0, #1
 80075fc:	4604      	mov	r4, r0
 80075fe:	d158      	bne.n	80076b2 <_malloc_r+0xf6>
 8007600:	f8d8 4000 	ldr.w	r4, [r8]
 8007604:	4627      	mov	r7, r4
 8007606:	2f00      	cmp	r7, #0
 8007608:	d143      	bne.n	8007692 <_malloc_r+0xd6>
 800760a:	2c00      	cmp	r4, #0
 800760c:	d04b      	beq.n	80076a6 <_malloc_r+0xea>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	4639      	mov	r1, r7
 8007612:	4630      	mov	r0, r6
 8007614:	eb04 0903 	add.w	r9, r4, r3
 8007618:	f000 fc6e 	bl	8007ef8 <_sbrk_r>
 800761c:	4581      	cmp	r9, r0
 800761e:	d142      	bne.n	80076a6 <_malloc_r+0xea>
 8007620:	6821      	ldr	r1, [r4, #0]
 8007622:	1a6d      	subs	r5, r5, r1
 8007624:	4629      	mov	r1, r5
 8007626:	4630      	mov	r0, r6
 8007628:	f7ff ffa6 	bl	8007578 <sbrk_aligned>
 800762c:	3001      	adds	r0, #1
 800762e:	d03a      	beq.n	80076a6 <_malloc_r+0xea>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	442b      	add	r3, r5
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	f8d8 3000 	ldr.w	r3, [r8]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	bb62      	cbnz	r2, 8007698 <_malloc_r+0xdc>
 800763e:	f8c8 7000 	str.w	r7, [r8]
 8007642:	e00f      	b.n	8007664 <_malloc_r+0xa8>
 8007644:	6822      	ldr	r2, [r4, #0]
 8007646:	1b52      	subs	r2, r2, r5
 8007648:	d420      	bmi.n	800768c <_malloc_r+0xd0>
 800764a:	2a0b      	cmp	r2, #11
 800764c:	d917      	bls.n	800767e <_malloc_r+0xc2>
 800764e:	1961      	adds	r1, r4, r5
 8007650:	42a3      	cmp	r3, r4
 8007652:	6025      	str	r5, [r4, #0]
 8007654:	bf18      	it	ne
 8007656:	6059      	strne	r1, [r3, #4]
 8007658:	6863      	ldr	r3, [r4, #4]
 800765a:	bf08      	it	eq
 800765c:	f8c8 1000 	streq.w	r1, [r8]
 8007660:	5162      	str	r2, [r4, r5]
 8007662:	604b      	str	r3, [r1, #4]
 8007664:	4630      	mov	r0, r6
 8007666:	f000 f82f 	bl	80076c8 <__malloc_unlock>
 800766a:	f104 000b 	add.w	r0, r4, #11
 800766e:	1d23      	adds	r3, r4, #4
 8007670:	f020 0007 	bic.w	r0, r0, #7
 8007674:	1ac2      	subs	r2, r0, r3
 8007676:	bf1c      	itt	ne
 8007678:	1a1b      	subne	r3, r3, r0
 800767a:	50a3      	strne	r3, [r4, r2]
 800767c:	e7af      	b.n	80075de <_malloc_r+0x22>
 800767e:	6862      	ldr	r2, [r4, #4]
 8007680:	42a3      	cmp	r3, r4
 8007682:	bf0c      	ite	eq
 8007684:	f8c8 2000 	streq.w	r2, [r8]
 8007688:	605a      	strne	r2, [r3, #4]
 800768a:	e7eb      	b.n	8007664 <_malloc_r+0xa8>
 800768c:	4623      	mov	r3, r4
 800768e:	6864      	ldr	r4, [r4, #4]
 8007690:	e7ae      	b.n	80075f0 <_malloc_r+0x34>
 8007692:	463c      	mov	r4, r7
 8007694:	687f      	ldr	r7, [r7, #4]
 8007696:	e7b6      	b.n	8007606 <_malloc_r+0x4a>
 8007698:	461a      	mov	r2, r3
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	42a3      	cmp	r3, r4
 800769e:	d1fb      	bne.n	8007698 <_malloc_r+0xdc>
 80076a0:	2300      	movs	r3, #0
 80076a2:	6053      	str	r3, [r2, #4]
 80076a4:	e7de      	b.n	8007664 <_malloc_r+0xa8>
 80076a6:	230c      	movs	r3, #12
 80076a8:	6033      	str	r3, [r6, #0]
 80076aa:	4630      	mov	r0, r6
 80076ac:	f000 f80c 	bl	80076c8 <__malloc_unlock>
 80076b0:	e794      	b.n	80075dc <_malloc_r+0x20>
 80076b2:	6005      	str	r5, [r0, #0]
 80076b4:	e7d6      	b.n	8007664 <_malloc_r+0xa8>
 80076b6:	bf00      	nop
 80076b8:	20025d64 	.word	0x20025d64

080076bc <__malloc_lock>:
 80076bc:	4801      	ldr	r0, [pc, #4]	@ (80076c4 <__malloc_lock+0x8>)
 80076be:	f7ff bee8 	b.w	8007492 <__retarget_lock_acquire_recursive>
 80076c2:	bf00      	nop
 80076c4:	20025d5c 	.word	0x20025d5c

080076c8 <__malloc_unlock>:
 80076c8:	4801      	ldr	r0, [pc, #4]	@ (80076d0 <__malloc_unlock+0x8>)
 80076ca:	f7ff bee3 	b.w	8007494 <__retarget_lock_release_recursive>
 80076ce:	bf00      	nop
 80076d0:	20025d5c 	.word	0x20025d5c

080076d4 <__sfputc_r>:
 80076d4:	6893      	ldr	r3, [r2, #8]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	b410      	push	{r4}
 80076dc:	6093      	str	r3, [r2, #8]
 80076de:	da08      	bge.n	80076f2 <__sfputc_r+0x1e>
 80076e0:	6994      	ldr	r4, [r2, #24]
 80076e2:	42a3      	cmp	r3, r4
 80076e4:	db01      	blt.n	80076ea <__sfputc_r+0x16>
 80076e6:	290a      	cmp	r1, #10
 80076e8:	d103      	bne.n	80076f2 <__sfputc_r+0x1e>
 80076ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ee:	f7ff bdc2 	b.w	8007276 <__swbuf_r>
 80076f2:	6813      	ldr	r3, [r2, #0]
 80076f4:	1c58      	adds	r0, r3, #1
 80076f6:	6010      	str	r0, [r2, #0]
 80076f8:	7019      	strb	r1, [r3, #0]
 80076fa:	4608      	mov	r0, r1
 80076fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007700:	4770      	bx	lr

08007702 <__sfputs_r>:
 8007702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007704:	4606      	mov	r6, r0
 8007706:	460f      	mov	r7, r1
 8007708:	4614      	mov	r4, r2
 800770a:	18d5      	adds	r5, r2, r3
 800770c:	42ac      	cmp	r4, r5
 800770e:	d101      	bne.n	8007714 <__sfputs_r+0x12>
 8007710:	2000      	movs	r0, #0
 8007712:	e007      	b.n	8007724 <__sfputs_r+0x22>
 8007714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007718:	463a      	mov	r2, r7
 800771a:	4630      	mov	r0, r6
 800771c:	f7ff ffda 	bl	80076d4 <__sfputc_r>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d1f3      	bne.n	800770c <__sfputs_r+0xa>
 8007724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007728 <_vfiprintf_r>:
 8007728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	460d      	mov	r5, r1
 800772e:	b09d      	sub	sp, #116	@ 0x74
 8007730:	4614      	mov	r4, r2
 8007732:	4698      	mov	r8, r3
 8007734:	4606      	mov	r6, r0
 8007736:	b118      	cbz	r0, 8007740 <_vfiprintf_r+0x18>
 8007738:	6a03      	ldr	r3, [r0, #32]
 800773a:	b90b      	cbnz	r3, 8007740 <_vfiprintf_r+0x18>
 800773c:	f7ff fcb2 	bl	80070a4 <__sinit>
 8007740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007742:	07d9      	lsls	r1, r3, #31
 8007744:	d405      	bmi.n	8007752 <_vfiprintf_r+0x2a>
 8007746:	89ab      	ldrh	r3, [r5, #12]
 8007748:	059a      	lsls	r2, r3, #22
 800774a:	d402      	bmi.n	8007752 <_vfiprintf_r+0x2a>
 800774c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800774e:	f7ff fea0 	bl	8007492 <__retarget_lock_acquire_recursive>
 8007752:	89ab      	ldrh	r3, [r5, #12]
 8007754:	071b      	lsls	r3, r3, #28
 8007756:	d501      	bpl.n	800775c <_vfiprintf_r+0x34>
 8007758:	692b      	ldr	r3, [r5, #16]
 800775a:	b99b      	cbnz	r3, 8007784 <_vfiprintf_r+0x5c>
 800775c:	4629      	mov	r1, r5
 800775e:	4630      	mov	r0, r6
 8007760:	f7ff fdc8 	bl	80072f4 <__swsetup_r>
 8007764:	b170      	cbz	r0, 8007784 <_vfiprintf_r+0x5c>
 8007766:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007768:	07dc      	lsls	r4, r3, #31
 800776a:	d504      	bpl.n	8007776 <_vfiprintf_r+0x4e>
 800776c:	f04f 30ff 	mov.w	r0, #4294967295
 8007770:	b01d      	add	sp, #116	@ 0x74
 8007772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007776:	89ab      	ldrh	r3, [r5, #12]
 8007778:	0598      	lsls	r0, r3, #22
 800777a:	d4f7      	bmi.n	800776c <_vfiprintf_r+0x44>
 800777c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800777e:	f7ff fe89 	bl	8007494 <__retarget_lock_release_recursive>
 8007782:	e7f3      	b.n	800776c <_vfiprintf_r+0x44>
 8007784:	2300      	movs	r3, #0
 8007786:	9309      	str	r3, [sp, #36]	@ 0x24
 8007788:	2320      	movs	r3, #32
 800778a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800778e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007792:	2330      	movs	r3, #48	@ 0x30
 8007794:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007944 <_vfiprintf_r+0x21c>
 8007798:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800779c:	f04f 0901 	mov.w	r9, #1
 80077a0:	4623      	mov	r3, r4
 80077a2:	469a      	mov	sl, r3
 80077a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077a8:	b10a      	cbz	r2, 80077ae <_vfiprintf_r+0x86>
 80077aa:	2a25      	cmp	r2, #37	@ 0x25
 80077ac:	d1f9      	bne.n	80077a2 <_vfiprintf_r+0x7a>
 80077ae:	ebba 0b04 	subs.w	fp, sl, r4
 80077b2:	d00b      	beq.n	80077cc <_vfiprintf_r+0xa4>
 80077b4:	465b      	mov	r3, fp
 80077b6:	4622      	mov	r2, r4
 80077b8:	4629      	mov	r1, r5
 80077ba:	4630      	mov	r0, r6
 80077bc:	f7ff ffa1 	bl	8007702 <__sfputs_r>
 80077c0:	3001      	adds	r0, #1
 80077c2:	f000 80a7 	beq.w	8007914 <_vfiprintf_r+0x1ec>
 80077c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077c8:	445a      	add	r2, fp
 80077ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80077cc:	f89a 3000 	ldrb.w	r3, [sl]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 809f 	beq.w	8007914 <_vfiprintf_r+0x1ec>
 80077d6:	2300      	movs	r3, #0
 80077d8:	f04f 32ff 	mov.w	r2, #4294967295
 80077dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077e0:	f10a 0a01 	add.w	sl, sl, #1
 80077e4:	9304      	str	r3, [sp, #16]
 80077e6:	9307      	str	r3, [sp, #28]
 80077e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80077ee:	4654      	mov	r4, sl
 80077f0:	2205      	movs	r2, #5
 80077f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f6:	4853      	ldr	r0, [pc, #332]	@ (8007944 <_vfiprintf_r+0x21c>)
 80077f8:	f7f8 fcfa 	bl	80001f0 <memchr>
 80077fc:	9a04      	ldr	r2, [sp, #16]
 80077fe:	b9d8      	cbnz	r0, 8007838 <_vfiprintf_r+0x110>
 8007800:	06d1      	lsls	r1, r2, #27
 8007802:	bf44      	itt	mi
 8007804:	2320      	movmi	r3, #32
 8007806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800780a:	0713      	lsls	r3, r2, #28
 800780c:	bf44      	itt	mi
 800780e:	232b      	movmi	r3, #43	@ 0x2b
 8007810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007814:	f89a 3000 	ldrb.w	r3, [sl]
 8007818:	2b2a      	cmp	r3, #42	@ 0x2a
 800781a:	d015      	beq.n	8007848 <_vfiprintf_r+0x120>
 800781c:	9a07      	ldr	r2, [sp, #28]
 800781e:	4654      	mov	r4, sl
 8007820:	2000      	movs	r0, #0
 8007822:	f04f 0c0a 	mov.w	ip, #10
 8007826:	4621      	mov	r1, r4
 8007828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800782c:	3b30      	subs	r3, #48	@ 0x30
 800782e:	2b09      	cmp	r3, #9
 8007830:	d94b      	bls.n	80078ca <_vfiprintf_r+0x1a2>
 8007832:	b1b0      	cbz	r0, 8007862 <_vfiprintf_r+0x13a>
 8007834:	9207      	str	r2, [sp, #28]
 8007836:	e014      	b.n	8007862 <_vfiprintf_r+0x13a>
 8007838:	eba0 0308 	sub.w	r3, r0, r8
 800783c:	fa09 f303 	lsl.w	r3, r9, r3
 8007840:	4313      	orrs	r3, r2
 8007842:	9304      	str	r3, [sp, #16]
 8007844:	46a2      	mov	sl, r4
 8007846:	e7d2      	b.n	80077ee <_vfiprintf_r+0xc6>
 8007848:	9b03      	ldr	r3, [sp, #12]
 800784a:	1d19      	adds	r1, r3, #4
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	9103      	str	r1, [sp, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	bfbb      	ittet	lt
 8007854:	425b      	neglt	r3, r3
 8007856:	f042 0202 	orrlt.w	r2, r2, #2
 800785a:	9307      	strge	r3, [sp, #28]
 800785c:	9307      	strlt	r3, [sp, #28]
 800785e:	bfb8      	it	lt
 8007860:	9204      	strlt	r2, [sp, #16]
 8007862:	7823      	ldrb	r3, [r4, #0]
 8007864:	2b2e      	cmp	r3, #46	@ 0x2e
 8007866:	d10a      	bne.n	800787e <_vfiprintf_r+0x156>
 8007868:	7863      	ldrb	r3, [r4, #1]
 800786a:	2b2a      	cmp	r3, #42	@ 0x2a
 800786c:	d132      	bne.n	80078d4 <_vfiprintf_r+0x1ac>
 800786e:	9b03      	ldr	r3, [sp, #12]
 8007870:	1d1a      	adds	r2, r3, #4
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	9203      	str	r2, [sp, #12]
 8007876:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800787a:	3402      	adds	r4, #2
 800787c:	9305      	str	r3, [sp, #20]
 800787e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007954 <_vfiprintf_r+0x22c>
 8007882:	7821      	ldrb	r1, [r4, #0]
 8007884:	2203      	movs	r2, #3
 8007886:	4650      	mov	r0, sl
 8007888:	f7f8 fcb2 	bl	80001f0 <memchr>
 800788c:	b138      	cbz	r0, 800789e <_vfiprintf_r+0x176>
 800788e:	9b04      	ldr	r3, [sp, #16]
 8007890:	eba0 000a 	sub.w	r0, r0, sl
 8007894:	2240      	movs	r2, #64	@ 0x40
 8007896:	4082      	lsls	r2, r0
 8007898:	4313      	orrs	r3, r2
 800789a:	3401      	adds	r4, #1
 800789c:	9304      	str	r3, [sp, #16]
 800789e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a2:	4829      	ldr	r0, [pc, #164]	@ (8007948 <_vfiprintf_r+0x220>)
 80078a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80078a8:	2206      	movs	r2, #6
 80078aa:	f7f8 fca1 	bl	80001f0 <memchr>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d03f      	beq.n	8007932 <_vfiprintf_r+0x20a>
 80078b2:	4b26      	ldr	r3, [pc, #152]	@ (800794c <_vfiprintf_r+0x224>)
 80078b4:	bb1b      	cbnz	r3, 80078fe <_vfiprintf_r+0x1d6>
 80078b6:	9b03      	ldr	r3, [sp, #12]
 80078b8:	3307      	adds	r3, #7
 80078ba:	f023 0307 	bic.w	r3, r3, #7
 80078be:	3308      	adds	r3, #8
 80078c0:	9303      	str	r3, [sp, #12]
 80078c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c4:	443b      	add	r3, r7
 80078c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80078c8:	e76a      	b.n	80077a0 <_vfiprintf_r+0x78>
 80078ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80078ce:	460c      	mov	r4, r1
 80078d0:	2001      	movs	r0, #1
 80078d2:	e7a8      	b.n	8007826 <_vfiprintf_r+0xfe>
 80078d4:	2300      	movs	r3, #0
 80078d6:	3401      	adds	r4, #1
 80078d8:	9305      	str	r3, [sp, #20]
 80078da:	4619      	mov	r1, r3
 80078dc:	f04f 0c0a 	mov.w	ip, #10
 80078e0:	4620      	mov	r0, r4
 80078e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078e6:	3a30      	subs	r2, #48	@ 0x30
 80078e8:	2a09      	cmp	r2, #9
 80078ea:	d903      	bls.n	80078f4 <_vfiprintf_r+0x1cc>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0c6      	beq.n	800787e <_vfiprintf_r+0x156>
 80078f0:	9105      	str	r1, [sp, #20]
 80078f2:	e7c4      	b.n	800787e <_vfiprintf_r+0x156>
 80078f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80078f8:	4604      	mov	r4, r0
 80078fa:	2301      	movs	r3, #1
 80078fc:	e7f0      	b.n	80078e0 <_vfiprintf_r+0x1b8>
 80078fe:	ab03      	add	r3, sp, #12
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	462a      	mov	r2, r5
 8007904:	4b12      	ldr	r3, [pc, #72]	@ (8007950 <_vfiprintf_r+0x228>)
 8007906:	a904      	add	r1, sp, #16
 8007908:	4630      	mov	r0, r6
 800790a:	f3af 8000 	nop.w
 800790e:	4607      	mov	r7, r0
 8007910:	1c78      	adds	r0, r7, #1
 8007912:	d1d6      	bne.n	80078c2 <_vfiprintf_r+0x19a>
 8007914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007916:	07d9      	lsls	r1, r3, #31
 8007918:	d405      	bmi.n	8007926 <_vfiprintf_r+0x1fe>
 800791a:	89ab      	ldrh	r3, [r5, #12]
 800791c:	059a      	lsls	r2, r3, #22
 800791e:	d402      	bmi.n	8007926 <_vfiprintf_r+0x1fe>
 8007920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007922:	f7ff fdb7 	bl	8007494 <__retarget_lock_release_recursive>
 8007926:	89ab      	ldrh	r3, [r5, #12]
 8007928:	065b      	lsls	r3, r3, #25
 800792a:	f53f af1f 	bmi.w	800776c <_vfiprintf_r+0x44>
 800792e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007930:	e71e      	b.n	8007770 <_vfiprintf_r+0x48>
 8007932:	ab03      	add	r3, sp, #12
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	462a      	mov	r2, r5
 8007938:	4b05      	ldr	r3, [pc, #20]	@ (8007950 <_vfiprintf_r+0x228>)
 800793a:	a904      	add	r1, sp, #16
 800793c:	4630      	mov	r0, r6
 800793e:	f000 f879 	bl	8007a34 <_printf_i>
 8007942:	e7e4      	b.n	800790e <_vfiprintf_r+0x1e6>
 8007944:	08009293 	.word	0x08009293
 8007948:	0800929d 	.word	0x0800929d
 800794c:	00000000 	.word	0x00000000
 8007950:	08007703 	.word	0x08007703
 8007954:	08009299 	.word	0x08009299

08007958 <_printf_common>:
 8007958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800795c:	4616      	mov	r6, r2
 800795e:	4698      	mov	r8, r3
 8007960:	688a      	ldr	r2, [r1, #8]
 8007962:	690b      	ldr	r3, [r1, #16]
 8007964:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007968:	4293      	cmp	r3, r2
 800796a:	bfb8      	it	lt
 800796c:	4613      	movlt	r3, r2
 800796e:	6033      	str	r3, [r6, #0]
 8007970:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007974:	4607      	mov	r7, r0
 8007976:	460c      	mov	r4, r1
 8007978:	b10a      	cbz	r2, 800797e <_printf_common+0x26>
 800797a:	3301      	adds	r3, #1
 800797c:	6033      	str	r3, [r6, #0]
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	0699      	lsls	r1, r3, #26
 8007982:	bf42      	ittt	mi
 8007984:	6833      	ldrmi	r3, [r6, #0]
 8007986:	3302      	addmi	r3, #2
 8007988:	6033      	strmi	r3, [r6, #0]
 800798a:	6825      	ldr	r5, [r4, #0]
 800798c:	f015 0506 	ands.w	r5, r5, #6
 8007990:	d106      	bne.n	80079a0 <_printf_common+0x48>
 8007992:	f104 0a19 	add.w	sl, r4, #25
 8007996:	68e3      	ldr	r3, [r4, #12]
 8007998:	6832      	ldr	r2, [r6, #0]
 800799a:	1a9b      	subs	r3, r3, r2
 800799c:	42ab      	cmp	r3, r5
 800799e:	dc26      	bgt.n	80079ee <_printf_common+0x96>
 80079a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079a4:	6822      	ldr	r2, [r4, #0]
 80079a6:	3b00      	subs	r3, #0
 80079a8:	bf18      	it	ne
 80079aa:	2301      	movne	r3, #1
 80079ac:	0692      	lsls	r2, r2, #26
 80079ae:	d42b      	bmi.n	8007a08 <_printf_common+0xb0>
 80079b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079b4:	4641      	mov	r1, r8
 80079b6:	4638      	mov	r0, r7
 80079b8:	47c8      	blx	r9
 80079ba:	3001      	adds	r0, #1
 80079bc:	d01e      	beq.n	80079fc <_printf_common+0xa4>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	6922      	ldr	r2, [r4, #16]
 80079c2:	f003 0306 	and.w	r3, r3, #6
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	bf02      	ittt	eq
 80079ca:	68e5      	ldreq	r5, [r4, #12]
 80079cc:	6833      	ldreq	r3, [r6, #0]
 80079ce:	1aed      	subeq	r5, r5, r3
 80079d0:	68a3      	ldr	r3, [r4, #8]
 80079d2:	bf0c      	ite	eq
 80079d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079d8:	2500      	movne	r5, #0
 80079da:	4293      	cmp	r3, r2
 80079dc:	bfc4      	itt	gt
 80079de:	1a9b      	subgt	r3, r3, r2
 80079e0:	18ed      	addgt	r5, r5, r3
 80079e2:	2600      	movs	r6, #0
 80079e4:	341a      	adds	r4, #26
 80079e6:	42b5      	cmp	r5, r6
 80079e8:	d11a      	bne.n	8007a20 <_printf_common+0xc8>
 80079ea:	2000      	movs	r0, #0
 80079ec:	e008      	b.n	8007a00 <_printf_common+0xa8>
 80079ee:	2301      	movs	r3, #1
 80079f0:	4652      	mov	r2, sl
 80079f2:	4641      	mov	r1, r8
 80079f4:	4638      	mov	r0, r7
 80079f6:	47c8      	blx	r9
 80079f8:	3001      	adds	r0, #1
 80079fa:	d103      	bne.n	8007a04 <_printf_common+0xac>
 80079fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a04:	3501      	adds	r5, #1
 8007a06:	e7c6      	b.n	8007996 <_printf_common+0x3e>
 8007a08:	18e1      	adds	r1, r4, r3
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	2030      	movs	r0, #48	@ 0x30
 8007a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a12:	4422      	add	r2, r4
 8007a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a1c:	3302      	adds	r3, #2
 8007a1e:	e7c7      	b.n	80079b0 <_printf_common+0x58>
 8007a20:	2301      	movs	r3, #1
 8007a22:	4622      	mov	r2, r4
 8007a24:	4641      	mov	r1, r8
 8007a26:	4638      	mov	r0, r7
 8007a28:	47c8      	blx	r9
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	d0e6      	beq.n	80079fc <_printf_common+0xa4>
 8007a2e:	3601      	adds	r6, #1
 8007a30:	e7d9      	b.n	80079e6 <_printf_common+0x8e>
	...

08007a34 <_printf_i>:
 8007a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a38:	7e0f      	ldrb	r7, [r1, #24]
 8007a3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a3c:	2f78      	cmp	r7, #120	@ 0x78
 8007a3e:	4691      	mov	r9, r2
 8007a40:	4680      	mov	r8, r0
 8007a42:	460c      	mov	r4, r1
 8007a44:	469a      	mov	sl, r3
 8007a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a4a:	d807      	bhi.n	8007a5c <_printf_i+0x28>
 8007a4c:	2f62      	cmp	r7, #98	@ 0x62
 8007a4e:	d80a      	bhi.n	8007a66 <_printf_i+0x32>
 8007a50:	2f00      	cmp	r7, #0
 8007a52:	f000 80d2 	beq.w	8007bfa <_printf_i+0x1c6>
 8007a56:	2f58      	cmp	r7, #88	@ 0x58
 8007a58:	f000 80b9 	beq.w	8007bce <_printf_i+0x19a>
 8007a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a64:	e03a      	b.n	8007adc <_printf_i+0xa8>
 8007a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a6a:	2b15      	cmp	r3, #21
 8007a6c:	d8f6      	bhi.n	8007a5c <_printf_i+0x28>
 8007a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8007a74 <_printf_i+0x40>)
 8007a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a74:	08007acd 	.word	0x08007acd
 8007a78:	08007ae1 	.word	0x08007ae1
 8007a7c:	08007a5d 	.word	0x08007a5d
 8007a80:	08007a5d 	.word	0x08007a5d
 8007a84:	08007a5d 	.word	0x08007a5d
 8007a88:	08007a5d 	.word	0x08007a5d
 8007a8c:	08007ae1 	.word	0x08007ae1
 8007a90:	08007a5d 	.word	0x08007a5d
 8007a94:	08007a5d 	.word	0x08007a5d
 8007a98:	08007a5d 	.word	0x08007a5d
 8007a9c:	08007a5d 	.word	0x08007a5d
 8007aa0:	08007be1 	.word	0x08007be1
 8007aa4:	08007b0b 	.word	0x08007b0b
 8007aa8:	08007b9b 	.word	0x08007b9b
 8007aac:	08007a5d 	.word	0x08007a5d
 8007ab0:	08007a5d 	.word	0x08007a5d
 8007ab4:	08007c03 	.word	0x08007c03
 8007ab8:	08007a5d 	.word	0x08007a5d
 8007abc:	08007b0b 	.word	0x08007b0b
 8007ac0:	08007a5d 	.word	0x08007a5d
 8007ac4:	08007a5d 	.word	0x08007a5d
 8007ac8:	08007ba3 	.word	0x08007ba3
 8007acc:	6833      	ldr	r3, [r6, #0]
 8007ace:	1d1a      	adds	r2, r3, #4
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6032      	str	r2, [r6, #0]
 8007ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007adc:	2301      	movs	r3, #1
 8007ade:	e09d      	b.n	8007c1c <_printf_i+0x1e8>
 8007ae0:	6833      	ldr	r3, [r6, #0]
 8007ae2:	6820      	ldr	r0, [r4, #0]
 8007ae4:	1d19      	adds	r1, r3, #4
 8007ae6:	6031      	str	r1, [r6, #0]
 8007ae8:	0606      	lsls	r6, r0, #24
 8007aea:	d501      	bpl.n	8007af0 <_printf_i+0xbc>
 8007aec:	681d      	ldr	r5, [r3, #0]
 8007aee:	e003      	b.n	8007af8 <_printf_i+0xc4>
 8007af0:	0645      	lsls	r5, r0, #25
 8007af2:	d5fb      	bpl.n	8007aec <_printf_i+0xb8>
 8007af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007af8:	2d00      	cmp	r5, #0
 8007afa:	da03      	bge.n	8007b04 <_printf_i+0xd0>
 8007afc:	232d      	movs	r3, #45	@ 0x2d
 8007afe:	426d      	negs	r5, r5
 8007b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b04:	4859      	ldr	r0, [pc, #356]	@ (8007c6c <_printf_i+0x238>)
 8007b06:	230a      	movs	r3, #10
 8007b08:	e011      	b.n	8007b2e <_printf_i+0xfa>
 8007b0a:	6821      	ldr	r1, [r4, #0]
 8007b0c:	6833      	ldr	r3, [r6, #0]
 8007b0e:	0608      	lsls	r0, r1, #24
 8007b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b14:	d402      	bmi.n	8007b1c <_printf_i+0xe8>
 8007b16:	0649      	lsls	r1, r1, #25
 8007b18:	bf48      	it	mi
 8007b1a:	b2ad      	uxthmi	r5, r5
 8007b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b1e:	4853      	ldr	r0, [pc, #332]	@ (8007c6c <_printf_i+0x238>)
 8007b20:	6033      	str	r3, [r6, #0]
 8007b22:	bf14      	ite	ne
 8007b24:	230a      	movne	r3, #10
 8007b26:	2308      	moveq	r3, #8
 8007b28:	2100      	movs	r1, #0
 8007b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b2e:	6866      	ldr	r6, [r4, #4]
 8007b30:	60a6      	str	r6, [r4, #8]
 8007b32:	2e00      	cmp	r6, #0
 8007b34:	bfa2      	ittt	ge
 8007b36:	6821      	ldrge	r1, [r4, #0]
 8007b38:	f021 0104 	bicge.w	r1, r1, #4
 8007b3c:	6021      	strge	r1, [r4, #0]
 8007b3e:	b90d      	cbnz	r5, 8007b44 <_printf_i+0x110>
 8007b40:	2e00      	cmp	r6, #0
 8007b42:	d04b      	beq.n	8007bdc <_printf_i+0x1a8>
 8007b44:	4616      	mov	r6, r2
 8007b46:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b4a:	fb03 5711 	mls	r7, r3, r1, r5
 8007b4e:	5dc7      	ldrb	r7, [r0, r7]
 8007b50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b54:	462f      	mov	r7, r5
 8007b56:	42bb      	cmp	r3, r7
 8007b58:	460d      	mov	r5, r1
 8007b5a:	d9f4      	bls.n	8007b46 <_printf_i+0x112>
 8007b5c:	2b08      	cmp	r3, #8
 8007b5e:	d10b      	bne.n	8007b78 <_printf_i+0x144>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	07df      	lsls	r7, r3, #31
 8007b64:	d508      	bpl.n	8007b78 <_printf_i+0x144>
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	6861      	ldr	r1, [r4, #4]
 8007b6a:	4299      	cmp	r1, r3
 8007b6c:	bfde      	ittt	le
 8007b6e:	2330      	movle	r3, #48	@ 0x30
 8007b70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b78:	1b92      	subs	r2, r2, r6
 8007b7a:	6122      	str	r2, [r4, #16]
 8007b7c:	f8cd a000 	str.w	sl, [sp]
 8007b80:	464b      	mov	r3, r9
 8007b82:	aa03      	add	r2, sp, #12
 8007b84:	4621      	mov	r1, r4
 8007b86:	4640      	mov	r0, r8
 8007b88:	f7ff fee6 	bl	8007958 <_printf_common>
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d14a      	bne.n	8007c26 <_printf_i+0x1f2>
 8007b90:	f04f 30ff 	mov.w	r0, #4294967295
 8007b94:	b004      	add	sp, #16
 8007b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	f043 0320 	orr.w	r3, r3, #32
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	4833      	ldr	r0, [pc, #204]	@ (8007c70 <_printf_i+0x23c>)
 8007ba4:	2778      	movs	r7, #120	@ 0x78
 8007ba6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	6831      	ldr	r1, [r6, #0]
 8007bae:	061f      	lsls	r7, r3, #24
 8007bb0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007bb4:	d402      	bmi.n	8007bbc <_printf_i+0x188>
 8007bb6:	065f      	lsls	r7, r3, #25
 8007bb8:	bf48      	it	mi
 8007bba:	b2ad      	uxthmi	r5, r5
 8007bbc:	6031      	str	r1, [r6, #0]
 8007bbe:	07d9      	lsls	r1, r3, #31
 8007bc0:	bf44      	itt	mi
 8007bc2:	f043 0320 	orrmi.w	r3, r3, #32
 8007bc6:	6023      	strmi	r3, [r4, #0]
 8007bc8:	b11d      	cbz	r5, 8007bd2 <_printf_i+0x19e>
 8007bca:	2310      	movs	r3, #16
 8007bcc:	e7ac      	b.n	8007b28 <_printf_i+0xf4>
 8007bce:	4827      	ldr	r0, [pc, #156]	@ (8007c6c <_printf_i+0x238>)
 8007bd0:	e7e9      	b.n	8007ba6 <_printf_i+0x172>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	f023 0320 	bic.w	r3, r3, #32
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	e7f6      	b.n	8007bca <_printf_i+0x196>
 8007bdc:	4616      	mov	r6, r2
 8007bde:	e7bd      	b.n	8007b5c <_printf_i+0x128>
 8007be0:	6833      	ldr	r3, [r6, #0]
 8007be2:	6825      	ldr	r5, [r4, #0]
 8007be4:	6961      	ldr	r1, [r4, #20]
 8007be6:	1d18      	adds	r0, r3, #4
 8007be8:	6030      	str	r0, [r6, #0]
 8007bea:	062e      	lsls	r6, r5, #24
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	d501      	bpl.n	8007bf4 <_printf_i+0x1c0>
 8007bf0:	6019      	str	r1, [r3, #0]
 8007bf2:	e002      	b.n	8007bfa <_printf_i+0x1c6>
 8007bf4:	0668      	lsls	r0, r5, #25
 8007bf6:	d5fb      	bpl.n	8007bf0 <_printf_i+0x1bc>
 8007bf8:	8019      	strh	r1, [r3, #0]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6123      	str	r3, [r4, #16]
 8007bfe:	4616      	mov	r6, r2
 8007c00:	e7bc      	b.n	8007b7c <_printf_i+0x148>
 8007c02:	6833      	ldr	r3, [r6, #0]
 8007c04:	1d1a      	adds	r2, r3, #4
 8007c06:	6032      	str	r2, [r6, #0]
 8007c08:	681e      	ldr	r6, [r3, #0]
 8007c0a:	6862      	ldr	r2, [r4, #4]
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f7f8 faee 	bl	80001f0 <memchr>
 8007c14:	b108      	cbz	r0, 8007c1a <_printf_i+0x1e6>
 8007c16:	1b80      	subs	r0, r0, r6
 8007c18:	6060      	str	r0, [r4, #4]
 8007c1a:	6863      	ldr	r3, [r4, #4]
 8007c1c:	6123      	str	r3, [r4, #16]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c24:	e7aa      	b.n	8007b7c <_printf_i+0x148>
 8007c26:	6923      	ldr	r3, [r4, #16]
 8007c28:	4632      	mov	r2, r6
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	4640      	mov	r0, r8
 8007c2e:	47d0      	blx	sl
 8007c30:	3001      	adds	r0, #1
 8007c32:	d0ad      	beq.n	8007b90 <_printf_i+0x15c>
 8007c34:	6823      	ldr	r3, [r4, #0]
 8007c36:	079b      	lsls	r3, r3, #30
 8007c38:	d413      	bmi.n	8007c62 <_printf_i+0x22e>
 8007c3a:	68e0      	ldr	r0, [r4, #12]
 8007c3c:	9b03      	ldr	r3, [sp, #12]
 8007c3e:	4298      	cmp	r0, r3
 8007c40:	bfb8      	it	lt
 8007c42:	4618      	movlt	r0, r3
 8007c44:	e7a6      	b.n	8007b94 <_printf_i+0x160>
 8007c46:	2301      	movs	r3, #1
 8007c48:	4632      	mov	r2, r6
 8007c4a:	4649      	mov	r1, r9
 8007c4c:	4640      	mov	r0, r8
 8007c4e:	47d0      	blx	sl
 8007c50:	3001      	adds	r0, #1
 8007c52:	d09d      	beq.n	8007b90 <_printf_i+0x15c>
 8007c54:	3501      	adds	r5, #1
 8007c56:	68e3      	ldr	r3, [r4, #12]
 8007c58:	9903      	ldr	r1, [sp, #12]
 8007c5a:	1a5b      	subs	r3, r3, r1
 8007c5c:	42ab      	cmp	r3, r5
 8007c5e:	dcf2      	bgt.n	8007c46 <_printf_i+0x212>
 8007c60:	e7eb      	b.n	8007c3a <_printf_i+0x206>
 8007c62:	2500      	movs	r5, #0
 8007c64:	f104 0619 	add.w	r6, r4, #25
 8007c68:	e7f5      	b.n	8007c56 <_printf_i+0x222>
 8007c6a:	bf00      	nop
 8007c6c:	080092a4 	.word	0x080092a4
 8007c70:	080092b5 	.word	0x080092b5

08007c74 <__sflush_r>:
 8007c74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7c:	0716      	lsls	r6, r2, #28
 8007c7e:	4605      	mov	r5, r0
 8007c80:	460c      	mov	r4, r1
 8007c82:	d454      	bmi.n	8007d2e <__sflush_r+0xba>
 8007c84:	684b      	ldr	r3, [r1, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	dc02      	bgt.n	8007c90 <__sflush_r+0x1c>
 8007c8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	dd48      	ble.n	8007d22 <__sflush_r+0xae>
 8007c90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c92:	2e00      	cmp	r6, #0
 8007c94:	d045      	beq.n	8007d22 <__sflush_r+0xae>
 8007c96:	2300      	movs	r3, #0
 8007c98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c9c:	682f      	ldr	r7, [r5, #0]
 8007c9e:	6a21      	ldr	r1, [r4, #32]
 8007ca0:	602b      	str	r3, [r5, #0]
 8007ca2:	d030      	beq.n	8007d06 <__sflush_r+0x92>
 8007ca4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	0759      	lsls	r1, r3, #29
 8007caa:	d505      	bpl.n	8007cb8 <__sflush_r+0x44>
 8007cac:	6863      	ldr	r3, [r4, #4]
 8007cae:	1ad2      	subs	r2, r2, r3
 8007cb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007cb2:	b10b      	cbz	r3, 8007cb8 <__sflush_r+0x44>
 8007cb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007cb6:	1ad2      	subs	r2, r2, r3
 8007cb8:	2300      	movs	r3, #0
 8007cba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cbc:	6a21      	ldr	r1, [r4, #32]
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	47b0      	blx	r6
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	89a3      	ldrh	r3, [r4, #12]
 8007cc6:	d106      	bne.n	8007cd6 <__sflush_r+0x62>
 8007cc8:	6829      	ldr	r1, [r5, #0]
 8007cca:	291d      	cmp	r1, #29
 8007ccc:	d82b      	bhi.n	8007d26 <__sflush_r+0xb2>
 8007cce:	4a2a      	ldr	r2, [pc, #168]	@ (8007d78 <__sflush_r+0x104>)
 8007cd0:	410a      	asrs	r2, r1
 8007cd2:	07d6      	lsls	r6, r2, #31
 8007cd4:	d427      	bmi.n	8007d26 <__sflush_r+0xb2>
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	6062      	str	r2, [r4, #4]
 8007cda:	04d9      	lsls	r1, r3, #19
 8007cdc:	6922      	ldr	r2, [r4, #16]
 8007cde:	6022      	str	r2, [r4, #0]
 8007ce0:	d504      	bpl.n	8007cec <__sflush_r+0x78>
 8007ce2:	1c42      	adds	r2, r0, #1
 8007ce4:	d101      	bne.n	8007cea <__sflush_r+0x76>
 8007ce6:	682b      	ldr	r3, [r5, #0]
 8007ce8:	b903      	cbnz	r3, 8007cec <__sflush_r+0x78>
 8007cea:	6560      	str	r0, [r4, #84]	@ 0x54
 8007cec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cee:	602f      	str	r7, [r5, #0]
 8007cf0:	b1b9      	cbz	r1, 8007d22 <__sflush_r+0xae>
 8007cf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cf6:	4299      	cmp	r1, r3
 8007cf8:	d002      	beq.n	8007d00 <__sflush_r+0x8c>
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	f7ff fbea 	bl	80074d4 <_free_r>
 8007d00:	2300      	movs	r3, #0
 8007d02:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d04:	e00d      	b.n	8007d22 <__sflush_r+0xae>
 8007d06:	2301      	movs	r3, #1
 8007d08:	4628      	mov	r0, r5
 8007d0a:	47b0      	blx	r6
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	1c50      	adds	r0, r2, #1
 8007d10:	d1c9      	bne.n	8007ca6 <__sflush_r+0x32>
 8007d12:	682b      	ldr	r3, [r5, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d0c6      	beq.n	8007ca6 <__sflush_r+0x32>
 8007d18:	2b1d      	cmp	r3, #29
 8007d1a:	d001      	beq.n	8007d20 <__sflush_r+0xac>
 8007d1c:	2b16      	cmp	r3, #22
 8007d1e:	d11e      	bne.n	8007d5e <__sflush_r+0xea>
 8007d20:	602f      	str	r7, [r5, #0]
 8007d22:	2000      	movs	r0, #0
 8007d24:	e022      	b.n	8007d6c <__sflush_r+0xf8>
 8007d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d2a:	b21b      	sxth	r3, r3
 8007d2c:	e01b      	b.n	8007d66 <__sflush_r+0xf2>
 8007d2e:	690f      	ldr	r7, [r1, #16]
 8007d30:	2f00      	cmp	r7, #0
 8007d32:	d0f6      	beq.n	8007d22 <__sflush_r+0xae>
 8007d34:	0793      	lsls	r3, r2, #30
 8007d36:	680e      	ldr	r6, [r1, #0]
 8007d38:	bf08      	it	eq
 8007d3a:	694b      	ldreq	r3, [r1, #20]
 8007d3c:	600f      	str	r7, [r1, #0]
 8007d3e:	bf18      	it	ne
 8007d40:	2300      	movne	r3, #0
 8007d42:	eba6 0807 	sub.w	r8, r6, r7
 8007d46:	608b      	str	r3, [r1, #8]
 8007d48:	f1b8 0f00 	cmp.w	r8, #0
 8007d4c:	dde9      	ble.n	8007d22 <__sflush_r+0xae>
 8007d4e:	6a21      	ldr	r1, [r4, #32]
 8007d50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d52:	4643      	mov	r3, r8
 8007d54:	463a      	mov	r2, r7
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b0      	blx	r6
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	dc08      	bgt.n	8007d70 <__sflush_r+0xfc>
 8007d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d66:	81a3      	strh	r3, [r4, #12]
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d70:	4407      	add	r7, r0
 8007d72:	eba8 0800 	sub.w	r8, r8, r0
 8007d76:	e7e7      	b.n	8007d48 <__sflush_r+0xd4>
 8007d78:	dfbffffe 	.word	0xdfbffffe

08007d7c <_fflush_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	690b      	ldr	r3, [r1, #16]
 8007d80:	4605      	mov	r5, r0
 8007d82:	460c      	mov	r4, r1
 8007d84:	b913      	cbnz	r3, 8007d8c <_fflush_r+0x10>
 8007d86:	2500      	movs	r5, #0
 8007d88:	4628      	mov	r0, r5
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	b118      	cbz	r0, 8007d96 <_fflush_r+0x1a>
 8007d8e:	6a03      	ldr	r3, [r0, #32]
 8007d90:	b90b      	cbnz	r3, 8007d96 <_fflush_r+0x1a>
 8007d92:	f7ff f987 	bl	80070a4 <__sinit>
 8007d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0f3      	beq.n	8007d86 <_fflush_r+0xa>
 8007d9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007da0:	07d0      	lsls	r0, r2, #31
 8007da2:	d404      	bmi.n	8007dae <_fflush_r+0x32>
 8007da4:	0599      	lsls	r1, r3, #22
 8007da6:	d402      	bmi.n	8007dae <_fflush_r+0x32>
 8007da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007daa:	f7ff fb72 	bl	8007492 <__retarget_lock_acquire_recursive>
 8007dae:	4628      	mov	r0, r5
 8007db0:	4621      	mov	r1, r4
 8007db2:	f7ff ff5f 	bl	8007c74 <__sflush_r>
 8007db6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007db8:	07da      	lsls	r2, r3, #31
 8007dba:	4605      	mov	r5, r0
 8007dbc:	d4e4      	bmi.n	8007d88 <_fflush_r+0xc>
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	059b      	lsls	r3, r3, #22
 8007dc2:	d4e1      	bmi.n	8007d88 <_fflush_r+0xc>
 8007dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dc6:	f7ff fb65 	bl	8007494 <__retarget_lock_release_recursive>
 8007dca:	e7dd      	b.n	8007d88 <_fflush_r+0xc>

08007dcc <fiprintf>:
 8007dcc:	b40e      	push	{r1, r2, r3}
 8007dce:	b503      	push	{r0, r1, lr}
 8007dd0:	4601      	mov	r1, r0
 8007dd2:	ab03      	add	r3, sp, #12
 8007dd4:	4805      	ldr	r0, [pc, #20]	@ (8007dec <fiprintf+0x20>)
 8007dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dda:	6800      	ldr	r0, [r0, #0]
 8007ddc:	9301      	str	r3, [sp, #4]
 8007dde:	f7ff fca3 	bl	8007728 <_vfiprintf_r>
 8007de2:	b002      	add	sp, #8
 8007de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007de8:	b003      	add	sp, #12
 8007dea:	4770      	bx	lr
 8007dec:	20000028 	.word	0x20000028

08007df0 <__swhatbuf_r>:
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	460c      	mov	r4, r1
 8007df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df8:	2900      	cmp	r1, #0
 8007dfa:	b096      	sub	sp, #88	@ 0x58
 8007dfc:	4615      	mov	r5, r2
 8007dfe:	461e      	mov	r6, r3
 8007e00:	da0d      	bge.n	8007e1e <__swhatbuf_r+0x2e>
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e08:	f04f 0100 	mov.w	r1, #0
 8007e0c:	bf14      	ite	ne
 8007e0e:	2340      	movne	r3, #64	@ 0x40
 8007e10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e14:	2000      	movs	r0, #0
 8007e16:	6031      	str	r1, [r6, #0]
 8007e18:	602b      	str	r3, [r5, #0]
 8007e1a:	b016      	add	sp, #88	@ 0x58
 8007e1c:	bd70      	pop	{r4, r5, r6, pc}
 8007e1e:	466a      	mov	r2, sp
 8007e20:	f000 f848 	bl	8007eb4 <_fstat_r>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	dbec      	blt.n	8007e02 <__swhatbuf_r+0x12>
 8007e28:	9901      	ldr	r1, [sp, #4]
 8007e2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e32:	4259      	negs	r1, r3
 8007e34:	4159      	adcs	r1, r3
 8007e36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e3a:	e7eb      	b.n	8007e14 <__swhatbuf_r+0x24>

08007e3c <__smakebuf_r>:
 8007e3c:	898b      	ldrh	r3, [r1, #12]
 8007e3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e40:	079d      	lsls	r5, r3, #30
 8007e42:	4606      	mov	r6, r0
 8007e44:	460c      	mov	r4, r1
 8007e46:	d507      	bpl.n	8007e58 <__smakebuf_r+0x1c>
 8007e48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	6123      	str	r3, [r4, #16]
 8007e50:	2301      	movs	r3, #1
 8007e52:	6163      	str	r3, [r4, #20]
 8007e54:	b003      	add	sp, #12
 8007e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e58:	ab01      	add	r3, sp, #4
 8007e5a:	466a      	mov	r2, sp
 8007e5c:	f7ff ffc8 	bl	8007df0 <__swhatbuf_r>
 8007e60:	9f00      	ldr	r7, [sp, #0]
 8007e62:	4605      	mov	r5, r0
 8007e64:	4639      	mov	r1, r7
 8007e66:	4630      	mov	r0, r6
 8007e68:	f7ff fba8 	bl	80075bc <_malloc_r>
 8007e6c:	b948      	cbnz	r0, 8007e82 <__smakebuf_r+0x46>
 8007e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e72:	059a      	lsls	r2, r3, #22
 8007e74:	d4ee      	bmi.n	8007e54 <__smakebuf_r+0x18>
 8007e76:	f023 0303 	bic.w	r3, r3, #3
 8007e7a:	f043 0302 	orr.w	r3, r3, #2
 8007e7e:	81a3      	strh	r3, [r4, #12]
 8007e80:	e7e2      	b.n	8007e48 <__smakebuf_r+0xc>
 8007e82:	89a3      	ldrh	r3, [r4, #12]
 8007e84:	6020      	str	r0, [r4, #0]
 8007e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e8a:	81a3      	strh	r3, [r4, #12]
 8007e8c:	9b01      	ldr	r3, [sp, #4]
 8007e8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007e92:	b15b      	cbz	r3, 8007eac <__smakebuf_r+0x70>
 8007e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f000 f81d 	bl	8007ed8 <_isatty_r>
 8007e9e:	b128      	cbz	r0, 8007eac <__smakebuf_r+0x70>
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	f023 0303 	bic.w	r3, r3, #3
 8007ea6:	f043 0301 	orr.w	r3, r3, #1
 8007eaa:	81a3      	strh	r3, [r4, #12]
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	431d      	orrs	r5, r3
 8007eb0:	81a5      	strh	r5, [r4, #12]
 8007eb2:	e7cf      	b.n	8007e54 <__smakebuf_r+0x18>

08007eb4 <_fstat_r>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	4d07      	ldr	r5, [pc, #28]	@ (8007ed4 <_fstat_r+0x20>)
 8007eb8:	2300      	movs	r3, #0
 8007eba:	4604      	mov	r4, r0
 8007ebc:	4608      	mov	r0, r1
 8007ebe:	4611      	mov	r1, r2
 8007ec0:	602b      	str	r3, [r5, #0]
 8007ec2:	f7fb faf0 	bl	80034a6 <_fstat>
 8007ec6:	1c43      	adds	r3, r0, #1
 8007ec8:	d102      	bne.n	8007ed0 <_fstat_r+0x1c>
 8007eca:	682b      	ldr	r3, [r5, #0]
 8007ecc:	b103      	cbz	r3, 8007ed0 <_fstat_r+0x1c>
 8007ece:	6023      	str	r3, [r4, #0]
 8007ed0:	bd38      	pop	{r3, r4, r5, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20025d58 	.word	0x20025d58

08007ed8 <_isatty_r>:
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4d06      	ldr	r5, [pc, #24]	@ (8007ef4 <_isatty_r+0x1c>)
 8007edc:	2300      	movs	r3, #0
 8007ede:	4604      	mov	r4, r0
 8007ee0:	4608      	mov	r0, r1
 8007ee2:	602b      	str	r3, [r5, #0]
 8007ee4:	f7fb faef 	bl	80034c6 <_isatty>
 8007ee8:	1c43      	adds	r3, r0, #1
 8007eea:	d102      	bne.n	8007ef2 <_isatty_r+0x1a>
 8007eec:	682b      	ldr	r3, [r5, #0]
 8007eee:	b103      	cbz	r3, 8007ef2 <_isatty_r+0x1a>
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	bd38      	pop	{r3, r4, r5, pc}
 8007ef4:	20025d58 	.word	0x20025d58

08007ef8 <_sbrk_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4d06      	ldr	r5, [pc, #24]	@ (8007f14 <_sbrk_r+0x1c>)
 8007efc:	2300      	movs	r3, #0
 8007efe:	4604      	mov	r4, r0
 8007f00:	4608      	mov	r0, r1
 8007f02:	602b      	str	r3, [r5, #0]
 8007f04:	f7fb faf8 	bl	80034f8 <_sbrk>
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	d102      	bne.n	8007f12 <_sbrk_r+0x1a>
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	b103      	cbz	r3, 8007f12 <_sbrk_r+0x1a>
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	20025d58 	.word	0x20025d58

08007f18 <abort>:
 8007f18:	b508      	push	{r3, lr}
 8007f1a:	2006      	movs	r0, #6
 8007f1c:	f000 f82c 	bl	8007f78 <raise>
 8007f20:	2001      	movs	r0, #1
 8007f22:	f7fb fa70 	bl	8003406 <_exit>

08007f26 <_raise_r>:
 8007f26:	291f      	cmp	r1, #31
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	4605      	mov	r5, r0
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	d904      	bls.n	8007f3a <_raise_r+0x14>
 8007f30:	2316      	movs	r3, #22
 8007f32:	6003      	str	r3, [r0, #0]
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295
 8007f38:	bd38      	pop	{r3, r4, r5, pc}
 8007f3a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f3c:	b112      	cbz	r2, 8007f44 <_raise_r+0x1e>
 8007f3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f42:	b94b      	cbnz	r3, 8007f58 <_raise_r+0x32>
 8007f44:	4628      	mov	r0, r5
 8007f46:	f000 f831 	bl	8007fac <_getpid_r>
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	4601      	mov	r1, r0
 8007f4e:	4628      	mov	r0, r5
 8007f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f54:	f000 b818 	b.w	8007f88 <_kill_r>
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d00a      	beq.n	8007f72 <_raise_r+0x4c>
 8007f5c:	1c59      	adds	r1, r3, #1
 8007f5e:	d103      	bne.n	8007f68 <_raise_r+0x42>
 8007f60:	2316      	movs	r3, #22
 8007f62:	6003      	str	r3, [r0, #0]
 8007f64:	2001      	movs	r0, #1
 8007f66:	e7e7      	b.n	8007f38 <_raise_r+0x12>
 8007f68:	2100      	movs	r1, #0
 8007f6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f6e:	4620      	mov	r0, r4
 8007f70:	4798      	blx	r3
 8007f72:	2000      	movs	r0, #0
 8007f74:	e7e0      	b.n	8007f38 <_raise_r+0x12>
	...

08007f78 <raise>:
 8007f78:	4b02      	ldr	r3, [pc, #8]	@ (8007f84 <raise+0xc>)
 8007f7a:	4601      	mov	r1, r0
 8007f7c:	6818      	ldr	r0, [r3, #0]
 8007f7e:	f7ff bfd2 	b.w	8007f26 <_raise_r>
 8007f82:	bf00      	nop
 8007f84:	20000028 	.word	0x20000028

08007f88 <_kill_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4d07      	ldr	r5, [pc, #28]	@ (8007fa8 <_kill_r+0x20>)
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	4604      	mov	r4, r0
 8007f90:	4608      	mov	r0, r1
 8007f92:	4611      	mov	r1, r2
 8007f94:	602b      	str	r3, [r5, #0]
 8007f96:	f7fb fa26 	bl	80033e6 <_kill>
 8007f9a:	1c43      	adds	r3, r0, #1
 8007f9c:	d102      	bne.n	8007fa4 <_kill_r+0x1c>
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	b103      	cbz	r3, 8007fa4 <_kill_r+0x1c>
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	bd38      	pop	{r3, r4, r5, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20025d58 	.word	0x20025d58

08007fac <_getpid_r>:
 8007fac:	f7fb ba13 	b.w	80033d6 <_getpid>

08007fb0 <_init>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr

08007fbc <_fini>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	bf00      	nop
 8007fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc2:	bc08      	pop	{r3}
 8007fc4:	469e      	mov	lr, r3
 8007fc6:	4770      	bx	lr
