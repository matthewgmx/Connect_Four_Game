
MGorboldMcCardleLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001254  08008568  08008568  00009568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097bc  080097bc  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  080097bc  080097bc  0000a7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097c4  080097c4  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c4  080097c4  0000a7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097c8  080097c8  0000a7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080097cc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b078  2**0
                  CONTENTS
 10 .bss          00025cf4  20000078  20000078  0000b078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025d6c  20025d6c  0000b078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000149d8  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000352d  00000000  00000000  0001fa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  00022fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd7  00000000  00000000  00024448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027592  00000000  00000000  0002541f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a30f  00000000  00000000  0004c9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2e8b  00000000  00000000  00066cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149b4b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d20  00000000  00000000  00149b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0014f8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008550 	.word	0x08008550

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08008550 	.word	0x08008550

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f003 fad6 	bl	8003b34 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f001 fac2 	bl	8001b10 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f001 fa7f 	bl	8001a90 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f001 fbd8 	bl	8001d4c <LCD_Clear>
    Game_Init();
 800059c:	f000 f912 	bl	80007c4 <Game_Init>
    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005a0:	f001 fe4d 	bl	800223e <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a4:	4b02      	ldr	r3, [pc, #8]	@ (80005b0 <ApplicationInit+0x30>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000094 	.word	0x20000094

080005b4 <LCD_Touch_Polling_Demo>:
	visualDemo();
}

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_GREEN);
 80005b8:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80005bc:	2000      	movs	r0, #0
 80005be:	f001 fbc5 	bl	8001d4c <LCD_Clear>
	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005c2:	480f      	ldr	r0, [pc, #60]	@ (8000600 <LCD_Touch_Polling_Demo+0x4c>)
 80005c4:	f001 fe46 	bl	8002254 <returnTouchStateAndLocation>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10e      	bne.n	80005ec <LCD_Touch_Polling_Demo+0x38>
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <LCD_Touch_Polling_Demo+0x4c>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	4619      	mov	r1, r3
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <LCD_Touch_Polling_Demo+0x4c>)
 80005d6:	885b      	ldrh	r3, [r3, #2]
 80005d8:	461a      	mov	r2, r3
 80005da:	480a      	ldr	r0, [pc, #40]	@ (8000604 <LCD_Touch_Polling_Demo+0x50>)
 80005dc:	f007 f8ec 	bl	80077b8 <iprintf>
			LCD_Clear(0, LCD_COLOR_RED);
 80005e0:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80005e4:	2000      	movs	r0, #0
 80005e6:	f001 fbb1 	bl	8001d4c <LCD_Clear>
 80005ea:	e7ea      	b.n	80005c2 <LCD_Touch_Polling_Demo+0xe>
		} else {
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 80005ec:	4806      	ldr	r0, [pc, #24]	@ (8000608 <LCD_Touch_Polling_Demo+0x54>)
 80005ee:	f007 f94b 	bl	8007888 <puts>
			LCD_Clear(0, LCD_COLOR_GREEN);
 80005f2:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80005f6:	2000      	movs	r0, #0
 80005f8:	f001 fba8 	bl	8001d4c <LCD_Clear>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005fc:	e7e1      	b.n	80005c2 <LCD_Touch_Polling_Demo+0xe>
 80005fe:	bf00      	nop
 8000600:	20000094 	.word	0x20000094
 8000604:	08008568 	.word	0x08008568
 8000608:	0800857c 	.word	0x0800857c

0800060c <EXTI0_IRQHandler>:
		}
	}
}
#endif // COMPILE_TOUCH_FUNCTIONS

void EXTI0_IRQHandler(){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	disableInterruptIRQ(EXTI0_IRQn);
 8000610:	2006      	movs	r0, #6
 8000612:	f001 f942 	bl	800189a <disableInterruptIRQ>
	clearInterruptEXTI(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f001 f962 	bl	80018e0 <clearInterruptEXTI>

	if(ConnectFour_DropPiece(Game.currentCol)){
 800061c:	4b53      	ldr	r3, [pc, #332]	@ (800076c <EXTI0_IRQHandler+0x160>)
 800061e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fbd8 	bl	8000dd8 <ConnectFour_DropPiece>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	f000 8096 	beq.w	800075c <EXTI0_IRQHandler+0x150>

		ConnectFour_DrawBoard();
 8000630:	f000 fa00 	bl	8000a34 <ConnectFour_DrawBoard>
		if(ConnectFour_CheckWin()){
 8000634:	f000 ff7e 	bl	8001534 <ConnectFour_CheckWin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d022      	beq.n	8000684 <EXTI0_IRQHandler+0x78>
			Game.winner = Game.currentPlayer;
 800063e:	4b4b      	ldr	r3, [pc, #300]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000640:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8000644:	4b49      	ldr	r3, [pc, #292]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000646:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			if(Game.currentPlayer == PLAYER_ONE){
 800064a:	4b48      	ldr	r3, [pc, #288]	@ (800076c <EXTI0_IRQHandler+0x160>)
 800064c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000650:	2b01      	cmp	r3, #1
 8000652:	d108      	bne.n	8000666 <EXTI0_IRQHandler+0x5a>
				Game.YellowWins++;
 8000654:	4b45      	ldr	r3, [pc, #276]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000656:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800065a:	3301      	adds	r3, #1
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b43      	ldr	r3, [pc, #268]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000660:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8000664:	e007      	b.n	8000676 <EXTI0_IRQHandler+0x6a>
			}
			else{
				Game.RedWins++;
 8000666:	4b41      	ldr	r3, [pc, #260]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000668:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b3e      	ldr	r3, [pc, #248]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000672:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			}
			Game.state = STATE_GAME_OVER;
 8000676:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000678:	2202      	movs	r2, #2
 800067a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			ConnectFour_GameOver();
 800067e:	f000 fa2b 	bl	8000ad8 <ConnectFour_GameOver>
 8000682:	e06b      	b.n	800075c <EXTI0_IRQHandler+0x150>
		}
		else if(ConnectFour_CheckDraw()){
 8000684:	f001 f8a4 	bl	80017d0 <ConnectFour_CheckDraw>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00a      	beq.n	80006a4 <EXTI0_IRQHandler+0x98>
			Game.isDraw = 1;
 800068e:	4b37      	ldr	r3, [pc, #220]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000690:	2201      	movs	r2, #1
 8000692:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
			Game.state = STATE_GAME_OVER;
 8000696:	4b35      	ldr	r3, [pc, #212]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000698:	2202      	movs	r2, #2
 800069a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			ConnectFour_GameOver();
 800069e:	f000 fa1b 	bl	8000ad8 <ConnectFour_GameOver>
 80006a2:	e05b      	b.n	800075c <EXTI0_IRQHandler+0x150>
		}
		else{
			//
			if(Game.gameMode == GAMEMODE_ONE_PLAYER && Game.currentPlayer == PLAYER_ONE){
 80006a4:	4b31      	ldr	r3, [pc, #196]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006a6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d13d      	bne.n	800072a <EXTI0_IRQHandler+0x11e>
 80006ae:	4b2f      	ldr	r3, [pc, #188]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006b0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d138      	bne.n	800072a <EXTI0_IRQHandler+0x11e>
				Game.currentPlayer = PLAYER_TWO;
 80006b8:	4b2c      	ldr	r3, [pc, #176]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006ba:	2202      	movs	r2, #2
 80006bc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

				ConnectFour_ComputerMove();
 80006c0:	f000 fe26 	bl	8001310 <ConnectFour_ComputerMove>
				ConnectFour_DrawBoard();
 80006c4:	f000 f9b6 	bl	8000a34 <ConnectFour_DrawBoard>
				Game.currentCol = 3;
 80006c8:	4b28      	ldr	r3, [pc, #160]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006ca:	2203      	movs	r2, #3
 80006cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
				if(ConnectFour_CheckWin()){
 80006d0:	f000 ff30 	bl	8001534 <ConnectFour_CheckWin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d012      	beq.n	8000700 <EXTI0_IRQHandler+0xf4>
					Game.winner = COMPUTER_PLAYER;
 80006da:	4b24      	ldr	r3, [pc, #144]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006dc:	2202      	movs	r2, #2
 80006de:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
					Game.RedWins++;
 80006e2:	4b22      	ldr	r3, [pc, #136]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80006e8:	3301      	adds	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006ee:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
					Game.state = STATE_GAME_OVER;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <EXTI0_IRQHandler+0x160>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					ConnectFour_GameOver();
 80006fa:	f000 f9ed 	bl	8000ad8 <ConnectFour_GameOver>
				if(ConnectFour_CheckWin()){
 80006fe:	e027      	b.n	8000750 <EXTI0_IRQHandler+0x144>
				}
				else if(ConnectFour_CheckDraw()){
 8000700:	f001 f866 	bl	80017d0 <ConnectFour_CheckDraw>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00a      	beq.n	8000720 <EXTI0_IRQHandler+0x114>
					Game.isDraw = 1;
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <EXTI0_IRQHandler+0x160>)
 800070c:	2201      	movs	r2, #1
 800070e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
					Game.state = STATE_GAME_OVER;
 8000712:	4b16      	ldr	r3, [pc, #88]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000714:	2202      	movs	r2, #2
 8000716:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					ConnectFour_GameOver();
 800071a:	f000 f9dd 	bl	8000ad8 <ConnectFour_GameOver>
				if(ConnectFour_CheckWin()){
 800071e:	e017      	b.n	8000750 <EXTI0_IRQHandler+0x144>
				}
				else{
					Game.currentPlayer = PLAYER_ONE;
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000722:	2201      	movs	r2, #1
 8000724:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				if(ConnectFour_CheckWin()){
 8000728:	e012      	b.n	8000750 <EXTI0_IRQHandler+0x144>
				}
			}
			else if(Game.gameMode == GAMEMODE_TWO_PLAYER) {
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <EXTI0_IRQHandler+0x160>)
 800072c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000730:	2b02      	cmp	r3, #2
 8000732:	d10d      	bne.n	8000750 <EXTI0_IRQHandler+0x144>
				if(Game.currentPlayer == PLAYER_ONE){
 8000734:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000736:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800073a:	2b01      	cmp	r3, #1
 800073c:	d104      	bne.n	8000748 <EXTI0_IRQHandler+0x13c>
					Game.currentPlayer = PLAYER_TWO;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <EXTI0_IRQHandler+0x160>)
 8000740:	2202      	movs	r2, #2
 8000742:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000746:	e003      	b.n	8000750 <EXTI0_IRQHandler+0x144>
				}
				else{
					Game.currentPlayer = PLAYER_ONE;
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <EXTI0_IRQHandler+0x160>)
 800074a:	2201      	movs	r2, #1
 800074c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				}
			}
			screen2();
 8000750:	f001 fcfe 	bl	8002150 <screen2>
			ConnectFour_DrawPiece();
 8000754:	f000 f940 	bl	80009d8 <ConnectFour_DrawPiece>
			ConnectFour_DrawBoard();
 8000758:	f000 f96c 	bl	8000a34 <ConnectFour_DrawBoard>
		}
	}
	clearInterruptIRQ(EXTI0_IRQn);
 800075c:	2006      	movs	r0, #6
 800075e:	f001 f8ad 	bl	80018bc <clearInterruptIRQ>
	enableInterruptIRQ(EXTI0_IRQn);
 8000762:	2006      	movs	r0, #6
 8000764:	f001 f888 	bl	8001878 <enableInterruptIRQ>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000009c 	.word	0x2000009c

08000770 <Button_Interrupts_Init>:
	else{
		return FALSE;
	}
}

void Button_Interrupts_Init(){
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOA_BUTTON;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <Button_Interrupts_Init+0x4c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a0f      	ldr	r2, [pc, #60]	@ (80007bc <Button_Interrupts_Init+0x4c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <Button_Interrupts_Init+0x4c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
	GPIOA_BUTTON.Pin = GPIO_PIN_0;
 8000792:	2301      	movs	r3, #1
 8000794:	607b      	str	r3, [r7, #4]
	GPIOA_BUTTON.Mode = GPIO_MODE_IT_RISING;
 8000796:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800079a:	60bb      	str	r3, [r7, #8]
	GPIOA_BUTTON.Speed = GPIO_SPEED_FREQ_HIGH; // choose speed high
 800079c:	2302      	movs	r3, #2
 800079e:	613b      	str	r3, [r7, #16]
	// GPIOA_BUTTON.OPType = GPIO_OPTYPE_PUSHPULL;
	GPIOA_BUTTON.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
	// GPIOA_BUTTON.Alternate = 0;
	HAL_GPIO_Init(GPIOA, &GPIOA_BUTTON);
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <Button_Interrupts_Init+0x50>)
 80007aa:	f003 fcaf 	bl	800410c <HAL_GPIO_Init>
	enableInterruptIRQ(EXTI0_IRQn);
 80007ae:	2006      	movs	r0, #6
 80007b0:	f001 f862 	bl	8001878 <enableInterruptIRQ>
}
 80007b4:	bf00      	nop
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020000 	.word	0x40020000

080007c4 <Game_Init>:

ConnectFourGame Game;
RNG_HandleTypeDef hrng;
static STMPE811_TouchData TouchScreen;

void Game_Init(void){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	TouchScreen.orientation = STMPE811_Orientation_Portrait_2;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <Game_Init+0x20>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	719a      	strb	r2, [r3, #6]
	ConnectFour_ResetGame();
 80007ce:	f000 f80d 	bl	80007ec <ConnectFour_ResetGame>
	Game.state = STATE_MENU;
 80007d2:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <Game_Init+0x24>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	Button_Interrupts_Init();
 80007da:	f7ff ffc9 	bl	8000770 <Button_Interrupts_Init>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000e0 	.word	0x200000e0
 80007e8:	2000009c 	.word	0x2000009c

080007ec <ConnectFour_ResetGame>:

void ConnectFour_ResetGame(void){
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
	for(int rows = 0; rows < BOARD_ROWS; rows++){
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	e015      	b.n	8000824 <ConnectFour_ResetGame+0x38>
		for(int cols = 0; cols < BOARD_COLS; cols++){
 80007f8:	2300      	movs	r3, #0
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	e00c      	b.n	8000818 <ConnectFour_ResetGame+0x2c>
			Game.board[rows][cols] = EMPTY_CELL;
 80007fe:	4918      	ldr	r1, [pc, #96]	@ (8000860 <ConnectFour_ResetGame+0x74>)
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	1a9b      	subs	r3, r3, r2
 8000808:	18ca      	adds	r2, r1, r3
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	4413      	add	r3, r2
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
		for(int cols = 0; cols < BOARD_COLS; cols++){
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	2b06      	cmp	r3, #6
 800081c:	ddef      	ble.n	80007fe <ConnectFour_ResetGame+0x12>
	for(int rows = 0; rows < BOARD_ROWS; rows++){
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3301      	adds	r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b05      	cmp	r3, #5
 8000828:	dde6      	ble.n	80007f8 <ConnectFour_ResetGame+0xc>
		}
	}

	Game.currentPlayer = PLAYER_ONE;
 800082a:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <ConnectFour_ResetGame+0x74>)
 800082c:	2201      	movs	r2, #1
 800082e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	Game.currentCol = 4;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <ConnectFour_ResetGame+0x74>)
 8000834:	2204      	movs	r2, #4
 8000836:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	Game.winner = 0;
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <ConnectFour_ResetGame+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	Game.isDraw = 0;
 8000842:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <ConnectFour_ResetGame+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	Game.startTime = 0;
 800084a:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <ConnectFour_ResetGame+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	2000009c 	.word	0x2000009c

08000864 <ConnectFour_GameLoop>:

void ConnectFour_GameLoop(void){
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	screen1();
 8000868:	f001 fb42 	bl	8001ef0 <screen1>

	while(1){
		if(returnTouchStateAndLocation(&TouchScreen) == STMPE811_State_Pressed){
 800086c:	480a      	ldr	r0, [pc, #40]	@ (8000898 <ConnectFour_GameLoop+0x34>)
 800086e:	f001 fcf1 	bl	8002254 <returnTouchStateAndLocation>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d10b      	bne.n	8000890 <ConnectFour_GameLoop+0x2c>
			ConnectFour_ProcessInput(&TouchScreen);
 8000878:	4807      	ldr	r0, [pc, #28]	@ (8000898 <ConnectFour_GameLoop+0x34>)
 800087a:	f000 f811 	bl	80008a0 <ConnectFour_ProcessInput>
			printf("\nX: %03d\nY: %03d\n", TouchScreen.x, TouchScreen.y);
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <ConnectFour_GameLoop+0x34>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	4619      	mov	r1, r3
 8000884:	4b04      	ldr	r3, [pc, #16]	@ (8000898 <ConnectFour_GameLoop+0x34>)
 8000886:	885b      	ldrh	r3, [r3, #2]
 8000888:	461a      	mov	r2, r3
 800088a:	4804      	ldr	r0, [pc, #16]	@ (800089c <ConnectFour_GameLoop+0x38>)
 800088c:	f006 ff94 	bl	80077b8 <iprintf>
		}
		HAL_Delay(100);
 8000890:	2064      	movs	r0, #100	@ 0x64
 8000892:	f003 faa7 	bl	8003de4 <HAL_Delay>
		if(returnTouchStateAndLocation(&TouchScreen) == STMPE811_State_Pressed){
 8000896:	e7e9      	b.n	800086c <ConnectFour_GameLoop+0x8>
 8000898:	200000e0 	.word	0x200000e0
 800089c:	0800858c 	.word	0x0800858c

080008a0 <ConnectFour_ProcessInput>:
	}
}

void ConnectFour_ProcessInput(STMPE811_TouchData *touchData){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	uint16_t x = TouchScreen.x;
 80008a8:	4b49      	ldr	r3, [pc, #292]	@ (80009d0 <ConnectFour_ProcessInput+0x130>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	81fb      	strh	r3, [r7, #14]
	uint16_t y = TouchScreen.y;
 80008ae:	4b48      	ldr	r3, [pc, #288]	@ (80009d0 <ConnectFour_ProcessInput+0x130>)
 80008b0:	885b      	ldrh	r3, [r3, #2]
 80008b2:	81bb      	strh	r3, [r7, #12]

	switch(Game.state){
 80008b4:	4b47      	ldr	r3, [pc, #284]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 80008b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d069      	beq.n	8000992 <ConnectFour_ProcessInput+0xf2>
 80008be:	2b02      	cmp	r3, #2
 80008c0:	f300 8081 	bgt.w	80009c6 <ConnectFour_ProcessInput+0x126>
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <ConnectFour_ProcessInput+0x2e>
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d03a      	beq.n	8000942 <ConnectFour_ProcessInput+0xa2>
			screen1();
			Game.state = STATE_MENU;
		}
		break;
	}
}
 80008cc:	e07b      	b.n	80009c6 <ConnectFour_ProcessInput+0x126>
		if(x >= 45 && x <= 195 && y >= 140 && y <= 175){
 80008ce:	89fb      	ldrh	r3, [r7, #14]
 80008d0:	2b2c      	cmp	r3, #44	@ 0x2c
 80008d2:	d919      	bls.n	8000908 <ConnectFour_ProcessInput+0x68>
 80008d4:	89fb      	ldrh	r3, [r7, #14]
 80008d6:	2bc3      	cmp	r3, #195	@ 0xc3
 80008d8:	d816      	bhi.n	8000908 <ConnectFour_ProcessInput+0x68>
 80008da:	89bb      	ldrh	r3, [r7, #12]
 80008dc:	2b8b      	cmp	r3, #139	@ 0x8b
 80008de:	d913      	bls.n	8000908 <ConnectFour_ProcessInput+0x68>
 80008e0:	89bb      	ldrh	r3, [r7, #12]
 80008e2:	2baf      	cmp	r3, #175	@ 0xaf
 80008e4:	d810      	bhi.n	8000908 <ConnectFour_ProcessInput+0x68>
			Game.gameMode = GAMEMODE_ONE_PLAYER;
 80008e6:	4b3b      	ldr	r3, [pc, #236]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			Game.state = STATE_GAME;
 80008ee:	4b39      	ldr	r3, [pc, #228]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			Game.startTime = 0;
 80008f6:	4b37      	ldr	r3, [pc, #220]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
			screen2();
 80008fe:	f001 fc27 	bl	8002150 <screen2>
			ConnectFour_DrawPiece();
 8000902:	f000 f869 	bl	80009d8 <ConnectFour_DrawPiece>
		break;
 8000906:	e05b      	b.n	80009c0 <ConnectFour_ProcessInput+0x120>
		else if(x >= 45 && x <= 195 && y >= 70 && y <= 105){
 8000908:	89fb      	ldrh	r3, [r7, #14]
 800090a:	2b2c      	cmp	r3, #44	@ 0x2c
 800090c:	d958      	bls.n	80009c0 <ConnectFour_ProcessInput+0x120>
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	2bc3      	cmp	r3, #195	@ 0xc3
 8000912:	d855      	bhi.n	80009c0 <ConnectFour_ProcessInput+0x120>
 8000914:	89bb      	ldrh	r3, [r7, #12]
 8000916:	2b45      	cmp	r3, #69	@ 0x45
 8000918:	d952      	bls.n	80009c0 <ConnectFour_ProcessInput+0x120>
 800091a:	89bb      	ldrh	r3, [r7, #12]
 800091c:	2b69      	cmp	r3, #105	@ 0x69
 800091e:	d84f      	bhi.n	80009c0 <ConnectFour_ProcessInput+0x120>
			Game.gameMode = GAMEMODE_TWO_PLAYER;
 8000920:	4b2c      	ldr	r3, [pc, #176]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 8000922:	2202      	movs	r2, #2
 8000924:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			Game.state = STATE_GAME;
 8000928:	4b2a      	ldr	r3, [pc, #168]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 800092a:	2201      	movs	r2, #1
 800092c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			Game.startTime = 0;
 8000930:	4b28      	ldr	r3, [pc, #160]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
			screen2();
 8000938:	f001 fc0a 	bl	8002150 <screen2>
			ConnectFour_DrawPiece();
 800093c:	f000 f84c 	bl	80009d8 <ConnectFour_DrawPiece>
		break;
 8000940:	e03e      	b.n	80009c0 <ConnectFour_ProcessInput+0x120>
		if (x < BOARD_MARGIN_X / 2) {
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	2b77      	cmp	r3, #119	@ 0x77
 8000946:	d80d      	bhi.n	8000964 <ConnectFour_ProcessInput+0xc4>
			if (Game.currentCol > 0) {
 8000948:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 800094a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800094e:	2b00      	cmp	r3, #0
 8000950:	d018      	beq.n	8000984 <ConnectFour_ProcessInput+0xe4>
				Game.currentCol--;
 8000952:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 8000954:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000958:	3b01      	subs	r3, #1
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 800095e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8000962:	e00f      	b.n	8000984 <ConnectFour_ProcessInput+0xe4>
		else if (x >= BOARD_MARGIN_X / 2) {
 8000964:	89fb      	ldrh	r3, [r7, #14]
 8000966:	2b77      	cmp	r3, #119	@ 0x77
 8000968:	d90c      	bls.n	8000984 <ConnectFour_ProcessInput+0xe4>
			if (Game.currentCol < BOARD_COLS - 1) {
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 800096c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000970:	2b05      	cmp	r3, #5
 8000972:	d807      	bhi.n	8000984 <ConnectFour_ProcessInput+0xe4>
				Game.currentCol++;
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 8000976:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800097a:	3301      	adds	r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 8000980:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		screen2();
 8000984:	f001 fbe4 	bl	8002150 <screen2>
		ConnectFour_DrawPiece();
 8000988:	f000 f826 	bl	80009d8 <ConnectFour_DrawPiece>
		ConnectFour_DrawBoard();
 800098c:	f000 f852 	bl	8000a34 <ConnectFour_DrawBoard>
		break;
 8000990:	e019      	b.n	80009c6 <ConnectFour_ProcessInput+0x126>
		ConnectFour_GameOver();
 8000992:	f000 f8a1 	bl	8000ad8 <ConnectFour_GameOver>
		if(x >= 45 && x <= 195 && y >= 210 && y <= 245){
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	2b2c      	cmp	r3, #44	@ 0x2c
 800099a:	d913      	bls.n	80009c4 <ConnectFour_ProcessInput+0x124>
 800099c:	89fb      	ldrh	r3, [r7, #14]
 800099e:	2bc3      	cmp	r3, #195	@ 0xc3
 80009a0:	d810      	bhi.n	80009c4 <ConnectFour_ProcessInput+0x124>
 80009a2:	89bb      	ldrh	r3, [r7, #12]
 80009a4:	2bd1      	cmp	r3, #209	@ 0xd1
 80009a6:	d90d      	bls.n	80009c4 <ConnectFour_ProcessInput+0x124>
 80009a8:	89bb      	ldrh	r3, [r7, #12]
 80009aa:	2bf5      	cmp	r3, #245	@ 0xf5
 80009ac:	d80a      	bhi.n	80009c4 <ConnectFour_ProcessInput+0x124>
			ConnectFour_ResetGame();
 80009ae:	f7ff ff1d 	bl	80007ec <ConnectFour_ResetGame>
			screen1();
 80009b2:	f001 fa9d 	bl	8001ef0 <screen1>
			Game.state = STATE_MENU;
 80009b6:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <ConnectFour_ProcessInput+0x134>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		break;
 80009be:	e001      	b.n	80009c4 <ConnectFour_ProcessInput+0x124>
		break;
 80009c0:	bf00      	nop
 80009c2:	e000      	b.n	80009c6 <ConnectFour_ProcessInput+0x126>
		break;
 80009c4:	bf00      	nop
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000e0 	.word	0x200000e0
 80009d4:	2000009c 	.word	0x2000009c

080009d8 <ConnectFour_DrawPiece>:

void ConnectFour_DrawPiece(void) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
	int x = Game.currentCol * CELL_SIZE + CELL_SIZE / 2  + 1;
 80009de:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <ConnectFour_DrawPiece+0x58>)
 80009e0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80009e4:	461a      	mov	r2, r3
 80009e6:	4613      	mov	r3, r2
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	4413      	add	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	3312      	adds	r3, #18
 80009f0:	607b      	str	r3, [r7, #4]
	int y = 25;
 80009f2:	2319      	movs	r3, #25
 80009f4:	603b      	str	r3, [r7, #0]
	if (Game.currentPlayer == PLAYER_ONE) {
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <ConnectFour_DrawPiece+0x58>)
 80009f8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d109      	bne.n	8000a14 <ConnectFour_DrawPiece+0x3c>
		LCD_Draw_Circle_Fill(x, y, PIECE_RADIUS, LCD_COLOR_YELLOW);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	b298      	uxth	r0, r3
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b299      	uxth	r1, r3
 8000a08:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	f001 f8fb 	bl	8001c08 <LCD_Draw_Circle_Fill>
	} else {
		LCD_Draw_Circle_Fill(x, y, PIECE_RADIUS, LCD_COLOR_RED);
	}
}
 8000a12:	e008      	b.n	8000a26 <ConnectFour_DrawPiece+0x4e>
		LCD_Draw_Circle_Fill(x, y, PIECE_RADIUS, LCD_COLOR_RED);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	b298      	uxth	r0, r3
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	b299      	uxth	r1, r3
 8000a1c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a20:	220f      	movs	r2, #15
 8000a22:	f001 f8f1 	bl	8001c08 <LCD_Draw_Circle_Fill>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000009c 	.word	0x2000009c

08000a34 <ConnectFour_DrawBoard>:

void ConnectFour_DrawBoard(void){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
	for (int cols = 0; cols < BOARD_COLS; cols++){
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e041      	b.n	8000ac4 <ConnectFour_DrawBoard+0x90>
		for(int rows = 0; rows < BOARD_ROWS; rows++){
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	e038      	b.n	8000ab8 <ConnectFour_DrawBoard+0x84>
			int x = cols * CELL_SIZE + CELL_SIZE / 2 + 1;
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	011b      	lsls	r3, r3, #4
 8000a4c:	4413      	add	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	3312      	adds	r3, #18
 8000a52:	607b      	str	r3, [r7, #4]
			int y = rows * CELL_SIZE + CELL_SIZE / 2 + 50;
 8000a54:	68ba      	ldr	r2, [r7, #8]
 8000a56:	4613      	mov	r3, r2
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	4413      	add	r3, r2
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	3343      	adds	r3, #67	@ 0x43
 8000a60:	603b      	str	r3, [r7, #0]
			if(Game.board[rows][cols] == PLAYER_ONE){
 8000a62:	491c      	ldr	r1, [pc, #112]	@ (8000ad4 <ConnectFour_DrawBoard+0xa0>)
 8000a64:	68ba      	ldr	r2, [r7, #8]
 8000a66:	4613      	mov	r3, r2
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	1a9b      	subs	r3, r3, r2
 8000a6c:	18ca      	adds	r2, r1, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4413      	add	r3, r2
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d108      	bne.n	8000a8a <ConnectFour_DrawBoard+0x56>
				LCD_Draw_Circle_Fill(x,y, PIECE_RADIUS - 2, LCD_COLOR_YELLOW);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	b298      	uxth	r0, r3
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b299      	uxth	r1, r3
 8000a80:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000a84:	220d      	movs	r2, #13
 8000a86:	f001 f8bf 	bl	8001c08 <LCD_Draw_Circle_Fill>
			}
			if(Game.board[rows][cols] == PLAYER_TWO){
 8000a8a:	4912      	ldr	r1, [pc, #72]	@ (8000ad4 <ConnectFour_DrawBoard+0xa0>)
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	1a9b      	subs	r3, r3, r2
 8000a94:	18ca      	adds	r2, r1, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d108      	bne.n	8000ab2 <ConnectFour_DrawBoard+0x7e>
				LCD_Draw_Circle_Fill(x,y, PIECE_RADIUS - 2, LCD_COLOR_RED);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	b298      	uxth	r0, r3
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b299      	uxth	r1, r3
 8000aa8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000aac:	220d      	movs	r2, #13
 8000aae:	f001 f8ab 	bl	8001c08 <LCD_Draw_Circle_Fill>
		for(int rows = 0; rows < BOARD_ROWS; rows++){
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	2b05      	cmp	r3, #5
 8000abc:	ddc3      	ble.n	8000a46 <ConnectFour_DrawBoard+0x12>
	for (int cols = 0; cols < BOARD_COLS; cols++){
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	ddba      	ble.n	8000a40 <ConnectFour_DrawBoard+0xc>
			}
		}
	}
}
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000009c 	.word	0x2000009c

08000ad8 <ConnectFour_GameOver>:

void ConnectFour_GameOver(void){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLACK);
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 f933 	bl	8001d4c <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ae6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000aea:	f001 f951 	bl	8001d90 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000aee:	48b6      	ldr	r0, [pc, #728]	@ (8000dc8 <ConnectFour_GameOver+0x2f0>)
 8000af0:	f001 f95e 	bl	8001db0 <LCD_SetFont>
	uint8_t Yellow = Game.YellowWins;
 8000af4:	4bb5      	ldr	r3, [pc, #724]	@ (8000dcc <ConnectFour_GameOver+0x2f4>)
 8000af6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000afa:	71fb      	strb	r3, [r7, #7]
	uint8_t Red = Game.RedWins;
 8000afc:	4bb3      	ldr	r3, [pc, #716]	@ (8000dcc <ConnectFour_GameOver+0x2f4>)
 8000afe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000b02:	71bb      	strb	r3, [r7, #6]
	uint8_t Time = ConnectFour_GetGameTime();
 8000b04:	f000 fe90 	bl	8001828 <ConnectFour_GetGameTime>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	717b      	strb	r3, [r7, #5]
	char one = '0' + (Time / 100);
 8000b0c:	797b      	ldrb	r3, [r7, #5]
 8000b0e:	4ab0      	ldr	r2, [pc, #704]	@ (8000dd0 <ConnectFour_GameOver+0x2f8>)
 8000b10:	fba2 2303 	umull	r2, r3, r2, r3
 8000b14:	095b      	lsrs	r3, r3, #5
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	3330      	adds	r3, #48	@ 0x30
 8000b1a:	713b      	strb	r3, [r7, #4]
	char two = '0' + ((Time / 10) % 10);
 8000b1c:	797b      	ldrb	r3, [r7, #5]
 8000b1e:	4aad      	ldr	r2, [pc, #692]	@ (8000dd4 <ConnectFour_GameOver+0x2fc>)
 8000b20:	fba2 2303 	umull	r2, r3, r2, r3
 8000b24:	08db      	lsrs	r3, r3, #3
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4baa      	ldr	r3, [pc, #680]	@ (8000dd4 <ConnectFour_GameOver+0x2fc>)
 8000b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b2e:	08d9      	lsrs	r1, r3, #3
 8000b30:	460b      	mov	r3, r1
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	440b      	add	r3, r1
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	3330      	adds	r3, #48	@ 0x30
 8000b3e:	70fb      	strb	r3, [r7, #3]
	char three = '0' + (Time % 10);
 8000b40:	797a      	ldrb	r2, [r7, #5]
 8000b42:	4ba4      	ldr	r3, [pc, #656]	@ (8000dd4 <ConnectFour_GameOver+0x2fc>)
 8000b44:	fba3 1302 	umull	r1, r3, r3, r2
 8000b48:	08d9      	lsrs	r1, r3, #3
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	440b      	add	r3, r1
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	3330      	adds	r3, #48	@ 0x30
 8000b58:	70bb      	strb	r3, [r7, #2]

	if(Game.isDraw){
 8000b5a:	4b9c      	ldr	r3, [pc, #624]	@ (8000dcc <ConnectFour_GameOver+0x2f4>)
 8000b5c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d019      	beq.n	8000b98 <ConnectFour_GameOver+0xc0>
		LCD_DisplayChar(90, 20, 'D');
 8000b64:	2244      	movs	r2, #68	@ 0x44
 8000b66:	2114      	movs	r1, #20
 8000b68:	205a      	movs	r0, #90	@ 0x5a
 8000b6a:	f001 f99f 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(110, 20, 'R');
 8000b6e:	2252      	movs	r2, #82	@ 0x52
 8000b70:	2114      	movs	r1, #20
 8000b72:	206e      	movs	r0, #110	@ 0x6e
 8000b74:	f001 f99a 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(130, 20, 'A');
 8000b78:	2241      	movs	r2, #65	@ 0x41
 8000b7a:	2114      	movs	r1, #20
 8000b7c:	2082      	movs	r0, #130	@ 0x82
 8000b7e:	f001 f995 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(150, 20, 'W');
 8000b82:	2257      	movs	r2, #87	@ 0x57
 8000b84:	2114      	movs	r1, #20
 8000b86:	2096      	movs	r0, #150	@ 0x96
 8000b88:	f001 f990 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(170,20,'!');
 8000b8c:	2221      	movs	r2, #33	@ 0x21
 8000b8e:	2114      	movs	r1, #20
 8000b90:	20aa      	movs	r0, #170	@ 0xaa
 8000b92:	f001 f98b 	bl	8001eac <LCD_DisplayChar>
 8000b96:	e04b      	b.n	8000c30 <ConnectFour_GameOver+0x158>

	} else if(Game. winner == PLAYER_ONE){
 8000b98:	4b8c      	ldr	r3, [pc, #560]	@ (8000dcc <ConnectFour_GameOver+0x2f4>)
 8000b9a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d123      	bne.n	8000bea <ConnectFour_GameOver+0x112>
		LCD_DisplayChar(30, 20, 'P');
 8000ba2:	2250      	movs	r2, #80	@ 0x50
 8000ba4:	2114      	movs	r1, #20
 8000ba6:	201e      	movs	r0, #30
 8000ba8:	f001 f980 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(50, 20, '1');
 8000bac:	2231      	movs	r2, #49	@ 0x31
 8000bae:	2114      	movs	r1, #20
 8000bb0:	2032      	movs	r0, #50	@ 0x32
 8000bb2:	f001 f97b 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(90, 20, 'W');
 8000bb6:	2257      	movs	r2, #87	@ 0x57
 8000bb8:	2114      	movs	r1, #20
 8000bba:	205a      	movs	r0, #90	@ 0x5a
 8000bbc:	f001 f976 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(110, 20, 'I');
 8000bc0:	2249      	movs	r2, #73	@ 0x49
 8000bc2:	2114      	movs	r1, #20
 8000bc4:	206e      	movs	r0, #110	@ 0x6e
 8000bc6:	f001 f971 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(130, 20,'N');
 8000bca:	224e      	movs	r2, #78	@ 0x4e
 8000bcc:	2114      	movs	r1, #20
 8000bce:	2082      	movs	r0, #130	@ 0x82
 8000bd0:	f001 f96c 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(150, 20,'S');
 8000bd4:	2253      	movs	r2, #83	@ 0x53
 8000bd6:	2114      	movs	r1, #20
 8000bd8:	2096      	movs	r0, #150	@ 0x96
 8000bda:	f001 f967 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(170, 20,'!');
 8000bde:	2221      	movs	r2, #33	@ 0x21
 8000be0:	2114      	movs	r1, #20
 8000be2:	20aa      	movs	r0, #170	@ 0xaa
 8000be4:	f001 f962 	bl	8001eac <LCD_DisplayChar>
 8000be8:	e022      	b.n	8000c30 <ConnectFour_GameOver+0x158>
	} else{
		LCD_DisplayChar(30, 20, 'P');
 8000bea:	2250      	movs	r2, #80	@ 0x50
 8000bec:	2114      	movs	r1, #20
 8000bee:	201e      	movs	r0, #30
 8000bf0:	f001 f95c 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(50, 20, '2');
 8000bf4:	2232      	movs	r2, #50	@ 0x32
 8000bf6:	2114      	movs	r1, #20
 8000bf8:	2032      	movs	r0, #50	@ 0x32
 8000bfa:	f001 f957 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(90, 20, 'W');
 8000bfe:	2257      	movs	r2, #87	@ 0x57
 8000c00:	2114      	movs	r1, #20
 8000c02:	205a      	movs	r0, #90	@ 0x5a
 8000c04:	f001 f952 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(110, 20, 'I');
 8000c08:	2249      	movs	r2, #73	@ 0x49
 8000c0a:	2114      	movs	r1, #20
 8000c0c:	206e      	movs	r0, #110	@ 0x6e
 8000c0e:	f001 f94d 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(130, 20,'N');
 8000c12:	224e      	movs	r2, #78	@ 0x4e
 8000c14:	2114      	movs	r1, #20
 8000c16:	2082      	movs	r0, #130	@ 0x82
 8000c18:	f001 f948 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(150, 20,'S');
 8000c1c:	2253      	movs	r2, #83	@ 0x53
 8000c1e:	2114      	movs	r1, #20
 8000c20:	2096      	movs	r0, #150	@ 0x96
 8000c22:	f001 f943 	bl	8001eac <LCD_DisplayChar>
		LCD_DisplayChar(170, 20,'!');
 8000c26:	2221      	movs	r2, #33	@ 0x21
 8000c28:	2114      	movs	r1, #20
 8000c2a:	20aa      	movs	r0, #170	@ 0xaa
 8000c2c:	f001 f93e 	bl	8001eac <LCD_DisplayChar>
	}
	LCD_Draw_Vertical_Line(45,75,35,LCD_COLOR_WHITE);
 8000c30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c34:	2223      	movs	r2, #35	@ 0x23
 8000c36:	214b      	movs	r1, #75	@ 0x4b
 8000c38:	202d      	movs	r0, #45	@ 0x2d
 8000c3a:	f001 f838 	bl	8001cae <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(195,75,35,LCD_COLOR_WHITE);
 8000c3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c42:	2223      	movs	r2, #35	@ 0x23
 8000c44:	214b      	movs	r1, #75	@ 0x4b
 8000c46:	20c3      	movs	r0, #195	@ 0xc3
 8000c48:	f001 f831 	bl	8001cae <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(45,75,150,LCD_COLOR_WHITE);
 8000c4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c50:	2296      	movs	r2, #150	@ 0x96
 8000c52:	214b      	movs	r1, #75	@ 0x4b
 8000c54:	202d      	movs	r0, #45	@ 0x2d
 8000c56:	f001 f851 	bl	8001cfc <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(45,110,150,LCD_COLOR_WHITE);
 8000c5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c5e:	2296      	movs	r2, #150	@ 0x96
 8000c60:	216e      	movs	r1, #110	@ 0x6e
 8000c62:	202d      	movs	r0, #45	@ 0x2d
 8000c64:	f001 f84a 	bl	8001cfc <LCD_Draw_Horizontal_Line>
	LCD_DisplayChar(50,80,'R');
 8000c68:	2252      	movs	r2, #82	@ 0x52
 8000c6a:	2150      	movs	r1, #80	@ 0x50
 8000c6c:	2032      	movs	r0, #50	@ 0x32
 8000c6e:	f001 f91d 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(70,80,'E');
 8000c72:	2245      	movs	r2, #69	@ 0x45
 8000c74:	2150      	movs	r1, #80	@ 0x50
 8000c76:	2046      	movs	r0, #70	@ 0x46
 8000c78:	f001 f918 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(90,80,'S');
 8000c7c:	2253      	movs	r2, #83	@ 0x53
 8000c7e:	2150      	movs	r1, #80	@ 0x50
 8000c80:	205a      	movs	r0, #90	@ 0x5a
 8000c82:	f001 f913 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(110,80,'T');
 8000c86:	2254      	movs	r2, #84	@ 0x54
 8000c88:	2150      	movs	r1, #80	@ 0x50
 8000c8a:	206e      	movs	r0, #110	@ 0x6e
 8000c8c:	f001 f90e 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(130,80,'A');
 8000c90:	2241      	movs	r2, #65	@ 0x41
 8000c92:	2150      	movs	r1, #80	@ 0x50
 8000c94:	2082      	movs	r0, #130	@ 0x82
 8000c96:	f001 f909 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(150,80,'R');
 8000c9a:	2252      	movs	r2, #82	@ 0x52
 8000c9c:	2150      	movs	r1, #80	@ 0x50
 8000c9e:	2096      	movs	r0, #150	@ 0x96
 8000ca0:	f001 f904 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(170,80,'T');
 8000ca4:	2254      	movs	r2, #84	@ 0x54
 8000ca6:	2150      	movs	r1, #80	@ 0x50
 8000ca8:	20aa      	movs	r0, #170	@ 0xaa
 8000caa:	f001 f8ff 	bl	8001eac <LCD_DisplayChar>

	LCD_DisplayChar(40,250,'T');
 8000cae:	2254      	movs	r2, #84	@ 0x54
 8000cb0:	21fa      	movs	r1, #250	@ 0xfa
 8000cb2:	2028      	movs	r0, #40	@ 0x28
 8000cb4:	f001 f8fa 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(60,250,'I');
 8000cb8:	2249      	movs	r2, #73	@ 0x49
 8000cba:	21fa      	movs	r1, #250	@ 0xfa
 8000cbc:	203c      	movs	r0, #60	@ 0x3c
 8000cbe:	f001 f8f5 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(80,250,'M');
 8000cc2:	224d      	movs	r2, #77	@ 0x4d
 8000cc4:	21fa      	movs	r1, #250	@ 0xfa
 8000cc6:	2050      	movs	r0, #80	@ 0x50
 8000cc8:	f001 f8f0 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(110,250,'E');
 8000ccc:	2245      	movs	r2, #69	@ 0x45
 8000cce:	21fa      	movs	r1, #250	@ 0xfa
 8000cd0:	206e      	movs	r0, #110	@ 0x6e
 8000cd2:	f001 f8eb 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(150,250,one); // need to figure out how to make timer
 8000cd6:	793b      	ldrb	r3, [r7, #4]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	21fa      	movs	r1, #250	@ 0xfa
 8000cdc:	2096      	movs	r0, #150	@ 0x96
 8000cde:	f001 f8e5 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(170,250,two);
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	21fa      	movs	r1, #250	@ 0xfa
 8000ce8:	20aa      	movs	r0, #170	@ 0xaa
 8000cea:	f001 f8df 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(190,250,three);
 8000cee:	78bb      	ldrb	r3, [r7, #2]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	21fa      	movs	r1, #250	@ 0xfa
 8000cf4:	20be      	movs	r0, #190	@ 0xbe
 8000cf6:	f001 f8d9 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(210,250,'S');
 8000cfa:	2253      	movs	r2, #83	@ 0x53
 8000cfc:	21fa      	movs	r1, #250	@ 0xfa
 8000cfe:	20d2      	movs	r0, #210	@ 0xd2
 8000d00:	f001 f8d4 	bl	8001eac <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000d04:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8000d08:	f001 f842 	bl	8001d90 <LCD_SetTextColor>
	LCD_DisplayChar(40,150,'Y');
 8000d0c:	2259      	movs	r2, #89	@ 0x59
 8000d0e:	2196      	movs	r1, #150	@ 0x96
 8000d10:	2028      	movs	r0, #40	@ 0x28
 8000d12:	f001 f8cb 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(60,150,'E');
 8000d16:	2245      	movs	r2, #69	@ 0x45
 8000d18:	2196      	movs	r1, #150	@ 0x96
 8000d1a:	203c      	movs	r0, #60	@ 0x3c
 8000d1c:	f001 f8c6 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(80,150,'L');
 8000d20:	224c      	movs	r2, #76	@ 0x4c
 8000d22:	2196      	movs	r1, #150	@ 0x96
 8000d24:	2050      	movs	r0, #80	@ 0x50
 8000d26:	f001 f8c1 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(110,150,'W');
 8000d2a:	2257      	movs	r2, #87	@ 0x57
 8000d2c:	2196      	movs	r1, #150	@ 0x96
 8000d2e:	206e      	movs	r0, #110	@ 0x6e
 8000d30:	f001 f8bc 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(130,150,'I');
 8000d34:	2249      	movs	r2, #73	@ 0x49
 8000d36:	2196      	movs	r1, #150	@ 0x96
 8000d38:	2082      	movs	r0, #130	@ 0x82
 8000d3a:	f001 f8b7 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(150,150,'N');
 8000d3e:	224e      	movs	r2, #78	@ 0x4e
 8000d40:	2196      	movs	r1, #150	@ 0x96
 8000d42:	2096      	movs	r0, #150	@ 0x96
 8000d44:	f001 f8b2 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(170,150,'S');
 8000d48:	2253      	movs	r2, #83	@ 0x53
 8000d4a:	2196      	movs	r1, #150	@ 0x96
 8000d4c:	20aa      	movs	r0, #170	@ 0xaa
 8000d4e:	f001 f8ad 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(200,150,(char)(Yellow + '0'));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	3330      	adds	r3, #48	@ 0x30
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	2196      	movs	r1, #150	@ 0x96
 8000d5c:	20c8      	movs	r0, #200	@ 0xc8
 8000d5e:	f001 f8a5 	bl	8001eac <LCD_DisplayChar>

	LCD_SetTextColor(LCD_COLOR_RED);
 8000d62:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000d66:	f001 f813 	bl	8001d90 <LCD_SetTextColor>
	LCD_DisplayChar(40,200,'R');
 8000d6a:	2252      	movs	r2, #82	@ 0x52
 8000d6c:	21c8      	movs	r1, #200	@ 0xc8
 8000d6e:	2028      	movs	r0, #40	@ 0x28
 8000d70:	f001 f89c 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(60,200,'E');
 8000d74:	2245      	movs	r2, #69	@ 0x45
 8000d76:	21c8      	movs	r1, #200	@ 0xc8
 8000d78:	203c      	movs	r0, #60	@ 0x3c
 8000d7a:	f001 f897 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(80,200,'D');
 8000d7e:	2244      	movs	r2, #68	@ 0x44
 8000d80:	21c8      	movs	r1, #200	@ 0xc8
 8000d82:	2050      	movs	r0, #80	@ 0x50
 8000d84:	f001 f892 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(110,200,'W');
 8000d88:	2257      	movs	r2, #87	@ 0x57
 8000d8a:	21c8      	movs	r1, #200	@ 0xc8
 8000d8c:	206e      	movs	r0, #110	@ 0x6e
 8000d8e:	f001 f88d 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(130,200,'I');
 8000d92:	2249      	movs	r2, #73	@ 0x49
 8000d94:	21c8      	movs	r1, #200	@ 0xc8
 8000d96:	2082      	movs	r0, #130	@ 0x82
 8000d98:	f001 f888 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(150,200,'N');
 8000d9c:	224e      	movs	r2, #78	@ 0x4e
 8000d9e:	21c8      	movs	r1, #200	@ 0xc8
 8000da0:	2096      	movs	r0, #150	@ 0x96
 8000da2:	f001 f883 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(170,200,'S');
 8000da6:	2253      	movs	r2, #83	@ 0x53
 8000da8:	21c8      	movs	r1, #200	@ 0xc8
 8000daa:	20aa      	movs	r0, #170	@ 0xaa
 8000dac:	f001 f87e 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(200,200,(char)(Red + '0'));
 8000db0:	79bb      	ldrb	r3, [r7, #6]
 8000db2:	3330      	adds	r3, #48	@ 0x30
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	21c8      	movs	r1, #200	@ 0xc8
 8000dba:	20c8      	movs	r0, #200	@ 0xc8
 8000dbc:	f001 f876 	bl	8001eac <LCD_DisplayChar>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	2000009c 	.word	0x2000009c
 8000dd0:	51eb851f 	.word	0x51eb851f
 8000dd4:	cccccccd 	.word	0xcccccccd

08000dd8 <ConnectFour_DropPiece>:


uint8_t ConnectFour_DropPiece(uint8_t col){
 8000dd8:	b490      	push	{r4, r7}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	for (int rows = BOARD_ROWS - 1; rows >= 0; rows--) {
 8000de2:	2305      	movs	r3, #5
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e01c      	b.n	8000e22 <ConnectFour_DropPiece+0x4a>
		if (Game.board[rows][col] == EMPTY_CELL) {
 8000de8:	79f9      	ldrb	r1, [r7, #7]
 8000dea:	4812      	ldr	r0, [pc, #72]	@ (8000e34 <ConnectFour_DropPiece+0x5c>)
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4613      	mov	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	4403      	add	r3, r0
 8000df6:	440b      	add	r3, r1
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10e      	bne.n	8000e1c <ConnectFour_DropPiece+0x44>
			Game.board[rows][col] = Game.currentPlayer;
 8000dfe:	79f9      	ldrb	r1, [r7, #7]
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <ConnectFour_DropPiece+0x5c>)
 8000e02:	f893 402a 	ldrb.w	r4, [r3, #42]	@ 0x2a
 8000e06:	480b      	ldr	r0, [pc, #44]	@ (8000e34 <ConnectFour_DropPiece+0x5c>)
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	1a9b      	subs	r3, r3, r2
 8000e10:	4403      	add	r3, r0
 8000e12:	440b      	add	r3, r1
 8000e14:	4622      	mov	r2, r4
 8000e16:	701a      	strb	r2, [r3, #0]
			return 1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e006      	b.n	8000e2a <ConnectFour_DropPiece+0x52>
	for (int rows = BOARD_ROWS - 1; rows >= 0; rows--) {
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	dadf      	bge.n	8000de8 <ConnectFour_DropPiece+0x10>
		}
	}
	return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc90      	pop	{r4, r7}
 8000e32:	4770      	bx	lr
 8000e34:	2000009c 	.word	0x2000009c

08000e38 <CheckPotentialWin>:

static uint8_t CheckPotentialWin(uint8_t col, uint8_t player) {
 8000e38:	b480      	push	{r7}
 8000e3a:	b08b      	sub	sp, #44	@ 0x2c
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	460a      	mov	r2, r1
 8000e42:	71fb      	strb	r3, [r7, #7]
 8000e44:	4613      	mov	r3, r2
 8000e46:	71bb      	strb	r3, [r7, #6]
	// Find the first empty row in the column
	int row = -1;
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int r = BOARD_ROWS - 1; r >= 0; r--) {
 8000e4e:	2305      	movs	r3, #5
 8000e50:	623b      	str	r3, [r7, #32]
 8000e52:	e010      	b.n	8000e76 <CheckPotentialWin+0x3e>
		if (Game.board[r][col] == EMPTY_CELL) {
 8000e54:	79f9      	ldrb	r1, [r7, #7]
 8000e56:	48a1      	ldr	r0, [pc, #644]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8000e58:	6a3a      	ldr	r2, [r7, #32]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	1a9b      	subs	r3, r3, r2
 8000e60:	4403      	add	r3, r0
 8000e62:	440b      	add	r3, r1
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d102      	bne.n	8000e70 <CheckPotentialWin+0x38>
			row = r;
 8000e6a:	6a3b      	ldr	r3, [r7, #32]
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
			break;
 8000e6e:	e005      	b.n	8000e7c <CheckPotentialWin+0x44>
	for (int r = BOARD_ROWS - 1; r >= 0; r--) {
 8000e70:	6a3b      	ldr	r3, [r7, #32]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	623b      	str	r3, [r7, #32]
 8000e76:	6a3b      	ldr	r3, [r7, #32]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	daeb      	bge.n	8000e54 <CheckPotentialWin+0x1c>
		}
	}
	if (row == -1) return 0; // Column is full
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e82:	d101      	bne.n	8000e88 <CheckPotentialWin+0x50>
 8000e84:	2300      	movs	r3, #0
 8000e86:	e123      	b.n	80010d0 <CheckPotentialWin+0x298>

	// Temporarily place the piece
	Game.board[row][col] = player;
 8000e88:	79f9      	ldrb	r1, [r7, #7]
 8000e8a:	4894      	ldr	r0, [pc, #592]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8000e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e8e:	4613      	mov	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	4403      	add	r3, r0
 8000e96:	440b      	add	r3, r1
 8000e98:	79ba      	ldrb	r2, [r7, #6]
 8000e9a:	701a      	strb	r2, [r3, #0]

	// Check all directions for a win
	uint8_t isWin = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	77fb      	strb	r3, [r7, #31]

	// Check horizontal
	for (int c = 0; c <= BOARD_COLS - 4; c++) {
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
 8000ea4:	e038      	b.n	8000f18 <CheckPotentialWin+0xe0>
		if (Game.board[row][c] == player &&
 8000ea6:	498d      	ldr	r1, [pc, #564]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8000ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eaa:	4613      	mov	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	1a9b      	subs	r3, r3, r2
 8000eb0:	18ca      	adds	r2, r1, r3
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	79ba      	ldrb	r2, [r7, #6]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d129      	bne.n	8000f12 <CheckPotentialWin+0xda>
			Game.board[row][c+1] == player &&
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	1c59      	adds	r1, r3, #1
 8000ec2:	4886      	ldr	r0, [pc, #536]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8000ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	1a9b      	subs	r3, r3, r2
 8000ecc:	4403      	add	r3, r0
 8000ece:	440b      	add	r3, r1
 8000ed0:	781b      	ldrb	r3, [r3, #0]
		if (Game.board[row][c] == player &&
 8000ed2:	79ba      	ldrb	r2, [r7, #6]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d11c      	bne.n	8000f12 <CheckPotentialWin+0xda>
			Game.board[row][c+2] == player &&
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	1c99      	adds	r1, r3, #2
 8000edc:	487f      	ldr	r0, [pc, #508]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8000ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	1a9b      	subs	r3, r3, r2
 8000ee6:	4403      	add	r3, r0
 8000ee8:	440b      	add	r3, r1
 8000eea:	781b      	ldrb	r3, [r3, #0]
			Game.board[row][c+1] == player &&
 8000eec:	79ba      	ldrb	r2, [r7, #6]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d10f      	bne.n	8000f12 <CheckPotentialWin+0xda>
			Game.board[row][c+3] == player) {
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	1cd9      	adds	r1, r3, #3
 8000ef6:	4879      	ldr	r0, [pc, #484]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8000ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000efa:	4613      	mov	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	1a9b      	subs	r3, r3, r2
 8000f00:	4403      	add	r3, r0
 8000f02:	440b      	add	r3, r1
 8000f04:	781b      	ldrb	r3, [r3, #0]
			Game.board[row][c+2] == player &&
 8000f06:	79ba      	ldrb	r2, [r7, #6]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d102      	bne.n	8000f12 <CheckPotentialWin+0xda>
			isWin = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	77fb      	strb	r3, [r7, #31]
			break;
 8000f10:	e005      	b.n	8000f1e <CheckPotentialWin+0xe6>
	for (int c = 0; c <= BOARD_COLS - 4; c++) {
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	3301      	adds	r3, #1
 8000f16:	61bb      	str	r3, [r7, #24]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	ddc3      	ble.n	8000ea6 <CheckPotentialWin+0x6e>
		}
	}

	// Check vertical
	if (row <= BOARD_ROWS - 4) {
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	dc34      	bgt.n	8000f8e <CheckPotentialWin+0x156>
		if (Game.board[row][col] == player &&
 8000f24:	79f9      	ldrb	r1, [r7, #7]
 8000f26:	486d      	ldr	r0, [pc, #436]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8000f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	1a9b      	subs	r3, r3, r2
 8000f30:	4403      	add	r3, r0
 8000f32:	440b      	add	r3, r1
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	79ba      	ldrb	r2, [r7, #6]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d128      	bne.n	8000f8e <CheckPotentialWin+0x156>
			Game.board[row+1][col] == player &&
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	79f9      	ldrb	r1, [r7, #7]
 8000f42:	4866      	ldr	r0, [pc, #408]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8000f44:	4613      	mov	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	1a9b      	subs	r3, r3, r2
 8000f4a:	4403      	add	r3, r0
 8000f4c:	440b      	add	r3, r1
 8000f4e:	781b      	ldrb	r3, [r3, #0]
		if (Game.board[row][col] == player &&
 8000f50:	79ba      	ldrb	r2, [r7, #6]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d11b      	bne.n	8000f8e <CheckPotentialWin+0x156>
			Game.board[row+2][col] == player &&
 8000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f58:	1c9a      	adds	r2, r3, #2
 8000f5a:	79f9      	ldrb	r1, [r7, #7]
 8000f5c:	485f      	ldr	r0, [pc, #380]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	1a9b      	subs	r3, r3, r2
 8000f64:	4403      	add	r3, r0
 8000f66:	440b      	add	r3, r1
 8000f68:	781b      	ldrb	r3, [r3, #0]
			Game.board[row+1][col] == player &&
 8000f6a:	79ba      	ldrb	r2, [r7, #6]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d10e      	bne.n	8000f8e <CheckPotentialWin+0x156>
			Game.board[row+3][col] == player) {
 8000f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f72:	1cda      	adds	r2, r3, #3
 8000f74:	79f9      	ldrb	r1, [r7, #7]
 8000f76:	4859      	ldr	r0, [pc, #356]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8000f78:	4613      	mov	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	1a9b      	subs	r3, r3, r2
 8000f7e:	4403      	add	r3, r0
 8000f80:	440b      	add	r3, r1
 8000f82:	781b      	ldrb	r3, [r3, #0]
			Game.board[row+2][col] == player &&
 8000f84:	79ba      	ldrb	r2, [r7, #6]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d101      	bne.n	8000f8e <CheckPotentialWin+0x156>
			isWin = 1;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	77fb      	strb	r3, [r7, #31]
		}
	}

	// Check diagonal (up-right)
	for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e044      	b.n	800101e <CheckPotentialWin+0x1e6>
		for (int c = 0; c <= BOARD_COLS - 4; c++) {
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	e03b      	b.n	8001012 <CheckPotentialWin+0x1da>
			if (Game.board[r][c] == player &&
 8000f9a:	4950      	ldr	r1, [pc, #320]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	1a9b      	subs	r3, r3, r2
 8000fa4:	18ca      	adds	r2, r1, r3
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	79ba      	ldrb	r2, [r7, #6]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d12c      	bne.n	800100c <CheckPotentialWin+0x1d4>
				Game.board[r+1][c+1] == player &&
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1c59      	adds	r1, r3, #1
 8000fba:	4848      	ldr	r0, [pc, #288]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	1a9b      	subs	r3, r3, r2
 8000fc2:	4403      	add	r3, r0
 8000fc4:	440b      	add	r3, r1
 8000fc6:	781b      	ldrb	r3, [r3, #0]
			if (Game.board[r][c] == player &&
 8000fc8:	79ba      	ldrb	r2, [r7, #6]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d11e      	bne.n	800100c <CheckPotentialWin+0x1d4>
				Game.board[r+2][c+2] == player &&
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	1c9a      	adds	r2, r3, #2
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1c99      	adds	r1, r3, #2
 8000fd6:	4841      	ldr	r0, [pc, #260]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	1a9b      	subs	r3, r3, r2
 8000fde:	4403      	add	r3, r0
 8000fe0:	440b      	add	r3, r1
 8000fe2:	781b      	ldrb	r3, [r3, #0]
				Game.board[r+1][c+1] == player &&
 8000fe4:	79ba      	ldrb	r2, [r7, #6]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d110      	bne.n	800100c <CheckPotentialWin+0x1d4>
				Game.board[r+3][c+3] == player) {
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	1cda      	adds	r2, r3, #3
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1cd9      	adds	r1, r3, #3
 8000ff2:	483a      	ldr	r0, [pc, #232]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	1a9b      	subs	r3, r3, r2
 8000ffa:	4403      	add	r3, r0
 8000ffc:	440b      	add	r3, r1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
				Game.board[r+2][c+2] == player &&
 8001000:	79ba      	ldrb	r2, [r7, #6]
 8001002:	429a      	cmp	r2, r3
 8001004:	d102      	bne.n	800100c <CheckPotentialWin+0x1d4>
				isWin = 1;
 8001006:	2301      	movs	r3, #1
 8001008:	77fb      	strb	r3, [r7, #31]
				break;
 800100a:	e005      	b.n	8001018 <CheckPotentialWin+0x1e0>
		for (int c = 0; c <= BOARD_COLS - 4; c++) {
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	3301      	adds	r3, #1
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	2b03      	cmp	r3, #3
 8001016:	ddc0      	ble.n	8000f9a <CheckPotentialWin+0x162>
	for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3301      	adds	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b02      	cmp	r3, #2
 8001022:	ddb7      	ble.n	8000f94 <CheckPotentialWin+0x15c>
			}
		}
	}

	// Check diagonal (up-left)
	for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e044      	b.n	80010b4 <CheckPotentialWin+0x27c>
		for (int c = 3; c < BOARD_COLS; c++) {
 800102a:	2303      	movs	r3, #3
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	e03b      	b.n	80010a8 <CheckPotentialWin+0x270>
			if (Game.board[r][c] == player &&
 8001030:	492a      	ldr	r1, [pc, #168]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4613      	mov	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	18ca      	adds	r2, r1, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	79ba      	ldrb	r2, [r7, #6]
 8001044:	429a      	cmp	r2, r3
 8001046:	d12c      	bne.n	80010a2 <CheckPotentialWin+0x26a>
				Game.board[r+1][c-1] == player &&
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1e59      	subs	r1, r3, #1
 8001050:	4822      	ldr	r0, [pc, #136]	@ (80010dc <CheckPotentialWin+0x2a4>)
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	4403      	add	r3, r0
 800105a:	440b      	add	r3, r1
 800105c:	781b      	ldrb	r3, [r3, #0]
			if (Game.board[r][c] == player &&
 800105e:	79ba      	ldrb	r2, [r7, #6]
 8001060:	429a      	cmp	r2, r3
 8001062:	d11e      	bne.n	80010a2 <CheckPotentialWin+0x26a>
				Game.board[r+2][c-2] == player &&
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	1c9a      	adds	r2, r3, #2
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1e99      	subs	r1, r3, #2
 800106c:	481b      	ldr	r0, [pc, #108]	@ (80010dc <CheckPotentialWin+0x2a4>)
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	1a9b      	subs	r3, r3, r2
 8001074:	4403      	add	r3, r0
 8001076:	440b      	add	r3, r1
 8001078:	781b      	ldrb	r3, [r3, #0]
				Game.board[r+1][c-1] == player &&
 800107a:	79ba      	ldrb	r2, [r7, #6]
 800107c:	429a      	cmp	r2, r3
 800107e:	d110      	bne.n	80010a2 <CheckPotentialWin+0x26a>
				Game.board[r+3][c-3] == player) {
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	1cda      	adds	r2, r3, #3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	1ed9      	subs	r1, r3, #3
 8001088:	4814      	ldr	r0, [pc, #80]	@ (80010dc <CheckPotentialWin+0x2a4>)
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	4403      	add	r3, r0
 8001092:	440b      	add	r3, r1
 8001094:	781b      	ldrb	r3, [r3, #0]
				Game.board[r+2][c-2] == player &&
 8001096:	79ba      	ldrb	r2, [r7, #6]
 8001098:	429a      	cmp	r2, r3
 800109a:	d102      	bne.n	80010a2 <CheckPotentialWin+0x26a>
				isWin = 1;
 800109c:	2301      	movs	r3, #1
 800109e:	77fb      	strb	r3, [r7, #31]
				break;
 80010a0:	e005      	b.n	80010ae <CheckPotentialWin+0x276>
		for (int c = 3; c < BOARD_COLS; c++) {
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	3301      	adds	r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	ddc0      	ble.n	8001030 <CheckPotentialWin+0x1f8>
	for (int r = 0; r <= BOARD_ROWS - 4; r++) {
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3301      	adds	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	ddb7      	ble.n	800102a <CheckPotentialWin+0x1f2>
			}
		}
	}

	// Remove the temporary piece
	Game.board[row][col] = EMPTY_CELL;
 80010ba:	79f9      	ldrb	r1, [r7, #7]
 80010bc:	4807      	ldr	r0, [pc, #28]	@ (80010dc <CheckPotentialWin+0x2a4>)
 80010be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c0:	4613      	mov	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	1a9b      	subs	r3, r3, r2
 80010c6:	4403      	add	r3, r0
 80010c8:	440b      	add	r3, r1
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
	return isWin;
 80010ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	372c      	adds	r7, #44	@ 0x2c
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	2000009c 	.word	0x2000009c

080010e0 <CountPiecesInRow>:

// Helper function to count pieces in a row
static uint8_t CountPiecesInRow(uint8_t col, uint8_t player) {
 80010e0:	b480      	push	{r7}
 80010e2:	b093      	sub	sp, #76	@ 0x4c
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
	int row = -1;
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	647b      	str	r3, [r7, #68]	@ 0x44
	for (int r = BOARD_ROWS - 1; r >= 0; r--) {
 80010f6:	2305      	movs	r3, #5
 80010f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80010fa:	e010      	b.n	800111e <CountPiecesInRow+0x3e>
		if (Game.board[r][col] == EMPTY_CELL) {
 80010fc:	79f9      	ldrb	r1, [r7, #7]
 80010fe:	4883      	ldr	r0, [pc, #524]	@ (800130c <CountPiecesInRow+0x22c>)
 8001100:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001102:	4613      	mov	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	1a9b      	subs	r3, r3, r2
 8001108:	4403      	add	r3, r0
 800110a:	440b      	add	r3, r1
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <CountPiecesInRow+0x38>
			row = r;
 8001112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001114:	647b      	str	r3, [r7, #68]	@ 0x44
			break;
 8001116:	e005      	b.n	8001124 <CountPiecesInRow+0x44>
	for (int r = BOARD_ROWS - 1; r >= 0; r--) {
 8001118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800111a:	3b01      	subs	r3, #1
 800111c:	643b      	str	r3, [r7, #64]	@ 0x40
 800111e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001120:	2b00      	cmp	r3, #0
 8001122:	daeb      	bge.n	80010fc <CountPiecesInRow+0x1c>
		}
	}
	if (row == -1) return 0;
 8001124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112a:	d101      	bne.n	8001130 <CountPiecesInRow+0x50>
 800112c:	2300      	movs	r3, #0
 800112e:	e0e6      	b.n	80012fe <CountPiecesInRow+0x21e>

	uint8_t count = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	Game.board[row][col] = player;
 8001136:	79f9      	ldrb	r1, [r7, #7]
 8001138:	4874      	ldr	r0, [pc, #464]	@ (800130c <CountPiecesInRow+0x22c>)
 800113a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800113c:	4613      	mov	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	1a9b      	subs	r3, r3, r2
 8001142:	4403      	add	r3, r0
 8001144:	440b      	add	r3, r1
 8001146:	79ba      	ldrb	r2, [r7, #6]
 8001148:	701a      	strb	r2, [r3, #0]

	// Check horizontal
	for (int c = 0; c <= BOARD_COLS - 3; c++) {
 800114a:	2300      	movs	r3, #0
 800114c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800114e:	e02b      	b.n	80011a8 <CountPiecesInRow+0xc8>
		uint8_t tempCount = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		for (int i = 0; i < 3; i++) {
 8001156:	2300      	movs	r3, #0
 8001158:	633b      	str	r3, [r7, #48]	@ 0x30
 800115a:	e015      	b.n	8001188 <CountPiecesInRow+0xa8>
			if (Game.board[row][c+i] == player) tempCount++;
 800115c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800115e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001160:	18d1      	adds	r1, r2, r3
 8001162:	486a      	ldr	r0, [pc, #424]	@ (800130c <CountPiecesInRow+0x22c>)
 8001164:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001166:	4613      	mov	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	4403      	add	r3, r0
 800116e:	440b      	add	r3, r1
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	79ba      	ldrb	r2, [r7, #6]
 8001174:	429a      	cmp	r2, r3
 8001176:	d104      	bne.n	8001182 <CountPiecesInRow+0xa2>
 8001178:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800117c:	3301      	adds	r3, #1
 800117e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		for (int i = 0; i < 3; i++) {
 8001182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001184:	3301      	adds	r3, #1
 8001186:	633b      	str	r3, [r7, #48]	@ 0x30
 8001188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800118a:	2b02      	cmp	r3, #2
 800118c:	dde6      	ble.n	800115c <CountPiecesInRow+0x7c>
		}
		if (tempCount > count) count = tempCount;
 800118e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001192:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001196:	429a      	cmp	r2, r3
 8001198:	d903      	bls.n	80011a2 <CountPiecesInRow+0xc2>
 800119a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800119e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	for (int c = 0; c <= BOARD_COLS - 3; c++) {
 80011a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011a4:	3301      	adds	r3, #1
 80011a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	ddd0      	ble.n	8001150 <CountPiecesInRow+0x70>
	}

	// Check vertical
	if (row <= BOARD_ROWS - 3) {
 80011ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	dc28      	bgt.n	8001206 <CountPiecesInRow+0x126>
		uint8_t tempCount = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		for (int i = 0; i < 3; i++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011be:	e015      	b.n	80011ec <CountPiecesInRow+0x10c>
			if (Game.board[row+i][col] == player) tempCount++;
 80011c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c4:	441a      	add	r2, r3
 80011c6:	79f9      	ldrb	r1, [r7, #7]
 80011c8:	4850      	ldr	r0, [pc, #320]	@ (800130c <CountPiecesInRow+0x22c>)
 80011ca:	4613      	mov	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	1a9b      	subs	r3, r3, r2
 80011d0:	4403      	add	r3, r0
 80011d2:	440b      	add	r3, r1
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	79ba      	ldrb	r2, [r7, #6]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d104      	bne.n	80011e6 <CountPiecesInRow+0x106>
 80011dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011e0:	3301      	adds	r3, #1
 80011e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		for (int i = 0; i < 3; i++) {
 80011e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e8:	3301      	adds	r3, #1
 80011ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	dde6      	ble.n	80011c0 <CountPiecesInRow+0xe0>
		}
		if (tempCount > count) count = tempCount;
 80011f2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80011f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d903      	bls.n	8001206 <CountPiecesInRow+0x126>
 80011fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001202:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	// Check diagonals
	for (int r = 0; r <= BOARD_ROWS - 3; r++) {
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
 800120a:	e031      	b.n	8001270 <CountPiecesInRow+0x190>
		for (int c = 0; c <= BOARD_COLS - 3; c++) {
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	e028      	b.n	8001264 <CountPiecesInRow+0x184>
			uint8_t tempCount = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	77fb      	strb	r3, [r7, #31]
			for (int i = 0; i < 3; i++) {
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	e015      	b.n	8001248 <CountPiecesInRow+0x168>
				if (Game.board[r+i][c+i] == player) tempCount++;
 800121c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	441a      	add	r2, r3
 8001222:	6a39      	ldr	r1, [r7, #32]
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	4419      	add	r1, r3
 8001228:	4838      	ldr	r0, [pc, #224]	@ (800130c <CountPiecesInRow+0x22c>)
 800122a:	4613      	mov	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	1a9b      	subs	r3, r3, r2
 8001230:	4403      	add	r3, r0
 8001232:	440b      	add	r3, r1
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	429a      	cmp	r2, r3
 800123a:	d102      	bne.n	8001242 <CountPiecesInRow+0x162>
 800123c:	7ffb      	ldrb	r3, [r7, #31]
 800123e:	3301      	adds	r3, #1
 8001240:	77fb      	strb	r3, [r7, #31]
			for (int i = 0; i < 3; i++) {
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	3301      	adds	r3, #1
 8001246:	61bb      	str	r3, [r7, #24]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b02      	cmp	r3, #2
 800124c:	dde6      	ble.n	800121c <CountPiecesInRow+0x13c>
			}
			if (tempCount > count) count = tempCount;
 800124e:	7ffa      	ldrb	r2, [r7, #31]
 8001250:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001254:	429a      	cmp	r2, r3
 8001256:	d902      	bls.n	800125e <CountPiecesInRow+0x17e>
 8001258:	7ffb      	ldrb	r3, [r7, #31]
 800125a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		for (int c = 0; c <= BOARD_COLS - 3; c++) {
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	3301      	adds	r3, #1
 8001262:	623b      	str	r3, [r7, #32]
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	2b04      	cmp	r3, #4
 8001268:	ddd3      	ble.n	8001212 <CountPiecesInRow+0x132>
	for (int r = 0; r <= BOARD_ROWS - 3; r++) {
 800126a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126c:	3301      	adds	r3, #1
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001272:	2b03      	cmp	r3, #3
 8001274:	ddca      	ble.n	800120c <CountPiecesInRow+0x12c>
		}
	}

	for (int r = 0; r <= BOARD_ROWS - 3; r++) {
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	e031      	b.n	80012e0 <CountPiecesInRow+0x200>
		for (int c = 2; c < BOARD_COLS; c++) {
 800127c:	2302      	movs	r3, #2
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e028      	b.n	80012d4 <CountPiecesInRow+0x1f4>
			uint8_t tempCount = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
			for (int i = 0; i < 3; i++) {
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	e015      	b.n	80012b8 <CountPiecesInRow+0x1d8>
				if (Game.board[r+i][c-i] == player) tempCount++;
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	441a      	add	r2, r3
 8001292:	6939      	ldr	r1, [r7, #16]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1ac9      	subs	r1, r1, r3
 8001298:	481c      	ldr	r0, [pc, #112]	@ (800130c <CountPiecesInRow+0x22c>)
 800129a:	4613      	mov	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	1a9b      	subs	r3, r3, r2
 80012a0:	4403      	add	r3, r0
 80012a2:	440b      	add	r3, r1
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	79ba      	ldrb	r2, [r7, #6]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d102      	bne.n	80012b2 <CountPiecesInRow+0x1d2>
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	3301      	adds	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
			for (int i = 0; i < 3; i++) {
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3301      	adds	r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	dde6      	ble.n	800128c <CountPiecesInRow+0x1ac>
			}
			if (tempCount > count) count = tempCount;
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d902      	bls.n	80012ce <CountPiecesInRow+0x1ee>
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		for (int c = 2; c < BOARD_COLS; c++) {
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	3301      	adds	r3, #1
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	ddd3      	ble.n	8001282 <CountPiecesInRow+0x1a2>
	for (int r = 0; r <= BOARD_ROWS - 3; r++) {
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	ddca      	ble.n	800127c <CountPiecesInRow+0x19c>
		}
	}

	Game.board[row][col] = EMPTY_CELL;
 80012e6:	79f9      	ldrb	r1, [r7, #7]
 80012e8:	4808      	ldr	r0, [pc, #32]	@ (800130c <CountPiecesInRow+0x22c>)
 80012ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80012ec:	4613      	mov	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	4403      	add	r3, r0
 80012f4:	440b      	add	r3, r1
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
	return count;
 80012fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80012fe:	4618      	mov	r0, r3
 8001300:	374c      	adds	r7, #76	@ 0x4c
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	2000009c 	.word	0x2000009c

08001310 <ConnectFour_ComputerMove>:

void ConnectFour_ComputerMove(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0
	uint8_t bestMove = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	76fb      	strb	r3, [r7, #27]
	uint8_t bestScore = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	76bb      	strb	r3, [r7, #26]
	uint8_t validMove = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t columns[BOARD_COLS];
	uint32_t random;

	// Initialize columns array
	for (uint8_t i = 0; i < BOARD_COLS; i++) {
 8001324:	2300      	movs	r3, #0
 8001326:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800132a:	e00c      	b.n	8001346 <ConnectFour_ComputerMove+0x36>
		columns[i] = i;
 800132c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001330:	3328      	adds	r3, #40	@ 0x28
 8001332:	443b      	add	r3, r7
 8001334:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001338:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (uint8_t i = 0; i < BOARD_COLS; i++) {
 800133c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001340:	3301      	adds	r3, #1
 8001342:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001346:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800134a:	2b06      	cmp	r3, #6
 800134c:	d9ee      	bls.n	800132c <ConnectFour_ComputerMove+0x1c>
	}

	// Shuffle columns array using Fisher-Yates algorithm
	for (int i = BOARD_COLS - 1; i > 0; i--) {
 800134e:	2306      	movs	r3, #6
 8001350:	623b      	str	r3, [r7, #32]
 8001352:	e02a      	b.n	80013aa <ConnectFour_ComputerMove+0x9a>
		if (HAL_RNG_GenerateRandomNumber(&hrng, &random) == HAL_OK) {
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	4873      	ldr	r0, [pc, #460]	@ (8001528 <ConnectFour_ComputerMove+0x218>)
 800135a:	f005 fb5d 	bl	8006a18 <HAL_RNG_GenerateRandomNumber>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d11f      	bne.n	80013a4 <ConnectFour_ComputerMove+0x94>
			uint8_t j = random % (i + 1);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a3a      	ldr	r2, [r7, #32]
 8001368:	3201      	adds	r2, #1
 800136a:	fbb3 f1f2 	udiv	r1, r3, r2
 800136e:	fb01 f202 	mul.w	r2, r1, r2
 8001372:	1a9b      	subs	r3, r3, r2
 8001374:	74bb      	strb	r3, [r7, #18]
			// Swap columns[i] and columns[j]
			uint8_t temp = columns[i];
 8001376:	f107 0208 	add.w	r2, r7, #8
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	4413      	add	r3, r2
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	747b      	strb	r3, [r7, #17]
			columns[i] = columns[j];
 8001382:	7cbb      	ldrb	r3, [r7, #18]
 8001384:	3328      	adds	r3, #40	@ 0x28
 8001386:	443b      	add	r3, r7
 8001388:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 800138c:	f107 0208 	add.w	r2, r7, #8
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	4413      	add	r3, r2
 8001394:	460a      	mov	r2, r1
 8001396:	701a      	strb	r2, [r3, #0]
			columns[j] = temp;
 8001398:	7cbb      	ldrb	r3, [r7, #18]
 800139a:	3328      	adds	r3, #40	@ 0x28
 800139c:	443b      	add	r3, r7
 800139e:	7c7a      	ldrb	r2, [r7, #17]
 80013a0:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (int i = BOARD_COLS - 1; i > 0; i--) {
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	623b      	str	r3, [r7, #32]
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dcd1      	bgt.n	8001354 <ConnectFour_ComputerMove+0x44>
		}
	}

	// First, check for winning moves
	for (uint8_t i = 0; i < BOARD_COLS; i++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	77fb      	strb	r3, [r7, #31]
 80013b4:	e01c      	b.n	80013f0 <ConnectFour_ComputerMove+0xe0>
		uint8_t col = columns[i];
 80013b6:	7ffb      	ldrb	r3, [r7, #31]
 80013b8:	3328      	adds	r3, #40	@ 0x28
 80013ba:	443b      	add	r3, r7
 80013bc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80013c0:	74fb      	strb	r3, [r7, #19]
		if (CheckPotentialWin(col, PLAYER_TWO)) {
 80013c2:	7cfb      	ldrb	r3, [r7, #19]
 80013c4:	2102      	movs	r1, #2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fd36 	bl	8000e38 <CheckPotentialWin>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00b      	beq.n	80013ea <ConnectFour_ComputerMove+0xda>
			if (ConnectFour_DropPiece(col)) {
 80013d2:	7cfb      	ldrb	r3, [r7, #19]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fcff 	bl	8000dd8 <ConnectFour_DropPiece>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <ConnectFour_ComputerMove+0xda>
				Game.currentCol = col;
 80013e0:	4a52      	ldr	r2, [pc, #328]	@ (800152c <ConnectFour_ComputerMove+0x21c>)
 80013e2:	7cfb      	ldrb	r3, [r7, #19]
 80013e4:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				return;
 80013e8:	e09b      	b.n	8001522 <ConnectFour_ComputerMove+0x212>
	for (uint8_t i = 0; i < BOARD_COLS; i++) {
 80013ea:	7ffb      	ldrb	r3, [r7, #31]
 80013ec:	3301      	adds	r3, #1
 80013ee:	77fb      	strb	r3, [r7, #31]
 80013f0:	7ffb      	ldrb	r3, [r7, #31]
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d9df      	bls.n	80013b6 <ConnectFour_ComputerMove+0xa6>
			}
		}
	}

	// Then, check for opponent's winning moves to block
	for (uint8_t i = 0; i < BOARD_COLS; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	77bb      	strb	r3, [r7, #30]
 80013fa:	e01c      	b.n	8001436 <ConnectFour_ComputerMove+0x126>
		uint8_t col = columns[i];
 80013fc:	7fbb      	ldrb	r3, [r7, #30]
 80013fe:	3328      	adds	r3, #40	@ 0x28
 8001400:	443b      	add	r3, r7
 8001402:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001406:	753b      	strb	r3, [r7, #20]
		if (CheckPotentialWin(col, PLAYER_ONE)) {
 8001408:	7d3b      	ldrb	r3, [r7, #20]
 800140a:	2101      	movs	r1, #1
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fd13 	bl	8000e38 <CheckPotentialWin>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00b      	beq.n	8001430 <ConnectFour_ComputerMove+0x120>
			if (ConnectFour_DropPiece(col)) {
 8001418:	7d3b      	ldrb	r3, [r7, #20]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fcdc 	bl	8000dd8 <ConnectFour_DropPiece>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <ConnectFour_ComputerMove+0x120>
				Game.currentCol = col;
 8001426:	4a41      	ldr	r2, [pc, #260]	@ (800152c <ConnectFour_ComputerMove+0x21c>)
 8001428:	7d3b      	ldrb	r3, [r7, #20]
 800142a:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				return;
 800142e:	e078      	b.n	8001522 <ConnectFour_ComputerMove+0x212>
	for (uint8_t i = 0; i < BOARD_COLS; i++) {
 8001430:	7fbb      	ldrb	r3, [r7, #30]
 8001432:	3301      	adds	r3, #1
 8001434:	77bb      	strb	r3, [r7, #30]
 8001436:	7fbb      	ldrb	r3, [r7, #30]
 8001438:	2b06      	cmp	r3, #6
 800143a:	d9df      	bls.n	80013fc <ConnectFour_ComputerMove+0xec>
			}
		}
	}

	// Look for opportunities to create 3-in-a-row
	for (uint8_t i = 0; i < BOARD_COLS; i++) {
 800143c:	2300      	movs	r3, #0
 800143e:	777b      	strb	r3, [r7, #29]
 8001440:	e01e      	b.n	8001480 <ConnectFour_ComputerMove+0x170>
		uint8_t col = columns[i];
 8001442:	7f7b      	ldrb	r3, [r7, #29]
 8001444:	3328      	adds	r3, #40	@ 0x28
 8001446:	443b      	add	r3, r7
 8001448:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800144c:	75bb      	strb	r3, [r7, #22]
		uint8_t score = CountPiecesInRow(col, PLAYER_TWO);
 800144e:	7dbb      	ldrb	r3, [r7, #22]
 8001450:	2102      	movs	r1, #2
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fe44 	bl	80010e0 <CountPiecesInRow>
 8001458:	4603      	mov	r3, r0
 800145a:	757b      	strb	r3, [r7, #21]
		if (score >= 2 && ConnectFour_DropPiece(col)) {
 800145c:	7d7b      	ldrb	r3, [r7, #21]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d90b      	bls.n	800147a <ConnectFour_ComputerMove+0x16a>
 8001462:	7dbb      	ldrb	r3, [r7, #22]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fcb7 	bl	8000dd8 <ConnectFour_DropPiece>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d004      	beq.n	800147a <ConnectFour_ComputerMove+0x16a>
			Game.currentCol = col;
 8001470:	4a2e      	ldr	r2, [pc, #184]	@ (800152c <ConnectFour_ComputerMove+0x21c>)
 8001472:	7dbb      	ldrb	r3, [r7, #22]
 8001474:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
			return;
 8001478:	e053      	b.n	8001522 <ConnectFour_ComputerMove+0x212>
	for (uint8_t i = 0; i < BOARD_COLS; i++) {
 800147a:	7f7b      	ldrb	r3, [r7, #29]
 800147c:	3301      	adds	r3, #1
 800147e:	777b      	strb	r3, [r7, #29]
 8001480:	7f7b      	ldrb	r3, [r7, #29]
 8001482:	2b06      	cmp	r3, #6
 8001484:	d9dd      	bls.n	8001442 <ConnectFour_ComputerMove+0x132>
		}
	}

	// Look for opportunities to create 2-in-a-row
	for (uint8_t i = 0; i < BOARD_COLS; i++) {
 8001486:	2300      	movs	r3, #0
 8001488:	773b      	strb	r3, [r7, #28]
 800148a:	e01e      	b.n	80014ca <ConnectFour_ComputerMove+0x1ba>
		uint8_t col = columns[i];
 800148c:	7f3b      	ldrb	r3, [r7, #28]
 800148e:	3328      	adds	r3, #40	@ 0x28
 8001490:	443b      	add	r3, r7
 8001492:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001496:	763b      	strb	r3, [r7, #24]
		uint8_t score = CountPiecesInRow(col, PLAYER_TWO);
 8001498:	7e3b      	ldrb	r3, [r7, #24]
 800149a:	2102      	movs	r1, #2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fe1f 	bl	80010e0 <CountPiecesInRow>
 80014a2:	4603      	mov	r3, r0
 80014a4:	75fb      	strb	r3, [r7, #23]
		if (score >= 1 && ConnectFour_DropPiece(col)) {
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00b      	beq.n	80014c4 <ConnectFour_ComputerMove+0x1b4>
 80014ac:	7e3b      	ldrb	r3, [r7, #24]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fc92 	bl	8000dd8 <ConnectFour_DropPiece>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d004      	beq.n	80014c4 <ConnectFour_ComputerMove+0x1b4>
			Game.currentCol = col;
 80014ba:	4a1c      	ldr	r2, [pc, #112]	@ (800152c <ConnectFour_ComputerMove+0x21c>)
 80014bc:	7e3b      	ldrb	r3, [r7, #24]
 80014be:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
			return;
 80014c2:	e02e      	b.n	8001522 <ConnectFour_ComputerMove+0x212>
	for (uint8_t i = 0; i < BOARD_COLS; i++) {
 80014c4:	7f3b      	ldrb	r3, [r7, #28]
 80014c6:	3301      	adds	r3, #1
 80014c8:	773b      	strb	r3, [r7, #28]
 80014ca:	7f3b      	ldrb	r3, [r7, #28]
 80014cc:	2b06      	cmp	r3, #6
 80014ce:	d9dd      	bls.n	800148c <ConnectFour_ComputerMove+0x17c>
		}
	}

	// If no strategic moves found, make a random move
	while (!validMove) {
 80014d0:	e023      	b.n	800151a <ConnectFour_ComputerMove+0x20a>
		if (HAL_RNG_GenerateRandomNumber(&hrng, &random) == HAL_OK) {
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	4619      	mov	r1, r3
 80014d6:	4814      	ldr	r0, [pc, #80]	@ (8001528 <ConnectFour_ComputerMove+0x218>)
 80014d8:	f005 fa9e 	bl	8006a18 <HAL_RNG_GenerateRandomNumber>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d11b      	bne.n	800151a <ConnectFour_ComputerMove+0x20a>
			uint8_t col = random % BOARD_COLS;
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <ConnectFour_ComputerMove+0x220>)
 80014e6:	fba3 1302 	umull	r1, r3, r3, r2
 80014ea:	1ad1      	subs	r1, r2, r3
 80014ec:	0849      	lsrs	r1, r1, #1
 80014ee:	440b      	add	r3, r1
 80014f0:	0899      	lsrs	r1, r3, #2
 80014f2:	460b      	mov	r3, r1
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	1a5b      	subs	r3, r3, r1
 80014f8:	1ad1      	subs	r1, r2, r3
 80014fa:	460b      	mov	r3, r1
 80014fc:	767b      	strb	r3, [r7, #25]
			if (ConnectFour_DropPiece(col)) {
 80014fe:	7e7b      	ldrb	r3, [r7, #25]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fc69 	bl	8000dd8 <ConnectFour_DropPiece>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d006      	beq.n	800151a <ConnectFour_ComputerMove+0x20a>
				Game.currentCol = col;
 800150c:	4a07      	ldr	r2, [pc, #28]	@ (800152c <ConnectFour_ComputerMove+0x21c>)
 800150e:	7e7b      	ldrb	r3, [r7, #25]
 8001510:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				validMove = 1;
 8001514:	2301      	movs	r3, #1
 8001516:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (!validMove) {
 800151a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0d7      	beq.n	80014d2 <ConnectFour_ComputerMove+0x1c2>
			}
		}
	}
}
 8001522:	3728      	adds	r7, #40	@ 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200000d0 	.word	0x200000d0
 800152c:	2000009c 	.word	0x2000009c
 8001530:	24924925 	.word	0x24924925

08001534 <ConnectFour_CheckWin>:


uint8_t ConnectFour_CheckWin(void){
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	@ 0x24
 8001538:	af00      	add	r7, sp, #0
	// horizontal
	for(int rows = 0; rows < BOARD_ROWS; rows++){
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	e048      	b.n	80015d2 <ConnectFour_CheckWin+0x9e>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	e03f      	b.n	80015c6 <ConnectFour_CheckWin+0x92>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows][cols+1] == Game.currentPlayer && Game.board[rows][cols+2] == Game.currentPlayer && Game.board[rows][cols+3] == Game.currentPlayer){
 8001546:	49a1      	ldr	r1, [pc, #644]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	18ca      	adds	r2, r1, r3
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4413      	add	r3, r2
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	4b9c      	ldr	r3, [pc, #624]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 800155a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800155e:	429a      	cmp	r2, r3
 8001560:	d12e      	bne.n	80015c0 <ConnectFour_CheckWin+0x8c>
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	1c59      	adds	r1, r3, #1
 8001566:	4899      	ldr	r0, [pc, #612]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	4403      	add	r3, r0
 8001572:	440b      	add	r3, r1
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	4b95      	ldr	r3, [pc, #596]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 8001578:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800157c:	429a      	cmp	r2, r3
 800157e:	d11f      	bne.n	80015c0 <ConnectFour_CheckWin+0x8c>
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	1c99      	adds	r1, r3, #2
 8001584:	4891      	ldr	r0, [pc, #580]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	4403      	add	r3, r0
 8001590:	440b      	add	r3, r1
 8001592:	781a      	ldrb	r2, [r3, #0]
 8001594:	4b8d      	ldr	r3, [pc, #564]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 8001596:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800159a:	429a      	cmp	r2, r3
 800159c:	d110      	bne.n	80015c0 <ConnectFour_CheckWin+0x8c>
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	1cd9      	adds	r1, r3, #3
 80015a2:	488a      	ldr	r0, [pc, #552]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	4613      	mov	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	4403      	add	r3, r0
 80015ae:	440b      	add	r3, r1
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	4b86      	ldr	r3, [pc, #536]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 80015b4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d101      	bne.n	80015c0 <ConnectFour_CheckWin+0x8c>
				return 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0ff      	b.n	80017c0 <ConnectFour_CheckWin+0x28c>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	3301      	adds	r3, #1
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	ddbc      	ble.n	8001546 <ConnectFour_CheckWin+0x12>
	for(int rows = 0; rows < BOARD_ROWS; rows++){
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	3301      	adds	r3, #1
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	ddb3      	ble.n	8001540 <ConnectFour_CheckWin+0xc>
			}
		}
	}
	// vertical
	for(int rows = 0; rows < BOARD_ROWS - 3; rows++){
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	e048      	b.n	8001670 <ConnectFour_CheckWin+0x13c>
		for(int cols = 0; cols < BOARD_COLS; cols++){
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	e03f      	b.n	8001664 <ConnectFour_CheckWin+0x130>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows+1][cols] == Game.currentPlayer && Game.board[rows+2][cols] == Game.currentPlayer && Game.board[rows+3][cols] == Game.currentPlayer){
 80015e4:	4979      	ldr	r1, [pc, #484]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	18ca      	adds	r2, r1, r3
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4413      	add	r3, r2
 80015f4:	781a      	ldrb	r2, [r3, #0]
 80015f6:	4b75      	ldr	r3, [pc, #468]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 80015f8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d12e      	bne.n	800165e <ConnectFour_CheckWin+0x12a>
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	4971      	ldr	r1, [pc, #452]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 8001606:	4613      	mov	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	1a9b      	subs	r3, r3, r2
 800160c:	18ca      	adds	r2, r1, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4413      	add	r3, r2
 8001612:	781a      	ldrb	r2, [r3, #0]
 8001614:	4b6d      	ldr	r3, [pc, #436]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 8001616:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800161a:	429a      	cmp	r2, r3
 800161c:	d11f      	bne.n	800165e <ConnectFour_CheckWin+0x12a>
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	1c9a      	adds	r2, r3, #2
 8001622:	496a      	ldr	r1, [pc, #424]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	18ca      	adds	r2, r1, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4413      	add	r3, r2
 8001630:	781a      	ldrb	r2, [r3, #0]
 8001632:	4b66      	ldr	r3, [pc, #408]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 8001634:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001638:	429a      	cmp	r2, r3
 800163a:	d110      	bne.n	800165e <ConnectFour_CheckWin+0x12a>
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	1cda      	adds	r2, r3, #3
 8001640:	4962      	ldr	r1, [pc, #392]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 8001642:	4613      	mov	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	18ca      	adds	r2, r1, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4413      	add	r3, r2
 800164e:	781a      	ldrb	r2, [r3, #0]
 8001650:	4b5e      	ldr	r3, [pc, #376]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 8001652:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001656:	429a      	cmp	r2, r3
 8001658:	d101      	bne.n	800165e <ConnectFour_CheckWin+0x12a>
				return 1;
 800165a:	2301      	movs	r3, #1
 800165c:	e0b0      	b.n	80017c0 <ConnectFour_CheckWin+0x28c>
		for(int cols = 0; cols < BOARD_COLS; cols++){
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	3301      	adds	r3, #1
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	2b06      	cmp	r3, #6
 8001668:	ddbc      	ble.n	80015e4 <ConnectFour_CheckWin+0xb0>
	for(int rows = 0; rows < BOARD_ROWS - 3; rows++){
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2b02      	cmp	r3, #2
 8001674:	ddb3      	ble.n	80015de <ConnectFour_CheckWin+0xaa>
			}
		}
	}
	// diagonal upwards to right
	for(int rows = 0; rows < BOARD_ROWS - 3  ; rows++){
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	e04b      	b.n	8001714 <ConnectFour_CheckWin+0x1e0>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	e042      	b.n	8001708 <ConnectFour_CheckWin+0x1d4>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows+1][cols+1] == Game.currentPlayer && Game.board[rows+2][cols+2] == Game.currentPlayer && Game.board[rows+3][cols+3] == Game.currentPlayer){
 8001682:	4952      	ldr	r1, [pc, #328]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	18ca      	adds	r2, r1, r3
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	4413      	add	r3, r2
 8001692:	781a      	ldrb	r2, [r3, #0]
 8001694:	4b4d      	ldr	r3, [pc, #308]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 8001696:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800169a:	429a      	cmp	r2, r3
 800169c:	d131      	bne.n	8001702 <ConnectFour_CheckWin+0x1ce>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1c59      	adds	r1, r3, #1
 80016a6:	4849      	ldr	r0, [pc, #292]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	1a9b      	subs	r3, r3, r2
 80016ae:	4403      	add	r3, r0
 80016b0:	440b      	add	r3, r1
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	4b45      	ldr	r3, [pc, #276]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 80016b6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d121      	bne.n	8001702 <ConnectFour_CheckWin+0x1ce>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1c9a      	adds	r2, r3, #2
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1c99      	adds	r1, r3, #2
 80016c6:	4841      	ldr	r0, [pc, #260]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	1a9b      	subs	r3, r3, r2
 80016ce:	4403      	add	r3, r0
 80016d0:	440b      	add	r3, r1
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	4b3d      	ldr	r3, [pc, #244]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 80016d6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80016da:	429a      	cmp	r2, r3
 80016dc:	d111      	bne.n	8001702 <ConnectFour_CheckWin+0x1ce>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1cda      	adds	r2, r3, #3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1cd9      	adds	r1, r3, #3
 80016e6:	4839      	ldr	r0, [pc, #228]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 80016e8:	4613      	mov	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	4403      	add	r3, r0
 80016f0:	440b      	add	r3, r1
 80016f2:	781a      	ldrb	r2, [r3, #0]
 80016f4:	4b35      	ldr	r3, [pc, #212]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 80016f6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d101      	bne.n	8001702 <ConnectFour_CheckWin+0x1ce>
				return 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	e05e      	b.n	80017c0 <ConnectFour_CheckWin+0x28c>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	3301      	adds	r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2b03      	cmp	r3, #3
 800170c:	ddb9      	ble.n	8001682 <ConnectFour_CheckWin+0x14e>
	for(int rows = 0; rows < BOARD_ROWS - 3  ; rows++){
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3301      	adds	r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b02      	cmp	r3, #2
 8001718:	ddb0      	ble.n	800167c <ConnectFour_CheckWin+0x148>
			}
		}
	}
	// diagonal downwards to right
	for(int rows = 3; rows < BOARD_ROWS; rows++){
 800171a:	2303      	movs	r3, #3
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	e04b      	b.n	80017b8 <ConnectFour_CheckWin+0x284>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 8001720:	2300      	movs	r3, #0
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	e042      	b.n	80017ac <ConnectFour_CheckWin+0x278>
			if(Game.board[rows][cols] == Game.currentPlayer && Game.board[rows-1][cols+1] == Game.currentPlayer && Game.board[rows-2][cols+2] == Game.currentPlayer && Game.board[rows-3][cols+3] == Game.currentPlayer){
 8001726:	4929      	ldr	r1, [pc, #164]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	1a9b      	subs	r3, r3, r2
 8001730:	18ca      	adds	r2, r1, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	4413      	add	r3, r2
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	4b24      	ldr	r3, [pc, #144]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 800173a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800173e:	429a      	cmp	r2, r3
 8001740:	d131      	bne.n	80017a6 <ConnectFour_CheckWin+0x272>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	1e5a      	subs	r2, r3, #1
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	1c59      	adds	r1, r3, #1
 800174a:	4820      	ldr	r0, [pc, #128]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 800174c:	4613      	mov	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	1a9b      	subs	r3, r3, r2
 8001752:	4403      	add	r3, r0
 8001754:	440b      	add	r3, r1
 8001756:	781a      	ldrb	r2, [r3, #0]
 8001758:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 800175a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800175e:	429a      	cmp	r2, r3
 8001760:	d121      	bne.n	80017a6 <ConnectFour_CheckWin+0x272>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	1e9a      	subs	r2, r3, #2
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	1c99      	adds	r1, r3, #2
 800176a:	4818      	ldr	r0, [pc, #96]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 800176c:	4613      	mov	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	1a9b      	subs	r3, r3, r2
 8001772:	4403      	add	r3, r0
 8001774:	440b      	add	r3, r1
 8001776:	781a      	ldrb	r2, [r3, #0]
 8001778:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 800177a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800177e:	429a      	cmp	r2, r3
 8001780:	d111      	bne.n	80017a6 <ConnectFour_CheckWin+0x272>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	1eda      	subs	r2, r3, #3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	1cd9      	adds	r1, r3, #3
 800178a:	4810      	ldr	r0, [pc, #64]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 800178c:	4613      	mov	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	4403      	add	r3, r0
 8001794:	440b      	add	r3, r1
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <ConnectFour_CheckWin+0x298>)
 800179a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800179e:	429a      	cmp	r2, r3
 80017a0:	d101      	bne.n	80017a6 <ConnectFour_CheckWin+0x272>
				return 1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00c      	b.n	80017c0 <ConnectFour_CheckWin+0x28c>
		for(int cols = 0; cols < BOARD_COLS - 3; cols++){
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	ddb9      	ble.n	8001726 <ConnectFour_CheckWin+0x1f2>
	for(int rows = 3; rows < BOARD_ROWS; rows++){
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3301      	adds	r3, #1
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	ddb0      	ble.n	8001720 <ConnectFour_CheckWin+0x1ec>
			}
		}
	}
	return 0;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3724      	adds	r7, #36	@ 0x24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	2000009c 	.word	0x2000009c

080017d0 <ConnectFour_CheckDraw>:

uint8_t ConnectFour_CheckDraw(void){
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
	for (int cols = 0; cols < BOARD_COLS; cols++){
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	e018      	b.n	800180e <ConnectFour_CheckDraw+0x3e>
		for(int rows = 0; rows < BOARD_ROWS; rows++){
 80017dc:	2300      	movs	r3, #0
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	e00f      	b.n	8001802 <ConnectFour_CheckDraw+0x32>
			if(Game.board[rows][cols] == EMPTY_CELL){
 80017e2:	4910      	ldr	r1, [pc, #64]	@ (8001824 <ConnectFour_CheckDraw+0x54>)
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	4613      	mov	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	18ca      	adds	r2, r1, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <ConnectFour_CheckDraw+0x2c>
				return 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	e00c      	b.n	8001816 <ConnectFour_CheckDraw+0x46>
		for(int rows = 0; rows < BOARD_ROWS; rows++){
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2b05      	cmp	r3, #5
 8001806:	ddec      	ble.n	80017e2 <ConnectFour_CheckDraw+0x12>
	for (int cols = 0; cols < BOARD_COLS; cols++){
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3301      	adds	r3, #1
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b06      	cmp	r3, #6
 8001812:	dde3      	ble.n	80017dc <ConnectFour_CheckDraw+0xc>
			}
		}
	}
	return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	2000009c 	.word	0x2000009c

08001828 <ConnectFour_GetGameTime>:

uint8_t ConnectFour_GetGameTime(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
	static uint32_t lastTick = 0;
	uint32_t currentTick = HAL_GetTick();
 800182e:	f002 facd 	bl	8003dcc <HAL_GetTick>
 8001832:	6038      	str	r0, [r7, #0]
	uint32_t elapsedTicks;
	if (currentTick >= lastTick) {
 8001834:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <ConnectFour_GetGameTime+0x48>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d305      	bcc.n	800184a <ConnectFour_GetGameTime+0x22>
		elapsedTicks = currentTick - lastTick;
 800183e:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <ConnectFour_GetGameTime+0x48>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	e005      	b.n	8001856 <ConnectFour_GetGameTime+0x2e>
	} else {
		elapsedTicks = ((0xFFFFFFFF - lastTick) + currentTick);
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <ConnectFour_GetGameTime+0x48>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	3b01      	subs	r3, #1
 8001854:	607b      	str	r3, [r7, #4]
	}
	lastTick = currentTick;
 8001856:	4a06      	ldr	r2, [pc, #24]	@ (8001870 <ConnectFour_GetGameTime+0x48>)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	6013      	str	r3, [r2, #0]
	return (uint8_t)(elapsedTicks / 1000);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <ConnectFour_GetGameTime+0x4c>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	b2db      	uxtb	r3, r3
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200000e8 	.word	0x200000e8
 8001874:	10624dd3 	.word	0x10624dd3

08001878 <enableInterruptIRQ>:
 */


#include "InterruptControl.h"

void enableInterruptIRQ(uint8_t IRQ_num){
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	if (IRQ_num < 32){
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b1f      	cmp	r3, #31
 8001886:	d804      	bhi.n	8001892 <enableInterruptIRQ+0x1a>
		// *NVIC_ISER_SETENABLE = (SET << IRQ_num);
		HAL_NVIC_EnableIRQ(IRQ_num);
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	4618      	mov	r0, r3
 800188e:	f002 fc06 	bl	800409e <HAL_NVIC_EnableIRQ>
	}
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <disableInterruptIRQ>:

void disableInterruptIRQ(uint8_t IRQ_num){
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	71fb      	strb	r3, [r7, #7]
	if (IRQ_num < 32){
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	2b1f      	cmp	r3, #31
 80018a8:	d804      	bhi.n	80018b4 <disableInterruptIRQ+0x1a>
		// *NVIC_ISER_CLEARENABLE = (SET << IRQ_num);
		HAL_NVIC_DisableIRQ(IRQ_num);
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fc03 	bl	80040ba <HAL_NVIC_DisableIRQ>
	}
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <clearInterruptIRQ>:
void setInterruptIRQ(uint8_t IRQ_num){


}

void clearInterruptIRQ(uint8_t IRQ_num){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	if (IRQ_num < 32){
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b1f      	cmp	r3, #31
 80018ca:	d804      	bhi.n	80018d6 <clearInterruptIRQ+0x1a>
		// *NVIC_ISER_CLEARPENDING = (SET << IRQ_num);
		HAL_NVIC_ClearPendingIRQ(IRQ_num);
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 fc0c 	bl	80040ee <HAL_NVIC_ClearPendingIRQ>
	}

}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <clearInterruptEXTI>:

void clearInterruptEXTI(uint8_t IRQ_num){
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	// EXTI->PR |= (SET << IRQ_num);
	__HAL_GPIO_EXTI_CLEAR_FLAG(IRQ_num);
 80018ea:	4a04      	ldr	r2, [pc, #16]	@ (80018fc <clearInterruptEXTI+0x1c>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	6153      	str	r3, [r2, #20]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40013c00 	.word	0x40013c00

08001900 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	@ 0x30
 8001904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	4b5a      	ldr	r3, [pc, #360]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	4a59      	ldr	r2, [pc, #356]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 8001910:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001914:	6453      	str	r3, [r2, #68]	@ 0x44
 8001916:	4b57      	ldr	r3, [pc, #348]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800191e:	61bb      	str	r3, [r7, #24]
 8001920:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	4b53      	ldr	r3, [pc, #332]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a52      	ldr	r2, [pc, #328]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b50      	ldr	r3, [pc, #320]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b4c      	ldr	r3, [pc, #304]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a4b      	ldr	r2, [pc, #300]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b49      	ldr	r3, [pc, #292]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b45      	ldr	r3, [pc, #276]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a44      	ldr	r2, [pc, #272]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b42      	ldr	r3, [pc, #264]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b3b      	ldr	r3, [pc, #236]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b37      	ldr	r3, [pc, #220]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a36      	ldr	r2, [pc, #216]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 800199c:	f043 0320 	orr.w	r3, r3, #32
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b34      	ldr	r3, [pc, #208]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0320 	and.w	r3, r3, #32
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4b30      	ldr	r3, [pc, #192]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 80019b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b2d      	ldr	r3, [pc, #180]	@ (8001a74 <LCD_GPIO_Init+0x174>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80019ca:	f641 0358 	movw	r3, #6232	@ 0x1858
 80019ce:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80019d8:	2302      	movs	r3, #2
 80019da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80019dc:	230e      	movs	r3, #14
 80019de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4619      	mov	r1, r3
 80019e6:	4824      	ldr	r0, [pc, #144]	@ (8001a78 <LCD_GPIO_Init+0x178>)
 80019e8:	f002 fb90 	bl	800410c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80019ec:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80019f0:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	4820      	ldr	r0, [pc, #128]	@ (8001a7c <LCD_GPIO_Init+0x17c>)
 80019fa:	f002 fb87 	bl	800410c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80019fe:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	4619      	mov	r1, r3
 8001a0a:	481d      	ldr	r0, [pc, #116]	@ (8001a80 <LCD_GPIO_Init+0x180>)
 8001a0c:	f002 fb7e 	bl	800410c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001a10:	2348      	movs	r3, #72	@ 0x48
 8001a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	481a      	ldr	r0, [pc, #104]	@ (8001a84 <LCD_GPIO_Init+0x184>)
 8001a1c:	f002 fb76 	bl	800410c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001a20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4816      	ldr	r0, [pc, #88]	@ (8001a88 <LCD_GPIO_Init+0x188>)
 8001a2e:	f002 fb6d 	bl	800410c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001a32:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001a36:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4813      	ldr	r0, [pc, #76]	@ (8001a8c <LCD_GPIO_Init+0x18c>)
 8001a40:	f002 fb64 	bl	800410c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001a44:	2303      	movs	r3, #3
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001a48:	2309      	movs	r3, #9
 8001a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4619      	mov	r1, r3
 8001a52:	480a      	ldr	r0, [pc, #40]	@ (8001a7c <LCD_GPIO_Init+0x17c>)
 8001a54:	f002 fb5a 	bl	800410c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001a58:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	4619      	mov	r1, r3
 8001a64:	4809      	ldr	r0, [pc, #36]	@ (8001a8c <LCD_GPIO_Init+0x18c>)
 8001a66:	f002 fb51 	bl	800410c <HAL_GPIO_Init>
}
 8001a6a:	bf00      	nop
 8001a6c:	3730      	adds	r7, #48	@ 0x30
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020c00 	.word	0x40020c00
 8001a88:	40021400 	.word	0x40021400
 8001a8c:	40021800 	.word	0x40021800

08001a90 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b090      	sub	sp, #64	@ 0x40
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001a9e:	23f0      	movs	r3, #240	@ 0xf0
 8001aa0:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001aa6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001aaa:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001aac:	2302      	movs	r3, #2
 8001aae:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001ab0:	23ff      	movs	r3, #255	@ 0xff
 8001ab2:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001abc:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001abe:	2305      	movs	r3, #5
 8001ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b08 <LTCD_Layer_Init+0x78>)
 8001aca:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001acc:	23f0      	movs	r3, #240	@ 0xf0
 8001ace:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001ad0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001ae8:	79fa      	ldrb	r2, [r7, #7]
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4619      	mov	r1, r3
 8001af0:	4806      	ldr	r0, [pc, #24]	@ (8001b0c <LTCD_Layer_Init+0x7c>)
 8001af2:	f003 ff4d 	bl	8005990 <HAL_LTDC_ConfigLayer>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001afc:	f000 fb99 	bl	8002232 <LCD_Error_Handler>
	}
}
 8001b00:	bf00      	nop
 8001b02:	3740      	adds	r7, #64	@ 0x40
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200001c8 	.word	0x200001c8
 8001b0c:	200000ec 	.word	0x200000ec

08001b10 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001b14:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b16:	4a2b      	ldr	r2, [pc, #172]	@ (8001bc4 <LTCD__Init+0xb4>)
 8001b18:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001b1a:	4b29      	ldr	r3, [pc, #164]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b1c:	2209      	movs	r2, #9
 8001b1e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001b20:	4b27      	ldr	r3, [pc, #156]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001b26:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b28:	221d      	movs	r2, #29
 8001b2a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001b2c:	4b24      	ldr	r3, [pc, #144]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b2e:	2203      	movs	r2, #3
 8001b30:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001b32:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b34:	f240 120d 	movw	r2, #269	@ 0x10d
 8001b38:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001b3a:	4b21      	ldr	r3, [pc, #132]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b3c:	f240 1243 	movw	r2, #323	@ 0x143
 8001b40:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001b42:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b44:	f240 1217 	movw	r2, #279	@ 0x117
 8001b48:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b4c:	f240 1247 	movw	r2, #327	@ 0x147
 8001b50:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001b52:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b6a:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <LTCD__Init+0xb8>)
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001b70:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <LTCD__Init+0xb8>)
 8001b72:	22c0      	movs	r2, #192	@ 0xc0
 8001b74:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001b76:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <LTCD__Init+0xb8>)
 8001b78:	2204      	movs	r2, #4
 8001b7a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <LTCD__Init+0xb8>)
 8001b7e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b82:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001b84:	4810      	ldr	r0, [pc, #64]	@ (8001bc8 <LTCD__Init+0xb8>)
 8001b86:	f004 fd5d 	bl	8006644 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b96:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001ba2:	f7ff fead 	bl	8001900 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001ba6:	4806      	ldr	r0, [pc, #24]	@ (8001bc0 <LTCD__Init+0xb0>)
 8001ba8:	f003 fe22 	bl	80057f0 <HAL_LTDC_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001bb2:	f000 fb3e 	bl	8002232 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001bb6:	f000 fb59 	bl	800226c <ili9341_Init>
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200000ec 	.word	0x200000ec
 8001bc4:	40016800 	.word	0x40016800
 8001bc8:	20000194 	.word	0x20000194

08001bcc <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80fb      	strh	r3, [r7, #6]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	80bb      	strh	r3, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001bde:	88ba      	ldrh	r2, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	461a      	mov	r2, r3
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	4413      	add	r3, r2
 8001bee:	4905      	ldr	r1, [pc, #20]	@ (8001c04 <LCD_Draw_Pixel+0x38>)
 8001bf0:	887a      	ldrh	r2, [r7, #2]
 8001bf2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	200001c8 	.word	0x200001c8

08001c08 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4604      	mov	r4, r0
 8001c10:	4608      	mov	r0, r1
 8001c12:	4611      	mov	r1, r2
 8001c14:	461a      	mov	r2, r3
 8001c16:	4623      	mov	r3, r4
 8001c18:	80fb      	strh	r3, [r7, #6]
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	80bb      	strh	r3, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	807b      	strh	r3, [r7, #2]
 8001c22:	4613      	mov	r3, r2
 8001c24:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	425b      	negs	r3, r3
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	81fb      	strh	r3, [r7, #14]
 8001c2e:	e034      	b.n	8001c9a <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001c30:	887b      	ldrh	r3, [r7, #2]
 8001c32:	425b      	negs	r3, r3
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	81bb      	strh	r3, [r7, #12]
 8001c38:	e024      	b.n	8001c84 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001c3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c3e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c42:	fb03 f202 	mul.w	r2, r3, r2
 8001c46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c4a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	441a      	add	r2, r3
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	8879      	ldrh	r1, [r7, #2]
 8001c58:	fb01 f303 	mul.w	r3, r1, r3
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dc0b      	bgt.n	8001c78 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8001c60:	89ba      	ldrh	r2, [r7, #12]
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	4413      	add	r3, r2
 8001c66:	b298      	uxth	r0, r3
 8001c68:	89fa      	ldrh	r2, [r7, #14]
 8001c6a:	88bb      	ldrh	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	883a      	ldrh	r2, [r7, #0]
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7ff ffaa 	bl	8001bcc <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001c78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3301      	adds	r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	81bb      	strh	r3, [r7, #12]
 8001c84:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c88:	887b      	ldrh	r3, [r7, #2]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	ddd5      	ble.n	8001c3a <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8001c8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3301      	adds	r3, #1
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	81fb      	strh	r3, [r7, #14]
 8001c9a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	ddc5      	ble.n	8001c30 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd90      	pop	{r4, r7, pc}

08001cae <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001cae:	b590      	push	{r4, r7, lr}
 8001cb0:	b085      	sub	sp, #20
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	4608      	mov	r0, r1
 8001cb8:	4611      	mov	r1, r2
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4623      	mov	r3, r4
 8001cbe:	80fb      	strh	r3, [r7, #6]
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	80bb      	strh	r3, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	81fb      	strh	r3, [r7, #14]
 8001cd0:	e00b      	b.n	8001cea <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8001cd2:	89fa      	ldrh	r2, [r7, #14]
 8001cd4:	88bb      	ldrh	r3, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b299      	uxth	r1, r3
 8001cda:	883a      	ldrh	r2, [r7, #0]
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ff74 	bl	8001bcc <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001ce4:	89fb      	ldrh	r3, [r7, #14]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	81fb      	strh	r3, [r7, #14]
 8001cea:	89fa      	ldrh	r2, [r7, #14]
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d3ef      	bcc.n	8001cd2 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}

08001cfc <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4604      	mov	r4, r0
 8001d04:	4608      	mov	r0, r1
 8001d06:	4611      	mov	r1, r2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	80fb      	strh	r3, [r7, #6]
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80bb      	strh	r3, [r7, #4]
 8001d12:	460b      	mov	r3, r1
 8001d14:	807b      	strh	r3, [r7, #2]
 8001d16:	4613      	mov	r3, r2
 8001d18:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	81fb      	strh	r3, [r7, #14]
 8001d1e:	e00b      	b.n	8001d38 <LCD_Draw_Horizontal_Line+0x3c>
  {
      LCD_Draw_Pixel(i+x, y, color);
 8001d20:	89fa      	ldrh	r2, [r7, #14]
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	4413      	add	r3, r2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	883a      	ldrh	r2, [r7, #0]
 8001d2a:	88b9      	ldrh	r1, [r7, #4]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff4d 	bl	8001bcc <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001d32:	89fb      	ldrh	r3, [r7, #14]
 8001d34:	3301      	adds	r3, #1
 8001d36:	81fb      	strh	r3, [r7, #14]
 8001d38:	89fa      	ldrh	r2, [r7, #14]
 8001d3a:	887b      	ldrh	r3, [r7, #2]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d3ef      	bcc.n	8001d20 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd90      	pop	{r4, r7, pc}
	...

08001d4c <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	460a      	mov	r2, r1
 8001d56:	71fb      	strb	r3, [r7, #7]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10e      	bne.n	8001d80 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	e007      	b.n	8001d78 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001d68:	4908      	ldr	r1, [pc, #32]	@ (8001d8c <LCD_Clear+0x40>)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	88ba      	ldrh	r2, [r7, #4]
 8001d6e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3301      	adds	r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001d7e:	d3f3      	bcc.n	8001d68 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	200001c8 	.word	0x200001c8

08001d90 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001d9a:	4a04      	ldr	r2, [pc, #16]	@ (8001dac <LCD_SetTextColor+0x1c>)
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	8013      	strh	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	20000000 	.word	0x20000000

08001db0 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001db8:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <LCD_SetFont+0x1c>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6013      	str	r3, [r2, #0]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	200001c4 	.word	0x200001c4

08001dd0 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	603a      	str	r2, [r7, #0]
 8001dda:	80fb      	strh	r3, [r7, #6]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e04c      	b.n	8001e88 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	e03f      	b.n	8001e74 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4b27      	ldr	r3, [pc, #156]	@ (8001ea0 <LCD_Draw_Char+0xd0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	889b      	ldrh	r3, [r3, #4]
 8001e06:	4a27      	ldr	r2, [pc, #156]	@ (8001ea4 <LCD_Draw_Char+0xd4>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	08db      	lsrs	r3, r3, #3
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	2280      	movs	r2, #128	@ 0x80
 8001e14:	409a      	lsls	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	fa42 f303 	asr.w	r3, r2, r3
 8001e1c:	400b      	ands	r3, r1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d104      	bne.n	8001e2c <LCD_Draw_Char+0x5c>
 8001e22:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <LCD_Draw_Char+0xd0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	889b      	ldrh	r3, [r3, #4]
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	d920      	bls.n	8001e6e <LCD_Draw_Char+0x9e>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	fa42 f303 	asr.w	r3, r2, r3
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d104      	bne.n	8001e50 <LCD_Draw_Char+0x80>
 8001e46:	4b16      	ldr	r3, [pc, #88]	@ (8001ea0 <LCD_Draw_Char+0xd0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	889b      	ldrh	r3, [r3, #4]
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d80e      	bhi.n	8001e6e <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	4413      	add	r3, r2
 8001e58:	b298      	uxth	r0, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	88bb      	ldrh	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4a10      	ldr	r2, [pc, #64]	@ (8001ea8 <LCD_Draw_Char+0xd8>)
 8001e66:	8812      	ldrh	r2, [r2, #0]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7ff feaf 	bl	8001bcc <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	3301      	adds	r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <LCD_Draw_Char+0xd0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	889b      	ldrh	r3, [r3, #4]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d3b8      	bcc.n	8001df4 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3301      	adds	r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <LCD_Draw_Char+0xd0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	88db      	ldrh	r3, [r3, #6]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d3ab      	bcc.n	8001dee <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001e96:	bf00      	nop
 8001e98:	bf00      	nop
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200001c4 	.word	0x200001c4
 8001ea4:	aaaaaaab 	.word	0xaaaaaaab
 8001ea8:	20000000 	.word	0x20000000

08001eac <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	80bb      	strh	r3, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	3b20      	subs	r3, #32
 8001ec2:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001ec4:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <LCD_DisplayChar+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	4907      	ldr	r1, [pc, #28]	@ (8001eec <LCD_DisplayChar+0x40>)
 8001ece:	6809      	ldr	r1, [r1, #0]
 8001ed0:	88c9      	ldrh	r1, [r1, #6]
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	441a      	add	r2, r3
 8001eda:	88b9      	ldrh	r1, [r7, #4]
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff76 	bl	8001dd0 <LCD_Draw_Char>
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	200001c4 	.word	0x200001c4

08001ef0 <screen1>:
	LCD_DisplayChar(125,160,'r');
	LCD_DisplayChar(130,160,'l');
	LCD_DisplayChar(140,160,'d');
}

void screen1(void){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLACK);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff ff28 	bl	8001d4c <LCD_Clear>
	// Initial game screen, select game mode
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8001efc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001f00:	f7ff ff46 	bl	8001d90 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001f04:	4891      	ldr	r0, [pc, #580]	@ (800214c <screen1+0x25c>)
 8001f06:	f7ff ff53 	bl	8001db0 <LCD_SetFont>

	LCD_DisplayChar(30, 20, 'C');
 8001f0a:	2243      	movs	r2, #67	@ 0x43
 8001f0c:	2114      	movs	r1, #20
 8001f0e:	201e      	movs	r0, #30
 8001f10:	f7ff ffcc 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(50, 20, 'O');
 8001f14:	224f      	movs	r2, #79	@ 0x4f
 8001f16:	2114      	movs	r1, #20
 8001f18:	2032      	movs	r0, #50	@ 0x32
 8001f1a:	f7ff ffc7 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(70, 20, 'N');
 8001f1e:	224e      	movs	r2, #78	@ 0x4e
 8001f20:	2114      	movs	r1, #20
 8001f22:	2046      	movs	r0, #70	@ 0x46
 8001f24:	f7ff ffc2 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(90, 20, 'N');
 8001f28:	224e      	movs	r2, #78	@ 0x4e
 8001f2a:	2114      	movs	r1, #20
 8001f2c:	205a      	movs	r0, #90	@ 0x5a
 8001f2e:	f7ff ffbd 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(110, 20, 'E');
 8001f32:	2245      	movs	r2, #69	@ 0x45
 8001f34:	2114      	movs	r1, #20
 8001f36:	206e      	movs	r0, #110	@ 0x6e
 8001f38:	f7ff ffb8 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(130, 20, 'C');
 8001f3c:	2243      	movs	r2, #67	@ 0x43
 8001f3e:	2114      	movs	r1, #20
 8001f40:	2082      	movs	r0, #130	@ 0x82
 8001f42:	f7ff ffb3 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(150, 20, 'T');
 8001f46:	2254      	movs	r2, #84	@ 0x54
 8001f48:	2114      	movs	r1, #20
 8001f4a:	2096      	movs	r0, #150	@ 0x96
 8001f4c:	f7ff ffae 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(170, 20, ' ');
 8001f50:	2220      	movs	r2, #32
 8001f52:	2114      	movs	r1, #20
 8001f54:	20aa      	movs	r0, #170	@ 0xaa
 8001f56:	f7ff ffa9 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(190, 20, '4');
 8001f5a:	2234      	movs	r2, #52	@ 0x34
 8001f5c:	2114      	movs	r1, #20
 8001f5e:	20be      	movs	r0, #190	@ 0xbe
 8001f60:	f7ff ffa4 	bl	8001eac <LCD_DisplayChar>

	LCD_DisplayChar(20,80,'S');
 8001f64:	2253      	movs	r2, #83	@ 0x53
 8001f66:	2150      	movs	r1, #80	@ 0x50
 8001f68:	2014      	movs	r0, #20
 8001f6a:	f7ff ff9f 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(35,80,'e');
 8001f6e:	2265      	movs	r2, #101	@ 0x65
 8001f70:	2150      	movs	r1, #80	@ 0x50
 8001f72:	2023      	movs	r0, #35	@ 0x23
 8001f74:	f7ff ff9a 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(45,80,'l');
 8001f78:	226c      	movs	r2, #108	@ 0x6c
 8001f7a:	2150      	movs	r1, #80	@ 0x50
 8001f7c:	202d      	movs	r0, #45	@ 0x2d
 8001f7e:	f7ff ff95 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(55,80,'e');
 8001f82:	2265      	movs	r2, #101	@ 0x65
 8001f84:	2150      	movs	r1, #80	@ 0x50
 8001f86:	2037      	movs	r0, #55	@ 0x37
 8001f88:	f7ff ff90 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(70,80,'c');
 8001f8c:	2263      	movs	r2, #99	@ 0x63
 8001f8e:	2150      	movs	r1, #80	@ 0x50
 8001f90:	2046      	movs	r0, #70	@ 0x46
 8001f92:	f7ff ff8b 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(80,80,'t');
 8001f96:	2274      	movs	r2, #116	@ 0x74
 8001f98:	2150      	movs	r1, #80	@ 0x50
 8001f9a:	2050      	movs	r0, #80	@ 0x50
 8001f9c:	f7ff ff86 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(100,80,'G');
 8001fa0:	2247      	movs	r2, #71	@ 0x47
 8001fa2:	2150      	movs	r1, #80	@ 0x50
 8001fa4:	2064      	movs	r0, #100	@ 0x64
 8001fa6:	f7ff ff81 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(118,80,'a');
 8001faa:	2261      	movs	r2, #97	@ 0x61
 8001fac:	2150      	movs	r1, #80	@ 0x50
 8001fae:	2076      	movs	r0, #118	@ 0x76
 8001fb0:	f7ff ff7c 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(135,80,'m');
 8001fb4:	226d      	movs	r2, #109	@ 0x6d
 8001fb6:	2150      	movs	r1, #80	@ 0x50
 8001fb8:	2087      	movs	r0, #135	@ 0x87
 8001fba:	f7ff ff77 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(150,80,'e');
 8001fbe:	2265      	movs	r2, #101	@ 0x65
 8001fc0:	2150      	movs	r1, #80	@ 0x50
 8001fc2:	2096      	movs	r0, #150	@ 0x96
 8001fc4:	f7ff ff72 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(165,80,'m');
 8001fc8:	226d      	movs	r2, #109	@ 0x6d
 8001fca:	2150      	movs	r1, #80	@ 0x50
 8001fcc:	20a5      	movs	r0, #165	@ 0xa5
 8001fce:	f7ff ff6d 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(180,80,'o');
 8001fd2:	226f      	movs	r2, #111	@ 0x6f
 8001fd4:	2150      	movs	r1, #80	@ 0x50
 8001fd6:	20b4      	movs	r0, #180	@ 0xb4
 8001fd8:	f7ff ff68 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(192,80,'d');
 8001fdc:	2264      	movs	r2, #100	@ 0x64
 8001fde:	2150      	movs	r1, #80	@ 0x50
 8001fe0:	20c0      	movs	r0, #192	@ 0xc0
 8001fe2:	f7ff ff63 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(205,80,'e');
 8001fe6:	2265      	movs	r2, #101	@ 0x65
 8001fe8:	2150      	movs	r1, #80	@ 0x50
 8001fea:	20cd      	movs	r0, #205	@ 0xcd
 8001fec:	f7ff ff5e 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(215,80,':');
 8001ff0:	223a      	movs	r2, #58	@ 0x3a
 8001ff2:	2150      	movs	r1, #80	@ 0x50
 8001ff4:	20d7      	movs	r0, #215	@ 0xd7
 8001ff6:	f7ff ff59 	bl	8001eac <LCD_DisplayChar>
	// button 1
	LCD_DisplayChar(50,150,'1');
 8001ffa:	2231      	movs	r2, #49	@ 0x31
 8001ffc:	2196      	movs	r1, #150	@ 0x96
 8001ffe:	2032      	movs	r0, #50	@ 0x32
 8002000:	f7ff ff54 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(70,150,'P');
 8002004:	2250      	movs	r2, #80	@ 0x50
 8002006:	2196      	movs	r1, #150	@ 0x96
 8002008:	2046      	movs	r0, #70	@ 0x46
 800200a:	f7ff ff4f 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(80,150,'l');
 800200e:	226c      	movs	r2, #108	@ 0x6c
 8002010:	2196      	movs	r1, #150	@ 0x96
 8002012:	2050      	movs	r0, #80	@ 0x50
 8002014:	f7ff ff4a 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(90,150,'a');
 8002018:	2261      	movs	r2, #97	@ 0x61
 800201a:	2196      	movs	r1, #150	@ 0x96
 800201c:	205a      	movs	r0, #90	@ 0x5a
 800201e:	f7ff ff45 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(100,150,'y');
 8002022:	2279      	movs	r2, #121	@ 0x79
 8002024:	2196      	movs	r1, #150	@ 0x96
 8002026:	2064      	movs	r0, #100	@ 0x64
 8002028:	f7ff ff40 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(110,150,'e');
 800202c:	2265      	movs	r2, #101	@ 0x65
 800202e:	2196      	movs	r1, #150	@ 0x96
 8002030:	206e      	movs	r0, #110	@ 0x6e
 8002032:	f7ff ff3b 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(120,150,'r');
 8002036:	2272      	movs	r2, #114	@ 0x72
 8002038:	2196      	movs	r1, #150	@ 0x96
 800203a:	2078      	movs	r0, #120	@ 0x78
 800203c:	f7ff ff36 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(140,150,'M');
 8002040:	224d      	movs	r2, #77	@ 0x4d
 8002042:	2196      	movs	r1, #150	@ 0x96
 8002044:	208c      	movs	r0, #140	@ 0x8c
 8002046:	f7ff ff31 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(155,150,'o');
 800204a:	226f      	movs	r2, #111	@ 0x6f
 800204c:	2196      	movs	r1, #150	@ 0x96
 800204e:	209b      	movs	r0, #155	@ 0x9b
 8002050:	f7ff ff2c 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(167,150,'d');
 8002054:	2264      	movs	r2, #100	@ 0x64
 8002056:	2196      	movs	r1, #150	@ 0x96
 8002058:	20a7      	movs	r0, #167	@ 0xa7
 800205a:	f7ff ff27 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(180,150,'e');
 800205e:	2265      	movs	r2, #101	@ 0x65
 8002060:	2196      	movs	r1, #150	@ 0x96
 8002062:	20b4      	movs	r0, #180	@ 0xb4
 8002064:	f7ff ff22 	bl	8001eac <LCD_DisplayChar>
	LCD_Draw_Vertical_Line(45,145,35,LCD_COLOR_WHITE);
 8002068:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800206c:	2223      	movs	r2, #35	@ 0x23
 800206e:	2191      	movs	r1, #145	@ 0x91
 8002070:	202d      	movs	r0, #45	@ 0x2d
 8002072:	f7ff fe1c 	bl	8001cae <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(195,145,35,LCD_COLOR_WHITE);
 8002076:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800207a:	2223      	movs	r2, #35	@ 0x23
 800207c:	2191      	movs	r1, #145	@ 0x91
 800207e:	20c3      	movs	r0, #195	@ 0xc3
 8002080:	f7ff fe15 	bl	8001cae <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(45,145,150,LCD_COLOR_WHITE);
 8002084:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002088:	2296      	movs	r2, #150	@ 0x96
 800208a:	2191      	movs	r1, #145	@ 0x91
 800208c:	202d      	movs	r0, #45	@ 0x2d
 800208e:	f7ff fe35 	bl	8001cfc <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(45,180,150,LCD_COLOR_WHITE);
 8002092:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002096:	2296      	movs	r2, #150	@ 0x96
 8002098:	21b4      	movs	r1, #180	@ 0xb4
 800209a:	202d      	movs	r0, #45	@ 0x2d
 800209c:	f7ff fe2e 	bl	8001cfc <LCD_Draw_Horizontal_Line>

	// button 2
	LCD_DisplayChar(50,220,'2');
 80020a0:	2232      	movs	r2, #50	@ 0x32
 80020a2:	21dc      	movs	r1, #220	@ 0xdc
 80020a4:	2032      	movs	r0, #50	@ 0x32
 80020a6:	f7ff ff01 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(70,220,'P');
 80020aa:	2250      	movs	r2, #80	@ 0x50
 80020ac:	21dc      	movs	r1, #220	@ 0xdc
 80020ae:	2046      	movs	r0, #70	@ 0x46
 80020b0:	f7ff fefc 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(80,220,'l');
 80020b4:	226c      	movs	r2, #108	@ 0x6c
 80020b6:	21dc      	movs	r1, #220	@ 0xdc
 80020b8:	2050      	movs	r0, #80	@ 0x50
 80020ba:	f7ff fef7 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(90,220,'a');
 80020be:	2261      	movs	r2, #97	@ 0x61
 80020c0:	21dc      	movs	r1, #220	@ 0xdc
 80020c2:	205a      	movs	r0, #90	@ 0x5a
 80020c4:	f7ff fef2 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(100,220,'y');
 80020c8:	2279      	movs	r2, #121	@ 0x79
 80020ca:	21dc      	movs	r1, #220	@ 0xdc
 80020cc:	2064      	movs	r0, #100	@ 0x64
 80020ce:	f7ff feed 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(110,220,'e');
 80020d2:	2265      	movs	r2, #101	@ 0x65
 80020d4:	21dc      	movs	r1, #220	@ 0xdc
 80020d6:	206e      	movs	r0, #110	@ 0x6e
 80020d8:	f7ff fee8 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(120,220,'r');
 80020dc:	2272      	movs	r2, #114	@ 0x72
 80020de:	21dc      	movs	r1, #220	@ 0xdc
 80020e0:	2078      	movs	r0, #120	@ 0x78
 80020e2:	f7ff fee3 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(140,220,'M');
 80020e6:	224d      	movs	r2, #77	@ 0x4d
 80020e8:	21dc      	movs	r1, #220	@ 0xdc
 80020ea:	208c      	movs	r0, #140	@ 0x8c
 80020ec:	f7ff fede 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(155,220,'o');
 80020f0:	226f      	movs	r2, #111	@ 0x6f
 80020f2:	21dc      	movs	r1, #220	@ 0xdc
 80020f4:	209b      	movs	r0, #155	@ 0x9b
 80020f6:	f7ff fed9 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(167,220,'d');
 80020fa:	2264      	movs	r2, #100	@ 0x64
 80020fc:	21dc      	movs	r1, #220	@ 0xdc
 80020fe:	20a7      	movs	r0, #167	@ 0xa7
 8002100:	f7ff fed4 	bl	8001eac <LCD_DisplayChar>
	LCD_DisplayChar(180,220,'e');
 8002104:	2265      	movs	r2, #101	@ 0x65
 8002106:	21dc      	movs	r1, #220	@ 0xdc
 8002108:	20b4      	movs	r0, #180	@ 0xb4
 800210a:	f7ff fecf 	bl	8001eac <LCD_DisplayChar>
	LCD_Draw_Vertical_Line(45,215,35,LCD_COLOR_WHITE);
 800210e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002112:	2223      	movs	r2, #35	@ 0x23
 8002114:	21d7      	movs	r1, #215	@ 0xd7
 8002116:	202d      	movs	r0, #45	@ 0x2d
 8002118:	f7ff fdc9 	bl	8001cae <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(195,215,35,LCD_COLOR_WHITE);
 800211c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002120:	2223      	movs	r2, #35	@ 0x23
 8002122:	21d7      	movs	r1, #215	@ 0xd7
 8002124:	20c3      	movs	r0, #195	@ 0xc3
 8002126:	f7ff fdc2 	bl	8001cae <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(45,215,150,LCD_COLOR_WHITE);
 800212a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800212e:	2296      	movs	r2, #150	@ 0x96
 8002130:	21d7      	movs	r1, #215	@ 0xd7
 8002132:	202d      	movs	r0, #45	@ 0x2d
 8002134:	f7ff fde2 	bl	8001cfc <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(45,250,150,LCD_COLOR_WHITE);
 8002138:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800213c:	2296      	movs	r2, #150	@ 0x96
 800213e:	21fa      	movs	r1, #250	@ 0xfa
 8002140:	202d      	movs	r0, #45	@ 0x2d
 8002142:	f7ff fddb 	bl	8001cfc <LCD_Draw_Horizontal_Line>

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000004 	.word	0x20000004

08002150 <screen2>:

void screen2(void){
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLUE);
 8002154:	211f      	movs	r1, #31
 8002156:	2000      	movs	r0, #0
 8002158:	f7ff fdf8 	bl	8001d4c <LCD_Clear>
	// Gameplay
	// Draw vertical lines in connect four grid screen is 320 x 240
	LCD_Draw_Vertical_Line(1,50,204, LCD_COLOR_WHITE);
 800215c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002160:	22cc      	movs	r2, #204	@ 0xcc
 8002162:	2132      	movs	r1, #50	@ 0x32
 8002164:	2001      	movs	r0, #1
 8002166:	f7ff fda2 	bl	8001cae <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(35,50,204, LCD_COLOR_WHITE);
 800216a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800216e:	22cc      	movs	r2, #204	@ 0xcc
 8002170:	2132      	movs	r1, #50	@ 0x32
 8002172:	2023      	movs	r0, #35	@ 0x23
 8002174:	f7ff fd9b 	bl	8001cae <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(69,50,204, LCD_COLOR_WHITE);
 8002178:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800217c:	22cc      	movs	r2, #204	@ 0xcc
 800217e:	2132      	movs	r1, #50	@ 0x32
 8002180:	2045      	movs	r0, #69	@ 0x45
 8002182:	f7ff fd94 	bl	8001cae <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(103,50,204, LCD_COLOR_WHITE);
 8002186:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800218a:	22cc      	movs	r2, #204	@ 0xcc
 800218c:	2132      	movs	r1, #50	@ 0x32
 800218e:	2067      	movs	r0, #103	@ 0x67
 8002190:	f7ff fd8d 	bl	8001cae <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(137,50,204, LCD_COLOR_WHITE);
 8002194:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002198:	22cc      	movs	r2, #204	@ 0xcc
 800219a:	2132      	movs	r1, #50	@ 0x32
 800219c:	2089      	movs	r0, #137	@ 0x89
 800219e:	f7ff fd86 	bl	8001cae <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(171,50,204, LCD_COLOR_WHITE);
 80021a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021a6:	22cc      	movs	r2, #204	@ 0xcc
 80021a8:	2132      	movs	r1, #50	@ 0x32
 80021aa:	20ab      	movs	r0, #171	@ 0xab
 80021ac:	f7ff fd7f 	bl	8001cae <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(205,50,204, LCD_COLOR_WHITE);
 80021b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021b4:	22cc      	movs	r2, #204	@ 0xcc
 80021b6:	2132      	movs	r1, #50	@ 0x32
 80021b8:	20cd      	movs	r0, #205	@ 0xcd
 80021ba:	f7ff fd78 	bl	8001cae <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(239,50,204, LCD_COLOR_WHITE);
 80021be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021c2:	22cc      	movs	r2, #204	@ 0xcc
 80021c4:	2132      	movs	r1, #50	@ 0x32
 80021c6:	20ef      	movs	r0, #239	@ 0xef
 80021c8:	f7ff fd71 	bl	8001cae <LCD_Draw_Vertical_Line>
	// draw horizontal lines in connected four grid
	LCD_Draw_Horizontal_Line(0,50,240,LCD_COLOR_WHITE);
 80021cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021d0:	22f0      	movs	r2, #240	@ 0xf0
 80021d2:	2132      	movs	r1, #50	@ 0x32
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7ff fd91 	bl	8001cfc <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,84,240,LCD_COLOR_WHITE);
 80021da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021de:	22f0      	movs	r2, #240	@ 0xf0
 80021e0:	2154      	movs	r1, #84	@ 0x54
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7ff fd8a 	bl	8001cfc <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,118,240,LCD_COLOR_WHITE);
 80021e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021ec:	22f0      	movs	r2, #240	@ 0xf0
 80021ee:	2176      	movs	r1, #118	@ 0x76
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7ff fd83 	bl	8001cfc <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,152,240,LCD_COLOR_WHITE);
 80021f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021fa:	22f0      	movs	r2, #240	@ 0xf0
 80021fc:	2198      	movs	r1, #152	@ 0x98
 80021fe:	2000      	movs	r0, #0
 8002200:	f7ff fd7c 	bl	8001cfc <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,186,240,LCD_COLOR_WHITE);
 8002204:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002208:	22f0      	movs	r2, #240	@ 0xf0
 800220a:	21ba      	movs	r1, #186	@ 0xba
 800220c:	2000      	movs	r0, #0
 800220e:	f7ff fd75 	bl	8001cfc <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,220,240,LCD_COLOR_WHITE);
 8002212:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002216:	22f0      	movs	r2, #240	@ 0xf0
 8002218:	21dc      	movs	r1, #220	@ 0xdc
 800221a:	2000      	movs	r0, #0
 800221c:	f7ff fd6e 	bl	8001cfc <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(0,254,240,LCD_COLOR_WHITE);
 8002220:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002224:	22f0      	movs	r2, #240	@ 0xf0
 8002226:	21fe      	movs	r1, #254	@ 0xfe
 8002228:	2000      	movs	r0, #0
 800222a:	f7ff fd67 	bl	8001cfc <LCD_Draw_Horizontal_Line>
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}

08002232 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002236:	b672      	cpsid	i
}
 8002238:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800223a:	bf00      	nop
 800223c:	e7fd      	b.n	800223a <LCD_Error_Handler+0x8>

0800223e <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8002242:	f001 f92e 	bl	80034a2 <STMPE811_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b02      	cmp	r3, #2
 800224a:	d001      	beq.n	8002250 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <InitializeLCDTouch+0xe>
  }
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}

08002254 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f001 f9d8 	bl	8003612 <STMPE811_ReadTouch>
 8002262:	4603      	mov	r3, r0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002270:	f000 f9fe 	bl	8002670 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8002274:	20ca      	movs	r0, #202	@ 0xca
 8002276:	f000 f943 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800227a:	20c3      	movs	r0, #195	@ 0xc3
 800227c:	f000 f94d 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8002280:	2008      	movs	r0, #8
 8002282:	f000 f94a 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8002286:	2050      	movs	r0, #80	@ 0x50
 8002288:	f000 f947 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 800228c:	20cf      	movs	r0, #207	@ 0xcf
 800228e:	f000 f937 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8002292:	2000      	movs	r0, #0
 8002294:	f000 f941 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8002298:	20c1      	movs	r0, #193	@ 0xc1
 800229a:	f000 f93e 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800229e:	2030      	movs	r0, #48	@ 0x30
 80022a0:	f000 f93b 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80022a4:	20ed      	movs	r0, #237	@ 0xed
 80022a6:	f000 f92b 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80022aa:	2064      	movs	r0, #100	@ 0x64
 80022ac:	f000 f935 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f000 f932 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80022b6:	2012      	movs	r0, #18
 80022b8:	f000 f92f 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80022bc:	2081      	movs	r0, #129	@ 0x81
 80022be:	f000 f92c 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80022c2:	20e8      	movs	r0, #232	@ 0xe8
 80022c4:	f000 f91c 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80022c8:	2085      	movs	r0, #133	@ 0x85
 80022ca:	f000 f926 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f000 f923 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80022d4:	2078      	movs	r0, #120	@ 0x78
 80022d6:	f000 f920 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80022da:	20cb      	movs	r0, #203	@ 0xcb
 80022dc:	f000 f910 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80022e0:	2039      	movs	r0, #57	@ 0x39
 80022e2:	f000 f91a 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80022e6:	202c      	movs	r0, #44	@ 0x2c
 80022e8:	f000 f917 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80022ec:	2000      	movs	r0, #0
 80022ee:	f000 f914 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80022f2:	2034      	movs	r0, #52	@ 0x34
 80022f4:	f000 f911 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80022f8:	2002      	movs	r0, #2
 80022fa:	f000 f90e 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80022fe:	20f7      	movs	r0, #247	@ 0xf7
 8002300:	f000 f8fe 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8002304:	2020      	movs	r0, #32
 8002306:	f000 f908 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800230a:	20ea      	movs	r0, #234	@ 0xea
 800230c:	f000 f8f8 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002310:	2000      	movs	r0, #0
 8002312:	f000 f902 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002316:	2000      	movs	r0, #0
 8002318:	f000 f8ff 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800231c:	20b1      	movs	r0, #177	@ 0xb1
 800231e:	f000 f8ef 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002322:	2000      	movs	r0, #0
 8002324:	f000 f8f9 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002328:	201b      	movs	r0, #27
 800232a:	f000 f8f6 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800232e:	20b6      	movs	r0, #182	@ 0xb6
 8002330:	f000 f8e6 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002334:	200a      	movs	r0, #10
 8002336:	f000 f8f0 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800233a:	20a2      	movs	r0, #162	@ 0xa2
 800233c:	f000 f8ed 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8002340:	20c0      	movs	r0, #192	@ 0xc0
 8002342:	f000 f8dd 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002346:	2010      	movs	r0, #16
 8002348:	f000 f8e7 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800234c:	20c1      	movs	r0, #193	@ 0xc1
 800234e:	f000 f8d7 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002352:	2010      	movs	r0, #16
 8002354:	f000 f8e1 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8002358:	20c5      	movs	r0, #197	@ 0xc5
 800235a:	f000 f8d1 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800235e:	2045      	movs	r0, #69	@ 0x45
 8002360:	f000 f8db 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8002364:	2015      	movs	r0, #21
 8002366:	f000 f8d8 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800236a:	20c7      	movs	r0, #199	@ 0xc7
 800236c:	f000 f8c8 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8002370:	2090      	movs	r0, #144	@ 0x90
 8002372:	f000 f8d2 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8002376:	2036      	movs	r0, #54	@ 0x36
 8002378:	f000 f8c2 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800237c:	20c8      	movs	r0, #200	@ 0xc8
 800237e:	f000 f8cc 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8002382:	20f2      	movs	r0, #242	@ 0xf2
 8002384:	f000 f8bc 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002388:	2000      	movs	r0, #0
 800238a:	f000 f8c6 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800238e:	20b0      	movs	r0, #176	@ 0xb0
 8002390:	f000 f8b6 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002394:	20c2      	movs	r0, #194	@ 0xc2
 8002396:	f000 f8c0 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800239a:	20b6      	movs	r0, #182	@ 0xb6
 800239c:	f000 f8b0 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80023a0:	200a      	movs	r0, #10
 80023a2:	f000 f8ba 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80023a6:	20a7      	movs	r0, #167	@ 0xa7
 80023a8:	f000 f8b7 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80023ac:	2027      	movs	r0, #39	@ 0x27
 80023ae:	f000 f8b4 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80023b2:	2004      	movs	r0, #4
 80023b4:	f000 f8b1 	bl	800251a <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80023b8:	202a      	movs	r0, #42	@ 0x2a
 80023ba:	f000 f8a1 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80023be:	2000      	movs	r0, #0
 80023c0:	f000 f8ab 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f000 f8a8 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80023ca:	2000      	movs	r0, #0
 80023cc:	f000 f8a5 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80023d0:	20ef      	movs	r0, #239	@ 0xef
 80023d2:	f000 f8a2 	bl	800251a <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80023d6:	202b      	movs	r0, #43	@ 0x2b
 80023d8:	f000 f892 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80023dc:	2000      	movs	r0, #0
 80023de:	f000 f89c 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f000 f899 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80023e8:	2001      	movs	r0, #1
 80023ea:	f000 f896 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80023ee:	203f      	movs	r0, #63	@ 0x3f
 80023f0:	f000 f893 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80023f4:	20f6      	movs	r0, #246	@ 0xf6
 80023f6:	f000 f883 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f000 f88d 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002400:	2000      	movs	r0, #0
 8002402:	f000 f88a 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8002406:	2006      	movs	r0, #6
 8002408:	f000 f887 	bl	800251a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 800240c:	202c      	movs	r0, #44	@ 0x2c
 800240e:	f000 f877 	bl	8002500 <ili9341_Write_Reg>
  LCD_Delay(200);
 8002412:	20c8      	movs	r0, #200	@ 0xc8
 8002414:	f000 f9e8 	bl	80027e8 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002418:	2026      	movs	r0, #38	@ 0x26
 800241a:	f000 f871 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800241e:	2001      	movs	r0, #1
 8002420:	f000 f87b 	bl	800251a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8002424:	20e0      	movs	r0, #224	@ 0xe0
 8002426:	f000 f86b 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800242a:	200f      	movs	r0, #15
 800242c:	f000 f875 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8002430:	2029      	movs	r0, #41	@ 0x29
 8002432:	f000 f872 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8002436:	2024      	movs	r0, #36	@ 0x24
 8002438:	f000 f86f 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800243c:	200c      	movs	r0, #12
 800243e:	f000 f86c 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8002442:	200e      	movs	r0, #14
 8002444:	f000 f869 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002448:	2009      	movs	r0, #9
 800244a:	f000 f866 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800244e:	204e      	movs	r0, #78	@ 0x4e
 8002450:	f000 f863 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002454:	2078      	movs	r0, #120	@ 0x78
 8002456:	f000 f860 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800245a:	203c      	movs	r0, #60	@ 0x3c
 800245c:	f000 f85d 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002460:	2009      	movs	r0, #9
 8002462:	f000 f85a 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8002466:	2013      	movs	r0, #19
 8002468:	f000 f857 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800246c:	2005      	movs	r0, #5
 800246e:	f000 f854 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8002472:	2017      	movs	r0, #23
 8002474:	f000 f851 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002478:	2011      	movs	r0, #17
 800247a:	f000 f84e 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800247e:	2000      	movs	r0, #0
 8002480:	f000 f84b 	bl	800251a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002484:	20e1      	movs	r0, #225	@ 0xe1
 8002486:	f000 f83b 	bl	8002500 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800248a:	2000      	movs	r0, #0
 800248c:	f000 f845 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002490:	2016      	movs	r0, #22
 8002492:	f000 f842 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002496:	201b      	movs	r0, #27
 8002498:	f000 f83f 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800249c:	2004      	movs	r0, #4
 800249e:	f000 f83c 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80024a2:	2011      	movs	r0, #17
 80024a4:	f000 f839 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80024a8:	2007      	movs	r0, #7
 80024aa:	f000 f836 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80024ae:	2031      	movs	r0, #49	@ 0x31
 80024b0:	f000 f833 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80024b4:	2033      	movs	r0, #51	@ 0x33
 80024b6:	f000 f830 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80024ba:	2042      	movs	r0, #66	@ 0x42
 80024bc:	f000 f82d 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80024c0:	2005      	movs	r0, #5
 80024c2:	f000 f82a 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80024c6:	200c      	movs	r0, #12
 80024c8:	f000 f827 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80024cc:	200a      	movs	r0, #10
 80024ce:	f000 f824 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80024d2:	2028      	movs	r0, #40	@ 0x28
 80024d4:	f000 f821 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80024d8:	202f      	movs	r0, #47	@ 0x2f
 80024da:	f000 f81e 	bl	800251a <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80024de:	200f      	movs	r0, #15
 80024e0:	f000 f81b 	bl	800251a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80024e4:	2011      	movs	r0, #17
 80024e6:	f000 f80b 	bl	8002500 <ili9341_Write_Reg>
  LCD_Delay(200);
 80024ea:	20c8      	movs	r0, #200	@ 0xc8
 80024ec:	f000 f97c 	bl	80027e8 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80024f0:	2029      	movs	r0, #41	@ 0x29
 80024f2:	f000 f805 	bl	8002500 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80024f6:	202c      	movs	r0, #44	@ 0x2c
 80024f8:	f000 f802 	bl	8002500 <ili9341_Write_Reg>
}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}

08002500 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 f949 	bl	80027a4 <LCD_IO_WriteReg>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f91a 	bl	8002760 <LCD_IO_WriteData>
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002538:	4819      	ldr	r0, [pc, #100]	@ (80025a0 <SPI_Init+0x6c>)
 800253a:	f004 fcb8 	bl	8006eae <HAL_SPI_GetState>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d12b      	bne.n	800259c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8002544:	4b16      	ldr	r3, [pc, #88]	@ (80025a0 <SPI_Init+0x6c>)
 8002546:	4a17      	ldr	r2, [pc, #92]	@ (80025a4 <SPI_Init+0x70>)
 8002548:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800254a:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <SPI_Init+0x6c>)
 800254c:	2218      	movs	r2, #24
 800254e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002550:	4b13      	ldr	r3, [pc, #76]	@ (80025a0 <SPI_Init+0x6c>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002556:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <SPI_Init+0x6c>)
 8002558:	2200      	movs	r2, #0
 800255a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800255c:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <SPI_Init+0x6c>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002562:	4b0f      	ldr	r3, [pc, #60]	@ (80025a0 <SPI_Init+0x6c>)
 8002564:	2200      	movs	r2, #0
 8002566:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002568:	4b0d      	ldr	r3, [pc, #52]	@ (80025a0 <SPI_Init+0x6c>)
 800256a:	2207      	movs	r2, #7
 800256c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800256e:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <SPI_Init+0x6c>)
 8002570:	2200      	movs	r2, #0
 8002572:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002574:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <SPI_Init+0x6c>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800257a:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <SPI_Init+0x6c>)
 800257c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002580:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002582:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <SPI_Init+0x6c>)
 8002584:	2200      	movs	r2, #0
 8002586:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002588:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <SPI_Init+0x6c>)
 800258a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800258e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002590:	4803      	ldr	r0, [pc, #12]	@ (80025a0 <SPI_Init+0x6c>)
 8002592:	f000 f833 	bl	80025fc <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002596:	4802      	ldr	r0, [pc, #8]	@ (80025a0 <SPI_Init+0x6c>)
 8002598:	f004 fa94 	bl	8006ac4 <HAL_SPI_Init>
  }
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200259c8 	.word	0x200259c8
 80025a4:	40015000 	.word	0x40015000

080025a8 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80025b6:	4b09      	ldr	r3, [pc, #36]	@ (80025dc <SPI_Write+0x34>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	1db9      	adds	r1, r7, #6
 80025bc:	2201      	movs	r2, #1
 80025be:	4808      	ldr	r0, [pc, #32]	@ (80025e0 <SPI_Write+0x38>)
 80025c0:	f004 fb31 	bl	8006c26 <HAL_SPI_Transmit>
 80025c4:	4603      	mov	r3, r0
 80025c6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80025ce:	f000 f809 	bl	80025e4 <SPI_Error>
  }
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000000c 	.word	0x2000000c
 80025e0:	200259c8 	.word	0x200259c8

080025e4 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80025e8:	4803      	ldr	r0, [pc, #12]	@ (80025f8 <SPI_Error+0x14>)
 80025ea:	f004 faf4 	bl	8006bd6 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80025ee:	f7ff ffa1 	bl	8002534 <SPI_Init>
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	200259c8 	.word	0x200259c8

080025fc <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	@ 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	4b17      	ldr	r3, [pc, #92]	@ (8002668 <SPI_MspInit+0x6c>)
 800260a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260c:	4a16      	ldr	r2, [pc, #88]	@ (8002668 <SPI_MspInit+0x6c>)
 800260e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002612:	6453      	str	r3, [r2, #68]	@ 0x44
 8002614:	4b14      	ldr	r3, [pc, #80]	@ (8002668 <SPI_MspInit+0x6c>)
 8002616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <SPI_MspInit+0x6c>)
 8002626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002628:	4a0f      	ldr	r2, [pc, #60]	@ (8002668 <SPI_MspInit+0x6c>)
 800262a:	f043 0320 	orr.w	r3, r3, #32
 800262e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002630:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <SPI_MspInit+0x6c>)
 8002632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 800263c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002640:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002646:	2302      	movs	r3, #2
 8002648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800264a:	2301      	movs	r3, #1
 800264c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800264e:	2305      	movs	r3, #5
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	4619      	mov	r1, r3
 8002658:	4804      	ldr	r0, [pc, #16]	@ (800266c <SPI_MspInit+0x70>)
 800265a:	f001 fd57 	bl	800410c <HAL_GPIO_Init>
}
 800265e:	bf00      	nop
 8002660:	3728      	adds	r7, #40	@ 0x28
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800
 800266c:	40021400 	.word	0x40021400

08002670 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002676:	4b36      	ldr	r3, [pc, #216]	@ (8002750 <LCD_IO_Init+0xe0>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d164      	bne.n	8002748 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800267e:	4b34      	ldr	r3, [pc, #208]	@ (8002750 <LCD_IO_Init+0xe0>)
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	4b32      	ldr	r3, [pc, #200]	@ (8002754 <LCD_IO_Init+0xe4>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	4a31      	ldr	r2, [pc, #196]	@ (8002754 <LCD_IO_Init+0xe4>)
 800268e:	f043 0308 	orr.w	r3, r3, #8
 8002692:	6313      	str	r3, [r2, #48]	@ 0x30
 8002694:	4b2f      	ldr	r3, [pc, #188]	@ (8002754 <LCD_IO_Init+0xe4>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80026a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80026a6:	2301      	movs	r3, #1
 80026a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80026b2:	f107 030c 	add.w	r3, r7, #12
 80026b6:	4619      	mov	r1, r3
 80026b8:	4827      	ldr	r0, [pc, #156]	@ (8002758 <LCD_IO_Init+0xe8>)
 80026ba:	f001 fd27 	bl	800410c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	4b24      	ldr	r3, [pc, #144]	@ (8002754 <LCD_IO_Init+0xe4>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	4a23      	ldr	r2, [pc, #140]	@ (8002754 <LCD_IO_Init+0xe4>)
 80026c8:	f043 0308 	orr.w	r3, r3, #8
 80026cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ce:	4b21      	ldr	r3, [pc, #132]	@ (8002754 <LCD_IO_Init+0xe4>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80026da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80026e0:	2301      	movs	r3, #1
 80026e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80026e8:	2302      	movs	r3, #2
 80026ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	4619      	mov	r1, r3
 80026f2:	4819      	ldr	r0, [pc, #100]	@ (8002758 <LCD_IO_Init+0xe8>)
 80026f4:	f001 fd0a 	bl	800410c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80026f8:	2300      	movs	r3, #0
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <LCD_IO_Init+0xe4>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002700:	4a14      	ldr	r2, [pc, #80]	@ (8002754 <LCD_IO_Init+0xe4>)
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	6313      	str	r3, [r2, #48]	@ 0x30
 8002708:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <LCD_IO_Init+0xe4>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002714:	2304      	movs	r3, #4
 8002716:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002718:	2301      	movs	r3, #1
 800271a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002720:	2302      	movs	r3, #2
 8002722:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	4619      	mov	r1, r3
 800272a:	480c      	ldr	r0, [pc, #48]	@ (800275c <LCD_IO_Init+0xec>)
 800272c:	f001 fcee 	bl	800410c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002730:	2200      	movs	r2, #0
 8002732:	2104      	movs	r1, #4
 8002734:	4809      	ldr	r0, [pc, #36]	@ (800275c <LCD_IO_Init+0xec>)
 8002736:	f001 ffa1 	bl	800467c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800273a:	2201      	movs	r2, #1
 800273c:	2104      	movs	r1, #4
 800273e:	4807      	ldr	r0, [pc, #28]	@ (800275c <LCD_IO_Init+0xec>)
 8002740:	f001 ff9c 	bl	800467c <HAL_GPIO_WritePin>

    SPI_Init();
 8002744:	f7ff fef6 	bl	8002534 <SPI_Init>
  }
}
 8002748:	bf00      	nop
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20025a20 	.word	0x20025a20
 8002754:	40023800 	.word	0x40023800
 8002758:	40020c00 	.word	0x40020c00
 800275c:	40020800 	.word	0x40020800

08002760 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800276a:	2201      	movs	r2, #1
 800276c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002770:	480a      	ldr	r0, [pc, #40]	@ (800279c <LCD_IO_WriteData+0x3c>)
 8002772:	f001 ff83 	bl	800467c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002776:	2200      	movs	r2, #0
 8002778:	2104      	movs	r1, #4
 800277a:	4809      	ldr	r0, [pc, #36]	@ (80027a0 <LCD_IO_WriteData+0x40>)
 800277c:	f001 ff7e 	bl	800467c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ff10 	bl	80025a8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002788:	2201      	movs	r2, #1
 800278a:	2104      	movs	r1, #4
 800278c:	4804      	ldr	r0, [pc, #16]	@ (80027a0 <LCD_IO_WriteData+0x40>)
 800278e:	f001 ff75 	bl	800467c <HAL_GPIO_WritePin>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	40020800 	.word	0x40020800

080027a4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80027ae:	2200      	movs	r2, #0
 80027b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027b4:	480a      	ldr	r0, [pc, #40]	@ (80027e0 <LCD_IO_WriteReg+0x3c>)
 80027b6:	f001 ff61 	bl	800467c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80027ba:	2200      	movs	r2, #0
 80027bc:	2104      	movs	r1, #4
 80027be:	4809      	ldr	r0, [pc, #36]	@ (80027e4 <LCD_IO_WriteReg+0x40>)
 80027c0:	f001 ff5c 	bl	800467c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff feed 	bl	80025a8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80027ce:	2201      	movs	r2, #1
 80027d0:	2104      	movs	r1, #4
 80027d2:	4804      	ldr	r0, [pc, #16]	@ (80027e4 <LCD_IO_WriteReg+0x40>)
 80027d4:	f001 ff52 	bl	800467c <HAL_GPIO_WritePin>
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40020c00 	.word	0x40020c00
 80027e4:	40020800 	.word	0x40020800

080027e8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f001 faf7 	bl	8003de4 <HAL_Delay>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002802:	f001 fa7d 	bl	8003d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002806:	f000 f815 	bl	8002834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800280a:	f000 fa05 	bl	8002c18 <MX_GPIO_Init>
  MX_LTDC_Init();
 800280e:	f000 f8bb 	bl	8002988 <MX_LTDC_Init>
  MX_RNG_Init();
 8002812:	f000 f96b 	bl	8002aec <MX_RNG_Init>
  MX_TIM2_Init();
 8002816:	f000 f9b3 	bl	8002b80 <MX_TIM2_Init>
  MX_SPI5_Init();
 800281a:	f000 f97b 	bl	8002b14 <MX_SPI5_Init>
  MX_I2C3_Init();
 800281e:	f000 f873 	bl	8002908 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8002822:	f7fd fead 	bl	8000580 <ApplicationInit>
  //LCD_Visual_Demo();
  ConnectFour_GameLoop();
 8002826:	f7fe f81d 	bl	8000864 <ConnectFour_GameLoop>

    /* USER CODE END 2 */
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
  LCD_Touch_Polling_Demo(); // This function Will not return
 800282a:	f7fd fec3 	bl	80005b4 <LCD_Touch_Polling_Demo>
#endif
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800282e:	bf00      	nop
 8002830:	e7fd      	b.n	800282e <main+0x30>
	...

08002834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b094      	sub	sp, #80	@ 0x50
 8002838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800283a:	f107 0320 	add.w	r3, r7, #32
 800283e:	2230      	movs	r2, #48	@ 0x30
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f005 f900 	bl	8007a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002848:	f107 030c 	add.w	r3, r7, #12
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002858:	2300      	movs	r3, #0
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	4b28      	ldr	r3, [pc, #160]	@ (8002900 <SystemClock_Config+0xcc>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	4a27      	ldr	r2, [pc, #156]	@ (8002900 <SystemClock_Config+0xcc>)
 8002862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002866:	6413      	str	r3, [r2, #64]	@ 0x40
 8002868:	4b25      	ldr	r3, [pc, #148]	@ (8002900 <SystemClock_Config+0xcc>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002874:	2300      	movs	r3, #0
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	4b22      	ldr	r3, [pc, #136]	@ (8002904 <SystemClock_Config+0xd0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a21      	ldr	r2, [pc, #132]	@ (8002904 <SystemClock_Config+0xd0>)
 800287e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b1f      	ldr	r3, [pc, #124]	@ (8002904 <SystemClock_Config+0xd0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002890:	2301      	movs	r3, #1
 8002892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800289a:	2302      	movs	r3, #2
 800289c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800289e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028a4:	2308      	movs	r3, #8
 80028a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80028a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80028ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028ae:	2302      	movs	r3, #2
 80028b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80028b2:	2307      	movs	r3, #7
 80028b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028b6:	f107 0320 	add.w	r3, r7, #32
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 fa3e 	bl	8005d3c <HAL_RCC_OscConfig>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80028c6:	f000 fb55 	bl	8002f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ca:	230f      	movs	r3, #15
 80028cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ce:	2302      	movs	r3, #2
 80028d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80028da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028e2:	f107 030c 	add.w	r3, r7, #12
 80028e6:	2105      	movs	r1, #5
 80028e8:	4618      	mov	r0, r3
 80028ea:	f003 fc9f 	bl	800622c <HAL_RCC_ClockConfig>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80028f4:	f000 fb3e 	bl	8002f74 <Error_Handler>
  }
}
 80028f8:	bf00      	nop
 80028fa:	3750      	adds	r7, #80	@ 0x50
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40023800 	.word	0x40023800
 8002904:	40007000 	.word	0x40007000

08002908 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800290c:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <MX_I2C3_Init+0x74>)
 800290e:	4a1c      	ldr	r2, [pc, #112]	@ (8002980 <MX_I2C3_Init+0x78>)
 8002910:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002912:	4b1a      	ldr	r3, [pc, #104]	@ (800297c <MX_I2C3_Init+0x74>)
 8002914:	4a1b      	ldr	r2, [pc, #108]	@ (8002984 <MX_I2C3_Init+0x7c>)
 8002916:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002918:	4b18      	ldr	r3, [pc, #96]	@ (800297c <MX_I2C3_Init+0x74>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800291e:	4b17      	ldr	r3, [pc, #92]	@ (800297c <MX_I2C3_Init+0x74>)
 8002920:	2200      	movs	r2, #0
 8002922:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002924:	4b15      	ldr	r3, [pc, #84]	@ (800297c <MX_I2C3_Init+0x74>)
 8002926:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800292a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800292c:	4b13      	ldr	r3, [pc, #76]	@ (800297c <MX_I2C3_Init+0x74>)
 800292e:	2200      	movs	r2, #0
 8002930:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002932:	4b12      	ldr	r3, [pc, #72]	@ (800297c <MX_I2C3_Init+0x74>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002938:	4b10      	ldr	r3, [pc, #64]	@ (800297c <MX_I2C3_Init+0x74>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800293e:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <MX_I2C3_Init+0x74>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002944:	480d      	ldr	r0, [pc, #52]	@ (800297c <MX_I2C3_Init+0x74>)
 8002946:	f001 feb3 	bl	80046b0 <HAL_I2C_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002950:	f000 fb10 	bl	8002f74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002954:	2100      	movs	r1, #0
 8002956:	4809      	ldr	r0, [pc, #36]	@ (800297c <MX_I2C3_Init+0x74>)
 8002958:	f002 fece 	bl	80056f8 <HAL_I2CEx_ConfigAnalogFilter>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002962:	f000 fb07 	bl	8002f74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002966:	2100      	movs	r1, #0
 8002968:	4804      	ldr	r0, [pc, #16]	@ (800297c <MX_I2C3_Init+0x74>)
 800296a:	f002 ff01 	bl	8005770 <HAL_I2CEx_ConfigDigitalFilter>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002974:	f000 fafe 	bl	8002f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20025a24 	.word	0x20025a24
 8002980:	40005c00 	.word	0x40005c00
 8002984:	000186a0 	.word	0x000186a0

08002988 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b09a      	sub	sp, #104	@ 0x68
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800298e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002992:	2234      	movs	r2, #52	@ 0x34
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f005 f856 	bl	8007a48 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800299c:	463b      	mov	r3, r7
 800299e:	2234      	movs	r2, #52	@ 0x34
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f005 f850 	bl	8007a48 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80029a8:	4b4e      	ldr	r3, [pc, #312]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 80029aa:	4a4f      	ldr	r2, [pc, #316]	@ (8002ae8 <MX_LTDC_Init+0x160>)
 80029ac:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80029ae:	4b4d      	ldr	r3, [pc, #308]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80029b4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80029ba:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80029c0:	4b48      	ldr	r3, [pc, #288]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80029c6:	4b47      	ldr	r3, [pc, #284]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 80029c8:	2207      	movs	r2, #7
 80029ca:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80029cc:	4b45      	ldr	r3, [pc, #276]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 80029ce:	2203      	movs	r2, #3
 80029d0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80029d2:	4b44      	ldr	r3, [pc, #272]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 80029d4:	220e      	movs	r2, #14
 80029d6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80029d8:	4b42      	ldr	r3, [pc, #264]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 80029da:	2205      	movs	r2, #5
 80029dc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80029de:	4b41      	ldr	r3, [pc, #260]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 80029e0:	f240 228e 	movw	r2, #654	@ 0x28e
 80029e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80029e6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 80029e8:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80029ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80029ee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 80029f0:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80029f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80029f6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 80029f8:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80029fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80029fe:	4b39      	ldr	r3, [pc, #228]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002a06:	4b37      	ldr	r3, [pc, #220]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002a0e:	4b35      	ldr	r3, [pc, #212]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002a16:	4833      	ldr	r0, [pc, #204]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 8002a18:	f002 feea 	bl	80057f0 <HAL_LTDC_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002a22:	f000 faa7 	bl	8002f74 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002a36:	2300      	movs	r3, #0
 8002a38:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002a42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a46:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002a48:	2305      	movs	r3, #5
 8002a4a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002a6a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a6e:	2200      	movs	r2, #0
 8002a70:	4619      	mov	r1, r3
 8002a72:	481c      	ldr	r0, [pc, #112]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 8002a74:	f002 ff8c 	bl	8005990 <HAL_LTDC_ConfigLayer>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002a7e:	f000 fa79 	bl	8002f74 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002aa2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002aa4:	2305      	movs	r3, #5
 8002aa6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002ac6:	463b      	mov	r3, r7
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4619      	mov	r1, r3
 8002acc:	4805      	ldr	r0, [pc, #20]	@ (8002ae4 <MX_LTDC_Init+0x15c>)
 8002ace:	f002 ff5f 	bl	8005990 <HAL_LTDC_ConfigLayer>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002ad8:	f000 fa4c 	bl	8002f74 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002adc:	bf00      	nop
 8002ade:	3768      	adds	r7, #104	@ 0x68
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20025a78 	.word	0x20025a78
 8002ae8:	40016800 	.word	0x40016800

08002aec <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002af0:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <MX_RNG_Init+0x20>)
 8002af2:	4a07      	ldr	r2, [pc, #28]	@ (8002b10 <MX_RNG_Init+0x24>)
 8002af4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002af6:	4805      	ldr	r0, [pc, #20]	@ (8002b0c <MX_RNG_Init+0x20>)
 8002af8:	f003 ff64 	bl	80069c4 <HAL_RNG_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002b02:	f000 fa37 	bl	8002f74 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200000d0 	.word	0x200000d0
 8002b10:	50060800 	.word	0x50060800

08002b14 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002b18:	4b17      	ldr	r3, [pc, #92]	@ (8002b78 <MX_SPI5_Init+0x64>)
 8002b1a:	4a18      	ldr	r2, [pc, #96]	@ (8002b7c <MX_SPI5_Init+0x68>)
 8002b1c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002b1e:	4b16      	ldr	r3, [pc, #88]	@ (8002b78 <MX_SPI5_Init+0x64>)
 8002b20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b24:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002b26:	4b14      	ldr	r3, [pc, #80]	@ (8002b78 <MX_SPI5_Init+0x64>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b2c:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <MX_SPI5_Init+0x64>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b32:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <MX_SPI5_Init+0x64>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b38:	4b0f      	ldr	r3, [pc, #60]	@ (8002b78 <MX_SPI5_Init+0x64>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b78 <MX_SPI5_Init+0x64>)
 8002b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b44:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b46:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <MX_SPI5_Init+0x64>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <MX_SPI5_Init+0x64>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b52:	4b09      	ldr	r3, [pc, #36]	@ (8002b78 <MX_SPI5_Init+0x64>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b58:	4b07      	ldr	r3, [pc, #28]	@ (8002b78 <MX_SPI5_Init+0x64>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002b5e:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <MX_SPI5_Init+0x64>)
 8002b60:	220a      	movs	r2, #10
 8002b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002b64:	4804      	ldr	r0, [pc, #16]	@ (8002b78 <MX_SPI5_Init+0x64>)
 8002b66:	f003 ffad 	bl	8006ac4 <HAL_SPI_Init>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002b70:	f000 fa00 	bl	8002f74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002b74:	bf00      	nop
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20025b20 	.word	0x20025b20
 8002b7c:	40015000 	.word	0x40015000

08002b80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b86:	f107 0308 	add.w	r3, r7, #8
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b94:	463b      	mov	r3, r7
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c14 <MX_TIM2_Init+0x94>)
 8002b9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ba2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <MX_TIM2_Init+0x94>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002baa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <MX_TIM2_Init+0x94>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002bb0:	4b18      	ldr	r3, [pc, #96]	@ (8002c14 <MX_TIM2_Init+0x94>)
 8002bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb8:	4b16      	ldr	r3, [pc, #88]	@ (8002c14 <MX_TIM2_Init+0x94>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bbe:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <MX_TIM2_Init+0x94>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bc4:	4813      	ldr	r0, [pc, #76]	@ (8002c14 <MX_TIM2_Init+0x94>)
 8002bc6:	f004 fa5d 	bl	8007084 <HAL_TIM_Base_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002bd0:	f000 f9d0 	bl	8002f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bda:	f107 0308 	add.w	r3, r7, #8
 8002bde:	4619      	mov	r1, r3
 8002be0:	480c      	ldr	r0, [pc, #48]	@ (8002c14 <MX_TIM2_Init+0x94>)
 8002be2:	f004 fa9e 	bl	8007122 <HAL_TIM_ConfigClockSource>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002bec:	f000 f9c2 	bl	8002f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bf8:	463b      	mov	r3, r7
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4805      	ldr	r0, [pc, #20]	@ (8002c14 <MX_TIM2_Init+0x94>)
 8002bfe:	f004 fc9d 	bl	800753c <HAL_TIMEx_MasterConfigSynchronization>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c08:	f000 f9b4 	bl	8002f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c0c:	bf00      	nop
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20025b78 	.word	0x20025b78

08002c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08e      	sub	sp, #56	@ 0x38
 8002c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
 8002c2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
 8002c32:	4bb2      	ldr	r3, [pc, #712]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	4ab1      	ldr	r2, [pc, #708]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3e:	4baf      	ldr	r3, [pc, #700]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	623b      	str	r3, [r7, #32]
 8002c48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	4bab      	ldr	r3, [pc, #684]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	4aaa      	ldr	r2, [pc, #680]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002c54:	f043 0320 	orr.w	r3, r3, #32
 8002c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c5a:	4ba8      	ldr	r3, [pc, #672]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	4ba4      	ldr	r3, [pc, #656]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	4aa3      	ldr	r2, [pc, #652]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c76:	4ba1      	ldr	r3, [pc, #644]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7e:	61bb      	str	r3, [r7, #24]
 8002c80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	4b9d      	ldr	r3, [pc, #628]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	4a9c      	ldr	r2, [pc, #624]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c92:	4b9a      	ldr	r3, [pc, #616]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	4b96      	ldr	r3, [pc, #600]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	4a95      	ldr	r2, [pc, #596]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002ca8:	f043 0302 	orr.w	r3, r3, #2
 8002cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cae:	4b93      	ldr	r3, [pc, #588]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	4b8f      	ldr	r3, [pc, #572]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	4a8e      	ldr	r2, [pc, #568]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002cc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cca:	4b8c      	ldr	r3, [pc, #560]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	4b88      	ldr	r3, [pc, #544]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	4a87      	ldr	r2, [pc, #540]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002ce0:	f043 0310 	orr.w	r3, r3, #16
 8002ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce6:	4b85      	ldr	r3, [pc, #532]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
 8002cf6:	4b81      	ldr	r3, [pc, #516]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	4a80      	ldr	r2, [pc, #512]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002cfc:	f043 0308 	orr.w	r3, r3, #8
 8002d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d02:	4b7e      	ldr	r3, [pc, #504]	@ (8002efc <MX_GPIO_Init+0x2e4>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2116      	movs	r1, #22
 8002d12:	487b      	ldr	r0, [pc, #492]	@ (8002f00 <MX_GPIO_Init+0x2e8>)
 8002d14:	f001 fcb2 	bl	800467c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2180      	movs	r1, #128	@ 0x80
 8002d1c:	4879      	ldr	r0, [pc, #484]	@ (8002f04 <MX_GPIO_Init+0x2ec>)
 8002d1e:	f001 fcad 	bl	800467c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002d22:	2200      	movs	r2, #0
 8002d24:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002d28:	4877      	ldr	r0, [pc, #476]	@ (8002f08 <MX_GPIO_Init+0x2f0>)
 8002d2a:	f001 fca7 	bl	800467c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002d34:	4875      	ldr	r0, [pc, #468]	@ (8002f0c <MX_GPIO_Init+0x2f4>)
 8002d36:	f001 fca1 	bl	800467c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002d3a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002d3e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	2302      	movs	r3, #2
 8002d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d4c:	230c      	movs	r3, #12
 8002d4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d54:	4619      	mov	r1, r3
 8002d56:	486e      	ldr	r0, [pc, #440]	@ (8002f10 <MX_GPIO_Init+0x2f8>)
 8002d58:	f001 f9d8 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d6c:	230c      	movs	r3, #12
 8002d6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d74:	4619      	mov	r1, r3
 8002d76:	4862      	ldr	r0, [pc, #392]	@ (8002f00 <MX_GPIO_Init+0x2e8>)
 8002d78:	f001 f9c8 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002d7c:	2316      	movs	r3, #22
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d80:	2301      	movs	r3, #1
 8002d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d90:	4619      	mov	r1, r3
 8002d92:	485b      	ldr	r0, [pc, #364]	@ (8002f00 <MX_GPIO_Init+0x2e8>)
 8002d94:	f001 f9ba 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002d98:	f248 0307 	movw	r3, #32775	@ 0x8007
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d9e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dac:	4619      	mov	r1, r3
 8002dae:	4855      	ldr	r0, [pc, #340]	@ (8002f04 <MX_GPIO_Init+0x2ec>)
 8002db0:	f001 f9ac 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002db4:	2380      	movs	r3, #128	@ 0x80
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db8:	2301      	movs	r3, #1
 8002dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dc8:	4619      	mov	r1, r3
 8002dca:	484e      	ldr	r0, [pc, #312]	@ (8002f04 <MX_GPIO_Init+0x2ec>)
 8002dcc:	f001 f99e 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002dd0:	2320      	movs	r3, #32
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002dd4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002de2:	4619      	mov	r1, r3
 8002de4:	4846      	ldr	r0, [pc, #280]	@ (8002f00 <MX_GPIO_Init+0x2e8>)
 8002de6:	f001 f991 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002dea:	2304      	movs	r3, #4
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4845      	ldr	r0, [pc, #276]	@ (8002f14 <MX_GPIO_Init+0x2fc>)
 8002dfe:	f001 f985 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002e02:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e10:	2303      	movs	r3, #3
 8002e12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e14:	230c      	movs	r3, #12
 8002e16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	483b      	ldr	r0, [pc, #236]	@ (8002f0c <MX_GPIO_Init+0x2f4>)
 8002e20:	f001 f974 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002e24:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002e28:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e32:	2303      	movs	r3, #3
 8002e34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e36:	230c      	movs	r3, #12
 8002e38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4835      	ldr	r0, [pc, #212]	@ (8002f18 <MX_GPIO_Init+0x300>)
 8002e42:	f001 f963 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002e46:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e54:	2300      	movs	r3, #0
 8002e56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002e58:	230c      	movs	r3, #12
 8002e5a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e60:	4619      	mov	r1, r3
 8002e62:	482c      	ldr	r0, [pc, #176]	@ (8002f14 <MX_GPIO_Init+0x2fc>)
 8002e64:	f001 f952 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002e68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4825      	ldr	r0, [pc, #148]	@ (8002f14 <MX_GPIO_Init+0x2fc>)
 8002e7e:	f001 f945 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002e82:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e90:	2303      	movs	r3, #3
 8002e92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e94:	230c      	movs	r3, #12
 8002e96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	481a      	ldr	r0, [pc, #104]	@ (8002f08 <MX_GPIO_Init+0x2f0>)
 8002ea0:	f001 f934 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002ea4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4813      	ldr	r0, [pc, #76]	@ (8002f08 <MX_GPIO_Init+0x2f0>)
 8002eba:	f001 f927 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002ebe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	480c      	ldr	r0, [pc, #48]	@ (8002f08 <MX_GPIO_Init+0x2f0>)
 8002ed8:	f001 f918 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002edc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eea:	2303      	movs	r3, #3
 8002eec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002eee:	2307      	movs	r3, #7
 8002ef0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	e010      	b.n	8002f1c <MX_GPIO_Init+0x304>
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40020800 	.word	0x40020800
 8002f04:	40020000 	.word	0x40020000
 8002f08:	40020c00 	.word	0x40020c00
 8002f0c:	40021800 	.word	0x40021800
 8002f10:	40021400 	.word	0x40021400
 8002f14:	40020400 	.word	0x40020400
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	4812      	ldr	r0, [pc, #72]	@ (8002f68 <MX_GPIO_Init+0x350>)
 8002f1e:	f001 f8f5 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002f22:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f38:	4619      	mov	r1, r3
 8002f3a:	480c      	ldr	r0, [pc, #48]	@ (8002f6c <MX_GPIO_Init+0x354>)
 8002f3c:	f001 f8e6 	bl	800410c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002f40:	2360      	movs	r3, #96	@ 0x60
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f50:	230c      	movs	r3, #12
 8002f52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4805      	ldr	r0, [pc, #20]	@ (8002f70 <MX_GPIO_Init+0x358>)
 8002f5c:	f001 f8d6 	bl	800410c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f60:	bf00      	nop
 8002f62:	3738      	adds	r7, #56	@ 0x38
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40021800 	.word	0x40021800
 8002f70:	40020400 	.word	0x40020400

08002f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f78:	b672      	cpsid	i
}
 8002f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <Error_Handler+0x8>

08002f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	4b10      	ldr	r3, [pc, #64]	@ (8002fcc <HAL_MspInit+0x4c>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002fcc <HAL_MspInit+0x4c>)
 8002f90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f96:	4b0d      	ldr	r3, [pc, #52]	@ (8002fcc <HAL_MspInit+0x4c>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	4b09      	ldr	r3, [pc, #36]	@ (8002fcc <HAL_MspInit+0x4c>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	4a08      	ldr	r2, [pc, #32]	@ (8002fcc <HAL_MspInit+0x4c>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fb2:	4b06      	ldr	r3, [pc, #24]	@ (8002fcc <HAL_MspInit+0x4c>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002fbe:	2007      	movs	r0, #7
 8002fc0:	f001 f846 	bl	8004050 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40023800 	.word	0x40023800

08002fd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	@ 0x28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a29      	ldr	r2, [pc, #164]	@ (8003094 <HAL_I2C_MspInit+0xc4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d14b      	bne.n	800308a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	4b28      	ldr	r3, [pc, #160]	@ (8003098 <HAL_I2C_MspInit+0xc8>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	4a27      	ldr	r2, [pc, #156]	@ (8003098 <HAL_I2C_MspInit+0xc8>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	6313      	str	r3, [r2, #48]	@ 0x30
 8003002:	4b25      	ldr	r3, [pc, #148]	@ (8003098 <HAL_I2C_MspInit+0xc8>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	4b21      	ldr	r3, [pc, #132]	@ (8003098 <HAL_I2C_MspInit+0xc8>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003016:	4a20      	ldr	r2, [pc, #128]	@ (8003098 <HAL_I2C_MspInit+0xc8>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6313      	str	r3, [r2, #48]	@ 0x30
 800301e:	4b1e      	ldr	r3, [pc, #120]	@ (8003098 <HAL_I2C_MspInit+0xc8>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800302a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800302e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003030:	2312      	movs	r3, #18
 8003032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	2300      	movs	r3, #0
 800303a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800303c:	2304      	movs	r3, #4
 800303e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	4619      	mov	r1, r3
 8003046:	4815      	ldr	r0, [pc, #84]	@ (800309c <HAL_I2C_MspInit+0xcc>)
 8003048:	f001 f860 	bl	800410c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800304c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003052:	2312      	movs	r3, #18
 8003054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305a:	2300      	movs	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800305e:	2304      	movs	r3, #4
 8003060:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003062:	f107 0314 	add.w	r3, r7, #20
 8003066:	4619      	mov	r1, r3
 8003068:	480d      	ldr	r0, [pc, #52]	@ (80030a0 <HAL_I2C_MspInit+0xd0>)
 800306a:	f001 f84f 	bl	800410c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <HAL_I2C_MspInit+0xc8>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	4a08      	ldr	r2, [pc, #32]	@ (8003098 <HAL_I2C_MspInit+0xc8>)
 8003078:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800307c:	6413      	str	r3, [r2, #64]	@ 0x40
 800307e:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <HAL_I2C_MspInit+0xc8>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800308a:	bf00      	nop
 800308c:	3728      	adds	r7, #40	@ 0x28
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40005c00 	.word	0x40005c00
 8003098:	40023800 	.word	0x40023800
 800309c:	40020800 	.word	0x40020800
 80030a0:	40020000 	.word	0x40020000

080030a4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b09a      	sub	sp, #104	@ 0x68
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030c0:	2230      	movs	r2, #48	@ 0x30
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f004 fcbf 	bl	8007a48 <memset>
  if(hltdc->Instance==LTDC)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a81      	ldr	r2, [pc, #516]	@ (80032d4 <HAL_LTDC_MspInit+0x230>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	f040 80fb 	bne.w	80032cc <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80030d6:	2308      	movs	r3, #8
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 80030da:	23c8      	movs	r3, #200	@ 0xc8
 80030dc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80030de:	2302      	movs	r3, #2
 80030e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 80030e2:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80030e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 faa9 	bl	8006644 <HAL_RCCEx_PeriphCLKConfig>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80030f8:	f7ff ff3c 	bl	8002f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80030fc:	2300      	movs	r3, #0
 80030fe:	623b      	str	r3, [r7, #32]
 8003100:	4b75      	ldr	r3, [pc, #468]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 8003102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003104:	4a74      	ldr	r2, [pc, #464]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 8003106:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800310a:	6453      	str	r3, [r2, #68]	@ 0x44
 800310c:	4b72      	ldr	r3, [pc, #456]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 800310e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003110:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003114:	623b      	str	r3, [r7, #32]
 8003116:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003118:	2300      	movs	r3, #0
 800311a:	61fb      	str	r3, [r7, #28]
 800311c:	4b6e      	ldr	r3, [pc, #440]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003120:	4a6d      	ldr	r2, [pc, #436]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 8003122:	f043 0320 	orr.w	r3, r3, #32
 8003126:	6313      	str	r3, [r2, #48]	@ 0x30
 8003128:	4b6b      	ldr	r3, [pc, #428]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	4b67      	ldr	r3, [pc, #412]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313c:	4a66      	ldr	r2, [pc, #408]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6313      	str	r3, [r2, #48]	@ 0x30
 8003144:	4b64      	ldr	r3, [pc, #400]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 8003146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	4b60      	ldr	r3, [pc, #384]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	4a5f      	ldr	r2, [pc, #380]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 800315a:	f043 0302 	orr.w	r3, r3, #2
 800315e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003160:	4b5d      	ldr	r3, [pc, #372]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	4b59      	ldr	r3, [pc, #356]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003174:	4a58      	ldr	r2, [pc, #352]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 8003176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800317a:	6313      	str	r3, [r2, #48]	@ 0x30
 800317c:	4b56      	ldr	r3, [pc, #344]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	4b52      	ldr	r3, [pc, #328]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003190:	4a51      	ldr	r2, [pc, #324]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 8003192:	f043 0304 	orr.w	r3, r3, #4
 8003196:	6313      	str	r3, [r2, #48]	@ 0x30
 8003198:	4b4f      	ldr	r3, [pc, #316]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031a4:	2300      	movs	r3, #0
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	4b4b      	ldr	r3, [pc, #300]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 80031aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ac:	4a4a      	ldr	r2, [pc, #296]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 80031ae:	f043 0308 	orr.w	r3, r3, #8
 80031b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b4:	4b48      	ldr	r3, [pc, #288]	@ (80032d8 <HAL_LTDC_MspInit+0x234>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80031c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031c4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c6:	2302      	movs	r3, #2
 80031c8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ce:	2300      	movs	r3, #0
 80031d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031d2:	230e      	movs	r3, #14
 80031d4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80031d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031da:	4619      	mov	r1, r3
 80031dc:	483f      	ldr	r0, [pc, #252]	@ (80032dc <HAL_LTDC_MspInit+0x238>)
 80031de:	f000 ff95 	bl	800410c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80031e2:	f641 0358 	movw	r3, #6232	@ 0x1858
 80031e6:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e8:	2302      	movs	r3, #2
 80031ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f0:	2300      	movs	r3, #0
 80031f2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031f4:	230e      	movs	r3, #14
 80031f6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031fc:	4619      	mov	r1, r3
 80031fe:	4838      	ldr	r0, [pc, #224]	@ (80032e0 <HAL_LTDC_MspInit+0x23c>)
 8003200:	f000 ff84 	bl	800410c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003204:	2303      	movs	r3, #3
 8003206:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003208:	2302      	movs	r3, #2
 800320a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003210:	2300      	movs	r3, #0
 8003212:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003214:	2309      	movs	r3, #9
 8003216:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003218:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800321c:	4619      	mov	r1, r3
 800321e:	4831      	ldr	r0, [pc, #196]	@ (80032e4 <HAL_LTDC_MspInit+0x240>)
 8003220:	f000 ff74 	bl	800410c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003224:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003228:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322a:	2302      	movs	r3, #2
 800322c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	2300      	movs	r3, #0
 8003230:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003232:	2300      	movs	r3, #0
 8003234:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003236:	230e      	movs	r3, #14
 8003238:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800323e:	4619      	mov	r1, r3
 8003240:	4828      	ldr	r0, [pc, #160]	@ (80032e4 <HAL_LTDC_MspInit+0x240>)
 8003242:	f000 ff63 	bl	800410c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003246:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800324a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	2302      	movs	r3, #2
 800324e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003254:	2300      	movs	r3, #0
 8003256:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003258:	230e      	movs	r3, #14
 800325a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800325c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003260:	4619      	mov	r1, r3
 8003262:	4821      	ldr	r0, [pc, #132]	@ (80032e8 <HAL_LTDC_MspInit+0x244>)
 8003264:	f000 ff52 	bl	800410c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003268:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800326c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800327a:	230e      	movs	r3, #14
 800327c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800327e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003282:	4619      	mov	r1, r3
 8003284:	4819      	ldr	r0, [pc, #100]	@ (80032ec <HAL_LTDC_MspInit+0x248>)
 8003286:	f000 ff41 	bl	800410c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800328a:	2348      	movs	r3, #72	@ 0x48
 800328c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	2302      	movs	r3, #2
 8003290:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003296:	2300      	movs	r3, #0
 8003298:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800329a:	230e      	movs	r3, #14
 800329c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800329e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80032a2:	4619      	mov	r1, r3
 80032a4:	4812      	ldr	r0, [pc, #72]	@ (80032f0 <HAL_LTDC_MspInit+0x24c>)
 80032a6:	f000 ff31 	bl	800410c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80032aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80032ae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b0:	2302      	movs	r3, #2
 80032b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	2300      	movs	r3, #0
 80032ba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80032bc:	2309      	movs	r3, #9
 80032be:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80032c4:	4619      	mov	r1, r3
 80032c6:	4808      	ldr	r0, [pc, #32]	@ (80032e8 <HAL_LTDC_MspInit+0x244>)
 80032c8:	f000 ff20 	bl	800410c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80032cc:	bf00      	nop
 80032ce:	3768      	adds	r7, #104	@ 0x68
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40016800 	.word	0x40016800
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40021400 	.word	0x40021400
 80032e0:	40020000 	.word	0x40020000
 80032e4:	40020400 	.word	0x40020400
 80032e8:	40021800 	.word	0x40021800
 80032ec:	40020800 	.word	0x40020800
 80032f0:	40020c00 	.word	0x40020c00

080032f4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0b      	ldr	r2, [pc, #44]	@ (8003330 <HAL_RNG_MspInit+0x3c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d10d      	bne.n	8003322 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	4b0a      	ldr	r3, [pc, #40]	@ (8003334 <HAL_RNG_MspInit+0x40>)
 800330c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330e:	4a09      	ldr	r2, [pc, #36]	@ (8003334 <HAL_RNG_MspInit+0x40>)
 8003310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003314:	6353      	str	r3, [r2, #52]	@ 0x34
 8003316:	4b07      	ldr	r3, [pc, #28]	@ (8003334 <HAL_RNG_MspInit+0x40>)
 8003318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	50060800 	.word	0x50060800
 8003334:	40023800 	.word	0x40023800

08003338 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	@ 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	f107 0314 	add.w	r3, r7, #20
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a19      	ldr	r2, [pc, #100]	@ (80033bc <HAL_SPI_MspInit+0x84>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d12c      	bne.n	80033b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	4b18      	ldr	r3, [pc, #96]	@ (80033c0 <HAL_SPI_MspInit+0x88>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	4a17      	ldr	r2, [pc, #92]	@ (80033c0 <HAL_SPI_MspInit+0x88>)
 8003364:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003368:	6453      	str	r3, [r2, #68]	@ 0x44
 800336a:	4b15      	ldr	r3, [pc, #84]	@ (80033c0 <HAL_SPI_MspInit+0x88>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	4b11      	ldr	r3, [pc, #68]	@ (80033c0 <HAL_SPI_MspInit+0x88>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337e:	4a10      	ldr	r2, [pc, #64]	@ (80033c0 <HAL_SPI_MspInit+0x88>)
 8003380:	f043 0320 	orr.w	r3, r3, #32
 8003384:	6313      	str	r3, [r2, #48]	@ 0x30
 8003386:	4b0e      	ldr	r3, [pc, #56]	@ (80033c0 <HAL_SPI_MspInit+0x88>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003392:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	2300      	movs	r3, #0
 80033a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80033a4:	2305      	movs	r3, #5
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	4619      	mov	r1, r3
 80033ae:	4805      	ldr	r0, [pc, #20]	@ (80033c4 <HAL_SPI_MspInit+0x8c>)
 80033b0:	f000 feac 	bl	800410c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80033b4:	bf00      	nop
 80033b6:	3728      	adds	r7, #40	@ 0x28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40015000 	.word	0x40015000
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40021400 	.word	0x40021400

080033c8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a08      	ldr	r2, [pc, #32]	@ (80033f8 <HAL_SPI_MspDeInit+0x30>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10a      	bne.n	80033f0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80033da:	4b08      	ldr	r3, [pc, #32]	@ (80033fc <HAL_SPI_MspDeInit+0x34>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033de:	4a07      	ldr	r2, [pc, #28]	@ (80033fc <HAL_SPI_MspDeInit+0x34>)
 80033e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80033e4:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80033e6:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80033ea:	4805      	ldr	r0, [pc, #20]	@ (8003400 <HAL_SPI_MspDeInit+0x38>)
 80033ec:	f001 f83a 	bl	8004464 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40015000 	.word	0x40015000
 80033fc:	40023800 	.word	0x40023800
 8003400:	40021400 	.word	0x40021400

08003404 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003414:	d10d      	bne.n	8003432 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	4b09      	ldr	r3, [pc, #36]	@ (8003440 <HAL_TIM_Base_MspInit+0x3c>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	4a08      	ldr	r2, [pc, #32]	@ (8003440 <HAL_TIM_Base_MspInit+0x3c>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	6413      	str	r3, [r2, #64]	@ 0x40
 8003426:	4b06      	ldr	r3, [pc, #24]	@ (8003440 <HAL_TIM_Base_MspInit+0x3c>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003432:	bf00      	nop
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800

08003444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <NMI_Handler+0x4>

0800344c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003450:	bf00      	nop
 8003452:	e7fd      	b.n	8003450 <HardFault_Handler+0x4>

08003454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003458:	bf00      	nop
 800345a:	e7fd      	b.n	8003458 <MemManage_Handler+0x4>

0800345c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003460:	bf00      	nop
 8003462:	e7fd      	b.n	8003460 <BusFault_Handler+0x4>

08003464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003468:	bf00      	nop
 800346a:	e7fd      	b.n	8003468 <UsageFault_Handler+0x4>

0800346c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800347a:	b480      	push	{r7}
 800347c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800349a:	f000 fc83 	bl	8003da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80034a8:	f000 f9ce 	bl	8003848 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80034ac:	f000 f98e 	bl	80037cc <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80034b0:	2202      	movs	r2, #2
 80034b2:	2103      	movs	r1, #3
 80034b4:	2082      	movs	r0, #130	@ 0x82
 80034b6:	f000 fa1b 	bl	80038f0 <I2C3_Write>
    HAL_Delay(5);
 80034ba:	2005      	movs	r0, #5
 80034bc:	f000 fc92 	bl	8003de4 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80034c0:	2200      	movs	r2, #0
 80034c2:	2103      	movs	r1, #3
 80034c4:	2082      	movs	r0, #130	@ 0x82
 80034c6:	f000 fa13 	bl	80038f0 <I2C3_Write>
    HAL_Delay(2);
 80034ca:	2002      	movs	r0, #2
 80034cc:	f000 fc8a 	bl	8003de4 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80034d0:	1cba      	adds	r2, r7, #2
 80034d2:	2302      	movs	r3, #2
 80034d4:	2100      	movs	r1, #0
 80034d6:	2082      	movs	r0, #130	@ 0x82
 80034d8:	f000 fa5a 	bl	8003990 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80034dc:	887b      	ldrh	r3, [r7, #2]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80034e2:	887b      	ldrh	r3, [r7, #2]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	f640 0211 	movw	r2, #2065	@ 0x811
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d001      	beq.n	80034fc <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e075      	b.n	80035e8 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80034fc:	2202      	movs	r2, #2
 80034fe:	2103      	movs	r1, #3
 8003500:	2082      	movs	r0, #130	@ 0x82
 8003502:	f000 f9f5 	bl	80038f0 <I2C3_Write>
    HAL_Delay(5);
 8003506:	2005      	movs	r0, #5
 8003508:	f000 fc6c 	bl	8003de4 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800350c:	2200      	movs	r2, #0
 800350e:	2103      	movs	r1, #3
 8003510:	2082      	movs	r0, #130	@ 0x82
 8003512:	f000 f9ed 	bl	80038f0 <I2C3_Write>
    HAL_Delay(2);
 8003516:	2002      	movs	r0, #2
 8003518:	f000 fc64 	bl	8003de4 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800351c:	2004      	movs	r0, #4
 800351e:	f000 f867 	bl	80035f0 <STMPE811_Read>
 8003522:	4603      	mov	r3, r0
 8003524:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003526:	797b      	ldrb	r3, [r7, #5]
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800352e:	797b      	ldrb	r3, [r7, #5]
 8003530:	461a      	mov	r2, r3
 8003532:	2104      	movs	r1, #4
 8003534:	2082      	movs	r0, #130	@ 0x82
 8003536:	f000 f9db 	bl	80038f0 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800353a:	2004      	movs	r0, #4
 800353c:	f000 f858 	bl	80035f0 <STMPE811_Read>
 8003540:	4603      	mov	r3, r0
 8003542:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003544:	797b      	ldrb	r3, [r7, #5]
 8003546:	f023 0302 	bic.w	r3, r3, #2
 800354a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800354c:	797b      	ldrb	r3, [r7, #5]
 800354e:	461a      	mov	r2, r3
 8003550:	2104      	movs	r1, #4
 8003552:	2082      	movs	r0, #130	@ 0x82
 8003554:	f000 f9cc 	bl	80038f0 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003558:	2249      	movs	r2, #73	@ 0x49
 800355a:	2120      	movs	r1, #32
 800355c:	2082      	movs	r0, #130	@ 0x82
 800355e:	f000 f9c7 	bl	80038f0 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8003562:	2002      	movs	r0, #2
 8003564:	f000 fc3e 	bl	8003de4 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003568:	2201      	movs	r2, #1
 800356a:	2121      	movs	r1, #33	@ 0x21
 800356c:	2082      	movs	r0, #130	@ 0x82
 800356e:	f000 f9bf 	bl	80038f0 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003572:	2017      	movs	r0, #23
 8003574:	f000 f83c 	bl	80035f0 <STMPE811_Read>
 8003578:	4603      	mov	r3, r0
 800357a:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 800357c:	797b      	ldrb	r3, [r7, #5]
 800357e:	f043 031e 	orr.w	r3, r3, #30
 8003582:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003584:	797b      	ldrb	r3, [r7, #5]
 8003586:	461a      	mov	r2, r3
 8003588:	2117      	movs	r1, #23
 800358a:	2082      	movs	r0, #130	@ 0x82
 800358c:	f000 f9b0 	bl	80038f0 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003590:	229a      	movs	r2, #154	@ 0x9a
 8003592:	2141      	movs	r1, #65	@ 0x41
 8003594:	2082      	movs	r0, #130	@ 0x82
 8003596:	f000 f9ab 	bl	80038f0 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 800359a:	2201      	movs	r2, #1
 800359c:	214a      	movs	r1, #74	@ 0x4a
 800359e:	2082      	movs	r0, #130	@ 0x82
 80035a0:	f000 f9a6 	bl	80038f0 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80035a4:	2201      	movs	r2, #1
 80035a6:	214b      	movs	r1, #75	@ 0x4b
 80035a8:	2082      	movs	r0, #130	@ 0x82
 80035aa:	f000 f9a1 	bl	80038f0 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80035ae:	2200      	movs	r2, #0
 80035b0:	214b      	movs	r1, #75	@ 0x4b
 80035b2:	2082      	movs	r0, #130	@ 0x82
 80035b4:	f000 f99c 	bl	80038f0 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80035b8:	2201      	movs	r2, #1
 80035ba:	2156      	movs	r1, #86	@ 0x56
 80035bc:	2082      	movs	r0, #130	@ 0x82
 80035be:	f000 f997 	bl	80038f0 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80035c2:	2201      	movs	r2, #1
 80035c4:	2158      	movs	r1, #88	@ 0x58
 80035c6:	2082      	movs	r0, #130	@ 0x82
 80035c8:	f000 f992 	bl	80038f0 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80035cc:	2203      	movs	r2, #3
 80035ce:	2140      	movs	r1, #64	@ 0x40
 80035d0:	2082      	movs	r0, #130	@ 0x82
 80035d2:	f000 f98d 	bl	80038f0 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80035d6:	22ff      	movs	r2, #255	@ 0xff
 80035d8:	210b      	movs	r1, #11
 80035da:	2082      	movs	r0, #130	@ 0x82
 80035dc:	f000 f988 	bl	80038f0 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80035e0:	20c8      	movs	r0, #200	@ 0xc8
 80035e2:	f000 fbff 	bl	8003de4 <HAL_Delay>

    return STMPE811_State_Ok;
 80035e6:	2302      	movs	r3, #2

}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 80035fa:	f107 020f 	add.w	r2, r7, #15
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	4619      	mov	r1, r3
 8003602:	2082      	movs	r0, #130	@ 0x82
 8003604:	f000 f99e 	bl	8003944 <I2C3_Read>

    return readData;
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	791a      	ldrb	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8003622:	2040      	movs	r0, #64	@ 0x40
 8003624:	f7ff ffe4 	bl	80035f0 <STMPE811_Read>
 8003628:	4603      	mov	r3, r0
 800362a:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 800362c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003630:	2b00      	cmp	r3, #0
 8003632:	db0e      	blt.n	8003652 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800363a:	2201      	movs	r2, #1
 800363c:	214b      	movs	r1, #75	@ 0x4b
 800363e:	2082      	movs	r0, #130	@ 0x82
 8003640:	f000 f956 	bl	80038f0 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003644:	2200      	movs	r2, #0
 8003646:	214b      	movs	r1, #75	@ 0x4b
 8003648:	2082      	movs	r0, #130	@ 0x82
 800364a:	f000 f951 	bl	80038f0 <I2C3_Write>

        return STMPE811_State_Released;
 800364e:	2301      	movs	r3, #1
 8003650:	e0a7      	b.n	80037a2 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	799b      	ldrb	r3, [r3, #6]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d117      	bne.n	800368a <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f9b8 	bl	80039d4 <TM_STMPE811_ReadX>
 8003664:	4603      	mov	r3, r0
 8003666:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	885b      	ldrh	r3, [r3, #2]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fa0b 	bl	8003a90 <TM_STMPE811_ReadY>
 800367a:	4603      	mov	r3, r0
 800367c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003680:	3301      	adds	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	805a      	strh	r2, [r3, #2]
 8003688:	e048      	b.n	800371c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	799b      	ldrb	r3, [r3, #6]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d112      	bne.n	80036b8 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f99c 	bl	80039d4 <TM_STMPE811_ReadX>
 800369c:	4603      	mov	r3, r0
 800369e:	461a      	mov	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	885b      	ldrh	r3, [r3, #2]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 f9f1 	bl	8003a90 <TM_STMPE811_ReadY>
 80036ae:	4603      	mov	r3, r0
 80036b0:	461a      	mov	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	805a      	strh	r2, [r3, #2]
 80036b6:	e031      	b.n	800371c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	799b      	ldrb	r3, [r3, #6]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d115      	bne.n	80036ec <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	885b      	ldrh	r3, [r3, #2]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 f985 	bl	80039d4 <TM_STMPE811_ReadX>
 80036ca:	4603      	mov	r3, r0
 80036cc:	461a      	mov	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f9da 	bl	8003a90 <TM_STMPE811_ReadY>
 80036dc:	4603      	mov	r3, r0
 80036de:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80036e2:	3301      	adds	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	801a      	strh	r2, [r3, #0]
 80036ea:	e017      	b.n	800371c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	799b      	ldrb	r3, [r3, #6]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d113      	bne.n	800371c <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 f96b 	bl	80039d4 <TM_STMPE811_ReadX>
 80036fe:	4603      	mov	r3, r0
 8003700:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003704:	b29a      	uxth	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f9be 	bl	8003a90 <TM_STMPE811_ReadY>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800371c:	2201      	movs	r2, #1
 800371e:	214b      	movs	r1, #75	@ 0x4b
 8003720:	2082      	movs	r0, #130	@ 0x82
 8003722:	f000 f8e5 	bl	80038f0 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003726:	2200      	movs	r2, #0
 8003728:	214b      	movs	r1, #75	@ 0x4b
 800372a:	2082      	movs	r0, #130	@ 0x82
 800372c:	f000 f8e0 	bl	80038f0 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	799b      	ldrb	r3, [r3, #6]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <STMPE811_ReadTouch+0x12e>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	799b      	ldrb	r3, [r3, #6]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d115      	bne.n	800376c <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d027      	beq.n	8003798 <STMPE811_ReadTouch+0x186>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	2bee      	cmp	r3, #238	@ 0xee
 800374e:	d823      	bhi.n	8003798 <STMPE811_ReadTouch+0x186>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	885b      	ldrh	r3, [r3, #2]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01f      	beq.n	8003798 <STMPE811_ReadTouch+0x186>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	885b      	ldrh	r3, [r3, #2]
 800375c:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003760:	d81a      	bhi.n	8003798 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003768:	2300      	movs	r3, #0
 800376a:	e01a      	b.n	80037a2 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d012      	beq.n	800379a <STMPE811_ReadTouch+0x188>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800377c:	d80d      	bhi.n	800379a <STMPE811_ReadTouch+0x188>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	885b      	ldrh	r3, [r3, #2]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <STMPE811_ReadTouch+0x188>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	885b      	ldrh	r3, [r3, #2]
 800378a:	2bee      	cmp	r3, #238	@ 0xee
 800378c:	d805      	bhi.n	800379a <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003794:	2300      	movs	r3, #0
 8003796:	e004      	b.n	80037a2 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003798:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80037a0:	2301      	movs	r3, #1
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80037b0:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80037b8:	bf00      	nop
 80037ba:	e7fd      	b.n	80037b8 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20025c14 	.word	0x20025c14

080037cc <I2C3_Init>:

static void I2C3_Init()
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	603b      	str	r3, [r7, #0]
 80037d6:	4b18      	ldr	r3, [pc, #96]	@ (8003838 <I2C3_Init+0x6c>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	4a17      	ldr	r2, [pc, #92]	@ (8003838 <I2C3_Init+0x6c>)
 80037dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e2:	4b15      	ldr	r3, [pc, #84]	@ (8003838 <I2C3_Init+0x6c>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80037ee:	4b13      	ldr	r3, [pc, #76]	@ (800383c <I2C3_Init+0x70>)
 80037f0:	4a13      	ldr	r2, [pc, #76]	@ (8003840 <I2C3_Init+0x74>)
 80037f2:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80037f4:	4b11      	ldr	r3, [pc, #68]	@ (800383c <I2C3_Init+0x70>)
 80037f6:	4a13      	ldr	r2, [pc, #76]	@ (8003844 <I2C3_Init+0x78>)
 80037f8:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037fa:	4b10      	ldr	r3, [pc, #64]	@ (800383c <I2C3_Init+0x70>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003800:	4b0e      	ldr	r3, [pc, #56]	@ (800383c <I2C3_Init+0x70>)
 8003802:	2200      	movs	r2, #0
 8003804:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003806:	4b0d      	ldr	r3, [pc, #52]	@ (800383c <I2C3_Init+0x70>)
 8003808:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800380c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800380e:	4b0b      	ldr	r3, [pc, #44]	@ (800383c <I2C3_Init+0x70>)
 8003810:	2200      	movs	r2, #0
 8003812:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003814:	4b09      	ldr	r3, [pc, #36]	@ (800383c <I2C3_Init+0x70>)
 8003816:	2200      	movs	r2, #0
 8003818:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800381a:	4808      	ldr	r0, [pc, #32]	@ (800383c <I2C3_Init+0x70>)
 800381c:	f000 ff48 	bl	80046b0 <HAL_I2C_Init>
 8003820:	4603      	mov	r3, r0
 8003822:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800382a:	bf00      	nop
 800382c:	e7fd      	b.n	800382a <I2C3_Init+0x5e>
    }
    return;
 800382e:	bf00      	nop
}
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800
 800383c:	20025bc0 	.word	0x20025bc0
 8003840:	40005c00 	.word	0x40005c00
 8003844:	000186a0 	.word	0x000186a0

08003848 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800384e:	f107 030c 	add.w	r3, r7, #12
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	60da      	str	r2, [r3, #12]
 800385c:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	4b20      	ldr	r3, [pc, #128]	@ (80038e4 <I2C3_MspInit+0x9c>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	4a1f      	ldr	r2, [pc, #124]	@ (80038e4 <I2C3_MspInit+0x9c>)
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	6313      	str	r3, [r2, #48]	@ 0x30
 800386e:	4b1d      	ldr	r3, [pc, #116]	@ (80038e4 <I2C3_MspInit+0x9c>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	4b19      	ldr	r3, [pc, #100]	@ (80038e4 <I2C3_MspInit+0x9c>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	4a18      	ldr	r2, [pc, #96]	@ (80038e4 <I2C3_MspInit+0x9c>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6313      	str	r3, [r2, #48]	@ 0x30
 800388a:	4b16      	ldr	r3, [pc, #88]	@ (80038e4 <I2C3_MspInit+0x9c>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	607b      	str	r3, [r7, #4]
 8003894:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003896:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800389a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800389c:	2312      	movs	r3, #18
 800389e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80038a8:	2304      	movs	r3, #4
 80038aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80038ac:	f107 030c 	add.w	r3, r7, #12
 80038b0:	4619      	mov	r1, r3
 80038b2:	480d      	ldr	r0, [pc, #52]	@ (80038e8 <I2C3_MspInit+0xa0>)
 80038b4:	f000 fc2a 	bl	800410c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80038b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038be:	2312      	movs	r3, #18
 80038c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80038ca:	2304      	movs	r3, #4
 80038cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80038ce:	f107 030c 	add.w	r3, r7, #12
 80038d2:	4619      	mov	r1, r3
 80038d4:	4805      	ldr	r0, [pc, #20]	@ (80038ec <I2C3_MspInit+0xa4>)
 80038d6:	f000 fc19 	bl	800410c <HAL_GPIO_Init>
    
}
 80038da:	bf00      	nop
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40020800 	.word	0x40020800
 80038ec:	40020000 	.word	0x40020000

080038f0 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af04      	add	r7, sp, #16
 80038f6:	4603      	mov	r3, r0
 80038f8:	80fb      	strh	r3, [r7, #6]
 80038fa:	460b      	mov	r3, r1
 80038fc:	717b      	strb	r3, [r7, #5]
 80038fe:	4613      	mov	r3, r2
 8003900:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003902:	793b      	ldrb	r3, [r7, #4]
 8003904:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003906:	797b      	ldrb	r3, [r7, #5]
 8003908:	b29a      	uxth	r2, r3
 800390a:	88f9      	ldrh	r1, [r7, #6]
 800390c:	4b0a      	ldr	r3, [pc, #40]	@ (8003938 <I2C3_Write+0x48>)
 800390e:	9302      	str	r3, [sp, #8]
 8003910:	2301      	movs	r3, #1
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	f107 030f 	add.w	r3, r7, #15
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	2301      	movs	r3, #1
 800391c:	4807      	ldr	r0, [pc, #28]	@ (800393c <I2C3_Write+0x4c>)
 800391e:	f001 f80b 	bl	8004938 <HAL_I2C_Mem_Write>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <I2C3_Write+0x50>)
 8003928:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800392a:	f7ff ff3f 	bl	80037ac <verifyHAL_I2C_IS_OKAY>
}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	0003d090 	.word	0x0003d090
 800393c:	20025bc0 	.word	0x20025bc0
 8003940:	20025c14 	.word	0x20025c14

08003944 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af04      	add	r7, sp, #16
 800394a:	4603      	mov	r3, r0
 800394c:	603a      	str	r2, [r7, #0]
 800394e:	71fb      	strb	r3, [r7, #7]
 8003950:	460b      	mov	r3, r1
 8003952:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	b299      	uxth	r1, r3
 8003958:	79bb      	ldrb	r3, [r7, #6]
 800395a:	b29a      	uxth	r2, r3
 800395c:	4b09      	ldr	r3, [pc, #36]	@ (8003984 <I2C3_Read+0x40>)
 800395e:	9302      	str	r3, [sp, #8]
 8003960:	2301      	movs	r3, #1
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	2301      	movs	r3, #1
 800396a:	4807      	ldr	r0, [pc, #28]	@ (8003988 <I2C3_Read+0x44>)
 800396c:	f001 f8de 	bl	8004b2c <HAL_I2C_Mem_Read>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	4b05      	ldr	r3, [pc, #20]	@ (800398c <I2C3_Read+0x48>)
 8003976:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003978:	f7ff ff18 	bl	80037ac <verifyHAL_I2C_IS_OKAY>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	0003d090 	.word	0x0003d090
 8003988:	20025bc0 	.word	0x20025bc0
 800398c:	20025c14 	.word	0x20025c14

08003990 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af04      	add	r7, sp, #16
 8003996:	603a      	str	r2, [r7, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
 800399e:	460b      	mov	r3, r1
 80039a0:	71bb      	strb	r3, [r7, #6]
 80039a2:	4613      	mov	r3, r2
 80039a4:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	b299      	uxth	r1, r3
 80039aa:	79bb      	ldrb	r3, [r7, #6]
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <I2C3_MulitByteRead+0x3c>)
 80039b0:	9302      	str	r3, [sp, #8]
 80039b2:	88bb      	ldrh	r3, [r7, #4]
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	2301      	movs	r3, #1
 80039bc:	4804      	ldr	r0, [pc, #16]	@ (80039d0 <I2C3_MulitByteRead+0x40>)
 80039be:	f001 f8b5 	bl	8004b2c <HAL_I2C_Mem_Read>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	0003d090 	.word	0x0003d090
 80039d0:	20025bc0 	.word	0x20025bc0

080039d4 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80039de:	204d      	movs	r0, #77	@ 0x4d
 80039e0:	f7ff fe06 	bl	80035f0 <STMPE811_Read>
 80039e4:	4603      	mov	r3, r0
 80039e6:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80039e8:	204e      	movs	r0, #78	@ 0x4e
 80039ea:	f7ff fe01 	bl	80035f0 <STMPE811_Read>
 80039ee:	4603      	mov	r3, r0
 80039f0:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80039f2:	7a7b      	ldrb	r3, [r7, #9]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	b21a      	sxth	r2, r3
 80039f8:	7a3b      	ldrb	r3, [r7, #8]
 80039fa:	b21b      	sxth	r3, r3
 80039fc:	4313      	orrs	r3, r2
 80039fe:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003a00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a04:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	dc06      	bgt.n	8003a1a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8003a0c:	89fb      	ldrh	r3, [r7, #14]
 8003a0e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003a12:	330c      	adds	r3, #12
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	81fb      	strh	r3, [r7, #14]
 8003a18:	e005      	b.n	8003a26 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8003a1a:	89fb      	ldrh	r3, [r7, #14]
 8003a1c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003a20:	3308      	adds	r3, #8
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003a26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a2a:	4a18      	ldr	r2, [pc, #96]	@ (8003a8c <TM_STMPE811_ReadX+0xb8>)
 8003a2c:	fb82 1203 	smull	r1, r2, r2, r3
 8003a30:	441a      	add	r2, r3
 8003a32:	10d2      	asrs	r2, r2, #3
 8003a34:	17db      	asrs	r3, r3, #31
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003a3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a3e:	2bef      	cmp	r3, #239	@ 0xef
 8003a40:	dd02      	ble.n	8003a48 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8003a42:	23ef      	movs	r3, #239	@ 0xef
 8003a44:	81fb      	strh	r3, [r7, #14]
 8003a46:	e005      	b.n	8003a54 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	da01      	bge.n	8003a54 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003a54:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	dd05      	ble.n	8003a6a <TM_STMPE811_ReadX+0x96>
 8003a5e:	89fa      	ldrh	r2, [r7, #14]
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	b21b      	sxth	r3, r3
 8003a68:	e004      	b.n	8003a74 <TM_STMPE811_ReadX+0xa0>
 8003a6a:	89fb      	ldrh	r3, [r7, #14]
 8003a6c:	88fa      	ldrh	r2, [r7, #6]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	b21b      	sxth	r3, r3
 8003a74:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003a76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	dd01      	ble.n	8003a82 <TM_STMPE811_ReadX+0xae>
        return val;
 8003a7e:	89fb      	ldrh	r3, [r7, #14]
 8003a80:	e000      	b.n	8003a84 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003a82:	88fb      	ldrh	r3, [r7, #6]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	88888889 	.word	0x88888889

08003a90 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003a9a:	204f      	movs	r0, #79	@ 0x4f
 8003a9c:	f7ff fda8 	bl	80035f0 <STMPE811_Read>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003aa4:	2050      	movs	r0, #80	@ 0x50
 8003aa6:	f7ff fda3 	bl	80035f0 <STMPE811_Read>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003aae:	7a7b      	ldrb	r3, [r7, #9]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	b21a      	sxth	r2, r3
 8003ab4:	7a3b      	ldrb	r3, [r7, #8]
 8003ab6:	b21b      	sxth	r3, r3
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003abc:	89fb      	ldrh	r3, [r7, #14]
 8003abe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003ac6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003aca:	4a19      	ldr	r2, [pc, #100]	@ (8003b30 <TM_STMPE811_ReadY+0xa0>)
 8003acc:	fb82 1203 	smull	r1, r2, r2, r3
 8003ad0:	1052      	asrs	r2, r2, #1
 8003ad2:	17db      	asrs	r3, r3, #31
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003ad8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	dc02      	bgt.n	8003ae6 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	81fb      	strh	r3, [r7, #14]
 8003ae4:	e007      	b.n	8003af6 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003ae6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003aea:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003aee:	db02      	blt.n	8003af6 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003af0:	f240 133f 	movw	r3, #319	@ 0x13f
 8003af4:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003af6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003afa:	88fb      	ldrh	r3, [r7, #6]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	dd05      	ble.n	8003b0c <TM_STMPE811_ReadY+0x7c>
 8003b00:	89fa      	ldrh	r2, [r7, #14]
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	b21b      	sxth	r3, r3
 8003b0a:	e004      	b.n	8003b16 <TM_STMPE811_ReadY+0x86>
 8003b0c:	89fb      	ldrh	r3, [r7, #14]
 8003b0e:	88fa      	ldrh	r2, [r7, #6]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	b21b      	sxth	r3, r3
 8003b16:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003b18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	dd01      	ble.n	8003b24 <TM_STMPE811_ReadY+0x94>
        return val;
 8003b20:	89fb      	ldrh	r3, [r7, #14]
 8003b22:	e000      	b.n	8003b26 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8003b24:	88fb      	ldrh	r3, [r7, #6]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	2e8ba2e9 	.word	0x2e8ba2e9

08003b34 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b086      	sub	sp, #24
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e00a      	b.n	8003b6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b54:	f3af 8000 	nop.w
 8003b58:	4601      	mov	r1, r0
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	60ba      	str	r2, [r7, #8]
 8003b60:	b2ca      	uxtb	r2, r1
 8003b62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	3301      	adds	r3, #1
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	dbf0      	blt.n	8003b54 <_read+0x12>
  }

  return len;
 8003b72:	687b      	ldr	r3, [r7, #4]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	e009      	b.n	8003ba2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	60ba      	str	r2, [r7, #8]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	dbf1      	blt.n	8003b8e <_write+0x12>
  }
  return len;
 8003baa:	687b      	ldr	r3, [r7, #4]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <_close>:

int _close(int file)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bdc:	605a      	str	r2, [r3, #4]
  return 0;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <_isatty>:

int _isatty(int file)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003bf4:	2301      	movs	r3, #1
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c24:	4a14      	ldr	r2, [pc, #80]	@ (8003c78 <_sbrk+0x5c>)
 8003c26:	4b15      	ldr	r3, [pc, #84]	@ (8003c7c <_sbrk+0x60>)
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c30:	4b13      	ldr	r3, [pc, #76]	@ (8003c80 <_sbrk+0x64>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c38:	4b11      	ldr	r3, [pc, #68]	@ (8003c80 <_sbrk+0x64>)
 8003c3a:	4a12      	ldr	r2, [pc, #72]	@ (8003c84 <_sbrk+0x68>)
 8003c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c3e:	4b10      	ldr	r3, [pc, #64]	@ (8003c80 <_sbrk+0x64>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d207      	bcs.n	8003c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c4c:	f003 ff4a 	bl	8007ae4 <__errno>
 8003c50:	4603      	mov	r3, r0
 8003c52:	220c      	movs	r2, #12
 8003c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c56:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5a:	e009      	b.n	8003c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c5c:	4b08      	ldr	r3, [pc, #32]	@ (8003c80 <_sbrk+0x64>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c62:	4b07      	ldr	r3, [pc, #28]	@ (8003c80 <_sbrk+0x64>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	4a05      	ldr	r2, [pc, #20]	@ (8003c80 <_sbrk+0x64>)
 8003c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20030000 	.word	0x20030000
 8003c7c:	00000400 	.word	0x00000400
 8003c80:	20025c18 	.word	0x20025c18
 8003c84:	20025d70 	.word	0x20025d70

08003c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <SystemInit+0x20>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c92:	4a05      	ldr	r2, [pc, #20]	@ (8003ca8 <SystemInit+0x20>)
 8003c94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003cac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ce4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cb0:	f7ff ffea 	bl	8003c88 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cb4:	480c      	ldr	r0, [pc, #48]	@ (8003ce8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003cb6:	490d      	ldr	r1, [pc, #52]	@ (8003cec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cbc:	e002      	b.n	8003cc4 <LoopCopyDataInit>

08003cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cc2:	3304      	adds	r3, #4

08003cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cc8:	d3f9      	bcc.n	8003cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cca:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8003cf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cd0:	e001      	b.n	8003cd6 <LoopFillZerobss>

08003cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cd4:	3204      	adds	r2, #4

08003cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cd8:	d3fb      	bcc.n	8003cd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003cda:	f003 ff09 	bl	8007af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cde:	f7fe fd8e 	bl	80027fe <main>
  bx  lr    
 8003ce2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003ce4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003cf0:	080097cc 	.word	0x080097cc
  ldr r2, =_sbss
 8003cf4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003cf8:	20025d6c 	.word	0x20025d6c

08003cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cfc:	e7fe      	b.n	8003cfc <ADC_IRQHandler>
	...

08003d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d04:	4b0e      	ldr	r3, [pc, #56]	@ (8003d40 <HAL_Init+0x40>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a0d      	ldr	r2, [pc, #52]	@ (8003d40 <HAL_Init+0x40>)
 8003d0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d10:	4b0b      	ldr	r3, [pc, #44]	@ (8003d40 <HAL_Init+0x40>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a0a      	ldr	r2, [pc, #40]	@ (8003d40 <HAL_Init+0x40>)
 8003d16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d1c:	4b08      	ldr	r3, [pc, #32]	@ (8003d40 <HAL_Init+0x40>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a07      	ldr	r2, [pc, #28]	@ (8003d40 <HAL_Init+0x40>)
 8003d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d28:	2003      	movs	r0, #3
 8003d2a:	f000 f991 	bl	8004050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f000 f808 	bl	8003d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d34:	f7ff f924 	bl	8002f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023c00 	.word	0x40023c00

08003d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d4c:	4b12      	ldr	r3, [pc, #72]	@ (8003d98 <HAL_InitTick+0x54>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b12      	ldr	r3, [pc, #72]	@ (8003d9c <HAL_InitTick+0x58>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	4619      	mov	r1, r3
 8003d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f9b7 	bl	80040d6 <HAL_SYSTICK_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e00e      	b.n	8003d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b0f      	cmp	r3, #15
 8003d76:	d80a      	bhi.n	8003d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	f000 f971 	bl	8004066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d84:	4a06      	ldr	r2, [pc, #24]	@ (8003da0 <HAL_InitTick+0x5c>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e000      	b.n	8003d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	20000010 	.word	0x20000010
 8003d9c:	20000018 	.word	0x20000018
 8003da0:	20000014 	.word	0x20000014

08003da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003da8:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <HAL_IncTick+0x20>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <HAL_IncTick+0x24>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4413      	add	r3, r2
 8003db4:	4a04      	ldr	r2, [pc, #16]	@ (8003dc8 <HAL_IncTick+0x24>)
 8003db6:	6013      	str	r3, [r2, #0]
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	20000018 	.word	0x20000018
 8003dc8:	20025c1c 	.word	0x20025c1c

08003dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return uwTick;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	@ (8003de0 <HAL_GetTick+0x14>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20025c1c 	.word	0x20025c1c

08003de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dec:	f7ff ffee 	bl	8003dcc <HAL_GetTick>
 8003df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d005      	beq.n	8003e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003e28 <HAL_Delay+0x44>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e0a:	bf00      	nop
 8003e0c:	f7ff ffde 	bl	8003dcc <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d8f7      	bhi.n	8003e0c <HAL_Delay+0x28>
  {
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000018 	.word	0x20000018

08003e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e70 <__NVIC_SetPriorityGrouping+0x44>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e5e:	4a04      	ldr	r2, [pc, #16]	@ (8003e70 <__NVIC_SetPriorityGrouping+0x44>)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	60d3      	str	r3, [r2, #12]
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e78:	4b04      	ldr	r3, [pc, #16]	@ (8003e8c <__NVIC_GetPriorityGrouping+0x18>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	f003 0307 	and.w	r3, r3, #7
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	db0b      	blt.n	8003eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	f003 021f 	and.w	r2, r3, #31
 8003ea8:	4907      	ldr	r1, [pc, #28]	@ (8003ec8 <__NVIC_EnableIRQ+0x38>)
 8003eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	e000e100 	.word	0xe000e100

08003ecc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	db12      	blt.n	8003f04 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	f003 021f 	and.w	r2, r3, #31
 8003ee4:	490a      	ldr	r1, [pc, #40]	@ (8003f10 <__NVIC_DisableIRQ+0x44>)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	2001      	movs	r0, #1
 8003eee:	fa00 f202 	lsl.w	r2, r0, r2
 8003ef2:	3320      	adds	r3, #32
 8003ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ef8:	f3bf 8f4f 	dsb	sy
}
 8003efc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003efe:	f3bf 8f6f 	isb	sy
}
 8003f02:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	e000e100 	.word	0xe000e100

08003f14 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	db0c      	blt.n	8003f40 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	f003 021f 	and.w	r2, r3, #31
 8003f2c:	4907      	ldr	r1, [pc, #28]	@ (8003f4c <__NVIC_ClearPendingIRQ+0x38>)
 8003f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	2001      	movs	r0, #1
 8003f36:	fa00 f202 	lsl.w	r2, r0, r2
 8003f3a:	3360      	adds	r3, #96	@ 0x60
 8003f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	e000e100 	.word	0xe000e100

08003f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	6039      	str	r1, [r7, #0]
 8003f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	db0a      	blt.n	8003f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	490c      	ldr	r1, [pc, #48]	@ (8003f9c <__NVIC_SetPriority+0x4c>)
 8003f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6e:	0112      	lsls	r2, r2, #4
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	440b      	add	r3, r1
 8003f74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f78:	e00a      	b.n	8003f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	4908      	ldr	r1, [pc, #32]	@ (8003fa0 <__NVIC_SetPriority+0x50>)
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	3b04      	subs	r3, #4
 8003f88:	0112      	lsls	r2, r2, #4
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	761a      	strb	r2, [r3, #24]
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	e000e100 	.word	0xe000e100
 8003fa0:	e000ed00 	.word	0xe000ed00

08003fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b089      	sub	sp, #36	@ 0x24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f1c3 0307 	rsb	r3, r3, #7
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	bf28      	it	cs
 8003fc2:	2304      	movcs	r3, #4
 8003fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	2b06      	cmp	r3, #6
 8003fcc:	d902      	bls.n	8003fd4 <NVIC_EncodePriority+0x30>
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	3b03      	subs	r3, #3
 8003fd2:	e000      	b.n	8003fd6 <NVIC_EncodePriority+0x32>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	43da      	mvns	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	401a      	ands	r2, r3
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fec:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff6:	43d9      	mvns	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ffc:	4313      	orrs	r3, r2
         );
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3724      	adds	r7, #36	@ 0x24
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3b01      	subs	r3, #1
 8004018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800401c:	d301      	bcc.n	8004022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800401e:	2301      	movs	r3, #1
 8004020:	e00f      	b.n	8004042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004022:	4a0a      	ldr	r2, [pc, #40]	@ (800404c <SysTick_Config+0x40>)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3b01      	subs	r3, #1
 8004028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800402a:	210f      	movs	r1, #15
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	f7ff ff8e 	bl	8003f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004034:	4b05      	ldr	r3, [pc, #20]	@ (800404c <SysTick_Config+0x40>)
 8004036:	2200      	movs	r2, #0
 8004038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800403a:	4b04      	ldr	r3, [pc, #16]	@ (800404c <SysTick_Config+0x40>)
 800403c:	2207      	movs	r2, #7
 800403e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	e000e010 	.word	0xe000e010

08004050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff fee7 	bl	8003e2c <__NVIC_SetPriorityGrouping>
}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004066:	b580      	push	{r7, lr}
 8004068:	b086      	sub	sp, #24
 800406a:	af00      	add	r7, sp, #0
 800406c:	4603      	mov	r3, r0
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004078:	f7ff fefc 	bl	8003e74 <__NVIC_GetPriorityGrouping>
 800407c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	6978      	ldr	r0, [r7, #20]
 8004084:	f7ff ff8e 	bl	8003fa4 <NVIC_EncodePriority>
 8004088:	4602      	mov	r2, r0
 800408a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408e:	4611      	mov	r1, r2
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ff5d 	bl	8003f50 <__NVIC_SetPriority>
}
 8004096:	bf00      	nop
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	4603      	mov	r3, r0
 80040a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff feef 	bl	8003e90 <__NVIC_EnableIRQ>
}
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	4603      	mov	r3, r0
 80040c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80040c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff feff 	bl	8003ecc <__NVIC_DisableIRQ>
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff ff94 	bl	800400c <SysTick_Config>
 80040e4:	4603      	mov	r3, r0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	4603      	mov	r3, r0
 80040f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80040f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff ff09 	bl	8003f14 <__NVIC_ClearPendingIRQ>
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800410c:	b480      	push	{r7}
 800410e:	b089      	sub	sp, #36	@ 0x24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800411e:	2300      	movs	r3, #0
 8004120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	e177      	b.n	8004418 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004128:	2201      	movs	r2, #1
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4013      	ands	r3, r2
 800413a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	429a      	cmp	r2, r3
 8004142:	f040 8166 	bne.w	8004412 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b01      	cmp	r3, #1
 8004150:	d005      	beq.n	800415e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800415a:	2b02      	cmp	r3, #2
 800415c:	d130      	bne.n	80041c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	2203      	movs	r2, #3
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43db      	mvns	r3, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4313      	orrs	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004194:	2201      	movs	r2, #1
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	43db      	mvns	r3, r3
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	4013      	ands	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	091b      	lsrs	r3, r3, #4
 80041aa:	f003 0201 	and.w	r2, r3, #1
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d017      	beq.n	80041fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2203      	movs	r2, #3
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 0303 	and.w	r3, r3, #3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d123      	bne.n	8004250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	08da      	lsrs	r2, r3, #3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3208      	adds	r2, #8
 8004210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	220f      	movs	r2, #15
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4013      	ands	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	08da      	lsrs	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3208      	adds	r2, #8
 800424a:	69b9      	ldr	r1, [r7, #24]
 800424c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	2203      	movs	r2, #3
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f003 0203 	and.w	r2, r3, #3
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4313      	orrs	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 80c0 	beq.w	8004412 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	4b66      	ldr	r3, [pc, #408]	@ (8004430 <HAL_GPIO_Init+0x324>)
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	4a65      	ldr	r2, [pc, #404]	@ (8004430 <HAL_GPIO_Init+0x324>)
 800429c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80042a2:	4b63      	ldr	r3, [pc, #396]	@ (8004430 <HAL_GPIO_Init+0x324>)
 80042a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042ae:	4a61      	ldr	r2, [pc, #388]	@ (8004434 <HAL_GPIO_Init+0x328>)
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	089b      	lsrs	r3, r3, #2
 80042b4:	3302      	adds	r3, #2
 80042b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	220f      	movs	r2, #15
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a58      	ldr	r2, [pc, #352]	@ (8004438 <HAL_GPIO_Init+0x32c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d037      	beq.n	800434a <HAL_GPIO_Init+0x23e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a57      	ldr	r2, [pc, #348]	@ (800443c <HAL_GPIO_Init+0x330>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d031      	beq.n	8004346 <HAL_GPIO_Init+0x23a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a56      	ldr	r2, [pc, #344]	@ (8004440 <HAL_GPIO_Init+0x334>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d02b      	beq.n	8004342 <HAL_GPIO_Init+0x236>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a55      	ldr	r2, [pc, #340]	@ (8004444 <HAL_GPIO_Init+0x338>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d025      	beq.n	800433e <HAL_GPIO_Init+0x232>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a54      	ldr	r2, [pc, #336]	@ (8004448 <HAL_GPIO_Init+0x33c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01f      	beq.n	800433a <HAL_GPIO_Init+0x22e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a53      	ldr	r2, [pc, #332]	@ (800444c <HAL_GPIO_Init+0x340>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d019      	beq.n	8004336 <HAL_GPIO_Init+0x22a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a52      	ldr	r2, [pc, #328]	@ (8004450 <HAL_GPIO_Init+0x344>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d013      	beq.n	8004332 <HAL_GPIO_Init+0x226>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a51      	ldr	r2, [pc, #324]	@ (8004454 <HAL_GPIO_Init+0x348>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00d      	beq.n	800432e <HAL_GPIO_Init+0x222>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a50      	ldr	r2, [pc, #320]	@ (8004458 <HAL_GPIO_Init+0x34c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d007      	beq.n	800432a <HAL_GPIO_Init+0x21e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a4f      	ldr	r2, [pc, #316]	@ (800445c <HAL_GPIO_Init+0x350>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d101      	bne.n	8004326 <HAL_GPIO_Init+0x21a>
 8004322:	2309      	movs	r3, #9
 8004324:	e012      	b.n	800434c <HAL_GPIO_Init+0x240>
 8004326:	230a      	movs	r3, #10
 8004328:	e010      	b.n	800434c <HAL_GPIO_Init+0x240>
 800432a:	2308      	movs	r3, #8
 800432c:	e00e      	b.n	800434c <HAL_GPIO_Init+0x240>
 800432e:	2307      	movs	r3, #7
 8004330:	e00c      	b.n	800434c <HAL_GPIO_Init+0x240>
 8004332:	2306      	movs	r3, #6
 8004334:	e00a      	b.n	800434c <HAL_GPIO_Init+0x240>
 8004336:	2305      	movs	r3, #5
 8004338:	e008      	b.n	800434c <HAL_GPIO_Init+0x240>
 800433a:	2304      	movs	r3, #4
 800433c:	e006      	b.n	800434c <HAL_GPIO_Init+0x240>
 800433e:	2303      	movs	r3, #3
 8004340:	e004      	b.n	800434c <HAL_GPIO_Init+0x240>
 8004342:	2302      	movs	r3, #2
 8004344:	e002      	b.n	800434c <HAL_GPIO_Init+0x240>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <HAL_GPIO_Init+0x240>
 800434a:	2300      	movs	r3, #0
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	f002 0203 	and.w	r2, r2, #3
 8004352:	0092      	lsls	r2, r2, #2
 8004354:	4093      	lsls	r3, r2
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	4313      	orrs	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800435c:	4935      	ldr	r1, [pc, #212]	@ (8004434 <HAL_GPIO_Init+0x328>)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	089b      	lsrs	r3, r3, #2
 8004362:	3302      	adds	r3, #2
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800436a:	4b3d      	ldr	r3, [pc, #244]	@ (8004460 <HAL_GPIO_Init+0x354>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	43db      	mvns	r3, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4013      	ands	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800438e:	4a34      	ldr	r2, [pc, #208]	@ (8004460 <HAL_GPIO_Init+0x354>)
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004394:	4b32      	ldr	r3, [pc, #200]	@ (8004460 <HAL_GPIO_Init+0x354>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	43db      	mvns	r3, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043b8:	4a29      	ldr	r2, [pc, #164]	@ (8004460 <HAL_GPIO_Init+0x354>)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043be:	4b28      	ldr	r3, [pc, #160]	@ (8004460 <HAL_GPIO_Init+0x354>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	43db      	mvns	r3, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4013      	ands	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004460 <HAL_GPIO_Init+0x354>)
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004460 <HAL_GPIO_Init+0x354>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800440c:	4a14      	ldr	r2, [pc, #80]	@ (8004460 <HAL_GPIO_Init+0x354>)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	3301      	adds	r3, #1
 8004416:	61fb      	str	r3, [r7, #28]
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	2b0f      	cmp	r3, #15
 800441c:	f67f ae84 	bls.w	8004128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004420:	bf00      	nop
 8004422:	bf00      	nop
 8004424:	3724      	adds	r7, #36	@ 0x24
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800
 8004434:	40013800 	.word	0x40013800
 8004438:	40020000 	.word	0x40020000
 800443c:	40020400 	.word	0x40020400
 8004440:	40020800 	.word	0x40020800
 8004444:	40020c00 	.word	0x40020c00
 8004448:	40021000 	.word	0x40021000
 800444c:	40021400 	.word	0x40021400
 8004450:	40021800 	.word	0x40021800
 8004454:	40021c00 	.word	0x40021c00
 8004458:	40022000 	.word	0x40022000
 800445c:	40022400 	.word	0x40022400
 8004460:	40013c00 	.word	0x40013c00

08004464 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800446e:	2300      	movs	r3, #0
 8004470:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	e0d9      	b.n	8004634 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004480:	2201      	movs	r2, #1
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4013      	ands	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	429a      	cmp	r2, r3
 8004498:	f040 80c9 	bne.w	800462e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800449c:	4a6b      	ldr	r2, [pc, #428]	@ (800464c <HAL_GPIO_DeInit+0x1e8>)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	089b      	lsrs	r3, r3, #2
 80044a2:	3302      	adds	r3, #2
 80044a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	220f      	movs	r2, #15
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	4013      	ands	r3, r2
 80044bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a63      	ldr	r2, [pc, #396]	@ (8004650 <HAL_GPIO_DeInit+0x1ec>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d037      	beq.n	8004536 <HAL_GPIO_DeInit+0xd2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a62      	ldr	r2, [pc, #392]	@ (8004654 <HAL_GPIO_DeInit+0x1f0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d031      	beq.n	8004532 <HAL_GPIO_DeInit+0xce>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a61      	ldr	r2, [pc, #388]	@ (8004658 <HAL_GPIO_DeInit+0x1f4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d02b      	beq.n	800452e <HAL_GPIO_DeInit+0xca>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a60      	ldr	r2, [pc, #384]	@ (800465c <HAL_GPIO_DeInit+0x1f8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d025      	beq.n	800452a <HAL_GPIO_DeInit+0xc6>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a5f      	ldr	r2, [pc, #380]	@ (8004660 <HAL_GPIO_DeInit+0x1fc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01f      	beq.n	8004526 <HAL_GPIO_DeInit+0xc2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a5e      	ldr	r2, [pc, #376]	@ (8004664 <HAL_GPIO_DeInit+0x200>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d019      	beq.n	8004522 <HAL_GPIO_DeInit+0xbe>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a5d      	ldr	r2, [pc, #372]	@ (8004668 <HAL_GPIO_DeInit+0x204>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_GPIO_DeInit+0xba>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a5c      	ldr	r2, [pc, #368]	@ (800466c <HAL_GPIO_DeInit+0x208>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00d      	beq.n	800451a <HAL_GPIO_DeInit+0xb6>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a5b      	ldr	r2, [pc, #364]	@ (8004670 <HAL_GPIO_DeInit+0x20c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <HAL_GPIO_DeInit+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a5a      	ldr	r2, [pc, #360]	@ (8004674 <HAL_GPIO_DeInit+0x210>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d101      	bne.n	8004512 <HAL_GPIO_DeInit+0xae>
 800450e:	2309      	movs	r3, #9
 8004510:	e012      	b.n	8004538 <HAL_GPIO_DeInit+0xd4>
 8004512:	230a      	movs	r3, #10
 8004514:	e010      	b.n	8004538 <HAL_GPIO_DeInit+0xd4>
 8004516:	2308      	movs	r3, #8
 8004518:	e00e      	b.n	8004538 <HAL_GPIO_DeInit+0xd4>
 800451a:	2307      	movs	r3, #7
 800451c:	e00c      	b.n	8004538 <HAL_GPIO_DeInit+0xd4>
 800451e:	2306      	movs	r3, #6
 8004520:	e00a      	b.n	8004538 <HAL_GPIO_DeInit+0xd4>
 8004522:	2305      	movs	r3, #5
 8004524:	e008      	b.n	8004538 <HAL_GPIO_DeInit+0xd4>
 8004526:	2304      	movs	r3, #4
 8004528:	e006      	b.n	8004538 <HAL_GPIO_DeInit+0xd4>
 800452a:	2303      	movs	r3, #3
 800452c:	e004      	b.n	8004538 <HAL_GPIO_DeInit+0xd4>
 800452e:	2302      	movs	r3, #2
 8004530:	e002      	b.n	8004538 <HAL_GPIO_DeInit+0xd4>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <HAL_GPIO_DeInit+0xd4>
 8004536:	2300      	movs	r3, #0
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	f002 0203 	and.w	r2, r2, #3
 800453e:	0092      	lsls	r2, r2, #2
 8004540:	4093      	lsls	r3, r2
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	429a      	cmp	r2, r3
 8004546:	d132      	bne.n	80045ae <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004548:	4b4b      	ldr	r3, [pc, #300]	@ (8004678 <HAL_GPIO_DeInit+0x214>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	43db      	mvns	r3, r3
 8004550:	4949      	ldr	r1, [pc, #292]	@ (8004678 <HAL_GPIO_DeInit+0x214>)
 8004552:	4013      	ands	r3, r2
 8004554:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004556:	4b48      	ldr	r3, [pc, #288]	@ (8004678 <HAL_GPIO_DeInit+0x214>)
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	43db      	mvns	r3, r3
 800455e:	4946      	ldr	r1, [pc, #280]	@ (8004678 <HAL_GPIO_DeInit+0x214>)
 8004560:	4013      	ands	r3, r2
 8004562:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004564:	4b44      	ldr	r3, [pc, #272]	@ (8004678 <HAL_GPIO_DeInit+0x214>)
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	43db      	mvns	r3, r3
 800456c:	4942      	ldr	r1, [pc, #264]	@ (8004678 <HAL_GPIO_DeInit+0x214>)
 800456e:	4013      	ands	r3, r2
 8004570:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004572:	4b41      	ldr	r3, [pc, #260]	@ (8004678 <HAL_GPIO_DeInit+0x214>)
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	43db      	mvns	r3, r3
 800457a:	493f      	ldr	r1, [pc, #252]	@ (8004678 <HAL_GPIO_DeInit+0x214>)
 800457c:	4013      	ands	r3, r2
 800457e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	220f      	movs	r2, #15
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004590:	4a2e      	ldr	r2, [pc, #184]	@ (800464c <HAL_GPIO_DeInit+0x1e8>)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	089b      	lsrs	r3, r3, #2
 8004596:	3302      	adds	r3, #2
 8004598:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	43da      	mvns	r2, r3
 80045a0:	482a      	ldr	r0, [pc, #168]	@ (800464c <HAL_GPIO_DeInit+0x1e8>)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	089b      	lsrs	r3, r3, #2
 80045a6:	400a      	ands	r2, r1
 80045a8:	3302      	adds	r3, #2
 80045aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	2103      	movs	r1, #3
 80045b8:	fa01 f303 	lsl.w	r3, r1, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	401a      	ands	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	08da      	lsrs	r2, r3, #3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3208      	adds	r2, #8
 80045cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	220f      	movs	r2, #15
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	08d2      	lsrs	r2, r2, #3
 80045e4:	4019      	ands	r1, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3208      	adds	r2, #8
 80045ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	2103      	movs	r1, #3
 80045f8:	fa01 f303 	lsl.w	r3, r1, r3
 80045fc:	43db      	mvns	r3, r3
 80045fe:	401a      	ands	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	2101      	movs	r1, #1
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	fa01 f303 	lsl.w	r3, r1, r3
 8004610:	43db      	mvns	r3, r3
 8004612:	401a      	ands	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	2103      	movs	r1, #3
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	401a      	ands	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	3301      	adds	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b0f      	cmp	r3, #15
 8004638:	f67f af22 	bls.w	8004480 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800463c:	bf00      	nop
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40013800 	.word	0x40013800
 8004650:	40020000 	.word	0x40020000
 8004654:	40020400 	.word	0x40020400
 8004658:	40020800 	.word	0x40020800
 800465c:	40020c00 	.word	0x40020c00
 8004660:	40021000 	.word	0x40021000
 8004664:	40021400 	.word	0x40021400
 8004668:	40021800 	.word	0x40021800
 800466c:	40021c00 	.word	0x40021c00
 8004670:	40022000 	.word	0x40022000
 8004674:	40022400 	.word	0x40022400
 8004678:	40013c00 	.word	0x40013c00

0800467c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	807b      	strh	r3, [r7, #2]
 8004688:	4613      	mov	r3, r2
 800468a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800468c:	787b      	ldrb	r3, [r7, #1]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004692:	887a      	ldrh	r2, [r7, #2]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004698:	e003      	b.n	80046a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800469a:	887b      	ldrh	r3, [r7, #2]
 800469c:	041a      	lsls	r2, r3, #16
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	619a      	str	r2, [r3, #24]
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e12b      	b.n	800491a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fe fc7a 	bl	8002fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2224      	movs	r2, #36	@ 0x24
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0201 	bic.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004702:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004714:	f001 ff82 	bl	800661c <HAL_RCC_GetPCLK1Freq>
 8004718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	4a81      	ldr	r2, [pc, #516]	@ (8004924 <HAL_I2C_Init+0x274>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d807      	bhi.n	8004734 <HAL_I2C_Init+0x84>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a80      	ldr	r2, [pc, #512]	@ (8004928 <HAL_I2C_Init+0x278>)
 8004728:	4293      	cmp	r3, r2
 800472a:	bf94      	ite	ls
 800472c:	2301      	movls	r3, #1
 800472e:	2300      	movhi	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e006      	b.n	8004742 <HAL_I2C_Init+0x92>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4a7d      	ldr	r2, [pc, #500]	@ (800492c <HAL_I2C_Init+0x27c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	bf94      	ite	ls
 800473c:	2301      	movls	r3, #1
 800473e:	2300      	movhi	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e0e7      	b.n	800491a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4a78      	ldr	r2, [pc, #480]	@ (8004930 <HAL_I2C_Init+0x280>)
 800474e:	fba2 2303 	umull	r2, r3, r2, r3
 8004752:	0c9b      	lsrs	r3, r3, #18
 8004754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a6a      	ldr	r2, [pc, #424]	@ (8004924 <HAL_I2C_Init+0x274>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d802      	bhi.n	8004784 <HAL_I2C_Init+0xd4>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	3301      	adds	r3, #1
 8004782:	e009      	b.n	8004798 <HAL_I2C_Init+0xe8>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800478a:	fb02 f303 	mul.w	r3, r2, r3
 800478e:	4a69      	ldr	r2, [pc, #420]	@ (8004934 <HAL_I2C_Init+0x284>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	099b      	lsrs	r3, r3, #6
 8004796:	3301      	adds	r3, #1
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	430b      	orrs	r3, r1
 800479e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	495c      	ldr	r1, [pc, #368]	@ (8004924 <HAL_I2C_Init+0x274>)
 80047b4:	428b      	cmp	r3, r1
 80047b6:	d819      	bhi.n	80047ec <HAL_I2C_Init+0x13c>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	1e59      	subs	r1, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80047c6:	1c59      	adds	r1, r3, #1
 80047c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047cc:	400b      	ands	r3, r1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_I2C_Init+0x138>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1e59      	subs	r1, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80047e0:	3301      	adds	r3, #1
 80047e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e6:	e051      	b.n	800488c <HAL_I2C_Init+0x1dc>
 80047e8:	2304      	movs	r3, #4
 80047ea:	e04f      	b.n	800488c <HAL_I2C_Init+0x1dc>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d111      	bne.n	8004818 <HAL_I2C_Init+0x168>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1e58      	subs	r0, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6859      	ldr	r1, [r3, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	440b      	add	r3, r1
 8004802:	fbb0 f3f3 	udiv	r3, r0, r3
 8004806:	3301      	adds	r3, #1
 8004808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800480c:	2b00      	cmp	r3, #0
 800480e:	bf0c      	ite	eq
 8004810:	2301      	moveq	r3, #1
 8004812:	2300      	movne	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	e012      	b.n	800483e <HAL_I2C_Init+0x18e>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	1e58      	subs	r0, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6859      	ldr	r1, [r3, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	0099      	lsls	r1, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	fbb0 f3f3 	udiv	r3, r0, r3
 800482e:	3301      	adds	r3, #1
 8004830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004834:	2b00      	cmp	r3, #0
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_I2C_Init+0x196>
 8004842:	2301      	movs	r3, #1
 8004844:	e022      	b.n	800488c <HAL_I2C_Init+0x1dc>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10e      	bne.n	800486c <HAL_I2C_Init+0x1bc>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1e58      	subs	r0, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6859      	ldr	r1, [r3, #4]
 8004856:	460b      	mov	r3, r1
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	440b      	add	r3, r1
 800485c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004860:	3301      	adds	r3, #1
 8004862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800486a:	e00f      	b.n	800488c <HAL_I2C_Init+0x1dc>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	1e58      	subs	r0, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6859      	ldr	r1, [r3, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	0099      	lsls	r1, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004882:	3301      	adds	r3, #1
 8004884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004888:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	6809      	ldr	r1, [r1, #0]
 8004890:	4313      	orrs	r3, r2
 8004892:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6911      	ldr	r1, [r2, #16]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	68d2      	ldr	r2, [r2, #12]
 80048c6:	4311      	orrs	r1, r2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6812      	ldr	r2, [r2, #0]
 80048cc:	430b      	orrs	r3, r1
 80048ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	000186a0 	.word	0x000186a0
 8004928:	001e847f 	.word	0x001e847f
 800492c:	003d08ff 	.word	0x003d08ff
 8004930:	431bde83 	.word	0x431bde83
 8004934:	10624dd3 	.word	0x10624dd3

08004938 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	4608      	mov	r0, r1
 8004942:	4611      	mov	r1, r2
 8004944:	461a      	mov	r2, r3
 8004946:	4603      	mov	r3, r0
 8004948:	817b      	strh	r3, [r7, #10]
 800494a:	460b      	mov	r3, r1
 800494c:	813b      	strh	r3, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004952:	f7ff fa3b 	bl	8003dcc <HAL_GetTick>
 8004956:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b20      	cmp	r3, #32
 8004962:	f040 80d9 	bne.w	8004b18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	2319      	movs	r3, #25
 800496c:	2201      	movs	r2, #1
 800496e:	496d      	ldr	r1, [pc, #436]	@ (8004b24 <HAL_I2C_Mem_Write+0x1ec>)
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 fc8b 	bl	800528c <I2C_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800497c:	2302      	movs	r3, #2
 800497e:	e0cc      	b.n	8004b1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_I2C_Mem_Write+0x56>
 800498a:	2302      	movs	r3, #2
 800498c:	e0c5      	b.n	8004b1a <HAL_I2C_Mem_Write+0x1e2>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d007      	beq.n	80049b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2221      	movs	r2, #33	@ 0x21
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2240      	movs	r2, #64	@ 0x40
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a3a      	ldr	r2, [r7, #32]
 80049de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80049e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a4d      	ldr	r2, [pc, #308]	@ (8004b28 <HAL_I2C_Mem_Write+0x1f0>)
 80049f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049f6:	88f8      	ldrh	r0, [r7, #6]
 80049f8:	893a      	ldrh	r2, [r7, #8]
 80049fa:	8979      	ldrh	r1, [r7, #10]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	4603      	mov	r3, r0
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fac2 	bl	8004f90 <I2C_RequestMemoryWrite>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d052      	beq.n	8004ab8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e081      	b.n	8004b1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fd50 	bl	80054c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00d      	beq.n	8004a42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d107      	bne.n	8004a3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e06b      	b.n	8004b1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	781a      	ldrb	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d11b      	bne.n	8004ab8 <HAL_I2C_Mem_Write+0x180>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d017      	beq.n	8004ab8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	781a      	ldrb	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1aa      	bne.n	8004a16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 fd43 	bl	8005550 <I2C_WaitOnBTFFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00d      	beq.n	8004aec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d107      	bne.n	8004ae8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e016      	b.n	8004b1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	00100002 	.word	0x00100002
 8004b28:	ffff0000 	.word	0xffff0000

08004b2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08c      	sub	sp, #48	@ 0x30
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	4608      	mov	r0, r1
 8004b36:	4611      	mov	r1, r2
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	817b      	strh	r3, [r7, #10]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	813b      	strh	r3, [r7, #8]
 8004b42:	4613      	mov	r3, r2
 8004b44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b46:	f7ff f941 	bl	8003dcc <HAL_GetTick>
 8004b4a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	f040 8214 	bne.w	8004f82 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	2319      	movs	r3, #25
 8004b60:	2201      	movs	r2, #1
 8004b62:	497b      	ldr	r1, [pc, #492]	@ (8004d50 <HAL_I2C_Mem_Read+0x224>)
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 fb91 	bl	800528c <I2C_WaitOnFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b70:	2302      	movs	r3, #2
 8004b72:	e207      	b.n	8004f84 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_I2C_Mem_Read+0x56>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e200      	b.n	8004f84 <HAL_I2C_Mem_Read+0x458>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d007      	beq.n	8004ba8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2222      	movs	r2, #34	@ 0x22
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2240      	movs	r2, #64	@ 0x40
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4a5b      	ldr	r2, [pc, #364]	@ (8004d54 <HAL_I2C_Mem_Read+0x228>)
 8004be8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bea:	88f8      	ldrh	r0, [r7, #6]
 8004bec:	893a      	ldrh	r2, [r7, #8]
 8004bee:	8979      	ldrh	r1, [r7, #10]
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	9301      	str	r3, [sp, #4]
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 fa5e 	bl	80050bc <I2C_RequestMemoryRead>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e1bc      	b.n	8004f84 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d113      	bne.n	8004c3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c12:	2300      	movs	r3, #0
 8004c14:	623b      	str	r3, [r7, #32]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	623b      	str	r3, [r7, #32]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	623b      	str	r3, [r7, #32]
 8004c26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e190      	b.n	8004f5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d11b      	bne.n	8004c7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e170      	b.n	8004f5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d11b      	bne.n	8004cba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ca0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	e150      	b.n	8004f5c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004cd0:	e144      	b.n	8004f5c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	f200 80f1 	bhi.w	8004ebe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d123      	bne.n	8004d2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fc79 	bl	80055e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e145      	b.n	8004f84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d2a:	e117      	b.n	8004f5c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d14e      	bne.n	8004dd2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	4906      	ldr	r1, [pc, #24]	@ (8004d58 <HAL_I2C_Mem_Read+0x22c>)
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 faa4 	bl	800528c <I2C_WaitOnFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e11a      	b.n	8004f84 <HAL_I2C_Mem_Read+0x458>
 8004d4e:	bf00      	nop
 8004d50:	00100002 	.word	0x00100002
 8004d54:	ffff0000 	.word	0xffff0000
 8004d58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004dd0:	e0c4      	b.n	8004f5c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd8:	2200      	movs	r2, #0
 8004dda:	496c      	ldr	r1, [pc, #432]	@ (8004f8c <HAL_I2C_Mem_Read+0x460>)
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 fa55 	bl	800528c <I2C_WaitOnFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0cb      	b.n	8004f84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e34:	2200      	movs	r2, #0
 8004e36:	4955      	ldr	r1, [pc, #340]	@ (8004f8c <HAL_I2C_Mem_Read+0x460>)
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fa27 	bl	800528c <I2C_WaitOnFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e09d      	b.n	8004f84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ebc:	e04e      	b.n	8004f5c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fb8c 	bl	80055e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e058      	b.n	8004f84 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d124      	bne.n	8004f5c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d107      	bne.n	8004f2a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f28:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f47f aeb6 	bne.w	8004cd2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e000      	b.n	8004f84 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f82:	2302      	movs	r3, #2
  }
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3728      	adds	r7, #40	@ 0x28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	00010004 	.word	0x00010004

08004f90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	4608      	mov	r0, r1
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	817b      	strh	r3, [r7, #10]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	813b      	strh	r3, [r7, #8]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 f960 	bl	800528c <I2C_WaitOnFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00d      	beq.n	8004fee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fe0:	d103      	bne.n	8004fea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fe8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e05f      	b.n	80050ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fee:	897b      	ldrh	r3, [r7, #10]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ffc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	6a3a      	ldr	r2, [r7, #32]
 8005002:	492d      	ldr	r1, [pc, #180]	@ (80050b8 <I2C_RequestMemoryWrite+0x128>)
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f9bb 	bl	8005380 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e04c      	b.n	80050ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800502a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502c:	6a39      	ldr	r1, [r7, #32]
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fa46 	bl	80054c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00d      	beq.n	8005056 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	2b04      	cmp	r3, #4
 8005040:	d107      	bne.n	8005052 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005050:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e02b      	b.n	80050ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d105      	bne.n	8005068 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800505c:	893b      	ldrh	r3, [r7, #8]
 800505e:	b2da      	uxtb	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	611a      	str	r2, [r3, #16]
 8005066:	e021      	b.n	80050ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005068:	893b      	ldrh	r3, [r7, #8]
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	b29b      	uxth	r3, r3
 800506e:	b2da      	uxtb	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005078:	6a39      	ldr	r1, [r7, #32]
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 fa20 	bl	80054c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00d      	beq.n	80050a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508a:	2b04      	cmp	r3, #4
 800508c:	d107      	bne.n	800509e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800509c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e005      	b.n	80050ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050a2:	893b      	ldrh	r3, [r7, #8]
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	00010002 	.word	0x00010002

080050bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	4608      	mov	r0, r1
 80050c6:	4611      	mov	r1, r2
 80050c8:	461a      	mov	r2, r3
 80050ca:	4603      	mov	r3, r0
 80050cc:	817b      	strh	r3, [r7, #10]
 80050ce:	460b      	mov	r3, r1
 80050d0:	813b      	strh	r3, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f8c2 	bl	800528c <I2C_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00d      	beq.n	800512a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800511c:	d103      	bne.n	8005126 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005124:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e0aa      	b.n	8005280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800512a:	897b      	ldrh	r3, [r7, #10]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	6a3a      	ldr	r2, [r7, #32]
 800513e:	4952      	ldr	r1, [pc, #328]	@ (8005288 <I2C_RequestMemoryRead+0x1cc>)
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f91d 	bl	8005380 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e097      	b.n	8005280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005168:	6a39      	ldr	r1, [r7, #32]
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f9a8 	bl	80054c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00d      	beq.n	8005192 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	2b04      	cmp	r3, #4
 800517c:	d107      	bne.n	800518e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800518c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e076      	b.n	8005280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d105      	bne.n	80051a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005198:	893b      	ldrh	r3, [r7, #8]
 800519a:	b2da      	uxtb	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	611a      	str	r2, [r3, #16]
 80051a2:	e021      	b.n	80051e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051a4:	893b      	ldrh	r3, [r7, #8]
 80051a6:	0a1b      	lsrs	r3, r3, #8
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b4:	6a39      	ldr	r1, [r7, #32]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f982 	bl	80054c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00d      	beq.n	80051de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d107      	bne.n	80051da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e050      	b.n	8005280 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051de:	893b      	ldrh	r3, [r7, #8]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ea:	6a39      	ldr	r1, [r7, #32]
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f967 	bl	80054c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00d      	beq.n	8005214 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d107      	bne.n	8005210 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800520e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e035      	b.n	8005280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005222:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	2200      	movs	r2, #0
 800522c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f82b 	bl	800528c <I2C_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00d      	beq.n	8005258 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800524a:	d103      	bne.n	8005254 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005252:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e013      	b.n	8005280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005258:	897b      	ldrh	r3, [r7, #10]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f043 0301 	orr.w	r3, r3, #1
 8005260:	b2da      	uxtb	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526a:	6a3a      	ldr	r2, [r7, #32]
 800526c:	4906      	ldr	r1, [pc, #24]	@ (8005288 <I2C_RequestMemoryRead+0x1cc>)
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f886 	bl	8005380 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	00010002 	.word	0x00010002

0800528c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	4613      	mov	r3, r2
 800529a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800529c:	e048      	b.n	8005330 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a4:	d044      	beq.n	8005330 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a6:	f7fe fd91 	bl	8003dcc <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d302      	bcc.n	80052bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d139      	bne.n	8005330 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	0c1b      	lsrs	r3, r3, #16
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d10d      	bne.n	80052e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	43da      	mvns	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4013      	ands	r3, r2
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	461a      	mov	r2, r3
 80052e0:	e00c      	b.n	80052fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	43da      	mvns	r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4013      	ands	r3, r2
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bf0c      	ite	eq
 80052f4:	2301      	moveq	r3, #1
 80052f6:	2300      	movne	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	461a      	mov	r2, r3
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d116      	bne.n	8005330 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531c:	f043 0220 	orr.w	r2, r3, #32
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e023      	b.n	8005378 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	0c1b      	lsrs	r3, r3, #16
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b01      	cmp	r3, #1
 8005338:	d10d      	bne.n	8005356 <I2C_WaitOnFlagUntilTimeout+0xca>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	43da      	mvns	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4013      	ands	r3, r2
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	bf0c      	ite	eq
 800534c:	2301      	moveq	r3, #1
 800534e:	2300      	movne	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	461a      	mov	r2, r3
 8005354:	e00c      	b.n	8005370 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	43da      	mvns	r2, r3
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4013      	ands	r3, r2
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	bf0c      	ite	eq
 8005368:	2301      	moveq	r3, #1
 800536a:	2300      	movne	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	429a      	cmp	r2, r3
 8005374:	d093      	beq.n	800529e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800538e:	e071      	b.n	8005474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800539a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800539e:	d123      	bne.n	80053e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d4:	f043 0204 	orr.w	r2, r3, #4
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e067      	b.n	80054b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ee:	d041      	beq.n	8005474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f0:	f7fe fcec 	bl	8003dcc <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d302      	bcc.n	8005406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d136      	bne.n	8005474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	0c1b      	lsrs	r3, r3, #16
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b01      	cmp	r3, #1
 800540e:	d10c      	bne.n	800542a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	43da      	mvns	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	bf14      	ite	ne
 8005422:	2301      	movne	r3, #1
 8005424:	2300      	moveq	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	e00b      	b.n	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	43da      	mvns	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4013      	ands	r3, r2
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	bf14      	ite	ne
 800543c:	2301      	movne	r3, #1
 800543e:	2300      	moveq	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005460:	f043 0220 	orr.w	r2, r3, #32
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e021      	b.n	80054b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	0c1b      	lsrs	r3, r3, #16
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b01      	cmp	r3, #1
 800547c:	d10c      	bne.n	8005498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	43da      	mvns	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4013      	ands	r3, r2
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	bf14      	ite	ne
 8005490:	2301      	movne	r3, #1
 8005492:	2300      	moveq	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	e00b      	b.n	80054b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	43da      	mvns	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4013      	ands	r3, r2
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bf14      	ite	ne
 80054aa:	2301      	movne	r3, #1
 80054ac:	2300      	moveq	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f47f af6d 	bne.w	8005390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054cc:	e034      	b.n	8005538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f8e3 	bl	800569a <I2C_IsAcknowledgeFailed>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e034      	b.n	8005548 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e4:	d028      	beq.n	8005538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e6:	f7fe fc71 	bl	8003dcc <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d302      	bcc.n	80054fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d11d      	bne.n	8005538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005506:	2b80      	cmp	r3, #128	@ 0x80
 8005508:	d016      	beq.n	8005538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005524:	f043 0220 	orr.w	r2, r3, #32
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e007      	b.n	8005548 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005542:	2b80      	cmp	r3, #128	@ 0x80
 8005544:	d1c3      	bne.n	80054ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800555c:	e034      	b.n	80055c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 f89b 	bl	800569a <I2C_IsAcknowledgeFailed>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e034      	b.n	80055d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d028      	beq.n	80055c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005576:	f7fe fc29 	bl	8003dcc <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d11d      	bne.n	80055c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b04      	cmp	r3, #4
 8005598:	d016      	beq.n	80055c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b4:	f043 0220 	orr.w	r2, r3, #32
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e007      	b.n	80055d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d1c3      	bne.n	800555e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055ec:	e049      	b.n	8005682 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b10      	cmp	r3, #16
 80055fa:	d119      	bne.n	8005630 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0210 	mvn.w	r2, #16
 8005604:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e030      	b.n	8005692 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005630:	f7fe fbcc 	bl	8003dcc <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	429a      	cmp	r2, r3
 800563e:	d302      	bcc.n	8005646 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d11d      	bne.n	8005682 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005650:	2b40      	cmp	r3, #64	@ 0x40
 8005652:	d016      	beq.n	8005682 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566e:	f043 0220 	orr.w	r2, r3, #32
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e007      	b.n	8005692 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568c:	2b40      	cmp	r3, #64	@ 0x40
 800568e:	d1ae      	bne.n	80055ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056b0:	d11b      	bne.n	80056ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d6:	f043 0204 	orr.w	r2, r3, #4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b20      	cmp	r3, #32
 800570c:	d129      	bne.n	8005762 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2224      	movs	r2, #36	@ 0x24
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0201 	bic.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0210 	bic.w	r2, r2, #16
 8005734:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0201 	orr.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005762:	2302      	movs	r3, #2
  }
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800577a:	2300      	movs	r3, #0
 800577c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b20      	cmp	r3, #32
 8005788:	d12a      	bne.n	80057e0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2224      	movs	r2, #36	@ 0x24
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0201 	bic.w	r2, r2, #1
 80057a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80057aa:	89fb      	ldrh	r3, [r7, #14]
 80057ac:	f023 030f 	bic.w	r3, r3, #15
 80057b0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	89fb      	ldrh	r3, [r7, #14]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	89fa      	ldrh	r2, [r7, #14]
 80057c2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	e000      	b.n	80057e2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80057e0:	2302      	movs	r3, #2
  }
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
	...

080057f0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e0bf      	b.n	8005982 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d106      	bne.n	800581c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fd fc44 	bl	80030a4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005832:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6999      	ldr	r1, [r3, #24]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005848:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6899      	ldr	r1, [r3, #8]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	4b4a      	ldr	r3, [pc, #296]	@ (800598c <HAL_LTDC_Init+0x19c>)
 8005864:	400b      	ands	r3, r1
 8005866:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	041b      	lsls	r3, r3, #16
 800586e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6899      	ldr	r1, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68d9      	ldr	r1, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	4b3e      	ldr	r3, [pc, #248]	@ (800598c <HAL_LTDC_Init+0x19c>)
 8005892:	400b      	ands	r3, r1
 8005894:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	041b      	lsls	r3, r3, #16
 800589c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68d9      	ldr	r1, [r3, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1a      	ldr	r2, [r3, #32]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6919      	ldr	r1, [r3, #16]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4b33      	ldr	r3, [pc, #204]	@ (800598c <HAL_LTDC_Init+0x19c>)
 80058c0:	400b      	ands	r3, r1
 80058c2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c8:	041b      	lsls	r3, r3, #16
 80058ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6919      	ldr	r1, [r3, #16]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6959      	ldr	r1, [r3, #20]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	4b27      	ldr	r3, [pc, #156]	@ (800598c <HAL_LTDC_Init+0x19c>)
 80058ee:	400b      	ands	r3, r1
 80058f0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f6:	041b      	lsls	r3, r3, #16
 80058f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6959      	ldr	r1, [r3, #20]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005916:	021b      	lsls	r3, r3, #8
 8005918:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005920:	041b      	lsls	r3, r3, #16
 8005922:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005932:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0206 	orr.w	r2, r2, #6
 800595e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	f000f800 	.word	0xf000f800

08005990 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005990:	b5b0      	push	{r4, r5, r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_LTDC_ConfigLayer+0x1a>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e02c      	b.n	8005a04 <HAL_LTDC_ConfigLayer+0x74>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2202      	movs	r2, #2
 80059b6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2134      	movs	r1, #52	@ 0x34
 80059c0:	fb01 f303 	mul.w	r3, r1, r3
 80059c4:	4413      	add	r3, r2
 80059c6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	4614      	mov	r4, r2
 80059ce:	461d      	mov	r5, r3
 80059d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f811 	bl	8005a0c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2201      	movs	r2, #1
 80059f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bdb0      	pop	{r4, r5, r7, pc}

08005a0c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b089      	sub	sp, #36	@ 0x24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	0c1b      	lsrs	r3, r3, #16
 8005a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a28:	4413      	add	r3, r2
 8005a2a:	041b      	lsls	r3, r3, #16
 8005a2c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	01db      	lsls	r3, r3, #7
 8005a38:	4413      	add	r3, r2
 8005a3a:	3384      	adds	r3, #132	@ 0x84
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	6812      	ldr	r2, [r2, #0]
 8005a42:	4611      	mov	r1, r2
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	01d2      	lsls	r2, r2, #7
 8005a48:	440a      	add	r2, r1
 8005a4a:	3284      	adds	r2, #132	@ 0x84
 8005a4c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005a50:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	0c1b      	lsrs	r3, r3, #16
 8005a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a62:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a64:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	01db      	lsls	r3, r3, #7
 8005a70:	440b      	add	r3, r1
 8005a72:	3384      	adds	r3, #132	@ 0x84
 8005a74:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a7a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a8a:	4413      	add	r3, r2
 8005a8c:	041b      	lsls	r3, r3, #16
 8005a8e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	01db      	lsls	r3, r3, #7
 8005a9a:	4413      	add	r3, r2
 8005a9c:	3384      	adds	r3, #132	@ 0x84
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	01d2      	lsls	r2, r2, #7
 8005aaa:	440a      	add	r2, r1
 8005aac:	3284      	adds	r2, #132	@ 0x84
 8005aae:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005ab2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ac2:	4413      	add	r3, r2
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4619      	mov	r1, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	01db      	lsls	r3, r3, #7
 8005ad0:	440b      	add	r3, r1
 8005ad2:	3384      	adds	r3, #132	@ 0x84
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	01db      	lsls	r3, r3, #7
 8005ae6:	4413      	add	r3, r2
 8005ae8:	3384      	adds	r3, #132	@ 0x84
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	6812      	ldr	r2, [r2, #0]
 8005af0:	4611      	mov	r1, r2
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	01d2      	lsls	r2, r2, #7
 8005af6:	440a      	add	r2, r1
 8005af8:	3284      	adds	r2, #132	@ 0x84
 8005afa:	f023 0307 	bic.w	r3, r3, #7
 8005afe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	01db      	lsls	r3, r3, #7
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3384      	adds	r3, #132	@ 0x84
 8005b0e:	461a      	mov	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	061b      	lsls	r3, r3, #24
 8005b30:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	01db      	lsls	r3, r3, #7
 8005b3c:	4413      	add	r3, r2
 8005b3e:	3384      	adds	r3, #132	@ 0x84
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	01db      	lsls	r3, r3, #7
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3384      	adds	r3, #132	@ 0x84
 8005b50:	461a      	mov	r2, r3
 8005b52:	2300      	movs	r3, #0
 8005b54:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	431a      	orrs	r2, r3
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	01db      	lsls	r3, r3, #7
 8005b70:	440b      	add	r3, r1
 8005b72:	3384      	adds	r3, #132	@ 0x84
 8005b74:	4619      	mov	r1, r3
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	01db      	lsls	r3, r3, #7
 8005b86:	4413      	add	r3, r2
 8005b88:	3384      	adds	r3, #132	@ 0x84
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	6812      	ldr	r2, [r2, #0]
 8005b90:	4611      	mov	r1, r2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	01d2      	lsls	r2, r2, #7
 8005b96:	440a      	add	r2, r1
 8005b98:	3284      	adds	r2, #132	@ 0x84
 8005b9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b9e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	01db      	lsls	r3, r3, #7
 8005baa:	4413      	add	r3, r2
 8005bac:	3384      	adds	r3, #132	@ 0x84
 8005bae:	461a      	mov	r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	01db      	lsls	r3, r3, #7
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3384      	adds	r3, #132	@ 0x84
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	4611      	mov	r1, r2
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	01d2      	lsls	r2, r2, #7
 8005bd0:	440a      	add	r2, r1
 8005bd2:	3284      	adds	r2, #132	@ 0x84
 8005bd4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005bd8:	f023 0307 	bic.w	r3, r3, #7
 8005bdc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	69da      	ldr	r2, [r3, #28]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	68f9      	ldr	r1, [r7, #12]
 8005be8:	6809      	ldr	r1, [r1, #0]
 8005bea:	4608      	mov	r0, r1
 8005bec:	6879      	ldr	r1, [r7, #4]
 8005bee:	01c9      	lsls	r1, r1, #7
 8005bf0:	4401      	add	r1, r0
 8005bf2:	3184      	adds	r1, #132	@ 0x84
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	01db      	lsls	r3, r3, #7
 8005c02:	4413      	add	r3, r2
 8005c04:	3384      	adds	r3, #132	@ 0x84
 8005c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	01db      	lsls	r3, r3, #7
 8005c12:	4413      	add	r3, r2
 8005c14:	3384      	adds	r3, #132	@ 0x84
 8005c16:	461a      	mov	r2, r3
 8005c18:	2300      	movs	r3, #0
 8005c1a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	01db      	lsls	r3, r3, #7
 8005c26:	4413      	add	r3, r2
 8005c28:	3384      	adds	r3, #132	@ 0x84
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c30:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d102      	bne.n	8005c40 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005c3a:	2304      	movs	r3, #4
 8005c3c:	61fb      	str	r3, [r7, #28]
 8005c3e:	e01b      	b.n	8005c78 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d102      	bne.n	8005c4e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	61fb      	str	r3, [r7, #28]
 8005c4c:	e014      	b.n	8005c78 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d00b      	beq.n	8005c6e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d007      	beq.n	8005c6e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d003      	beq.n	8005c6e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c6a:	2b07      	cmp	r3, #7
 8005c6c:	d102      	bne.n	8005c74 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005c6e:	2302      	movs	r3, #2
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	e001      	b.n	8005c78 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005c74:	2301      	movs	r3, #1
 8005c76:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	01db      	lsls	r3, r3, #7
 8005c82:	4413      	add	r3, r2
 8005c84:	3384      	adds	r3, #132	@ 0x84
 8005c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	6812      	ldr	r2, [r2, #0]
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	01d2      	lsls	r2, r2, #7
 8005c92:	440a      	add	r2, r1
 8005c94:	3284      	adds	r2, #132	@ 0x84
 8005c96:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	6859      	ldr	r1, [r3, #4]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	1acb      	subs	r3, r1, r3
 8005cb2:	69f9      	ldr	r1, [r7, #28]
 8005cb4:	fb01 f303 	mul.w	r3, r1, r3
 8005cb8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005cba:	68f9      	ldr	r1, [r7, #12]
 8005cbc:	6809      	ldr	r1, [r1, #0]
 8005cbe:	4608      	mov	r0, r1
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	01c9      	lsls	r1, r1, #7
 8005cc4:	4401      	add	r1, r0
 8005cc6:	3184      	adds	r1, #132	@ 0x84
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	01db      	lsls	r3, r3, #7
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3384      	adds	r3, #132	@ 0x84
 8005cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	6812      	ldr	r2, [r2, #0]
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	01d2      	lsls	r2, r2, #7
 8005ce6:	440a      	add	r2, r1
 8005ce8:	3284      	adds	r2, #132	@ 0x84
 8005cea:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005cee:	f023 0307 	bic.w	r3, r3, #7
 8005cf2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	01db      	lsls	r3, r3, #7
 8005cfe:	4413      	add	r3, r2
 8005d00:	3384      	adds	r3, #132	@ 0x84
 8005d02:	461a      	mov	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d08:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	01db      	lsls	r3, r3, #7
 8005d14:	4413      	add	r3, r2
 8005d16:	3384      	adds	r3, #132	@ 0x84
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	6812      	ldr	r2, [r2, #0]
 8005d1e:	4611      	mov	r1, r2
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	01d2      	lsls	r2, r2, #7
 8005d24:	440a      	add	r2, r1
 8005d26:	3284      	adds	r2, #132	@ 0x84
 8005d28:	f043 0301 	orr.w	r3, r3, #1
 8005d2c:	6013      	str	r3, [r2, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	3724      	adds	r7, #36	@ 0x24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
	...

08005d3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e267      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d075      	beq.n	8005e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d5a:	4b88      	ldr	r3, [pc, #544]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 030c 	and.w	r3, r3, #12
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d00c      	beq.n	8005d80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d66:	4b85      	ldr	r3, [pc, #532]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d6e:	2b08      	cmp	r3, #8
 8005d70:	d112      	bne.n	8005d98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d72:	4b82      	ldr	r3, [pc, #520]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d7e:	d10b      	bne.n	8005d98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d80:	4b7e      	ldr	r3, [pc, #504]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d05b      	beq.n	8005e44 <HAL_RCC_OscConfig+0x108>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d157      	bne.n	8005e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e242      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005da0:	d106      	bne.n	8005db0 <HAL_RCC_OscConfig+0x74>
 8005da2:	4b76      	ldr	r3, [pc, #472]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a75      	ldr	r2, [pc, #468]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	e01d      	b.n	8005dec <HAL_RCC_OscConfig+0xb0>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005db8:	d10c      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x98>
 8005dba:	4b70      	ldr	r3, [pc, #448]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a6f      	ldr	r2, [pc, #444]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a6c      	ldr	r2, [pc, #432]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	e00b      	b.n	8005dec <HAL_RCC_OscConfig+0xb0>
 8005dd4:	4b69      	ldr	r3, [pc, #420]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a68      	ldr	r2, [pc, #416]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	4b66      	ldr	r3, [pc, #408]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a65      	ldr	r2, [pc, #404]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005de6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d013      	beq.n	8005e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df4:	f7fd ffea 	bl	8003dcc <HAL_GetTick>
 8005df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dfc:	f7fd ffe6 	bl	8003dcc <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b64      	cmp	r3, #100	@ 0x64
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e207      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0f0      	beq.n	8005dfc <HAL_RCC_OscConfig+0xc0>
 8005e1a:	e014      	b.n	8005e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1c:	f7fd ffd6 	bl	8003dcc <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e24:	f7fd ffd2 	bl	8003dcc <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b64      	cmp	r3, #100	@ 0x64
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e1f3      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e36:	4b51      	ldr	r3, [pc, #324]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f0      	bne.n	8005e24 <HAL_RCC_OscConfig+0xe8>
 8005e42:	e000      	b.n	8005e46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d063      	beq.n	8005f1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e52:	4b4a      	ldr	r3, [pc, #296]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 030c 	and.w	r3, r3, #12
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00b      	beq.n	8005e76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e5e:	4b47      	ldr	r3, [pc, #284]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d11c      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e6a:	4b44      	ldr	r3, [pc, #272]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d116      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e76:	4b41      	ldr	r3, [pc, #260]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <HAL_RCC_OscConfig+0x152>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d001      	beq.n	8005e8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e1c7      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	4937      	ldr	r1, [pc, #220]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ea2:	e03a      	b.n	8005f1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d020      	beq.n	8005eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eac:	4b34      	ldr	r3, [pc, #208]	@ (8005f80 <HAL_RCC_OscConfig+0x244>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb2:	f7fd ff8b 	bl	8003dcc <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eba:	f7fd ff87 	bl	8003dcc <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e1a8      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0f0      	beq.n	8005eba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed8:	4b28      	ldr	r3, [pc, #160]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	4925      	ldr	r1, [pc, #148]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	600b      	str	r3, [r1, #0]
 8005eec:	e015      	b.n	8005f1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eee:	4b24      	ldr	r3, [pc, #144]	@ (8005f80 <HAL_RCC_OscConfig+0x244>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef4:	f7fd ff6a 	bl	8003dcc <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005efc:	f7fd ff66 	bl	8003dcc <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e187      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f0      	bne.n	8005efc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d036      	beq.n	8005f94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d016      	beq.n	8005f5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f2e:	4b15      	ldr	r3, [pc, #84]	@ (8005f84 <HAL_RCC_OscConfig+0x248>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f34:	f7fd ff4a 	bl	8003dcc <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f3c:	f7fd ff46 	bl	8003dcc <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e167      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f7c <HAL_RCC_OscConfig+0x240>)
 8005f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f0      	beq.n	8005f3c <HAL_RCC_OscConfig+0x200>
 8005f5a:	e01b      	b.n	8005f94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f5c:	4b09      	ldr	r3, [pc, #36]	@ (8005f84 <HAL_RCC_OscConfig+0x248>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f62:	f7fd ff33 	bl	8003dcc <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f68:	e00e      	b.n	8005f88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f6a:	f7fd ff2f 	bl	8003dcc <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d907      	bls.n	8005f88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e150      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	42470000 	.word	0x42470000
 8005f84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f88:	4b88      	ldr	r3, [pc, #544]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 8005f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1ea      	bne.n	8005f6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8097 	beq.w	80060d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fa6:	4b81      	ldr	r3, [pc, #516]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10f      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60bb      	str	r3, [r7, #8]
 8005fb6:	4b7d      	ldr	r3, [pc, #500]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fba:	4a7c      	ldr	r2, [pc, #496]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 8005fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fc2:	4b7a      	ldr	r3, [pc, #488]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fca:	60bb      	str	r3, [r7, #8]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd2:	4b77      	ldr	r3, [pc, #476]	@ (80061b0 <HAL_RCC_OscConfig+0x474>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d118      	bne.n	8006010 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fde:	4b74      	ldr	r3, [pc, #464]	@ (80061b0 <HAL_RCC_OscConfig+0x474>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a73      	ldr	r2, [pc, #460]	@ (80061b0 <HAL_RCC_OscConfig+0x474>)
 8005fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fea:	f7fd feef 	bl	8003dcc <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff2:	f7fd feeb 	bl	8003dcc <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e10c      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006004:	4b6a      	ldr	r3, [pc, #424]	@ (80061b0 <HAL_RCC_OscConfig+0x474>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0f0      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d106      	bne.n	8006026 <HAL_RCC_OscConfig+0x2ea>
 8006018:	4b64      	ldr	r3, [pc, #400]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800601c:	4a63      	ldr	r2, [pc, #396]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 800601e:	f043 0301 	orr.w	r3, r3, #1
 8006022:	6713      	str	r3, [r2, #112]	@ 0x70
 8006024:	e01c      	b.n	8006060 <HAL_RCC_OscConfig+0x324>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b05      	cmp	r3, #5
 800602c:	d10c      	bne.n	8006048 <HAL_RCC_OscConfig+0x30c>
 800602e:	4b5f      	ldr	r3, [pc, #380]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 8006030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006032:	4a5e      	ldr	r2, [pc, #376]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 8006034:	f043 0304 	orr.w	r3, r3, #4
 8006038:	6713      	str	r3, [r2, #112]	@ 0x70
 800603a:	4b5c      	ldr	r3, [pc, #368]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800603e:	4a5b      	ldr	r2, [pc, #364]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 8006040:	f043 0301 	orr.w	r3, r3, #1
 8006044:	6713      	str	r3, [r2, #112]	@ 0x70
 8006046:	e00b      	b.n	8006060 <HAL_RCC_OscConfig+0x324>
 8006048:	4b58      	ldr	r3, [pc, #352]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604c:	4a57      	ldr	r2, [pc, #348]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 800604e:	f023 0301 	bic.w	r3, r3, #1
 8006052:	6713      	str	r3, [r2, #112]	@ 0x70
 8006054:	4b55      	ldr	r3, [pc, #340]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 8006056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006058:	4a54      	ldr	r2, [pc, #336]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 800605a:	f023 0304 	bic.w	r3, r3, #4
 800605e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d015      	beq.n	8006094 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006068:	f7fd feb0 	bl	8003dcc <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606e:	e00a      	b.n	8006086 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006070:	f7fd feac 	bl	8003dcc <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800607e:	4293      	cmp	r3, r2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e0cb      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006086:	4b49      	ldr	r3, [pc, #292]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 8006088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0ee      	beq.n	8006070 <HAL_RCC_OscConfig+0x334>
 8006092:	e014      	b.n	80060be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006094:	f7fd fe9a 	bl	8003dcc <HAL_GetTick>
 8006098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800609a:	e00a      	b.n	80060b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800609c:	f7fd fe96 	bl	8003dcc <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e0b5      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060b2:	4b3e      	ldr	r3, [pc, #248]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1ee      	bne.n	800609c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d105      	bne.n	80060d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060c4:	4b39      	ldr	r3, [pc, #228]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 80060c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c8:	4a38      	ldr	r2, [pc, #224]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 80060ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 80a1 	beq.w	800621c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060da:	4b34      	ldr	r3, [pc, #208]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 030c 	and.w	r3, r3, #12
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d05c      	beq.n	80061a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d141      	bne.n	8006172 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ee:	4b31      	ldr	r3, [pc, #196]	@ (80061b4 <HAL_RCC_OscConfig+0x478>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f4:	f7fd fe6a 	bl	8003dcc <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060fc:	f7fd fe66 	bl	8003dcc <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e087      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800610e:	4b27      	ldr	r3, [pc, #156]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f0      	bne.n	80060fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69da      	ldr	r2, [r3, #28]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006128:	019b      	lsls	r3, r3, #6
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	3b01      	subs	r3, #1
 8006134:	041b      	lsls	r3, r3, #16
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613c:	061b      	lsls	r3, r3, #24
 800613e:	491b      	ldr	r1, [pc, #108]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 8006140:	4313      	orrs	r3, r2
 8006142:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006144:	4b1b      	ldr	r3, [pc, #108]	@ (80061b4 <HAL_RCC_OscConfig+0x478>)
 8006146:	2201      	movs	r2, #1
 8006148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614a:	f7fd fe3f 	bl	8003dcc <HAL_GetTick>
 800614e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006150:	e008      	b.n	8006164 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006152:	f7fd fe3b 	bl	8003dcc <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b02      	cmp	r3, #2
 800615e:	d901      	bls.n	8006164 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e05c      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006164:	4b11      	ldr	r3, [pc, #68]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d0f0      	beq.n	8006152 <HAL_RCC_OscConfig+0x416>
 8006170:	e054      	b.n	800621c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006172:	4b10      	ldr	r3, [pc, #64]	@ (80061b4 <HAL_RCC_OscConfig+0x478>)
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006178:	f7fd fe28 	bl	8003dcc <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006180:	f7fd fe24 	bl	8003dcc <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e045      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006192:	4b06      	ldr	r3, [pc, #24]	@ (80061ac <HAL_RCC_OscConfig+0x470>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1f0      	bne.n	8006180 <HAL_RCC_OscConfig+0x444>
 800619e:	e03d      	b.n	800621c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d107      	bne.n	80061b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e038      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
 80061ac:	40023800 	.word	0x40023800
 80061b0:	40007000 	.word	0x40007000
 80061b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006228 <HAL_RCC_OscConfig+0x4ec>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d028      	beq.n	8006218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d121      	bne.n	8006218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061de:	429a      	cmp	r2, r3
 80061e0:	d11a      	bne.n	8006218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80061e8:	4013      	ands	r3, r2
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d111      	bne.n	8006218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fe:	085b      	lsrs	r3, r3, #1
 8006200:	3b01      	subs	r3, #1
 8006202:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006204:	429a      	cmp	r2, r3
 8006206:	d107      	bne.n	8006218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006212:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006214:	429a      	cmp	r2, r3
 8006216:	d001      	beq.n	800621c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e000      	b.n	800621e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	40023800 	.word	0x40023800

0800622c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e0cc      	b.n	80063da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006240:	4b68      	ldr	r3, [pc, #416]	@ (80063e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 030f 	and.w	r3, r3, #15
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d90c      	bls.n	8006268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624e:	4b65      	ldr	r3, [pc, #404]	@ (80063e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006256:	4b63      	ldr	r3, [pc, #396]	@ (80063e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d001      	beq.n	8006268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e0b8      	b.n	80063da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d020      	beq.n	80062b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006280:	4b59      	ldr	r3, [pc, #356]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	4a58      	ldr	r2, [pc, #352]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006286:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800628a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0308 	and.w	r3, r3, #8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006298:	4b53      	ldr	r3, [pc, #332]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	4a52      	ldr	r2, [pc, #328]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 800629e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80062a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062a4:	4b50      	ldr	r3, [pc, #320]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	494d      	ldr	r1, [pc, #308]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d044      	beq.n	800634c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d107      	bne.n	80062da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ca:	4b47      	ldr	r3, [pc, #284]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d119      	bne.n	800630a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e07f      	b.n	80063da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d003      	beq.n	80062ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d107      	bne.n	80062fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ea:	4b3f      	ldr	r3, [pc, #252]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d109      	bne.n	800630a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e06f      	b.n	80063da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062fa:	4b3b      	ldr	r3, [pc, #236]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e067      	b.n	80063da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800630a:	4b37      	ldr	r3, [pc, #220]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f023 0203 	bic.w	r2, r3, #3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	4934      	ldr	r1, [pc, #208]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006318:	4313      	orrs	r3, r2
 800631a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800631c:	f7fd fd56 	bl	8003dcc <HAL_GetTick>
 8006320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006322:	e00a      	b.n	800633a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006324:	f7fd fd52 	bl	8003dcc <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006332:	4293      	cmp	r3, r2
 8006334:	d901      	bls.n	800633a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e04f      	b.n	80063da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800633a:	4b2b      	ldr	r3, [pc, #172]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 020c 	and.w	r2, r3, #12
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	429a      	cmp	r2, r3
 800634a:	d1eb      	bne.n	8006324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800634c:	4b25      	ldr	r3, [pc, #148]	@ (80063e4 <HAL_RCC_ClockConfig+0x1b8>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 030f 	and.w	r3, r3, #15
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d20c      	bcs.n	8006374 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800635a:	4b22      	ldr	r3, [pc, #136]	@ (80063e4 <HAL_RCC_ClockConfig+0x1b8>)
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006362:	4b20      	ldr	r3, [pc, #128]	@ (80063e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d001      	beq.n	8006374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e032      	b.n	80063da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	d008      	beq.n	8006392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006380:	4b19      	ldr	r3, [pc, #100]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	4916      	ldr	r1, [pc, #88]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	4313      	orrs	r3, r2
 8006390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d009      	beq.n	80063b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800639e:	4b12      	ldr	r3, [pc, #72]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	490e      	ldr	r1, [pc, #56]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063b2:	f000 f821 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
 80063b6:	4602      	mov	r2, r0
 80063b8:	4b0b      	ldr	r3, [pc, #44]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	091b      	lsrs	r3, r3, #4
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	490a      	ldr	r1, [pc, #40]	@ (80063ec <HAL_RCC_ClockConfig+0x1c0>)
 80063c4:	5ccb      	ldrb	r3, [r1, r3]
 80063c6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ca:	4a09      	ldr	r2, [pc, #36]	@ (80063f0 <HAL_RCC_ClockConfig+0x1c4>)
 80063cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80063ce:	4b09      	ldr	r3, [pc, #36]	@ (80063f4 <HAL_RCC_ClockConfig+0x1c8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fd fcb6 	bl	8003d44 <HAL_InitTick>

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40023c00 	.word	0x40023c00
 80063e8:	40023800 	.word	0x40023800
 80063ec:	08009770 	.word	0x08009770
 80063f0:	20000010 	.word	0x20000010
 80063f4:	20000014 	.word	0x20000014

080063f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063fc:	b094      	sub	sp, #80	@ 0x50
 80063fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006410:	4b79      	ldr	r3, [pc, #484]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 030c 	and.w	r3, r3, #12
 8006418:	2b08      	cmp	r3, #8
 800641a:	d00d      	beq.n	8006438 <HAL_RCC_GetSysClockFreq+0x40>
 800641c:	2b08      	cmp	r3, #8
 800641e:	f200 80e1 	bhi.w	80065e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_RCC_GetSysClockFreq+0x34>
 8006426:	2b04      	cmp	r3, #4
 8006428:	d003      	beq.n	8006432 <HAL_RCC_GetSysClockFreq+0x3a>
 800642a:	e0db      	b.n	80065e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800642c:	4b73      	ldr	r3, [pc, #460]	@ (80065fc <HAL_RCC_GetSysClockFreq+0x204>)
 800642e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006430:	e0db      	b.n	80065ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006432:	4b73      	ldr	r3, [pc, #460]	@ (8006600 <HAL_RCC_GetSysClockFreq+0x208>)
 8006434:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006436:	e0d8      	b.n	80065ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006438:	4b6f      	ldr	r3, [pc, #444]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006440:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006442:	4b6d      	ldr	r3, [pc, #436]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d063      	beq.n	8006516 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800644e:	4b6a      	ldr	r3, [pc, #424]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	099b      	lsrs	r3, r3, #6
 8006454:	2200      	movs	r2, #0
 8006456:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006458:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800645a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006460:	633b      	str	r3, [r7, #48]	@ 0x30
 8006462:	2300      	movs	r3, #0
 8006464:	637b      	str	r3, [r7, #52]	@ 0x34
 8006466:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800646a:	4622      	mov	r2, r4
 800646c:	462b      	mov	r3, r5
 800646e:	f04f 0000 	mov.w	r0, #0
 8006472:	f04f 0100 	mov.w	r1, #0
 8006476:	0159      	lsls	r1, r3, #5
 8006478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800647c:	0150      	lsls	r0, r2, #5
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4621      	mov	r1, r4
 8006484:	1a51      	subs	r1, r2, r1
 8006486:	6139      	str	r1, [r7, #16]
 8006488:	4629      	mov	r1, r5
 800648a:	eb63 0301 	sbc.w	r3, r3, r1
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800649c:	4659      	mov	r1, fp
 800649e:	018b      	lsls	r3, r1, #6
 80064a0:	4651      	mov	r1, sl
 80064a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064a6:	4651      	mov	r1, sl
 80064a8:	018a      	lsls	r2, r1, #6
 80064aa:	4651      	mov	r1, sl
 80064ac:	ebb2 0801 	subs.w	r8, r2, r1
 80064b0:	4659      	mov	r1, fp
 80064b2:	eb63 0901 	sbc.w	r9, r3, r1
 80064b6:	f04f 0200 	mov.w	r2, #0
 80064ba:	f04f 0300 	mov.w	r3, #0
 80064be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064ca:	4690      	mov	r8, r2
 80064cc:	4699      	mov	r9, r3
 80064ce:	4623      	mov	r3, r4
 80064d0:	eb18 0303 	adds.w	r3, r8, r3
 80064d4:	60bb      	str	r3, [r7, #8]
 80064d6:	462b      	mov	r3, r5
 80064d8:	eb49 0303 	adc.w	r3, r9, r3
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064ea:	4629      	mov	r1, r5
 80064ec:	024b      	lsls	r3, r1, #9
 80064ee:	4621      	mov	r1, r4
 80064f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064f4:	4621      	mov	r1, r4
 80064f6:	024a      	lsls	r2, r1, #9
 80064f8:	4610      	mov	r0, r2
 80064fa:	4619      	mov	r1, r3
 80064fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064fe:	2200      	movs	r2, #0
 8006500:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006502:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006504:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006508:	f7f9 fec2 	bl	8000290 <__aeabi_uldivmod>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4613      	mov	r3, r2
 8006512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006514:	e058      	b.n	80065c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006516:	4b38      	ldr	r3, [pc, #224]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	099b      	lsrs	r3, r3, #6
 800651c:	2200      	movs	r2, #0
 800651e:	4618      	mov	r0, r3
 8006520:	4611      	mov	r1, r2
 8006522:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006526:	623b      	str	r3, [r7, #32]
 8006528:	2300      	movs	r3, #0
 800652a:	627b      	str	r3, [r7, #36]	@ 0x24
 800652c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006530:	4642      	mov	r2, r8
 8006532:	464b      	mov	r3, r9
 8006534:	f04f 0000 	mov.w	r0, #0
 8006538:	f04f 0100 	mov.w	r1, #0
 800653c:	0159      	lsls	r1, r3, #5
 800653e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006542:	0150      	lsls	r0, r2, #5
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4641      	mov	r1, r8
 800654a:	ebb2 0a01 	subs.w	sl, r2, r1
 800654e:	4649      	mov	r1, r9
 8006550:	eb63 0b01 	sbc.w	fp, r3, r1
 8006554:	f04f 0200 	mov.w	r2, #0
 8006558:	f04f 0300 	mov.w	r3, #0
 800655c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006560:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006564:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006568:	ebb2 040a 	subs.w	r4, r2, sl
 800656c:	eb63 050b 	sbc.w	r5, r3, fp
 8006570:	f04f 0200 	mov.w	r2, #0
 8006574:	f04f 0300 	mov.w	r3, #0
 8006578:	00eb      	lsls	r3, r5, #3
 800657a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800657e:	00e2      	lsls	r2, r4, #3
 8006580:	4614      	mov	r4, r2
 8006582:	461d      	mov	r5, r3
 8006584:	4643      	mov	r3, r8
 8006586:	18e3      	adds	r3, r4, r3
 8006588:	603b      	str	r3, [r7, #0]
 800658a:	464b      	mov	r3, r9
 800658c:	eb45 0303 	adc.w	r3, r5, r3
 8006590:	607b      	str	r3, [r7, #4]
 8006592:	f04f 0200 	mov.w	r2, #0
 8006596:	f04f 0300 	mov.w	r3, #0
 800659a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800659e:	4629      	mov	r1, r5
 80065a0:	028b      	lsls	r3, r1, #10
 80065a2:	4621      	mov	r1, r4
 80065a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065a8:	4621      	mov	r1, r4
 80065aa:	028a      	lsls	r2, r1, #10
 80065ac:	4610      	mov	r0, r2
 80065ae:	4619      	mov	r1, r3
 80065b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065b2:	2200      	movs	r2, #0
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	61fa      	str	r2, [r7, #28]
 80065b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065bc:	f7f9 fe68 	bl	8000290 <__aeabi_uldivmod>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4613      	mov	r3, r2
 80065c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80065c8:	4b0b      	ldr	r3, [pc, #44]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	0c1b      	lsrs	r3, r3, #16
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	3301      	adds	r3, #1
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80065d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065e2:	e002      	b.n	80065ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065e4:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <HAL_RCC_GetSysClockFreq+0x204>)
 80065e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3750      	adds	r7, #80	@ 0x50
 80065f0:	46bd      	mov	sp, r7
 80065f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065f6:	bf00      	nop
 80065f8:	40023800 	.word	0x40023800
 80065fc:	00f42400 	.word	0x00f42400
 8006600:	007a1200 	.word	0x007a1200

08006604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006608:	4b03      	ldr	r3, [pc, #12]	@ (8006618 <HAL_RCC_GetHCLKFreq+0x14>)
 800660a:	681b      	ldr	r3, [r3, #0]
}
 800660c:	4618      	mov	r0, r3
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	20000010 	.word	0x20000010

0800661c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006620:	f7ff fff0 	bl	8006604 <HAL_RCC_GetHCLKFreq>
 8006624:	4602      	mov	r2, r0
 8006626:	4b05      	ldr	r3, [pc, #20]	@ (800663c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	0a9b      	lsrs	r3, r3, #10
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	4903      	ldr	r1, [pc, #12]	@ (8006640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006632:	5ccb      	ldrb	r3, [r1, r3]
 8006634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006638:	4618      	mov	r0, r3
 800663a:	bd80      	pop	{r7, pc}
 800663c:	40023800 	.word	0x40023800
 8006640:	08009780 	.word	0x08009780

08006644 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10b      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006668:	2b00      	cmp	r3, #0
 800666a:	d105      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006674:	2b00      	cmp	r3, #0
 8006676:	d075      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006678:	4b91      	ldr	r3, [pc, #580]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800667e:	f7fd fba5 	bl	8003dcc <HAL_GetTick>
 8006682:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006684:	e008      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006686:	f7fd fba1 	bl	8003dcc <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e189      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006698:	4b8a      	ldr	r3, [pc, #552]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1f0      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d009      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	019a      	lsls	r2, r3, #6
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	071b      	lsls	r3, r3, #28
 80066bc:	4981      	ldr	r1, [pc, #516]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01f      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066d0:	4b7c      	ldr	r3, [pc, #496]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066d6:	0f1b      	lsrs	r3, r3, #28
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	019a      	lsls	r2, r3, #6
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	061b      	lsls	r3, r3, #24
 80066ea:	431a      	orrs	r2, r3
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	071b      	lsls	r3, r3, #28
 80066f0:	4974      	ldr	r1, [pc, #464]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80066f8:	4b72      	ldr	r3, [pc, #456]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066fe:	f023 021f 	bic.w	r2, r3, #31
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	3b01      	subs	r3, #1
 8006708:	496e      	ldr	r1, [pc, #440]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800670a:	4313      	orrs	r3, r2
 800670c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00d      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	019a      	lsls	r2, r3, #6
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	061b      	lsls	r3, r3, #24
 8006728:	431a      	orrs	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	071b      	lsls	r3, r3, #28
 8006730:	4964      	ldr	r1, [pc, #400]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006732:	4313      	orrs	r3, r2
 8006734:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006738:	4b61      	ldr	r3, [pc, #388]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800673a:	2201      	movs	r2, #1
 800673c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800673e:	f7fd fb45 	bl	8003dcc <HAL_GetTick>
 8006742:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006744:	e008      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006746:	f7fd fb41 	bl	8003dcc <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e129      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006758:	4b5a      	ldr	r3, [pc, #360]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0f0      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d105      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006778:	2b00      	cmp	r3, #0
 800677a:	d079      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800677c:	4b52      	ldr	r3, [pc, #328]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006782:	f7fd fb23 	bl	8003dcc <HAL_GetTick>
 8006786:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006788:	e008      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800678a:	f7fd fb1f 	bl	8003dcc <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d901      	bls.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e107      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800679c:	4b49      	ldr	r3, [pc, #292]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067a8:	d0ef      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d020      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067b6:	4b43      	ldr	r3, [pc, #268]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067bc:	0f1b      	lsrs	r3, r3, #28
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	019a      	lsls	r2, r3, #6
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	061b      	lsls	r3, r3, #24
 80067d0:	431a      	orrs	r2, r3
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	071b      	lsls	r3, r3, #28
 80067d6:	493b      	ldr	r1, [pc, #236]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067de:	4b39      	ldr	r3, [pc, #228]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067e4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	4934      	ldr	r1, [pc, #208]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b00      	cmp	r3, #0
 8006802:	d01e      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006804:	4b2f      	ldr	r3, [pc, #188]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800680a:	0e1b      	lsrs	r3, r3, #24
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	019a      	lsls	r2, r3, #6
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	061b      	lsls	r3, r3, #24
 800681c:	431a      	orrs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	071b      	lsls	r3, r3, #28
 8006824:	4927      	ldr	r1, [pc, #156]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006826:	4313      	orrs	r3, r2
 8006828:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800682c:	4b25      	ldr	r3, [pc, #148]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800682e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006832:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683a:	4922      	ldr	r1, [pc, #136]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800683c:	4313      	orrs	r3, r2
 800683e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006842:	4b21      	ldr	r3, [pc, #132]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006844:	2201      	movs	r2, #1
 8006846:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006848:	f7fd fac0 	bl	8003dcc <HAL_GetTick>
 800684c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800684e:	e008      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006850:	f7fd fabc 	bl	8003dcc <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d901      	bls.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e0a4      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006862:	4b18      	ldr	r3, [pc, #96]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800686a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800686e:	d1ef      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0320 	and.w	r3, r3, #32
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 808b 	beq.w	8006994 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800687e:	2300      	movs	r3, #0
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	4b10      	ldr	r3, [pc, #64]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006886:	4a0f      	ldr	r2, [pc, #60]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800688c:	6413      	str	r3, [r2, #64]	@ 0x40
 800688e:	4b0d      	ldr	r3, [pc, #52]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800689a:	4b0c      	ldr	r3, [pc, #48]	@ (80068cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a0b      	ldr	r2, [pc, #44]	@ (80068cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80068a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068a6:	f7fd fa91 	bl	8003dcc <HAL_GetTick>
 80068aa:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80068ac:	e010      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ae:	f7fd fa8d 	bl	8003dcc <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d909      	bls.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e075      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x368>
 80068c0:	42470068 	.word	0x42470068
 80068c4:	40023800 	.word	0x40023800
 80068c8:	42470070 	.word	0x42470070
 80068cc:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80068d0:	4b38      	ldr	r3, [pc, #224]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d0e8      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068dc:	4b36      	ldr	r3, [pc, #216]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068e4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d02f      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d028      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068fa:	4b2f      	ldr	r3, [pc, #188]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006902:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006904:	4b2d      	ldr	r3, [pc, #180]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006906:	2201      	movs	r2, #1
 8006908:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800690a:	4b2c      	ldr	r3, [pc, #176]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006910:	4a29      	ldr	r2, [pc, #164]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006916:	4b28      	ldr	r3, [pc, #160]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b01      	cmp	r3, #1
 8006920:	d114      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006922:	f7fd fa53 	bl	8003dcc <HAL_GetTick>
 8006926:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006928:	e00a      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800692a:	f7fd fa4f 	bl	8003dcc <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006938:	4293      	cmp	r3, r2
 800693a:	d901      	bls.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e035      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006940:	4b1d      	ldr	r3, [pc, #116]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0ee      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006950:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006954:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006958:	d10d      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800695a:	4b17      	ldr	r3, [pc, #92]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006966:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800696a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800696e:	4912      	ldr	r1, [pc, #72]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006970:	4313      	orrs	r3, r2
 8006972:	608b      	str	r3, [r1, #8]
 8006974:	e005      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006976:	4b10      	ldr	r3, [pc, #64]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	4a0f      	ldr	r2, [pc, #60]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800697c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006980:	6093      	str	r3, [r2, #8]
 8006982:	4b0d      	ldr	r3, [pc, #52]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006984:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800698e:	490a      	ldr	r1, [pc, #40]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006990:	4313      	orrs	r3, r2
 8006992:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80069a6:	4b06      	ldr	r3, [pc, #24]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80069a8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	40007000 	.word	0x40007000
 80069b8:	40023800 	.word	0x40023800
 80069bc:	42470e40 	.word	0x42470e40
 80069c0:	424711e0 	.word	0x424711e0

080069c4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e01c      	b.n	8006a10 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	795b      	ldrb	r3, [r3, #5]
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d105      	bne.n	80069ec <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fc fc84 	bl	80032f4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f042 0204 	orr.w	r2, r2, #4
 8006a00:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	791b      	ldrb	r3, [r3, #4]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d101      	bne.n	8006a32 <HAL_RNG_GenerateRandomNumber+0x1a>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	e044      	b.n	8006abc <HAL_RNG_GenerateRandomNumber+0xa4>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	795b      	ldrb	r3, [r3, #5]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d133      	bne.n	8006aaa <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2202      	movs	r2, #2
 8006a46:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a48:	f7fd f9c0 	bl	8003dcc <HAL_GetTick>
 8006a4c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006a4e:	e018      	b.n	8006a82 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006a50:	f7fd f9bc 	bl	8003dcc <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d911      	bls.n	8006a82 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d00a      	beq.n	8006a82 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2202      	movs	r2, #2
 8006a76:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e01c      	b.n	8006abc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d1df      	bne.n	8006a50 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	715a      	strb	r2, [r3, #5]
 8006aa8:	e004      	b.n	8006ab4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2204      	movs	r2, #4
 8006aae:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	711a      	strb	r2, [r3, #4]

  return status;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e07b      	b.n	8006bce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d108      	bne.n	8006af0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ae6:	d009      	beq.n	8006afc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	61da      	str	r2, [r3, #28]
 8006aee:	e005      	b.n	8006afc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fc fc0e 	bl	8003338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b76:	431a      	orrs	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b80:	ea42 0103 	orr.w	r1, r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	0c1b      	lsrs	r3, r3, #16
 8006b9a:	f003 0104 	and.w	r1, r3, #4
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba2:	f003 0210 	and.w	r2, r3, #16
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69da      	ldr	r2, [r3, #28]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b082      	sub	sp, #8
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e01a      	b.n	8006c1e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bfe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7fc fbe1 	bl	80033c8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b088      	sub	sp, #32
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	60f8      	str	r0, [r7, #12]
 8006c2e:	60b9      	str	r1, [r7, #8]
 8006c30:	603b      	str	r3, [r7, #0]
 8006c32:	4613      	mov	r3, r2
 8006c34:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c36:	f7fd f8c9 	bl	8003dcc <HAL_GetTick>
 8006c3a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006c3c:	88fb      	ldrh	r3, [r7, #6]
 8006c3e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d001      	beq.n	8006c50 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e12a      	b.n	8006ea6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <HAL_SPI_Transmit+0x36>
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e122      	b.n	8006ea6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_SPI_Transmit+0x48>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e11b      	b.n	8006ea6 <HAL_SPI_Transmit+0x280>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2203      	movs	r2, #3
 8006c7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	88fa      	ldrh	r2, [r7, #6]
 8006c8e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	88fa      	ldrh	r2, [r7, #6]
 8006c94:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cbc:	d10f      	bne.n	8006cde <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ccc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce8:	2b40      	cmp	r3, #64	@ 0x40
 8006cea:	d007      	beq.n	8006cfc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d04:	d152      	bne.n	8006dac <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <HAL_SPI_Transmit+0xee>
 8006d0e:	8b7b      	ldrh	r3, [r7, #26]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d145      	bne.n	8006da0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d18:	881a      	ldrh	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d24:	1c9a      	adds	r2, r3, #2
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d38:	e032      	b.n	8006da0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d112      	bne.n	8006d6e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4c:	881a      	ldrh	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d58:	1c9a      	adds	r2, r3, #2
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	3b01      	subs	r3, #1
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006d6c:	e018      	b.n	8006da0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d6e:	f7fd f82d 	bl	8003dcc <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d803      	bhi.n	8006d86 <HAL_SPI_Transmit+0x160>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d84:	d102      	bne.n	8006d8c <HAL_SPI_Transmit+0x166>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d109      	bne.n	8006da0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e082      	b.n	8006ea6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1c7      	bne.n	8006d3a <HAL_SPI_Transmit+0x114>
 8006daa:	e053      	b.n	8006e54 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <HAL_SPI_Transmit+0x194>
 8006db4:	8b7b      	ldrh	r3, [r7, #26]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d147      	bne.n	8006e4a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	330c      	adds	r3, #12
 8006dc4:	7812      	ldrb	r2, [r2, #0]
 8006dc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006de0:	e033      	b.n	8006e4a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d113      	bne.n	8006e18 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	330c      	adds	r3, #12
 8006dfa:	7812      	ldrb	r2, [r2, #0]
 8006dfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e16:	e018      	b.n	8006e4a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e18:	f7fc ffd8 	bl	8003dcc <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d803      	bhi.n	8006e30 <HAL_SPI_Transmit+0x20a>
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2e:	d102      	bne.n	8006e36 <HAL_SPI_Transmit+0x210>
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d109      	bne.n	8006e4a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e02d      	b.n	8006ea6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1c6      	bne.n	8006de2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f8bf 	bl	8006fdc <SPI_EndRxTxTransaction>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2220      	movs	r2, #32
 8006e68:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10a      	bne.n	8006e88 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e72:	2300      	movs	r3, #0
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	617b      	str	r3, [r7, #20]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e000      	b.n	8006ea6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
  }
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3720      	adds	r7, #32
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ebc:	b2db      	uxtb	r3, r3
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
	...

08006ecc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006edc:	f7fc ff76 	bl	8003dcc <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	4413      	add	r3, r2
 8006eea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006eec:	f7fc ff6e 	bl	8003dcc <HAL_GetTick>
 8006ef0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ef2:	4b39      	ldr	r3, [pc, #228]	@ (8006fd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	015b      	lsls	r3, r3, #5
 8006ef8:	0d1b      	lsrs	r3, r3, #20
 8006efa:	69fa      	ldr	r2, [r7, #28]
 8006efc:	fb02 f303 	mul.w	r3, r2, r3
 8006f00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f02:	e054      	b.n	8006fae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0a:	d050      	beq.n	8006fae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f0c:	f7fc ff5e 	bl	8003dcc <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d902      	bls.n	8006f22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d13d      	bne.n	8006f9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f3a:	d111      	bne.n	8006f60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f44:	d004      	beq.n	8006f50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f4e:	d107      	bne.n	8006f60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f68:	d10f      	bne.n	8006f8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e017      	b.n	8006fce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	bf0c      	ite	eq
 8006fbe:	2301      	moveq	r3, #1
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d19b      	bne.n	8006f04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3720      	adds	r7, #32
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000010 	.word	0x20000010

08006fdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	2102      	movs	r1, #2
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f7ff ff6a 	bl	8006ecc <SPI_WaitFlagStateUntilTimeout>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d007      	beq.n	800700e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007002:	f043 0220 	orr.w	r2, r3, #32
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e032      	b.n	8007074 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800700e:	4b1b      	ldr	r3, [pc, #108]	@ (800707c <SPI_EndRxTxTransaction+0xa0>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a1b      	ldr	r2, [pc, #108]	@ (8007080 <SPI_EndRxTxTransaction+0xa4>)
 8007014:	fba2 2303 	umull	r2, r3, r2, r3
 8007018:	0d5b      	lsrs	r3, r3, #21
 800701a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800701e:	fb02 f303 	mul.w	r3, r2, r3
 8007022:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800702c:	d112      	bne.n	8007054 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2200      	movs	r2, #0
 8007036:	2180      	movs	r1, #128	@ 0x80
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f7ff ff47 	bl	8006ecc <SPI_WaitFlagStateUntilTimeout>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d016      	beq.n	8007072 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007048:	f043 0220 	orr.w	r2, r3, #32
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e00f      	b.n	8007074 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	3b01      	subs	r3, #1
 800705e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800706a:	2b80      	cmp	r3, #128	@ 0x80
 800706c:	d0f2      	beq.n	8007054 <SPI_EndRxTxTransaction+0x78>
 800706e:	e000      	b.n	8007072 <SPI_EndRxTxTransaction+0x96>
        break;
 8007070:	bf00      	nop
  }

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000010 	.word	0x20000010
 8007080:	165e9f81 	.word	0x165e9f81

08007084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e041      	b.n	800711a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d106      	bne.n	80070b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7fc f9aa 	bl	8003404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3304      	adds	r3, #4
 80070c0:	4619      	mov	r1, r3
 80070c2:	4610      	mov	r0, r2
 80070c4:	f000 f8f4 	bl	80072b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <HAL_TIM_ConfigClockSource+0x1c>
 800713a:	2302      	movs	r3, #2
 800713c:	e0b4      	b.n	80072a8 <HAL_TIM_ConfigClockSource+0x186>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2202      	movs	r2, #2
 800714a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800715c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007164:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007176:	d03e      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0xd4>
 8007178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800717c:	f200 8087 	bhi.w	800728e <HAL_TIM_ConfigClockSource+0x16c>
 8007180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007184:	f000 8086 	beq.w	8007294 <HAL_TIM_ConfigClockSource+0x172>
 8007188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800718c:	d87f      	bhi.n	800728e <HAL_TIM_ConfigClockSource+0x16c>
 800718e:	2b70      	cmp	r3, #112	@ 0x70
 8007190:	d01a      	beq.n	80071c8 <HAL_TIM_ConfigClockSource+0xa6>
 8007192:	2b70      	cmp	r3, #112	@ 0x70
 8007194:	d87b      	bhi.n	800728e <HAL_TIM_ConfigClockSource+0x16c>
 8007196:	2b60      	cmp	r3, #96	@ 0x60
 8007198:	d050      	beq.n	800723c <HAL_TIM_ConfigClockSource+0x11a>
 800719a:	2b60      	cmp	r3, #96	@ 0x60
 800719c:	d877      	bhi.n	800728e <HAL_TIM_ConfigClockSource+0x16c>
 800719e:	2b50      	cmp	r3, #80	@ 0x50
 80071a0:	d03c      	beq.n	800721c <HAL_TIM_ConfigClockSource+0xfa>
 80071a2:	2b50      	cmp	r3, #80	@ 0x50
 80071a4:	d873      	bhi.n	800728e <HAL_TIM_ConfigClockSource+0x16c>
 80071a6:	2b40      	cmp	r3, #64	@ 0x40
 80071a8:	d058      	beq.n	800725c <HAL_TIM_ConfigClockSource+0x13a>
 80071aa:	2b40      	cmp	r3, #64	@ 0x40
 80071ac:	d86f      	bhi.n	800728e <HAL_TIM_ConfigClockSource+0x16c>
 80071ae:	2b30      	cmp	r3, #48	@ 0x30
 80071b0:	d064      	beq.n	800727c <HAL_TIM_ConfigClockSource+0x15a>
 80071b2:	2b30      	cmp	r3, #48	@ 0x30
 80071b4:	d86b      	bhi.n	800728e <HAL_TIM_ConfigClockSource+0x16c>
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	d060      	beq.n	800727c <HAL_TIM_ConfigClockSource+0x15a>
 80071ba:	2b20      	cmp	r3, #32
 80071bc:	d867      	bhi.n	800728e <HAL_TIM_ConfigClockSource+0x16c>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d05c      	beq.n	800727c <HAL_TIM_ConfigClockSource+0x15a>
 80071c2:	2b10      	cmp	r3, #16
 80071c4:	d05a      	beq.n	800727c <HAL_TIM_ConfigClockSource+0x15a>
 80071c6:	e062      	b.n	800728e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071d8:	f000 f990 	bl	80074fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80071ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	609a      	str	r2, [r3, #8]
      break;
 80071f4:	e04f      	b.n	8007296 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007206:	f000 f979 	bl	80074fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007218:	609a      	str	r2, [r3, #8]
      break;
 800721a:	e03c      	b.n	8007296 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007228:	461a      	mov	r2, r3
 800722a:	f000 f8ed 	bl	8007408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2150      	movs	r1, #80	@ 0x50
 8007234:	4618      	mov	r0, r3
 8007236:	f000 f946 	bl	80074c6 <TIM_ITRx_SetConfig>
      break;
 800723a:	e02c      	b.n	8007296 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007248:	461a      	mov	r2, r3
 800724a:	f000 f90c 	bl	8007466 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2160      	movs	r1, #96	@ 0x60
 8007254:	4618      	mov	r0, r3
 8007256:	f000 f936 	bl	80074c6 <TIM_ITRx_SetConfig>
      break;
 800725a:	e01c      	b.n	8007296 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007268:	461a      	mov	r2, r3
 800726a:	f000 f8cd 	bl	8007408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2140      	movs	r1, #64	@ 0x40
 8007274:	4618      	mov	r0, r3
 8007276:	f000 f926 	bl	80074c6 <TIM_ITRx_SetConfig>
      break;
 800727a:	e00c      	b.n	8007296 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4619      	mov	r1, r3
 8007286:	4610      	mov	r0, r2
 8007288:	f000 f91d 	bl	80074c6 <TIM_ITRx_SetConfig>
      break;
 800728c:	e003      	b.n	8007296 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	73fb      	strb	r3, [r7, #15]
      break;
 8007292:	e000      	b.n	8007296 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007294:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a46      	ldr	r2, [pc, #280]	@ (80073dc <TIM_Base_SetConfig+0x12c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d013      	beq.n	80072f0 <TIM_Base_SetConfig+0x40>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ce:	d00f      	beq.n	80072f0 <TIM_Base_SetConfig+0x40>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a43      	ldr	r2, [pc, #268]	@ (80073e0 <TIM_Base_SetConfig+0x130>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d00b      	beq.n	80072f0 <TIM_Base_SetConfig+0x40>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a42      	ldr	r2, [pc, #264]	@ (80073e4 <TIM_Base_SetConfig+0x134>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d007      	beq.n	80072f0 <TIM_Base_SetConfig+0x40>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a41      	ldr	r2, [pc, #260]	@ (80073e8 <TIM_Base_SetConfig+0x138>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d003      	beq.n	80072f0 <TIM_Base_SetConfig+0x40>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a40      	ldr	r2, [pc, #256]	@ (80073ec <TIM_Base_SetConfig+0x13c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d108      	bne.n	8007302 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a35      	ldr	r2, [pc, #212]	@ (80073dc <TIM_Base_SetConfig+0x12c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d02b      	beq.n	8007362 <TIM_Base_SetConfig+0xb2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007310:	d027      	beq.n	8007362 <TIM_Base_SetConfig+0xb2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a32      	ldr	r2, [pc, #200]	@ (80073e0 <TIM_Base_SetConfig+0x130>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d023      	beq.n	8007362 <TIM_Base_SetConfig+0xb2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a31      	ldr	r2, [pc, #196]	@ (80073e4 <TIM_Base_SetConfig+0x134>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d01f      	beq.n	8007362 <TIM_Base_SetConfig+0xb2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a30      	ldr	r2, [pc, #192]	@ (80073e8 <TIM_Base_SetConfig+0x138>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d01b      	beq.n	8007362 <TIM_Base_SetConfig+0xb2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a2f      	ldr	r2, [pc, #188]	@ (80073ec <TIM_Base_SetConfig+0x13c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d017      	beq.n	8007362 <TIM_Base_SetConfig+0xb2>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a2e      	ldr	r2, [pc, #184]	@ (80073f0 <TIM_Base_SetConfig+0x140>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d013      	beq.n	8007362 <TIM_Base_SetConfig+0xb2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a2d      	ldr	r2, [pc, #180]	@ (80073f4 <TIM_Base_SetConfig+0x144>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d00f      	beq.n	8007362 <TIM_Base_SetConfig+0xb2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a2c      	ldr	r2, [pc, #176]	@ (80073f8 <TIM_Base_SetConfig+0x148>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00b      	beq.n	8007362 <TIM_Base_SetConfig+0xb2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a2b      	ldr	r2, [pc, #172]	@ (80073fc <TIM_Base_SetConfig+0x14c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d007      	beq.n	8007362 <TIM_Base_SetConfig+0xb2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a2a      	ldr	r2, [pc, #168]	@ (8007400 <TIM_Base_SetConfig+0x150>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d003      	beq.n	8007362 <TIM_Base_SetConfig+0xb2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a29      	ldr	r2, [pc, #164]	@ (8007404 <TIM_Base_SetConfig+0x154>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d108      	bne.n	8007374 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4313      	orrs	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	4313      	orrs	r3, r2
 8007380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a10      	ldr	r2, [pc, #64]	@ (80073dc <TIM_Base_SetConfig+0x12c>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d003      	beq.n	80073a8 <TIM_Base_SetConfig+0xf8>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a12      	ldr	r2, [pc, #72]	@ (80073ec <TIM_Base_SetConfig+0x13c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d103      	bne.n	80073b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	691a      	ldr	r2, [r3, #16]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d105      	bne.n	80073ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	f023 0201 	bic.w	r2, r3, #1
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	611a      	str	r2, [r3, #16]
  }
}
 80073ce:	bf00      	nop
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	40010000 	.word	0x40010000
 80073e0:	40000400 	.word	0x40000400
 80073e4:	40000800 	.word	0x40000800
 80073e8:	40000c00 	.word	0x40000c00
 80073ec:	40010400 	.word	0x40010400
 80073f0:	40014000 	.word	0x40014000
 80073f4:	40014400 	.word	0x40014400
 80073f8:	40014800 	.word	0x40014800
 80073fc:	40001800 	.word	0x40001800
 8007400:	40001c00 	.word	0x40001c00
 8007404:	40002000 	.word	0x40002000

08007408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f023 0201 	bic.w	r2, r3, #1
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	011b      	lsls	r3, r3, #4
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	4313      	orrs	r3, r2
 800743c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f023 030a 	bic.w	r3, r3, #10
 8007444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	621a      	str	r2, [r3, #32]
}
 800745a:	bf00      	nop
 800745c:	371c      	adds	r7, #28
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007466:	b480      	push	{r7}
 8007468:	b087      	sub	sp, #28
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	f023 0210 	bic.w	r2, r3, #16
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007490:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	031b      	lsls	r3, r3, #12
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	4313      	orrs	r3, r2
 800749a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80074a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	621a      	str	r2, [r3, #32]
}
 80074ba:	bf00      	nop
 80074bc:	371c      	adds	r7, #28
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b085      	sub	sp, #20
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	f043 0307 	orr.w	r3, r3, #7
 80074e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	609a      	str	r2, [r3, #8]
}
 80074f0:	bf00      	nop
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	021a      	lsls	r2, r3, #8
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	431a      	orrs	r2, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4313      	orrs	r3, r2
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	609a      	str	r2, [r3, #8]
}
 8007530:	bf00      	nop
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800754c:	2b01      	cmp	r3, #1
 800754e:	d101      	bne.n	8007554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007550:	2302      	movs	r3, #2
 8007552:	e05a      	b.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800757a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a21      	ldr	r2, [pc, #132]	@ (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d022      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075a0:	d01d      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1d      	ldr	r2, [pc, #116]	@ (800761c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d018      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007620 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d013      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007624 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00e      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a18      	ldr	r2, [pc, #96]	@ (8007628 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d009      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a17      	ldr	r2, [pc, #92]	@ (800762c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d004      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a15      	ldr	r2, [pc, #84]	@ (8007630 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d10c      	bne.n	80075f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40010000 	.word	0x40010000
 800761c:	40000400 	.word	0x40000400
 8007620:	40000800 	.word	0x40000800
 8007624:	40000c00 	.word	0x40000c00
 8007628:	40010400 	.word	0x40010400
 800762c:	40014000 	.word	0x40014000
 8007630:	40001800 	.word	0x40001800

08007634 <std>:
 8007634:	2300      	movs	r3, #0
 8007636:	b510      	push	{r4, lr}
 8007638:	4604      	mov	r4, r0
 800763a:	e9c0 3300 	strd	r3, r3, [r0]
 800763e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007642:	6083      	str	r3, [r0, #8]
 8007644:	8181      	strh	r1, [r0, #12]
 8007646:	6643      	str	r3, [r0, #100]	@ 0x64
 8007648:	81c2      	strh	r2, [r0, #14]
 800764a:	6183      	str	r3, [r0, #24]
 800764c:	4619      	mov	r1, r3
 800764e:	2208      	movs	r2, #8
 8007650:	305c      	adds	r0, #92	@ 0x5c
 8007652:	f000 f9f9 	bl	8007a48 <memset>
 8007656:	4b0d      	ldr	r3, [pc, #52]	@ (800768c <std+0x58>)
 8007658:	6263      	str	r3, [r4, #36]	@ 0x24
 800765a:	4b0d      	ldr	r3, [pc, #52]	@ (8007690 <std+0x5c>)
 800765c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800765e:	4b0d      	ldr	r3, [pc, #52]	@ (8007694 <std+0x60>)
 8007660:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007662:	4b0d      	ldr	r3, [pc, #52]	@ (8007698 <std+0x64>)
 8007664:	6323      	str	r3, [r4, #48]	@ 0x30
 8007666:	4b0d      	ldr	r3, [pc, #52]	@ (800769c <std+0x68>)
 8007668:	6224      	str	r4, [r4, #32]
 800766a:	429c      	cmp	r4, r3
 800766c:	d006      	beq.n	800767c <std+0x48>
 800766e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007672:	4294      	cmp	r4, r2
 8007674:	d002      	beq.n	800767c <std+0x48>
 8007676:	33d0      	adds	r3, #208	@ 0xd0
 8007678:	429c      	cmp	r4, r3
 800767a:	d105      	bne.n	8007688 <std+0x54>
 800767c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007684:	f000 ba58 	b.w	8007b38 <__retarget_lock_init_recursive>
 8007688:	bd10      	pop	{r4, pc}
 800768a:	bf00      	nop
 800768c:	08007899 	.word	0x08007899
 8007690:	080078bb 	.word	0x080078bb
 8007694:	080078f3 	.word	0x080078f3
 8007698:	08007917 	.word	0x08007917
 800769c:	20025c20 	.word	0x20025c20

080076a0 <stdio_exit_handler>:
 80076a0:	4a02      	ldr	r2, [pc, #8]	@ (80076ac <stdio_exit_handler+0xc>)
 80076a2:	4903      	ldr	r1, [pc, #12]	@ (80076b0 <stdio_exit_handler+0x10>)
 80076a4:	4803      	ldr	r0, [pc, #12]	@ (80076b4 <stdio_exit_handler+0x14>)
 80076a6:	f000 b869 	b.w	800777c <_fwalk_sglue>
 80076aa:	bf00      	nop
 80076ac:	2000001c 	.word	0x2000001c
 80076b0:	080083d9 	.word	0x080083d9
 80076b4:	2000002c 	.word	0x2000002c

080076b8 <cleanup_stdio>:
 80076b8:	6841      	ldr	r1, [r0, #4]
 80076ba:	4b0c      	ldr	r3, [pc, #48]	@ (80076ec <cleanup_stdio+0x34>)
 80076bc:	4299      	cmp	r1, r3
 80076be:	b510      	push	{r4, lr}
 80076c0:	4604      	mov	r4, r0
 80076c2:	d001      	beq.n	80076c8 <cleanup_stdio+0x10>
 80076c4:	f000 fe88 	bl	80083d8 <_fflush_r>
 80076c8:	68a1      	ldr	r1, [r4, #8]
 80076ca:	4b09      	ldr	r3, [pc, #36]	@ (80076f0 <cleanup_stdio+0x38>)
 80076cc:	4299      	cmp	r1, r3
 80076ce:	d002      	beq.n	80076d6 <cleanup_stdio+0x1e>
 80076d0:	4620      	mov	r0, r4
 80076d2:	f000 fe81 	bl	80083d8 <_fflush_r>
 80076d6:	68e1      	ldr	r1, [r4, #12]
 80076d8:	4b06      	ldr	r3, [pc, #24]	@ (80076f4 <cleanup_stdio+0x3c>)
 80076da:	4299      	cmp	r1, r3
 80076dc:	d004      	beq.n	80076e8 <cleanup_stdio+0x30>
 80076de:	4620      	mov	r0, r4
 80076e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e4:	f000 be78 	b.w	80083d8 <_fflush_r>
 80076e8:	bd10      	pop	{r4, pc}
 80076ea:	bf00      	nop
 80076ec:	20025c20 	.word	0x20025c20
 80076f0:	20025c88 	.word	0x20025c88
 80076f4:	20025cf0 	.word	0x20025cf0

080076f8 <global_stdio_init.part.0>:
 80076f8:	b510      	push	{r4, lr}
 80076fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007728 <global_stdio_init.part.0+0x30>)
 80076fc:	4c0b      	ldr	r4, [pc, #44]	@ (800772c <global_stdio_init.part.0+0x34>)
 80076fe:	4a0c      	ldr	r2, [pc, #48]	@ (8007730 <global_stdio_init.part.0+0x38>)
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	4620      	mov	r0, r4
 8007704:	2200      	movs	r2, #0
 8007706:	2104      	movs	r1, #4
 8007708:	f7ff ff94 	bl	8007634 <std>
 800770c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007710:	2201      	movs	r2, #1
 8007712:	2109      	movs	r1, #9
 8007714:	f7ff ff8e 	bl	8007634 <std>
 8007718:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800771c:	2202      	movs	r2, #2
 800771e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007722:	2112      	movs	r1, #18
 8007724:	f7ff bf86 	b.w	8007634 <std>
 8007728:	20025d58 	.word	0x20025d58
 800772c:	20025c20 	.word	0x20025c20
 8007730:	080076a1 	.word	0x080076a1

08007734 <__sfp_lock_acquire>:
 8007734:	4801      	ldr	r0, [pc, #4]	@ (800773c <__sfp_lock_acquire+0x8>)
 8007736:	f000 ba00 	b.w	8007b3a <__retarget_lock_acquire_recursive>
 800773a:	bf00      	nop
 800773c:	20025d61 	.word	0x20025d61

08007740 <__sfp_lock_release>:
 8007740:	4801      	ldr	r0, [pc, #4]	@ (8007748 <__sfp_lock_release+0x8>)
 8007742:	f000 b9fb 	b.w	8007b3c <__retarget_lock_release_recursive>
 8007746:	bf00      	nop
 8007748:	20025d61 	.word	0x20025d61

0800774c <__sinit>:
 800774c:	b510      	push	{r4, lr}
 800774e:	4604      	mov	r4, r0
 8007750:	f7ff fff0 	bl	8007734 <__sfp_lock_acquire>
 8007754:	6a23      	ldr	r3, [r4, #32]
 8007756:	b11b      	cbz	r3, 8007760 <__sinit+0x14>
 8007758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800775c:	f7ff bff0 	b.w	8007740 <__sfp_lock_release>
 8007760:	4b04      	ldr	r3, [pc, #16]	@ (8007774 <__sinit+0x28>)
 8007762:	6223      	str	r3, [r4, #32]
 8007764:	4b04      	ldr	r3, [pc, #16]	@ (8007778 <__sinit+0x2c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1f5      	bne.n	8007758 <__sinit+0xc>
 800776c:	f7ff ffc4 	bl	80076f8 <global_stdio_init.part.0>
 8007770:	e7f2      	b.n	8007758 <__sinit+0xc>
 8007772:	bf00      	nop
 8007774:	080076b9 	.word	0x080076b9
 8007778:	20025d58 	.word	0x20025d58

0800777c <_fwalk_sglue>:
 800777c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007780:	4607      	mov	r7, r0
 8007782:	4688      	mov	r8, r1
 8007784:	4614      	mov	r4, r2
 8007786:	2600      	movs	r6, #0
 8007788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800778c:	f1b9 0901 	subs.w	r9, r9, #1
 8007790:	d505      	bpl.n	800779e <_fwalk_sglue+0x22>
 8007792:	6824      	ldr	r4, [r4, #0]
 8007794:	2c00      	cmp	r4, #0
 8007796:	d1f7      	bne.n	8007788 <_fwalk_sglue+0xc>
 8007798:	4630      	mov	r0, r6
 800779a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800779e:	89ab      	ldrh	r3, [r5, #12]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d907      	bls.n	80077b4 <_fwalk_sglue+0x38>
 80077a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077a8:	3301      	adds	r3, #1
 80077aa:	d003      	beq.n	80077b4 <_fwalk_sglue+0x38>
 80077ac:	4629      	mov	r1, r5
 80077ae:	4638      	mov	r0, r7
 80077b0:	47c0      	blx	r8
 80077b2:	4306      	orrs	r6, r0
 80077b4:	3568      	adds	r5, #104	@ 0x68
 80077b6:	e7e9      	b.n	800778c <_fwalk_sglue+0x10>

080077b8 <iprintf>:
 80077b8:	b40f      	push	{r0, r1, r2, r3}
 80077ba:	b507      	push	{r0, r1, r2, lr}
 80077bc:	4906      	ldr	r1, [pc, #24]	@ (80077d8 <iprintf+0x20>)
 80077be:	ab04      	add	r3, sp, #16
 80077c0:	6808      	ldr	r0, [r1, #0]
 80077c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c6:	6881      	ldr	r1, [r0, #8]
 80077c8:	9301      	str	r3, [sp, #4]
 80077ca:	f000 fadb 	bl	8007d84 <_vfiprintf_r>
 80077ce:	b003      	add	sp, #12
 80077d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077d4:	b004      	add	sp, #16
 80077d6:	4770      	bx	lr
 80077d8:	20000028 	.word	0x20000028

080077dc <_puts_r>:
 80077dc:	6a03      	ldr	r3, [r0, #32]
 80077de:	b570      	push	{r4, r5, r6, lr}
 80077e0:	6884      	ldr	r4, [r0, #8]
 80077e2:	4605      	mov	r5, r0
 80077e4:	460e      	mov	r6, r1
 80077e6:	b90b      	cbnz	r3, 80077ec <_puts_r+0x10>
 80077e8:	f7ff ffb0 	bl	800774c <__sinit>
 80077ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077ee:	07db      	lsls	r3, r3, #31
 80077f0:	d405      	bmi.n	80077fe <_puts_r+0x22>
 80077f2:	89a3      	ldrh	r3, [r4, #12]
 80077f4:	0598      	lsls	r0, r3, #22
 80077f6:	d402      	bmi.n	80077fe <_puts_r+0x22>
 80077f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077fa:	f000 f99e 	bl	8007b3a <__retarget_lock_acquire_recursive>
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	0719      	lsls	r1, r3, #28
 8007802:	d502      	bpl.n	800780a <_puts_r+0x2e>
 8007804:	6923      	ldr	r3, [r4, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d135      	bne.n	8007876 <_puts_r+0x9a>
 800780a:	4621      	mov	r1, r4
 800780c:	4628      	mov	r0, r5
 800780e:	f000 f8c5 	bl	800799c <__swsetup_r>
 8007812:	b380      	cbz	r0, 8007876 <_puts_r+0x9a>
 8007814:	f04f 35ff 	mov.w	r5, #4294967295
 8007818:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800781a:	07da      	lsls	r2, r3, #31
 800781c:	d405      	bmi.n	800782a <_puts_r+0x4e>
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	059b      	lsls	r3, r3, #22
 8007822:	d402      	bmi.n	800782a <_puts_r+0x4e>
 8007824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007826:	f000 f989 	bl	8007b3c <__retarget_lock_release_recursive>
 800782a:	4628      	mov	r0, r5
 800782c:	bd70      	pop	{r4, r5, r6, pc}
 800782e:	2b00      	cmp	r3, #0
 8007830:	da04      	bge.n	800783c <_puts_r+0x60>
 8007832:	69a2      	ldr	r2, [r4, #24]
 8007834:	429a      	cmp	r2, r3
 8007836:	dc17      	bgt.n	8007868 <_puts_r+0x8c>
 8007838:	290a      	cmp	r1, #10
 800783a:	d015      	beq.n	8007868 <_puts_r+0x8c>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	1c5a      	adds	r2, r3, #1
 8007840:	6022      	str	r2, [r4, #0]
 8007842:	7019      	strb	r1, [r3, #0]
 8007844:	68a3      	ldr	r3, [r4, #8]
 8007846:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800784a:	3b01      	subs	r3, #1
 800784c:	60a3      	str	r3, [r4, #8]
 800784e:	2900      	cmp	r1, #0
 8007850:	d1ed      	bne.n	800782e <_puts_r+0x52>
 8007852:	2b00      	cmp	r3, #0
 8007854:	da11      	bge.n	800787a <_puts_r+0x9e>
 8007856:	4622      	mov	r2, r4
 8007858:	210a      	movs	r1, #10
 800785a:	4628      	mov	r0, r5
 800785c:	f000 f85f 	bl	800791e <__swbuf_r>
 8007860:	3001      	adds	r0, #1
 8007862:	d0d7      	beq.n	8007814 <_puts_r+0x38>
 8007864:	250a      	movs	r5, #10
 8007866:	e7d7      	b.n	8007818 <_puts_r+0x3c>
 8007868:	4622      	mov	r2, r4
 800786a:	4628      	mov	r0, r5
 800786c:	f000 f857 	bl	800791e <__swbuf_r>
 8007870:	3001      	adds	r0, #1
 8007872:	d1e7      	bne.n	8007844 <_puts_r+0x68>
 8007874:	e7ce      	b.n	8007814 <_puts_r+0x38>
 8007876:	3e01      	subs	r6, #1
 8007878:	e7e4      	b.n	8007844 <_puts_r+0x68>
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	6022      	str	r2, [r4, #0]
 8007880:	220a      	movs	r2, #10
 8007882:	701a      	strb	r2, [r3, #0]
 8007884:	e7ee      	b.n	8007864 <_puts_r+0x88>
	...

08007888 <puts>:
 8007888:	4b02      	ldr	r3, [pc, #8]	@ (8007894 <puts+0xc>)
 800788a:	4601      	mov	r1, r0
 800788c:	6818      	ldr	r0, [r3, #0]
 800788e:	f7ff bfa5 	b.w	80077dc <_puts_r>
 8007892:	bf00      	nop
 8007894:	20000028 	.word	0x20000028

08007898 <__sread>:
 8007898:	b510      	push	{r4, lr}
 800789a:	460c      	mov	r4, r1
 800789c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a0:	f000 f8fc 	bl	8007a9c <_read_r>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	bfab      	itete	ge
 80078a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078aa:	89a3      	ldrhlt	r3, [r4, #12]
 80078ac:	181b      	addge	r3, r3, r0
 80078ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078b2:	bfac      	ite	ge
 80078b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078b6:	81a3      	strhlt	r3, [r4, #12]
 80078b8:	bd10      	pop	{r4, pc}

080078ba <__swrite>:
 80078ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078be:	461f      	mov	r7, r3
 80078c0:	898b      	ldrh	r3, [r1, #12]
 80078c2:	05db      	lsls	r3, r3, #23
 80078c4:	4605      	mov	r5, r0
 80078c6:	460c      	mov	r4, r1
 80078c8:	4616      	mov	r6, r2
 80078ca:	d505      	bpl.n	80078d8 <__swrite+0x1e>
 80078cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d0:	2302      	movs	r3, #2
 80078d2:	2200      	movs	r2, #0
 80078d4:	f000 f8d0 	bl	8007a78 <_lseek_r>
 80078d8:	89a3      	ldrh	r3, [r4, #12]
 80078da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078e2:	81a3      	strh	r3, [r4, #12]
 80078e4:	4632      	mov	r2, r6
 80078e6:	463b      	mov	r3, r7
 80078e8:	4628      	mov	r0, r5
 80078ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ee:	f000 b8e7 	b.w	8007ac0 <_write_r>

080078f2 <__sseek>:
 80078f2:	b510      	push	{r4, lr}
 80078f4:	460c      	mov	r4, r1
 80078f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fa:	f000 f8bd 	bl	8007a78 <_lseek_r>
 80078fe:	1c43      	adds	r3, r0, #1
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	bf15      	itete	ne
 8007904:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007906:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800790a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800790e:	81a3      	strheq	r3, [r4, #12]
 8007910:	bf18      	it	ne
 8007912:	81a3      	strhne	r3, [r4, #12]
 8007914:	bd10      	pop	{r4, pc}

08007916 <__sclose>:
 8007916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800791a:	f000 b89d 	b.w	8007a58 <_close_r>

0800791e <__swbuf_r>:
 800791e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007920:	460e      	mov	r6, r1
 8007922:	4614      	mov	r4, r2
 8007924:	4605      	mov	r5, r0
 8007926:	b118      	cbz	r0, 8007930 <__swbuf_r+0x12>
 8007928:	6a03      	ldr	r3, [r0, #32]
 800792a:	b90b      	cbnz	r3, 8007930 <__swbuf_r+0x12>
 800792c:	f7ff ff0e 	bl	800774c <__sinit>
 8007930:	69a3      	ldr	r3, [r4, #24]
 8007932:	60a3      	str	r3, [r4, #8]
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	071a      	lsls	r2, r3, #28
 8007938:	d501      	bpl.n	800793e <__swbuf_r+0x20>
 800793a:	6923      	ldr	r3, [r4, #16]
 800793c:	b943      	cbnz	r3, 8007950 <__swbuf_r+0x32>
 800793e:	4621      	mov	r1, r4
 8007940:	4628      	mov	r0, r5
 8007942:	f000 f82b 	bl	800799c <__swsetup_r>
 8007946:	b118      	cbz	r0, 8007950 <__swbuf_r+0x32>
 8007948:	f04f 37ff 	mov.w	r7, #4294967295
 800794c:	4638      	mov	r0, r7
 800794e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	6922      	ldr	r2, [r4, #16]
 8007954:	1a98      	subs	r0, r3, r2
 8007956:	6963      	ldr	r3, [r4, #20]
 8007958:	b2f6      	uxtb	r6, r6
 800795a:	4283      	cmp	r3, r0
 800795c:	4637      	mov	r7, r6
 800795e:	dc05      	bgt.n	800796c <__swbuf_r+0x4e>
 8007960:	4621      	mov	r1, r4
 8007962:	4628      	mov	r0, r5
 8007964:	f000 fd38 	bl	80083d8 <_fflush_r>
 8007968:	2800      	cmp	r0, #0
 800796a:	d1ed      	bne.n	8007948 <__swbuf_r+0x2a>
 800796c:	68a3      	ldr	r3, [r4, #8]
 800796e:	3b01      	subs	r3, #1
 8007970:	60a3      	str	r3, [r4, #8]
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	6022      	str	r2, [r4, #0]
 8007978:	701e      	strb	r6, [r3, #0]
 800797a:	6962      	ldr	r2, [r4, #20]
 800797c:	1c43      	adds	r3, r0, #1
 800797e:	429a      	cmp	r2, r3
 8007980:	d004      	beq.n	800798c <__swbuf_r+0x6e>
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	07db      	lsls	r3, r3, #31
 8007986:	d5e1      	bpl.n	800794c <__swbuf_r+0x2e>
 8007988:	2e0a      	cmp	r6, #10
 800798a:	d1df      	bne.n	800794c <__swbuf_r+0x2e>
 800798c:	4621      	mov	r1, r4
 800798e:	4628      	mov	r0, r5
 8007990:	f000 fd22 	bl	80083d8 <_fflush_r>
 8007994:	2800      	cmp	r0, #0
 8007996:	d0d9      	beq.n	800794c <__swbuf_r+0x2e>
 8007998:	e7d6      	b.n	8007948 <__swbuf_r+0x2a>
	...

0800799c <__swsetup_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4b29      	ldr	r3, [pc, #164]	@ (8007a44 <__swsetup_r+0xa8>)
 80079a0:	4605      	mov	r5, r0
 80079a2:	6818      	ldr	r0, [r3, #0]
 80079a4:	460c      	mov	r4, r1
 80079a6:	b118      	cbz	r0, 80079b0 <__swsetup_r+0x14>
 80079a8:	6a03      	ldr	r3, [r0, #32]
 80079aa:	b90b      	cbnz	r3, 80079b0 <__swsetup_r+0x14>
 80079ac:	f7ff fece 	bl	800774c <__sinit>
 80079b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079b4:	0719      	lsls	r1, r3, #28
 80079b6:	d422      	bmi.n	80079fe <__swsetup_r+0x62>
 80079b8:	06da      	lsls	r2, r3, #27
 80079ba:	d407      	bmi.n	80079cc <__swsetup_r+0x30>
 80079bc:	2209      	movs	r2, #9
 80079be:	602a      	str	r2, [r5, #0]
 80079c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079c4:	81a3      	strh	r3, [r4, #12]
 80079c6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ca:	e033      	b.n	8007a34 <__swsetup_r+0x98>
 80079cc:	0758      	lsls	r0, r3, #29
 80079ce:	d512      	bpl.n	80079f6 <__swsetup_r+0x5a>
 80079d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079d2:	b141      	cbz	r1, 80079e6 <__swsetup_r+0x4a>
 80079d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079d8:	4299      	cmp	r1, r3
 80079da:	d002      	beq.n	80079e2 <__swsetup_r+0x46>
 80079dc:	4628      	mov	r0, r5
 80079de:	f000 f8af 	bl	8007b40 <_free_r>
 80079e2:	2300      	movs	r3, #0
 80079e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079ec:	81a3      	strh	r3, [r4, #12]
 80079ee:	2300      	movs	r3, #0
 80079f0:	6063      	str	r3, [r4, #4]
 80079f2:	6923      	ldr	r3, [r4, #16]
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	f043 0308 	orr.w	r3, r3, #8
 80079fc:	81a3      	strh	r3, [r4, #12]
 80079fe:	6923      	ldr	r3, [r4, #16]
 8007a00:	b94b      	cbnz	r3, 8007a16 <__swsetup_r+0x7a>
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a0c:	d003      	beq.n	8007a16 <__swsetup_r+0x7a>
 8007a0e:	4621      	mov	r1, r4
 8007a10:	4628      	mov	r0, r5
 8007a12:	f000 fd2f 	bl	8008474 <__smakebuf_r>
 8007a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a1a:	f013 0201 	ands.w	r2, r3, #1
 8007a1e:	d00a      	beq.n	8007a36 <__swsetup_r+0x9a>
 8007a20:	2200      	movs	r2, #0
 8007a22:	60a2      	str	r2, [r4, #8]
 8007a24:	6962      	ldr	r2, [r4, #20]
 8007a26:	4252      	negs	r2, r2
 8007a28:	61a2      	str	r2, [r4, #24]
 8007a2a:	6922      	ldr	r2, [r4, #16]
 8007a2c:	b942      	cbnz	r2, 8007a40 <__swsetup_r+0xa4>
 8007a2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a32:	d1c5      	bne.n	80079c0 <__swsetup_r+0x24>
 8007a34:	bd38      	pop	{r3, r4, r5, pc}
 8007a36:	0799      	lsls	r1, r3, #30
 8007a38:	bf58      	it	pl
 8007a3a:	6962      	ldrpl	r2, [r4, #20]
 8007a3c:	60a2      	str	r2, [r4, #8]
 8007a3e:	e7f4      	b.n	8007a2a <__swsetup_r+0x8e>
 8007a40:	2000      	movs	r0, #0
 8007a42:	e7f7      	b.n	8007a34 <__swsetup_r+0x98>
 8007a44:	20000028 	.word	0x20000028

08007a48 <memset>:
 8007a48:	4402      	add	r2, r0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d100      	bne.n	8007a52 <memset+0xa>
 8007a50:	4770      	bx	lr
 8007a52:	f803 1b01 	strb.w	r1, [r3], #1
 8007a56:	e7f9      	b.n	8007a4c <memset+0x4>

08007a58 <_close_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	4d06      	ldr	r5, [pc, #24]	@ (8007a74 <_close_r+0x1c>)
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	4604      	mov	r4, r0
 8007a60:	4608      	mov	r0, r1
 8007a62:	602b      	str	r3, [r5, #0]
 8007a64:	f7fc f8a6 	bl	8003bb4 <_close>
 8007a68:	1c43      	adds	r3, r0, #1
 8007a6a:	d102      	bne.n	8007a72 <_close_r+0x1a>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	b103      	cbz	r3, 8007a72 <_close_r+0x1a>
 8007a70:	6023      	str	r3, [r4, #0]
 8007a72:	bd38      	pop	{r3, r4, r5, pc}
 8007a74:	20025d5c 	.word	0x20025d5c

08007a78 <_lseek_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	4d07      	ldr	r5, [pc, #28]	@ (8007a98 <_lseek_r+0x20>)
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	4608      	mov	r0, r1
 8007a80:	4611      	mov	r1, r2
 8007a82:	2200      	movs	r2, #0
 8007a84:	602a      	str	r2, [r5, #0]
 8007a86:	461a      	mov	r2, r3
 8007a88:	f7fc f8bb 	bl	8003c02 <_lseek>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	d102      	bne.n	8007a96 <_lseek_r+0x1e>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	b103      	cbz	r3, 8007a96 <_lseek_r+0x1e>
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	bd38      	pop	{r3, r4, r5, pc}
 8007a98:	20025d5c 	.word	0x20025d5c

08007a9c <_read_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4d07      	ldr	r5, [pc, #28]	@ (8007abc <_read_r+0x20>)
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	4608      	mov	r0, r1
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	602a      	str	r2, [r5, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f7fc f849 	bl	8003b42 <_read>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_read_r+0x1e>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_read_r+0x1e>
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	20025d5c 	.word	0x20025d5c

08007ac0 <_write_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4d07      	ldr	r5, [pc, #28]	@ (8007ae0 <_write_r+0x20>)
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	4608      	mov	r0, r1
 8007ac8:	4611      	mov	r1, r2
 8007aca:	2200      	movs	r2, #0
 8007acc:	602a      	str	r2, [r5, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f7fc f854 	bl	8003b7c <_write>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d102      	bne.n	8007ade <_write_r+0x1e>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	b103      	cbz	r3, 8007ade <_write_r+0x1e>
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	20025d5c 	.word	0x20025d5c

08007ae4 <__errno>:
 8007ae4:	4b01      	ldr	r3, [pc, #4]	@ (8007aec <__errno+0x8>)
 8007ae6:	6818      	ldr	r0, [r3, #0]
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	20000028 	.word	0x20000028

08007af0 <__libc_init_array>:
 8007af0:	b570      	push	{r4, r5, r6, lr}
 8007af2:	4d0d      	ldr	r5, [pc, #52]	@ (8007b28 <__libc_init_array+0x38>)
 8007af4:	4c0d      	ldr	r4, [pc, #52]	@ (8007b2c <__libc_init_array+0x3c>)
 8007af6:	1b64      	subs	r4, r4, r5
 8007af8:	10a4      	asrs	r4, r4, #2
 8007afa:	2600      	movs	r6, #0
 8007afc:	42a6      	cmp	r6, r4
 8007afe:	d109      	bne.n	8007b14 <__libc_init_array+0x24>
 8007b00:	4d0b      	ldr	r5, [pc, #44]	@ (8007b30 <__libc_init_array+0x40>)
 8007b02:	4c0c      	ldr	r4, [pc, #48]	@ (8007b34 <__libc_init_array+0x44>)
 8007b04:	f000 fd24 	bl	8008550 <_init>
 8007b08:	1b64      	subs	r4, r4, r5
 8007b0a:	10a4      	asrs	r4, r4, #2
 8007b0c:	2600      	movs	r6, #0
 8007b0e:	42a6      	cmp	r6, r4
 8007b10:	d105      	bne.n	8007b1e <__libc_init_array+0x2e>
 8007b12:	bd70      	pop	{r4, r5, r6, pc}
 8007b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b18:	4798      	blx	r3
 8007b1a:	3601      	adds	r6, #1
 8007b1c:	e7ee      	b.n	8007afc <__libc_init_array+0xc>
 8007b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b22:	4798      	blx	r3
 8007b24:	3601      	adds	r6, #1
 8007b26:	e7f2      	b.n	8007b0e <__libc_init_array+0x1e>
 8007b28:	080097c4 	.word	0x080097c4
 8007b2c:	080097c4 	.word	0x080097c4
 8007b30:	080097c4 	.word	0x080097c4
 8007b34:	080097c8 	.word	0x080097c8

08007b38 <__retarget_lock_init_recursive>:
 8007b38:	4770      	bx	lr

08007b3a <__retarget_lock_acquire_recursive>:
 8007b3a:	4770      	bx	lr

08007b3c <__retarget_lock_release_recursive>:
 8007b3c:	4770      	bx	lr
	...

08007b40 <_free_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4605      	mov	r5, r0
 8007b44:	2900      	cmp	r1, #0
 8007b46:	d041      	beq.n	8007bcc <_free_r+0x8c>
 8007b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b4c:	1f0c      	subs	r4, r1, #4
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	bfb8      	it	lt
 8007b52:	18e4      	addlt	r4, r4, r3
 8007b54:	f000 f8e0 	bl	8007d18 <__malloc_lock>
 8007b58:	4a1d      	ldr	r2, [pc, #116]	@ (8007bd0 <_free_r+0x90>)
 8007b5a:	6813      	ldr	r3, [r2, #0]
 8007b5c:	b933      	cbnz	r3, 8007b6c <_free_r+0x2c>
 8007b5e:	6063      	str	r3, [r4, #4]
 8007b60:	6014      	str	r4, [r2, #0]
 8007b62:	4628      	mov	r0, r5
 8007b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b68:	f000 b8dc 	b.w	8007d24 <__malloc_unlock>
 8007b6c:	42a3      	cmp	r3, r4
 8007b6e:	d908      	bls.n	8007b82 <_free_r+0x42>
 8007b70:	6820      	ldr	r0, [r4, #0]
 8007b72:	1821      	adds	r1, r4, r0
 8007b74:	428b      	cmp	r3, r1
 8007b76:	bf01      	itttt	eq
 8007b78:	6819      	ldreq	r1, [r3, #0]
 8007b7a:	685b      	ldreq	r3, [r3, #4]
 8007b7c:	1809      	addeq	r1, r1, r0
 8007b7e:	6021      	streq	r1, [r4, #0]
 8007b80:	e7ed      	b.n	8007b5e <_free_r+0x1e>
 8007b82:	461a      	mov	r2, r3
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	b10b      	cbz	r3, 8007b8c <_free_r+0x4c>
 8007b88:	42a3      	cmp	r3, r4
 8007b8a:	d9fa      	bls.n	8007b82 <_free_r+0x42>
 8007b8c:	6811      	ldr	r1, [r2, #0]
 8007b8e:	1850      	adds	r0, r2, r1
 8007b90:	42a0      	cmp	r0, r4
 8007b92:	d10b      	bne.n	8007bac <_free_r+0x6c>
 8007b94:	6820      	ldr	r0, [r4, #0]
 8007b96:	4401      	add	r1, r0
 8007b98:	1850      	adds	r0, r2, r1
 8007b9a:	4283      	cmp	r3, r0
 8007b9c:	6011      	str	r1, [r2, #0]
 8007b9e:	d1e0      	bne.n	8007b62 <_free_r+0x22>
 8007ba0:	6818      	ldr	r0, [r3, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	6053      	str	r3, [r2, #4]
 8007ba6:	4408      	add	r0, r1
 8007ba8:	6010      	str	r0, [r2, #0]
 8007baa:	e7da      	b.n	8007b62 <_free_r+0x22>
 8007bac:	d902      	bls.n	8007bb4 <_free_r+0x74>
 8007bae:	230c      	movs	r3, #12
 8007bb0:	602b      	str	r3, [r5, #0]
 8007bb2:	e7d6      	b.n	8007b62 <_free_r+0x22>
 8007bb4:	6820      	ldr	r0, [r4, #0]
 8007bb6:	1821      	adds	r1, r4, r0
 8007bb8:	428b      	cmp	r3, r1
 8007bba:	bf04      	itt	eq
 8007bbc:	6819      	ldreq	r1, [r3, #0]
 8007bbe:	685b      	ldreq	r3, [r3, #4]
 8007bc0:	6063      	str	r3, [r4, #4]
 8007bc2:	bf04      	itt	eq
 8007bc4:	1809      	addeq	r1, r1, r0
 8007bc6:	6021      	streq	r1, [r4, #0]
 8007bc8:	6054      	str	r4, [r2, #4]
 8007bca:	e7ca      	b.n	8007b62 <_free_r+0x22>
 8007bcc:	bd38      	pop	{r3, r4, r5, pc}
 8007bce:	bf00      	nop
 8007bd0:	20025d68 	.word	0x20025d68

08007bd4 <sbrk_aligned>:
 8007bd4:	b570      	push	{r4, r5, r6, lr}
 8007bd6:	4e0f      	ldr	r6, [pc, #60]	@ (8007c14 <sbrk_aligned+0x40>)
 8007bd8:	460c      	mov	r4, r1
 8007bda:	6831      	ldr	r1, [r6, #0]
 8007bdc:	4605      	mov	r5, r0
 8007bde:	b911      	cbnz	r1, 8007be6 <sbrk_aligned+0x12>
 8007be0:	f000 fca6 	bl	8008530 <_sbrk_r>
 8007be4:	6030      	str	r0, [r6, #0]
 8007be6:	4621      	mov	r1, r4
 8007be8:	4628      	mov	r0, r5
 8007bea:	f000 fca1 	bl	8008530 <_sbrk_r>
 8007bee:	1c43      	adds	r3, r0, #1
 8007bf0:	d103      	bne.n	8007bfa <sbrk_aligned+0x26>
 8007bf2:	f04f 34ff 	mov.w	r4, #4294967295
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	bd70      	pop	{r4, r5, r6, pc}
 8007bfa:	1cc4      	adds	r4, r0, #3
 8007bfc:	f024 0403 	bic.w	r4, r4, #3
 8007c00:	42a0      	cmp	r0, r4
 8007c02:	d0f8      	beq.n	8007bf6 <sbrk_aligned+0x22>
 8007c04:	1a21      	subs	r1, r4, r0
 8007c06:	4628      	mov	r0, r5
 8007c08:	f000 fc92 	bl	8008530 <_sbrk_r>
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	d1f2      	bne.n	8007bf6 <sbrk_aligned+0x22>
 8007c10:	e7ef      	b.n	8007bf2 <sbrk_aligned+0x1e>
 8007c12:	bf00      	nop
 8007c14:	20025d64 	.word	0x20025d64

08007c18 <_malloc_r>:
 8007c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c1c:	1ccd      	adds	r5, r1, #3
 8007c1e:	f025 0503 	bic.w	r5, r5, #3
 8007c22:	3508      	adds	r5, #8
 8007c24:	2d0c      	cmp	r5, #12
 8007c26:	bf38      	it	cc
 8007c28:	250c      	movcc	r5, #12
 8007c2a:	2d00      	cmp	r5, #0
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	db01      	blt.n	8007c34 <_malloc_r+0x1c>
 8007c30:	42a9      	cmp	r1, r5
 8007c32:	d904      	bls.n	8007c3e <_malloc_r+0x26>
 8007c34:	230c      	movs	r3, #12
 8007c36:	6033      	str	r3, [r6, #0]
 8007c38:	2000      	movs	r0, #0
 8007c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d14 <_malloc_r+0xfc>
 8007c42:	f000 f869 	bl	8007d18 <__malloc_lock>
 8007c46:	f8d8 3000 	ldr.w	r3, [r8]
 8007c4a:	461c      	mov	r4, r3
 8007c4c:	bb44      	cbnz	r4, 8007ca0 <_malloc_r+0x88>
 8007c4e:	4629      	mov	r1, r5
 8007c50:	4630      	mov	r0, r6
 8007c52:	f7ff ffbf 	bl	8007bd4 <sbrk_aligned>
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	4604      	mov	r4, r0
 8007c5a:	d158      	bne.n	8007d0e <_malloc_r+0xf6>
 8007c5c:	f8d8 4000 	ldr.w	r4, [r8]
 8007c60:	4627      	mov	r7, r4
 8007c62:	2f00      	cmp	r7, #0
 8007c64:	d143      	bne.n	8007cee <_malloc_r+0xd6>
 8007c66:	2c00      	cmp	r4, #0
 8007c68:	d04b      	beq.n	8007d02 <_malloc_r+0xea>
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	4630      	mov	r0, r6
 8007c70:	eb04 0903 	add.w	r9, r4, r3
 8007c74:	f000 fc5c 	bl	8008530 <_sbrk_r>
 8007c78:	4581      	cmp	r9, r0
 8007c7a:	d142      	bne.n	8007d02 <_malloc_r+0xea>
 8007c7c:	6821      	ldr	r1, [r4, #0]
 8007c7e:	1a6d      	subs	r5, r5, r1
 8007c80:	4629      	mov	r1, r5
 8007c82:	4630      	mov	r0, r6
 8007c84:	f7ff ffa6 	bl	8007bd4 <sbrk_aligned>
 8007c88:	3001      	adds	r0, #1
 8007c8a:	d03a      	beq.n	8007d02 <_malloc_r+0xea>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	442b      	add	r3, r5
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	f8d8 3000 	ldr.w	r3, [r8]
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	bb62      	cbnz	r2, 8007cf4 <_malloc_r+0xdc>
 8007c9a:	f8c8 7000 	str.w	r7, [r8]
 8007c9e:	e00f      	b.n	8007cc0 <_malloc_r+0xa8>
 8007ca0:	6822      	ldr	r2, [r4, #0]
 8007ca2:	1b52      	subs	r2, r2, r5
 8007ca4:	d420      	bmi.n	8007ce8 <_malloc_r+0xd0>
 8007ca6:	2a0b      	cmp	r2, #11
 8007ca8:	d917      	bls.n	8007cda <_malloc_r+0xc2>
 8007caa:	1961      	adds	r1, r4, r5
 8007cac:	42a3      	cmp	r3, r4
 8007cae:	6025      	str	r5, [r4, #0]
 8007cb0:	bf18      	it	ne
 8007cb2:	6059      	strne	r1, [r3, #4]
 8007cb4:	6863      	ldr	r3, [r4, #4]
 8007cb6:	bf08      	it	eq
 8007cb8:	f8c8 1000 	streq.w	r1, [r8]
 8007cbc:	5162      	str	r2, [r4, r5]
 8007cbe:	604b      	str	r3, [r1, #4]
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	f000 f82f 	bl	8007d24 <__malloc_unlock>
 8007cc6:	f104 000b 	add.w	r0, r4, #11
 8007cca:	1d23      	adds	r3, r4, #4
 8007ccc:	f020 0007 	bic.w	r0, r0, #7
 8007cd0:	1ac2      	subs	r2, r0, r3
 8007cd2:	bf1c      	itt	ne
 8007cd4:	1a1b      	subne	r3, r3, r0
 8007cd6:	50a3      	strne	r3, [r4, r2]
 8007cd8:	e7af      	b.n	8007c3a <_malloc_r+0x22>
 8007cda:	6862      	ldr	r2, [r4, #4]
 8007cdc:	42a3      	cmp	r3, r4
 8007cde:	bf0c      	ite	eq
 8007ce0:	f8c8 2000 	streq.w	r2, [r8]
 8007ce4:	605a      	strne	r2, [r3, #4]
 8007ce6:	e7eb      	b.n	8007cc0 <_malloc_r+0xa8>
 8007ce8:	4623      	mov	r3, r4
 8007cea:	6864      	ldr	r4, [r4, #4]
 8007cec:	e7ae      	b.n	8007c4c <_malloc_r+0x34>
 8007cee:	463c      	mov	r4, r7
 8007cf0:	687f      	ldr	r7, [r7, #4]
 8007cf2:	e7b6      	b.n	8007c62 <_malloc_r+0x4a>
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	42a3      	cmp	r3, r4
 8007cfa:	d1fb      	bne.n	8007cf4 <_malloc_r+0xdc>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	6053      	str	r3, [r2, #4]
 8007d00:	e7de      	b.n	8007cc0 <_malloc_r+0xa8>
 8007d02:	230c      	movs	r3, #12
 8007d04:	6033      	str	r3, [r6, #0]
 8007d06:	4630      	mov	r0, r6
 8007d08:	f000 f80c 	bl	8007d24 <__malloc_unlock>
 8007d0c:	e794      	b.n	8007c38 <_malloc_r+0x20>
 8007d0e:	6005      	str	r5, [r0, #0]
 8007d10:	e7d6      	b.n	8007cc0 <_malloc_r+0xa8>
 8007d12:	bf00      	nop
 8007d14:	20025d68 	.word	0x20025d68

08007d18 <__malloc_lock>:
 8007d18:	4801      	ldr	r0, [pc, #4]	@ (8007d20 <__malloc_lock+0x8>)
 8007d1a:	f7ff bf0e 	b.w	8007b3a <__retarget_lock_acquire_recursive>
 8007d1e:	bf00      	nop
 8007d20:	20025d60 	.word	0x20025d60

08007d24 <__malloc_unlock>:
 8007d24:	4801      	ldr	r0, [pc, #4]	@ (8007d2c <__malloc_unlock+0x8>)
 8007d26:	f7ff bf09 	b.w	8007b3c <__retarget_lock_release_recursive>
 8007d2a:	bf00      	nop
 8007d2c:	20025d60 	.word	0x20025d60

08007d30 <__sfputc_r>:
 8007d30:	6893      	ldr	r3, [r2, #8]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	b410      	push	{r4}
 8007d38:	6093      	str	r3, [r2, #8]
 8007d3a:	da08      	bge.n	8007d4e <__sfputc_r+0x1e>
 8007d3c:	6994      	ldr	r4, [r2, #24]
 8007d3e:	42a3      	cmp	r3, r4
 8007d40:	db01      	blt.n	8007d46 <__sfputc_r+0x16>
 8007d42:	290a      	cmp	r1, #10
 8007d44:	d103      	bne.n	8007d4e <__sfputc_r+0x1e>
 8007d46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d4a:	f7ff bde8 	b.w	800791e <__swbuf_r>
 8007d4e:	6813      	ldr	r3, [r2, #0]
 8007d50:	1c58      	adds	r0, r3, #1
 8007d52:	6010      	str	r0, [r2, #0]
 8007d54:	7019      	strb	r1, [r3, #0]
 8007d56:	4608      	mov	r0, r1
 8007d58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <__sfputs_r>:
 8007d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d60:	4606      	mov	r6, r0
 8007d62:	460f      	mov	r7, r1
 8007d64:	4614      	mov	r4, r2
 8007d66:	18d5      	adds	r5, r2, r3
 8007d68:	42ac      	cmp	r4, r5
 8007d6a:	d101      	bne.n	8007d70 <__sfputs_r+0x12>
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	e007      	b.n	8007d80 <__sfputs_r+0x22>
 8007d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d74:	463a      	mov	r2, r7
 8007d76:	4630      	mov	r0, r6
 8007d78:	f7ff ffda 	bl	8007d30 <__sfputc_r>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d1f3      	bne.n	8007d68 <__sfputs_r+0xa>
 8007d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d84 <_vfiprintf_r>:
 8007d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d88:	460d      	mov	r5, r1
 8007d8a:	b09d      	sub	sp, #116	@ 0x74
 8007d8c:	4614      	mov	r4, r2
 8007d8e:	4698      	mov	r8, r3
 8007d90:	4606      	mov	r6, r0
 8007d92:	b118      	cbz	r0, 8007d9c <_vfiprintf_r+0x18>
 8007d94:	6a03      	ldr	r3, [r0, #32]
 8007d96:	b90b      	cbnz	r3, 8007d9c <_vfiprintf_r+0x18>
 8007d98:	f7ff fcd8 	bl	800774c <__sinit>
 8007d9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d9e:	07d9      	lsls	r1, r3, #31
 8007da0:	d405      	bmi.n	8007dae <_vfiprintf_r+0x2a>
 8007da2:	89ab      	ldrh	r3, [r5, #12]
 8007da4:	059a      	lsls	r2, r3, #22
 8007da6:	d402      	bmi.n	8007dae <_vfiprintf_r+0x2a>
 8007da8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007daa:	f7ff fec6 	bl	8007b3a <__retarget_lock_acquire_recursive>
 8007dae:	89ab      	ldrh	r3, [r5, #12]
 8007db0:	071b      	lsls	r3, r3, #28
 8007db2:	d501      	bpl.n	8007db8 <_vfiprintf_r+0x34>
 8007db4:	692b      	ldr	r3, [r5, #16]
 8007db6:	b99b      	cbnz	r3, 8007de0 <_vfiprintf_r+0x5c>
 8007db8:	4629      	mov	r1, r5
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f7ff fdee 	bl	800799c <__swsetup_r>
 8007dc0:	b170      	cbz	r0, 8007de0 <_vfiprintf_r+0x5c>
 8007dc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dc4:	07dc      	lsls	r4, r3, #31
 8007dc6:	d504      	bpl.n	8007dd2 <_vfiprintf_r+0x4e>
 8007dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dcc:	b01d      	add	sp, #116	@ 0x74
 8007dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd2:	89ab      	ldrh	r3, [r5, #12]
 8007dd4:	0598      	lsls	r0, r3, #22
 8007dd6:	d4f7      	bmi.n	8007dc8 <_vfiprintf_r+0x44>
 8007dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dda:	f7ff feaf 	bl	8007b3c <__retarget_lock_release_recursive>
 8007dde:	e7f3      	b.n	8007dc8 <_vfiprintf_r+0x44>
 8007de0:	2300      	movs	r3, #0
 8007de2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007de4:	2320      	movs	r3, #32
 8007de6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dea:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dee:	2330      	movs	r3, #48	@ 0x30
 8007df0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007fa0 <_vfiprintf_r+0x21c>
 8007df4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007df8:	f04f 0901 	mov.w	r9, #1
 8007dfc:	4623      	mov	r3, r4
 8007dfe:	469a      	mov	sl, r3
 8007e00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e04:	b10a      	cbz	r2, 8007e0a <_vfiprintf_r+0x86>
 8007e06:	2a25      	cmp	r2, #37	@ 0x25
 8007e08:	d1f9      	bne.n	8007dfe <_vfiprintf_r+0x7a>
 8007e0a:	ebba 0b04 	subs.w	fp, sl, r4
 8007e0e:	d00b      	beq.n	8007e28 <_vfiprintf_r+0xa4>
 8007e10:	465b      	mov	r3, fp
 8007e12:	4622      	mov	r2, r4
 8007e14:	4629      	mov	r1, r5
 8007e16:	4630      	mov	r0, r6
 8007e18:	f7ff ffa1 	bl	8007d5e <__sfputs_r>
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	f000 80a7 	beq.w	8007f70 <_vfiprintf_r+0x1ec>
 8007e22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e24:	445a      	add	r2, fp
 8007e26:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e28:	f89a 3000 	ldrb.w	r3, [sl]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 809f 	beq.w	8007f70 <_vfiprintf_r+0x1ec>
 8007e32:	2300      	movs	r3, #0
 8007e34:	f04f 32ff 	mov.w	r2, #4294967295
 8007e38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e3c:	f10a 0a01 	add.w	sl, sl, #1
 8007e40:	9304      	str	r3, [sp, #16]
 8007e42:	9307      	str	r3, [sp, #28]
 8007e44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e48:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e4a:	4654      	mov	r4, sl
 8007e4c:	2205      	movs	r2, #5
 8007e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e52:	4853      	ldr	r0, [pc, #332]	@ (8007fa0 <_vfiprintf_r+0x21c>)
 8007e54:	f7f8 f9cc 	bl	80001f0 <memchr>
 8007e58:	9a04      	ldr	r2, [sp, #16]
 8007e5a:	b9d8      	cbnz	r0, 8007e94 <_vfiprintf_r+0x110>
 8007e5c:	06d1      	lsls	r1, r2, #27
 8007e5e:	bf44      	itt	mi
 8007e60:	2320      	movmi	r3, #32
 8007e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e66:	0713      	lsls	r3, r2, #28
 8007e68:	bf44      	itt	mi
 8007e6a:	232b      	movmi	r3, #43	@ 0x2b
 8007e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e70:	f89a 3000 	ldrb.w	r3, [sl]
 8007e74:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e76:	d015      	beq.n	8007ea4 <_vfiprintf_r+0x120>
 8007e78:	9a07      	ldr	r2, [sp, #28]
 8007e7a:	4654      	mov	r4, sl
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	f04f 0c0a 	mov.w	ip, #10
 8007e82:	4621      	mov	r1, r4
 8007e84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e88:	3b30      	subs	r3, #48	@ 0x30
 8007e8a:	2b09      	cmp	r3, #9
 8007e8c:	d94b      	bls.n	8007f26 <_vfiprintf_r+0x1a2>
 8007e8e:	b1b0      	cbz	r0, 8007ebe <_vfiprintf_r+0x13a>
 8007e90:	9207      	str	r2, [sp, #28]
 8007e92:	e014      	b.n	8007ebe <_vfiprintf_r+0x13a>
 8007e94:	eba0 0308 	sub.w	r3, r0, r8
 8007e98:	fa09 f303 	lsl.w	r3, r9, r3
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	9304      	str	r3, [sp, #16]
 8007ea0:	46a2      	mov	sl, r4
 8007ea2:	e7d2      	b.n	8007e4a <_vfiprintf_r+0xc6>
 8007ea4:	9b03      	ldr	r3, [sp, #12]
 8007ea6:	1d19      	adds	r1, r3, #4
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	9103      	str	r1, [sp, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	bfbb      	ittet	lt
 8007eb0:	425b      	neglt	r3, r3
 8007eb2:	f042 0202 	orrlt.w	r2, r2, #2
 8007eb6:	9307      	strge	r3, [sp, #28]
 8007eb8:	9307      	strlt	r3, [sp, #28]
 8007eba:	bfb8      	it	lt
 8007ebc:	9204      	strlt	r2, [sp, #16]
 8007ebe:	7823      	ldrb	r3, [r4, #0]
 8007ec0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ec2:	d10a      	bne.n	8007eda <_vfiprintf_r+0x156>
 8007ec4:	7863      	ldrb	r3, [r4, #1]
 8007ec6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ec8:	d132      	bne.n	8007f30 <_vfiprintf_r+0x1ac>
 8007eca:	9b03      	ldr	r3, [sp, #12]
 8007ecc:	1d1a      	adds	r2, r3, #4
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	9203      	str	r2, [sp, #12]
 8007ed2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ed6:	3402      	adds	r4, #2
 8007ed8:	9305      	str	r3, [sp, #20]
 8007eda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007fb0 <_vfiprintf_r+0x22c>
 8007ede:	7821      	ldrb	r1, [r4, #0]
 8007ee0:	2203      	movs	r2, #3
 8007ee2:	4650      	mov	r0, sl
 8007ee4:	f7f8 f984 	bl	80001f0 <memchr>
 8007ee8:	b138      	cbz	r0, 8007efa <_vfiprintf_r+0x176>
 8007eea:	9b04      	ldr	r3, [sp, #16]
 8007eec:	eba0 000a 	sub.w	r0, r0, sl
 8007ef0:	2240      	movs	r2, #64	@ 0x40
 8007ef2:	4082      	lsls	r2, r0
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	3401      	adds	r4, #1
 8007ef8:	9304      	str	r3, [sp, #16]
 8007efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007efe:	4829      	ldr	r0, [pc, #164]	@ (8007fa4 <_vfiprintf_r+0x220>)
 8007f00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f04:	2206      	movs	r2, #6
 8007f06:	f7f8 f973 	bl	80001f0 <memchr>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d03f      	beq.n	8007f8e <_vfiprintf_r+0x20a>
 8007f0e:	4b26      	ldr	r3, [pc, #152]	@ (8007fa8 <_vfiprintf_r+0x224>)
 8007f10:	bb1b      	cbnz	r3, 8007f5a <_vfiprintf_r+0x1d6>
 8007f12:	9b03      	ldr	r3, [sp, #12]
 8007f14:	3307      	adds	r3, #7
 8007f16:	f023 0307 	bic.w	r3, r3, #7
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	9303      	str	r3, [sp, #12]
 8007f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f20:	443b      	add	r3, r7
 8007f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f24:	e76a      	b.n	8007dfc <_vfiprintf_r+0x78>
 8007f26:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	e7a8      	b.n	8007e82 <_vfiprintf_r+0xfe>
 8007f30:	2300      	movs	r3, #0
 8007f32:	3401      	adds	r4, #1
 8007f34:	9305      	str	r3, [sp, #20]
 8007f36:	4619      	mov	r1, r3
 8007f38:	f04f 0c0a 	mov.w	ip, #10
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f42:	3a30      	subs	r2, #48	@ 0x30
 8007f44:	2a09      	cmp	r2, #9
 8007f46:	d903      	bls.n	8007f50 <_vfiprintf_r+0x1cc>
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d0c6      	beq.n	8007eda <_vfiprintf_r+0x156>
 8007f4c:	9105      	str	r1, [sp, #20]
 8007f4e:	e7c4      	b.n	8007eda <_vfiprintf_r+0x156>
 8007f50:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f54:	4604      	mov	r4, r0
 8007f56:	2301      	movs	r3, #1
 8007f58:	e7f0      	b.n	8007f3c <_vfiprintf_r+0x1b8>
 8007f5a:	ab03      	add	r3, sp, #12
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	462a      	mov	r2, r5
 8007f60:	4b12      	ldr	r3, [pc, #72]	@ (8007fac <_vfiprintf_r+0x228>)
 8007f62:	a904      	add	r1, sp, #16
 8007f64:	4630      	mov	r0, r6
 8007f66:	f3af 8000 	nop.w
 8007f6a:	4607      	mov	r7, r0
 8007f6c:	1c78      	adds	r0, r7, #1
 8007f6e:	d1d6      	bne.n	8007f1e <_vfiprintf_r+0x19a>
 8007f70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f72:	07d9      	lsls	r1, r3, #31
 8007f74:	d405      	bmi.n	8007f82 <_vfiprintf_r+0x1fe>
 8007f76:	89ab      	ldrh	r3, [r5, #12]
 8007f78:	059a      	lsls	r2, r3, #22
 8007f7a:	d402      	bmi.n	8007f82 <_vfiprintf_r+0x1fe>
 8007f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f7e:	f7ff fddd 	bl	8007b3c <__retarget_lock_release_recursive>
 8007f82:	89ab      	ldrh	r3, [r5, #12]
 8007f84:	065b      	lsls	r3, r3, #25
 8007f86:	f53f af1f 	bmi.w	8007dc8 <_vfiprintf_r+0x44>
 8007f8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f8c:	e71e      	b.n	8007dcc <_vfiprintf_r+0x48>
 8007f8e:	ab03      	add	r3, sp, #12
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	462a      	mov	r2, r5
 8007f94:	4b05      	ldr	r3, [pc, #20]	@ (8007fac <_vfiprintf_r+0x228>)
 8007f96:	a904      	add	r1, sp, #16
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f000 f879 	bl	8008090 <_printf_i>
 8007f9e:	e7e4      	b.n	8007f6a <_vfiprintf_r+0x1e6>
 8007fa0:	08009788 	.word	0x08009788
 8007fa4:	08009792 	.word	0x08009792
 8007fa8:	00000000 	.word	0x00000000
 8007fac:	08007d5f 	.word	0x08007d5f
 8007fb0:	0800978e 	.word	0x0800978e

08007fb4 <_printf_common>:
 8007fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb8:	4616      	mov	r6, r2
 8007fba:	4698      	mov	r8, r3
 8007fbc:	688a      	ldr	r2, [r1, #8]
 8007fbe:	690b      	ldr	r3, [r1, #16]
 8007fc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	bfb8      	it	lt
 8007fc8:	4613      	movlt	r3, r2
 8007fca:	6033      	str	r3, [r6, #0]
 8007fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fd0:	4607      	mov	r7, r0
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	b10a      	cbz	r2, 8007fda <_printf_common+0x26>
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	6033      	str	r3, [r6, #0]
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	0699      	lsls	r1, r3, #26
 8007fde:	bf42      	ittt	mi
 8007fe0:	6833      	ldrmi	r3, [r6, #0]
 8007fe2:	3302      	addmi	r3, #2
 8007fe4:	6033      	strmi	r3, [r6, #0]
 8007fe6:	6825      	ldr	r5, [r4, #0]
 8007fe8:	f015 0506 	ands.w	r5, r5, #6
 8007fec:	d106      	bne.n	8007ffc <_printf_common+0x48>
 8007fee:	f104 0a19 	add.w	sl, r4, #25
 8007ff2:	68e3      	ldr	r3, [r4, #12]
 8007ff4:	6832      	ldr	r2, [r6, #0]
 8007ff6:	1a9b      	subs	r3, r3, r2
 8007ff8:	42ab      	cmp	r3, r5
 8007ffa:	dc26      	bgt.n	800804a <_printf_common+0x96>
 8007ffc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008000:	6822      	ldr	r2, [r4, #0]
 8008002:	3b00      	subs	r3, #0
 8008004:	bf18      	it	ne
 8008006:	2301      	movne	r3, #1
 8008008:	0692      	lsls	r2, r2, #26
 800800a:	d42b      	bmi.n	8008064 <_printf_common+0xb0>
 800800c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008010:	4641      	mov	r1, r8
 8008012:	4638      	mov	r0, r7
 8008014:	47c8      	blx	r9
 8008016:	3001      	adds	r0, #1
 8008018:	d01e      	beq.n	8008058 <_printf_common+0xa4>
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	6922      	ldr	r2, [r4, #16]
 800801e:	f003 0306 	and.w	r3, r3, #6
 8008022:	2b04      	cmp	r3, #4
 8008024:	bf02      	ittt	eq
 8008026:	68e5      	ldreq	r5, [r4, #12]
 8008028:	6833      	ldreq	r3, [r6, #0]
 800802a:	1aed      	subeq	r5, r5, r3
 800802c:	68a3      	ldr	r3, [r4, #8]
 800802e:	bf0c      	ite	eq
 8008030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008034:	2500      	movne	r5, #0
 8008036:	4293      	cmp	r3, r2
 8008038:	bfc4      	itt	gt
 800803a:	1a9b      	subgt	r3, r3, r2
 800803c:	18ed      	addgt	r5, r5, r3
 800803e:	2600      	movs	r6, #0
 8008040:	341a      	adds	r4, #26
 8008042:	42b5      	cmp	r5, r6
 8008044:	d11a      	bne.n	800807c <_printf_common+0xc8>
 8008046:	2000      	movs	r0, #0
 8008048:	e008      	b.n	800805c <_printf_common+0xa8>
 800804a:	2301      	movs	r3, #1
 800804c:	4652      	mov	r2, sl
 800804e:	4641      	mov	r1, r8
 8008050:	4638      	mov	r0, r7
 8008052:	47c8      	blx	r9
 8008054:	3001      	adds	r0, #1
 8008056:	d103      	bne.n	8008060 <_printf_common+0xac>
 8008058:	f04f 30ff 	mov.w	r0, #4294967295
 800805c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008060:	3501      	adds	r5, #1
 8008062:	e7c6      	b.n	8007ff2 <_printf_common+0x3e>
 8008064:	18e1      	adds	r1, r4, r3
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	2030      	movs	r0, #48	@ 0x30
 800806a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800806e:	4422      	add	r2, r4
 8008070:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008074:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008078:	3302      	adds	r3, #2
 800807a:	e7c7      	b.n	800800c <_printf_common+0x58>
 800807c:	2301      	movs	r3, #1
 800807e:	4622      	mov	r2, r4
 8008080:	4641      	mov	r1, r8
 8008082:	4638      	mov	r0, r7
 8008084:	47c8      	blx	r9
 8008086:	3001      	adds	r0, #1
 8008088:	d0e6      	beq.n	8008058 <_printf_common+0xa4>
 800808a:	3601      	adds	r6, #1
 800808c:	e7d9      	b.n	8008042 <_printf_common+0x8e>
	...

08008090 <_printf_i>:
 8008090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008094:	7e0f      	ldrb	r7, [r1, #24]
 8008096:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008098:	2f78      	cmp	r7, #120	@ 0x78
 800809a:	4691      	mov	r9, r2
 800809c:	4680      	mov	r8, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	469a      	mov	sl, r3
 80080a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080a6:	d807      	bhi.n	80080b8 <_printf_i+0x28>
 80080a8:	2f62      	cmp	r7, #98	@ 0x62
 80080aa:	d80a      	bhi.n	80080c2 <_printf_i+0x32>
 80080ac:	2f00      	cmp	r7, #0
 80080ae:	f000 80d2 	beq.w	8008256 <_printf_i+0x1c6>
 80080b2:	2f58      	cmp	r7, #88	@ 0x58
 80080b4:	f000 80b9 	beq.w	800822a <_printf_i+0x19a>
 80080b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080c0:	e03a      	b.n	8008138 <_printf_i+0xa8>
 80080c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080c6:	2b15      	cmp	r3, #21
 80080c8:	d8f6      	bhi.n	80080b8 <_printf_i+0x28>
 80080ca:	a101      	add	r1, pc, #4	@ (adr r1, 80080d0 <_printf_i+0x40>)
 80080cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080d0:	08008129 	.word	0x08008129
 80080d4:	0800813d 	.word	0x0800813d
 80080d8:	080080b9 	.word	0x080080b9
 80080dc:	080080b9 	.word	0x080080b9
 80080e0:	080080b9 	.word	0x080080b9
 80080e4:	080080b9 	.word	0x080080b9
 80080e8:	0800813d 	.word	0x0800813d
 80080ec:	080080b9 	.word	0x080080b9
 80080f0:	080080b9 	.word	0x080080b9
 80080f4:	080080b9 	.word	0x080080b9
 80080f8:	080080b9 	.word	0x080080b9
 80080fc:	0800823d 	.word	0x0800823d
 8008100:	08008167 	.word	0x08008167
 8008104:	080081f7 	.word	0x080081f7
 8008108:	080080b9 	.word	0x080080b9
 800810c:	080080b9 	.word	0x080080b9
 8008110:	0800825f 	.word	0x0800825f
 8008114:	080080b9 	.word	0x080080b9
 8008118:	08008167 	.word	0x08008167
 800811c:	080080b9 	.word	0x080080b9
 8008120:	080080b9 	.word	0x080080b9
 8008124:	080081ff 	.word	0x080081ff
 8008128:	6833      	ldr	r3, [r6, #0]
 800812a:	1d1a      	adds	r2, r3, #4
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6032      	str	r2, [r6, #0]
 8008130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008134:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008138:	2301      	movs	r3, #1
 800813a:	e09d      	b.n	8008278 <_printf_i+0x1e8>
 800813c:	6833      	ldr	r3, [r6, #0]
 800813e:	6820      	ldr	r0, [r4, #0]
 8008140:	1d19      	adds	r1, r3, #4
 8008142:	6031      	str	r1, [r6, #0]
 8008144:	0606      	lsls	r6, r0, #24
 8008146:	d501      	bpl.n	800814c <_printf_i+0xbc>
 8008148:	681d      	ldr	r5, [r3, #0]
 800814a:	e003      	b.n	8008154 <_printf_i+0xc4>
 800814c:	0645      	lsls	r5, r0, #25
 800814e:	d5fb      	bpl.n	8008148 <_printf_i+0xb8>
 8008150:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008154:	2d00      	cmp	r5, #0
 8008156:	da03      	bge.n	8008160 <_printf_i+0xd0>
 8008158:	232d      	movs	r3, #45	@ 0x2d
 800815a:	426d      	negs	r5, r5
 800815c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008160:	4859      	ldr	r0, [pc, #356]	@ (80082c8 <_printf_i+0x238>)
 8008162:	230a      	movs	r3, #10
 8008164:	e011      	b.n	800818a <_printf_i+0xfa>
 8008166:	6821      	ldr	r1, [r4, #0]
 8008168:	6833      	ldr	r3, [r6, #0]
 800816a:	0608      	lsls	r0, r1, #24
 800816c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008170:	d402      	bmi.n	8008178 <_printf_i+0xe8>
 8008172:	0649      	lsls	r1, r1, #25
 8008174:	bf48      	it	mi
 8008176:	b2ad      	uxthmi	r5, r5
 8008178:	2f6f      	cmp	r7, #111	@ 0x6f
 800817a:	4853      	ldr	r0, [pc, #332]	@ (80082c8 <_printf_i+0x238>)
 800817c:	6033      	str	r3, [r6, #0]
 800817e:	bf14      	ite	ne
 8008180:	230a      	movne	r3, #10
 8008182:	2308      	moveq	r3, #8
 8008184:	2100      	movs	r1, #0
 8008186:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800818a:	6866      	ldr	r6, [r4, #4]
 800818c:	60a6      	str	r6, [r4, #8]
 800818e:	2e00      	cmp	r6, #0
 8008190:	bfa2      	ittt	ge
 8008192:	6821      	ldrge	r1, [r4, #0]
 8008194:	f021 0104 	bicge.w	r1, r1, #4
 8008198:	6021      	strge	r1, [r4, #0]
 800819a:	b90d      	cbnz	r5, 80081a0 <_printf_i+0x110>
 800819c:	2e00      	cmp	r6, #0
 800819e:	d04b      	beq.n	8008238 <_printf_i+0x1a8>
 80081a0:	4616      	mov	r6, r2
 80081a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80081a6:	fb03 5711 	mls	r7, r3, r1, r5
 80081aa:	5dc7      	ldrb	r7, [r0, r7]
 80081ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081b0:	462f      	mov	r7, r5
 80081b2:	42bb      	cmp	r3, r7
 80081b4:	460d      	mov	r5, r1
 80081b6:	d9f4      	bls.n	80081a2 <_printf_i+0x112>
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d10b      	bne.n	80081d4 <_printf_i+0x144>
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	07df      	lsls	r7, r3, #31
 80081c0:	d508      	bpl.n	80081d4 <_printf_i+0x144>
 80081c2:	6923      	ldr	r3, [r4, #16]
 80081c4:	6861      	ldr	r1, [r4, #4]
 80081c6:	4299      	cmp	r1, r3
 80081c8:	bfde      	ittt	le
 80081ca:	2330      	movle	r3, #48	@ 0x30
 80081cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081d4:	1b92      	subs	r2, r2, r6
 80081d6:	6122      	str	r2, [r4, #16]
 80081d8:	f8cd a000 	str.w	sl, [sp]
 80081dc:	464b      	mov	r3, r9
 80081de:	aa03      	add	r2, sp, #12
 80081e0:	4621      	mov	r1, r4
 80081e2:	4640      	mov	r0, r8
 80081e4:	f7ff fee6 	bl	8007fb4 <_printf_common>
 80081e8:	3001      	adds	r0, #1
 80081ea:	d14a      	bne.n	8008282 <_printf_i+0x1f2>
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295
 80081f0:	b004      	add	sp, #16
 80081f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	f043 0320 	orr.w	r3, r3, #32
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	4833      	ldr	r0, [pc, #204]	@ (80082cc <_printf_i+0x23c>)
 8008200:	2778      	movs	r7, #120	@ 0x78
 8008202:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	6831      	ldr	r1, [r6, #0]
 800820a:	061f      	lsls	r7, r3, #24
 800820c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008210:	d402      	bmi.n	8008218 <_printf_i+0x188>
 8008212:	065f      	lsls	r7, r3, #25
 8008214:	bf48      	it	mi
 8008216:	b2ad      	uxthmi	r5, r5
 8008218:	6031      	str	r1, [r6, #0]
 800821a:	07d9      	lsls	r1, r3, #31
 800821c:	bf44      	itt	mi
 800821e:	f043 0320 	orrmi.w	r3, r3, #32
 8008222:	6023      	strmi	r3, [r4, #0]
 8008224:	b11d      	cbz	r5, 800822e <_printf_i+0x19e>
 8008226:	2310      	movs	r3, #16
 8008228:	e7ac      	b.n	8008184 <_printf_i+0xf4>
 800822a:	4827      	ldr	r0, [pc, #156]	@ (80082c8 <_printf_i+0x238>)
 800822c:	e7e9      	b.n	8008202 <_printf_i+0x172>
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	f023 0320 	bic.w	r3, r3, #32
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	e7f6      	b.n	8008226 <_printf_i+0x196>
 8008238:	4616      	mov	r6, r2
 800823a:	e7bd      	b.n	80081b8 <_printf_i+0x128>
 800823c:	6833      	ldr	r3, [r6, #0]
 800823e:	6825      	ldr	r5, [r4, #0]
 8008240:	6961      	ldr	r1, [r4, #20]
 8008242:	1d18      	adds	r0, r3, #4
 8008244:	6030      	str	r0, [r6, #0]
 8008246:	062e      	lsls	r6, r5, #24
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	d501      	bpl.n	8008250 <_printf_i+0x1c0>
 800824c:	6019      	str	r1, [r3, #0]
 800824e:	e002      	b.n	8008256 <_printf_i+0x1c6>
 8008250:	0668      	lsls	r0, r5, #25
 8008252:	d5fb      	bpl.n	800824c <_printf_i+0x1bc>
 8008254:	8019      	strh	r1, [r3, #0]
 8008256:	2300      	movs	r3, #0
 8008258:	6123      	str	r3, [r4, #16]
 800825a:	4616      	mov	r6, r2
 800825c:	e7bc      	b.n	80081d8 <_printf_i+0x148>
 800825e:	6833      	ldr	r3, [r6, #0]
 8008260:	1d1a      	adds	r2, r3, #4
 8008262:	6032      	str	r2, [r6, #0]
 8008264:	681e      	ldr	r6, [r3, #0]
 8008266:	6862      	ldr	r2, [r4, #4]
 8008268:	2100      	movs	r1, #0
 800826a:	4630      	mov	r0, r6
 800826c:	f7f7 ffc0 	bl	80001f0 <memchr>
 8008270:	b108      	cbz	r0, 8008276 <_printf_i+0x1e6>
 8008272:	1b80      	subs	r0, r0, r6
 8008274:	6060      	str	r0, [r4, #4]
 8008276:	6863      	ldr	r3, [r4, #4]
 8008278:	6123      	str	r3, [r4, #16]
 800827a:	2300      	movs	r3, #0
 800827c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008280:	e7aa      	b.n	80081d8 <_printf_i+0x148>
 8008282:	6923      	ldr	r3, [r4, #16]
 8008284:	4632      	mov	r2, r6
 8008286:	4649      	mov	r1, r9
 8008288:	4640      	mov	r0, r8
 800828a:	47d0      	blx	sl
 800828c:	3001      	adds	r0, #1
 800828e:	d0ad      	beq.n	80081ec <_printf_i+0x15c>
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	079b      	lsls	r3, r3, #30
 8008294:	d413      	bmi.n	80082be <_printf_i+0x22e>
 8008296:	68e0      	ldr	r0, [r4, #12]
 8008298:	9b03      	ldr	r3, [sp, #12]
 800829a:	4298      	cmp	r0, r3
 800829c:	bfb8      	it	lt
 800829e:	4618      	movlt	r0, r3
 80082a0:	e7a6      	b.n	80081f0 <_printf_i+0x160>
 80082a2:	2301      	movs	r3, #1
 80082a4:	4632      	mov	r2, r6
 80082a6:	4649      	mov	r1, r9
 80082a8:	4640      	mov	r0, r8
 80082aa:	47d0      	blx	sl
 80082ac:	3001      	adds	r0, #1
 80082ae:	d09d      	beq.n	80081ec <_printf_i+0x15c>
 80082b0:	3501      	adds	r5, #1
 80082b2:	68e3      	ldr	r3, [r4, #12]
 80082b4:	9903      	ldr	r1, [sp, #12]
 80082b6:	1a5b      	subs	r3, r3, r1
 80082b8:	42ab      	cmp	r3, r5
 80082ba:	dcf2      	bgt.n	80082a2 <_printf_i+0x212>
 80082bc:	e7eb      	b.n	8008296 <_printf_i+0x206>
 80082be:	2500      	movs	r5, #0
 80082c0:	f104 0619 	add.w	r6, r4, #25
 80082c4:	e7f5      	b.n	80082b2 <_printf_i+0x222>
 80082c6:	bf00      	nop
 80082c8:	08009799 	.word	0x08009799
 80082cc:	080097aa 	.word	0x080097aa

080082d0 <__sflush_r>:
 80082d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d8:	0716      	lsls	r6, r2, #28
 80082da:	4605      	mov	r5, r0
 80082dc:	460c      	mov	r4, r1
 80082de:	d454      	bmi.n	800838a <__sflush_r+0xba>
 80082e0:	684b      	ldr	r3, [r1, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	dc02      	bgt.n	80082ec <__sflush_r+0x1c>
 80082e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	dd48      	ble.n	800837e <__sflush_r+0xae>
 80082ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082ee:	2e00      	cmp	r6, #0
 80082f0:	d045      	beq.n	800837e <__sflush_r+0xae>
 80082f2:	2300      	movs	r3, #0
 80082f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082f8:	682f      	ldr	r7, [r5, #0]
 80082fa:	6a21      	ldr	r1, [r4, #32]
 80082fc:	602b      	str	r3, [r5, #0]
 80082fe:	d030      	beq.n	8008362 <__sflush_r+0x92>
 8008300:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008302:	89a3      	ldrh	r3, [r4, #12]
 8008304:	0759      	lsls	r1, r3, #29
 8008306:	d505      	bpl.n	8008314 <__sflush_r+0x44>
 8008308:	6863      	ldr	r3, [r4, #4]
 800830a:	1ad2      	subs	r2, r2, r3
 800830c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800830e:	b10b      	cbz	r3, 8008314 <__sflush_r+0x44>
 8008310:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008312:	1ad2      	subs	r2, r2, r3
 8008314:	2300      	movs	r3, #0
 8008316:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008318:	6a21      	ldr	r1, [r4, #32]
 800831a:	4628      	mov	r0, r5
 800831c:	47b0      	blx	r6
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	d106      	bne.n	8008332 <__sflush_r+0x62>
 8008324:	6829      	ldr	r1, [r5, #0]
 8008326:	291d      	cmp	r1, #29
 8008328:	d82b      	bhi.n	8008382 <__sflush_r+0xb2>
 800832a:	4a2a      	ldr	r2, [pc, #168]	@ (80083d4 <__sflush_r+0x104>)
 800832c:	410a      	asrs	r2, r1
 800832e:	07d6      	lsls	r6, r2, #31
 8008330:	d427      	bmi.n	8008382 <__sflush_r+0xb2>
 8008332:	2200      	movs	r2, #0
 8008334:	6062      	str	r2, [r4, #4]
 8008336:	04d9      	lsls	r1, r3, #19
 8008338:	6922      	ldr	r2, [r4, #16]
 800833a:	6022      	str	r2, [r4, #0]
 800833c:	d504      	bpl.n	8008348 <__sflush_r+0x78>
 800833e:	1c42      	adds	r2, r0, #1
 8008340:	d101      	bne.n	8008346 <__sflush_r+0x76>
 8008342:	682b      	ldr	r3, [r5, #0]
 8008344:	b903      	cbnz	r3, 8008348 <__sflush_r+0x78>
 8008346:	6560      	str	r0, [r4, #84]	@ 0x54
 8008348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800834a:	602f      	str	r7, [r5, #0]
 800834c:	b1b9      	cbz	r1, 800837e <__sflush_r+0xae>
 800834e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008352:	4299      	cmp	r1, r3
 8008354:	d002      	beq.n	800835c <__sflush_r+0x8c>
 8008356:	4628      	mov	r0, r5
 8008358:	f7ff fbf2 	bl	8007b40 <_free_r>
 800835c:	2300      	movs	r3, #0
 800835e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008360:	e00d      	b.n	800837e <__sflush_r+0xae>
 8008362:	2301      	movs	r3, #1
 8008364:	4628      	mov	r0, r5
 8008366:	47b0      	blx	r6
 8008368:	4602      	mov	r2, r0
 800836a:	1c50      	adds	r0, r2, #1
 800836c:	d1c9      	bne.n	8008302 <__sflush_r+0x32>
 800836e:	682b      	ldr	r3, [r5, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0c6      	beq.n	8008302 <__sflush_r+0x32>
 8008374:	2b1d      	cmp	r3, #29
 8008376:	d001      	beq.n	800837c <__sflush_r+0xac>
 8008378:	2b16      	cmp	r3, #22
 800837a:	d11e      	bne.n	80083ba <__sflush_r+0xea>
 800837c:	602f      	str	r7, [r5, #0]
 800837e:	2000      	movs	r0, #0
 8008380:	e022      	b.n	80083c8 <__sflush_r+0xf8>
 8008382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008386:	b21b      	sxth	r3, r3
 8008388:	e01b      	b.n	80083c2 <__sflush_r+0xf2>
 800838a:	690f      	ldr	r7, [r1, #16]
 800838c:	2f00      	cmp	r7, #0
 800838e:	d0f6      	beq.n	800837e <__sflush_r+0xae>
 8008390:	0793      	lsls	r3, r2, #30
 8008392:	680e      	ldr	r6, [r1, #0]
 8008394:	bf08      	it	eq
 8008396:	694b      	ldreq	r3, [r1, #20]
 8008398:	600f      	str	r7, [r1, #0]
 800839a:	bf18      	it	ne
 800839c:	2300      	movne	r3, #0
 800839e:	eba6 0807 	sub.w	r8, r6, r7
 80083a2:	608b      	str	r3, [r1, #8]
 80083a4:	f1b8 0f00 	cmp.w	r8, #0
 80083a8:	dde9      	ble.n	800837e <__sflush_r+0xae>
 80083aa:	6a21      	ldr	r1, [r4, #32]
 80083ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80083ae:	4643      	mov	r3, r8
 80083b0:	463a      	mov	r2, r7
 80083b2:	4628      	mov	r0, r5
 80083b4:	47b0      	blx	r6
 80083b6:	2800      	cmp	r0, #0
 80083b8:	dc08      	bgt.n	80083cc <__sflush_r+0xfc>
 80083ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083c2:	81a3      	strh	r3, [r4, #12]
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295
 80083c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083cc:	4407      	add	r7, r0
 80083ce:	eba8 0800 	sub.w	r8, r8, r0
 80083d2:	e7e7      	b.n	80083a4 <__sflush_r+0xd4>
 80083d4:	dfbffffe 	.word	0xdfbffffe

080083d8 <_fflush_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	690b      	ldr	r3, [r1, #16]
 80083dc:	4605      	mov	r5, r0
 80083de:	460c      	mov	r4, r1
 80083e0:	b913      	cbnz	r3, 80083e8 <_fflush_r+0x10>
 80083e2:	2500      	movs	r5, #0
 80083e4:	4628      	mov	r0, r5
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	b118      	cbz	r0, 80083f2 <_fflush_r+0x1a>
 80083ea:	6a03      	ldr	r3, [r0, #32]
 80083ec:	b90b      	cbnz	r3, 80083f2 <_fflush_r+0x1a>
 80083ee:	f7ff f9ad 	bl	800774c <__sinit>
 80083f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d0f3      	beq.n	80083e2 <_fflush_r+0xa>
 80083fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083fc:	07d0      	lsls	r0, r2, #31
 80083fe:	d404      	bmi.n	800840a <_fflush_r+0x32>
 8008400:	0599      	lsls	r1, r3, #22
 8008402:	d402      	bmi.n	800840a <_fflush_r+0x32>
 8008404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008406:	f7ff fb98 	bl	8007b3a <__retarget_lock_acquire_recursive>
 800840a:	4628      	mov	r0, r5
 800840c:	4621      	mov	r1, r4
 800840e:	f7ff ff5f 	bl	80082d0 <__sflush_r>
 8008412:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008414:	07da      	lsls	r2, r3, #31
 8008416:	4605      	mov	r5, r0
 8008418:	d4e4      	bmi.n	80083e4 <_fflush_r+0xc>
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	059b      	lsls	r3, r3, #22
 800841e:	d4e1      	bmi.n	80083e4 <_fflush_r+0xc>
 8008420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008422:	f7ff fb8b 	bl	8007b3c <__retarget_lock_release_recursive>
 8008426:	e7dd      	b.n	80083e4 <_fflush_r+0xc>

08008428 <__swhatbuf_r>:
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	460c      	mov	r4, r1
 800842c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008430:	2900      	cmp	r1, #0
 8008432:	b096      	sub	sp, #88	@ 0x58
 8008434:	4615      	mov	r5, r2
 8008436:	461e      	mov	r6, r3
 8008438:	da0d      	bge.n	8008456 <__swhatbuf_r+0x2e>
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008440:	f04f 0100 	mov.w	r1, #0
 8008444:	bf14      	ite	ne
 8008446:	2340      	movne	r3, #64	@ 0x40
 8008448:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800844c:	2000      	movs	r0, #0
 800844e:	6031      	str	r1, [r6, #0]
 8008450:	602b      	str	r3, [r5, #0]
 8008452:	b016      	add	sp, #88	@ 0x58
 8008454:	bd70      	pop	{r4, r5, r6, pc}
 8008456:	466a      	mov	r2, sp
 8008458:	f000 f848 	bl	80084ec <_fstat_r>
 800845c:	2800      	cmp	r0, #0
 800845e:	dbec      	blt.n	800843a <__swhatbuf_r+0x12>
 8008460:	9901      	ldr	r1, [sp, #4]
 8008462:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008466:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800846a:	4259      	negs	r1, r3
 800846c:	4159      	adcs	r1, r3
 800846e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008472:	e7eb      	b.n	800844c <__swhatbuf_r+0x24>

08008474 <__smakebuf_r>:
 8008474:	898b      	ldrh	r3, [r1, #12]
 8008476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008478:	079d      	lsls	r5, r3, #30
 800847a:	4606      	mov	r6, r0
 800847c:	460c      	mov	r4, r1
 800847e:	d507      	bpl.n	8008490 <__smakebuf_r+0x1c>
 8008480:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	6123      	str	r3, [r4, #16]
 8008488:	2301      	movs	r3, #1
 800848a:	6163      	str	r3, [r4, #20]
 800848c:	b003      	add	sp, #12
 800848e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008490:	ab01      	add	r3, sp, #4
 8008492:	466a      	mov	r2, sp
 8008494:	f7ff ffc8 	bl	8008428 <__swhatbuf_r>
 8008498:	9f00      	ldr	r7, [sp, #0]
 800849a:	4605      	mov	r5, r0
 800849c:	4639      	mov	r1, r7
 800849e:	4630      	mov	r0, r6
 80084a0:	f7ff fbba 	bl	8007c18 <_malloc_r>
 80084a4:	b948      	cbnz	r0, 80084ba <__smakebuf_r+0x46>
 80084a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084aa:	059a      	lsls	r2, r3, #22
 80084ac:	d4ee      	bmi.n	800848c <__smakebuf_r+0x18>
 80084ae:	f023 0303 	bic.w	r3, r3, #3
 80084b2:	f043 0302 	orr.w	r3, r3, #2
 80084b6:	81a3      	strh	r3, [r4, #12]
 80084b8:	e7e2      	b.n	8008480 <__smakebuf_r+0xc>
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	6020      	str	r0, [r4, #0]
 80084be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084c2:	81a3      	strh	r3, [r4, #12]
 80084c4:	9b01      	ldr	r3, [sp, #4]
 80084c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80084ca:	b15b      	cbz	r3, 80084e4 <__smakebuf_r+0x70>
 80084cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084d0:	4630      	mov	r0, r6
 80084d2:	f000 f81d 	bl	8008510 <_isatty_r>
 80084d6:	b128      	cbz	r0, 80084e4 <__smakebuf_r+0x70>
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	f023 0303 	bic.w	r3, r3, #3
 80084de:	f043 0301 	orr.w	r3, r3, #1
 80084e2:	81a3      	strh	r3, [r4, #12]
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	431d      	orrs	r5, r3
 80084e8:	81a5      	strh	r5, [r4, #12]
 80084ea:	e7cf      	b.n	800848c <__smakebuf_r+0x18>

080084ec <_fstat_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4d07      	ldr	r5, [pc, #28]	@ (800850c <_fstat_r+0x20>)
 80084f0:	2300      	movs	r3, #0
 80084f2:	4604      	mov	r4, r0
 80084f4:	4608      	mov	r0, r1
 80084f6:	4611      	mov	r1, r2
 80084f8:	602b      	str	r3, [r5, #0]
 80084fa:	f7fb fb67 	bl	8003bcc <_fstat>
 80084fe:	1c43      	adds	r3, r0, #1
 8008500:	d102      	bne.n	8008508 <_fstat_r+0x1c>
 8008502:	682b      	ldr	r3, [r5, #0]
 8008504:	b103      	cbz	r3, 8008508 <_fstat_r+0x1c>
 8008506:	6023      	str	r3, [r4, #0]
 8008508:	bd38      	pop	{r3, r4, r5, pc}
 800850a:	bf00      	nop
 800850c:	20025d5c 	.word	0x20025d5c

08008510 <_isatty_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4d06      	ldr	r5, [pc, #24]	@ (800852c <_isatty_r+0x1c>)
 8008514:	2300      	movs	r3, #0
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	602b      	str	r3, [r5, #0]
 800851c:	f7fb fb66 	bl	8003bec <_isatty>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d102      	bne.n	800852a <_isatty_r+0x1a>
 8008524:	682b      	ldr	r3, [r5, #0]
 8008526:	b103      	cbz	r3, 800852a <_isatty_r+0x1a>
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	20025d5c 	.word	0x20025d5c

08008530 <_sbrk_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4d06      	ldr	r5, [pc, #24]	@ (800854c <_sbrk_r+0x1c>)
 8008534:	2300      	movs	r3, #0
 8008536:	4604      	mov	r4, r0
 8008538:	4608      	mov	r0, r1
 800853a:	602b      	str	r3, [r5, #0]
 800853c:	f7fb fb6e 	bl	8003c1c <_sbrk>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d102      	bne.n	800854a <_sbrk_r+0x1a>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	b103      	cbz	r3, 800854a <_sbrk_r+0x1a>
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	20025d5c 	.word	0x20025d5c

08008550 <_init>:
 8008550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008552:	bf00      	nop
 8008554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008556:	bc08      	pop	{r3}
 8008558:	469e      	mov	lr, r3
 800855a:	4770      	bx	lr

0800855c <_fini>:
 800855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855e:	bf00      	nop
 8008560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008562:	bc08      	pop	{r3}
 8008564:	469e      	mov	lr, r3
 8008566:	4770      	bx	lr
